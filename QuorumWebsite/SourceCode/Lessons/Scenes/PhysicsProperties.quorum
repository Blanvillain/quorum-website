use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Section

class PhysicsProperties is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Setting Physics Properties on Tiles - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division leftDiv = divs:Get(0)
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Setting Physics Properties on Tiles", 1)
        headDiv:AddParagraph("Set properties and pull them out while a program is running")
        bodyDiv:Add(headDiv)

        Section introSection
        introSection:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(introSection, "Learning Objectives", 2)
        introSection:AddParagraph("We should now have a map, characters on our map, and a rogue output statement we added to learn about errors. The next step is to go back to the scene editor to start changing properties, then use those to our advantage in our game. By the end of this session, we will be able to set properties on our items in the map, get back that information in our game as it runs live, and output that information to the console.")

        introSection:AddParagraph("You will:")
        Array<text> objectives
        objectives:Add("Learn about properties and how to obtain them at runtime")
        objectives:Add("Practice with Types and Output")
        objectives:Add("Practice using the Scene Editor")
        OrderedList ol = GenerateList(objectives)
        introSection:Add(ol)

        AddHeading(introSection, "Warm up (5 minutes)", 2)
        introSection:AddParagraph("The scene editor allows us to manipulate objects, with the keyboard or the mouse, by moving them around and setting what we often call properties. Properties are essentially pieces of data that Quorum stores behind the scenes about an item in the scene editor. Normally, when we are programming, we write computer code to set these properties and this idea is very general. For example, we might set the position of a 2D item (e.g. x, y coodinates) or 3D item (e.g. x, y, z coordinates), turn physics on or off for an object or anything else. Quorum Studio currently supports many common properties, but not all of them, and we imagine this will change over time. For this warm up, at least change the 1) the name of our characters, and set 2) physics properties of several items.")
        

        AddHeading(introSection, "Output Properties in a Running Program (40 minutes)",2)
        introSection:AddParagraph("Scenes created in the scene editor are static, meaning they do not animate and are not interactive. They are useful for placing items and getting maps setup for editing. However, in order to make our scene turn into a running application, we need to write code that tells our program what our scene should do once the program starts. As a first step, what we are going to do in this activity is:")

        Array<text> quest
        quest:Add("Get items from our static scene in code so that we can give them some behaviors")
        quest:Add("Find 3 properties in computer code and output their values to the console. For example, we can output the mass, the name, or friction.")
        introSection:Add(GenerateList(quest))

        Paragraph tutorial = introSection:AddParagraph("We will need the tutorial on ")
        tutorial:AddLink("manipulating a running scene","/tutorials/Scenes/items.html")
        tutorial:AddText(" to complete these activities. The purpose of this activity is to get some practice programming while showing that there is a direct link between properties in the scene editor and the information we get back inside of a programming language.")
        

        AddHeading(introSection, "Wrap-up (10 minutes)",2)
        introSection:AddParagraph("In the first five minutes, we will go into breakout rooms and share the properties we output to the screen and discuss any challenges or successes we had. During this time, as a group, come up with one question you have about coding or properties.")

        bodyDiv:Add(introSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    

    action GetMetaDescription returns text
        return "Learn to Setting Physics Properties on Tiles with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Setting Physics Properties on Tiles"
    end

    action GetName returns text
        return "Setting Physics Properties on Tiles"
    end

    action GetShortDescription returns text
        return " adjusting physics properties for our application."
    end

    action GetLocation returns text
        return "lessons/Scenes/properties.html"
    end
end