use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Section

class SceneMoveCharacter is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Moving My Character - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division leftDiv = divs:Get(0)
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Moving My Character", 1)
        headDiv:AddParagraph("Learn how to make our characters move")
        bodyDiv:Add(headDiv)

        Section introSection
        introSection:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(introSection, "Learning Objectives", 2)
        introSection:AddParagraph("We now have a static scene that contains a map. This map has characters on it, one for our hero and a second, a non-player character that so far does nothing. Characters and items on the map have properties and we can output these to the console to give us information about what is happening in a program as it runs. In this lesson, instead of getting properties and outputting them to the screen, use specific keyboard events (e.g., the up or down arrow) to change properties, which will cause things to happen in the game. To do this, we need something new: conditionals.")

        introSection:AddParagraph("You will:")
        Array<text> objectives
        objectives:Add("Learn about Conditional Statements")
        objectives:Add("Practice using Keyboard Events")
        objectives:Add("Learn how change the x and y position of an item")
        OrderedList ol = GenerateList(objectives)
        introSection:Add(ol)

        AddHeading(introSection, "Conditionals (20 minutes)", 2)
        Paragraph step = introSection:AddParagraph("As a first step in making our character move, we need to learn about ")
        step:AddLink("conditionals","/tutorials/language/if.html")
        step:AddText(". These allow the computer to make its own decisions. During the first part of this session, we will discuss this concept and practice using if statements in isolation. In the next activity, we will apply these concepts in Quorum Studio.")

        AddHeading(introSection, "Make our Character Move (30 minutes)",2)
        introSection:AddParagraph("To use an if statement for character movement, we need to get some information from a KeyboardEvent every time a key is pressed. As a starting point, we will output this to the screen. Once we can do this, our goal is to learn how to write an if statement that checks whether the key pressed was the up, down, left, or right arrows. If one of these keys are pressed, we should take the following actions:")
        introSection:AddParagraph(" NOTE: Movement in a 3D space is based on coordinates and will not detect collisions, for movement WITH collisions (like running into a wall or some other item) we need to turn on and use physics.")
        
        AddHeading(introSection, "For 2D Characters",3)
        Array<text> conditional
        conditional:Add("Up arrow: Add to the y coordinate of our character to move 'UP' ")
        conditional:Add("Down arrow: Subtract from the y coordinate of our character to move 'DOWN' ")
        conditional:Add("Right arrow: Add to the x coordinate of our character to move 'RIGHT' ")
        conditional:Add("Left arrow: Subtract from the x coordinate of our character to move 'LEFT' ")
        introSection:Add(GenerateList(conditional))

        AddHeading(introSection, "For 3D Characters WITHOUT physics on",3)
        Array<text> conditional3D
        conditional3D:Add("w : Add to the z coordinate of our character to move 'FORWARD' ")
        conditional3D:Add("s : Subtract from the z coordinate of our character to move 'BACKWARD' ")
        conditional3D:Add("d : Add to the x coordinate of our character to move 'RIGHT' ")
        conditional3D:Add("a: Subtract from the x coordinate of our character to move 'LEFT' ")
        conditional3D:Add("SPACE: Add to the y coordinate of our character to move 'UP' ")
        conditional3D:Add("x: Subtract from the y coordinate of our character to move 'DOWN' ")
        introSection:Add(GenerateList(conditional3D))

        AddHeading(introSection, "For 3D Characters WITH physics on",3)
        Array<text> physicsConditional3D
        physicsConditional3D:Add("Up arrow : Add to the z coordinate of our character to move 'FORWARD' ")
        physicsConditional3D:Add("Down arrow : Subtract from the z coordinate of our character to move 'BACKWARD' ")
        physicsConditional3D:Add("Right arrow : Add to the x coordinate of our character to move 'RIGHT' ")
        physicsConditional3D:Add("Left arrow: Subtract from the x coordinate of our character to move 'LEFT' ")
        introSection:Add(GenerateList(physicsConditional3D))

        AddHeading(introSection, "Wrap-up (10 minutes)",2)
        introSection:AddParagraph("For this wrap-up, we are going to have a discussion in groups. Specifically, if we change the x and y coordinates, we should visibly see a character move, but this leads to questions. One question is about accessibility and the other is about continuous movement. Each group should pick one of these questions and try to answer it:")
        introSection:AddParagraph("Question Option 1:")
        introSection:AddParagraph("For users that cannot see the screen, moving an object in this way would make no sound, making our game inaccessible. For gaming, what does it mean to be accessible and how might we change our game to make it so?")
        introSection:AddParagraph("Question Option 2:")
        introSection:AddParagraph("When our keyboard event is fired, we are telling our character to change its x or y coordinate one time. Suppose we wanted the change to be continuous, meaning that when we hold a button down we move and when we let go, we stop. How might we accomplish this?")

        bodyDiv:Add(introSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn to Move a Character with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Moving My Character"
    end

    action GetName returns text
        return "Moving My Character"
    end

    action GetShortDescription returns text
        return " move a character in a running game."
    end

    action GetLocation returns text
        return "lessons/Scenes/moving.html"
    end
end