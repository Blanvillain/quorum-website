use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array

class TriggerObjects is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Trigger the Objects - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Trigger the Objects", 1)
        headDiv:AddText("Learn about Collisions")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Trigger the Objects", 1)
        Paragraph intro = bodyDiv:AddParagraph("In our quest, we now can talk to a non-player character and trigger objects we want to appear. Our next goal is to make it so when we run into those objects, we can collect them. To do this, we are going to go back to the events tutorial and create a ")
        intro:AddLink("Collision Listener 2D","/Libraries/Interface/Events/CollisionListener2D.html")
        intro:AddText(" or  ")
        intro:AddLink("Collision Listener 3D","/Libraries/Interface/Events/CollisionListener3D.html")
        intro:AddText(". Note that collision is a complicated topic in computer science. We could write our own code, but letting Quorum handle collisions for us is easier and faster.")
        bodyDiv:AddParagraph("Learning Objectives")
        
        Array<text> objectives
        objectives:Add("Learn about Collision Listeners")
        objectives:Add("Learn about Collision Events")
        objectives:Add("Learn about Accessibility in Games")
        OrderedList ol = GenerateList(objectives)
        bodyDiv:Add(ol)

        bodyDiv:AddHeading("What is a Collision Listener? (10 minutes)", 2)
        bodyDiv:AddParagraph("In a computer, hypothetically, we can imagine several ways in which we could handle collisions. One way would be to check every single item in the scene and see if their coordinates overlap. This works! Unfortunately, it turns out it is also slow, which would make a game less responsive in real-time.")
        bodyDiv:AddParagraph("While the details are outside the scope of this tutorial, one common approach in games is thus to ask the game engine to handle all the tricky math related to making collisions faster. Collision listeners are thus asking Quorum to decide on its own if any objects it cares about are colliding and to let our game know if it happens. This triggers an event, just like with the keyboard or the mouse. ")

        bodyDiv:AddHeading("Activity (40 minutes)",2)
        Paragraph events = bodyDiv:AddParagraph("In the ")
        events:AddLink("Events tutorial","/tutorials/games/events.html")
        events:AddText(", go to the section labeled 'Detecting Collisions with Events' and skim it over. Our goal is to figure out the following: 1) how to make our game a collision listener, just like we did with the keyboard listener, 2) how to register our collision listener with the game, which tells it to start sending us events, and 3) how to create an action called BeginCollision and use it to capture the collision events. Use an output statement to have your game inform us when a collision occurs.")

        bodyDiv:AddHeading("Wrap-up (10 minutes)",2)
        bodyDiv:AddParagraph("We will do one more accessibility discussion related to collisions. Notably, in our game we now have a character that needs to find our objects. In your groups, discuss different ways that we could make this finding process accessible. Like before, consider the difficulty of the task, and the actions the user would have to take, now for each of the following groups:")

        Array<text> access
        access:Add("Visual Disabilities")
        access:Add("Hearing Disabilities")
        access:Add("Physical Disabilities")
        access:Add("Learning Disabilities")
        bodyDiv:Add(GenerateList(access))

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    

    action GetMetaDescription returns text
        return "Learn to Trigger Objects with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Triggering Objects"
    end

    action GetName returns text
        return "Trigger the Objects"
    end

    action GetShortDescription returns text
        return " trigger objects."
    end

    action GetLocation returns text
        return "lessons/Scenes/trigger.html"
    end
end