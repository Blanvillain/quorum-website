use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Section

class SpatialSounds is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Spatial Sounds - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division leftDiv = divs:Get(0)
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Spatial Sounds", 1)
        headDiv:AddParagraph("Use arrays and loops to prepare ourselves for spatial sound")
        bodyDiv:Add(headDiv)

        Section introSection
        introSection:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(introSection, "Learning Objectives", 2)
        introSection:AddParagraph("In this lesson, we are going to use our new knowledge of arrays to clean up our code, eventually letting us work toward adding spatial sound. We often need to understand concepts like arrays, however, to begin to understand how sound works in the computer. Thus in this tutorial, we are first going to focus on converting our code to use arrays.")

        introSection:AddParagraph("You will:")
        Array<text> objectives
        objectives:Add("Learn about refactoring, the process of changing around existing code")
        objectives:Add("Learn about looping using repeat")
        objectives:Add("Learn about spatial sound")
        OrderedList ol = GenerateList(objectives)
        introSection:Add(ol)

        AddHeading(introSection, "Refactor Existing Code to Use Arrays (10 Minutes)", 2)
        introSection:AddParagraph("The items for our quest are stored so far in individual variables. We want to change this to clean up our code. As a first step, we are going to declare an Array, like so:")
        
        introSection:AddParagraph("For 2D use:")
        introSection:Add(preformatter:GeneratePreformattedCode("Array&lt;Item2D&gt; goodItems"))
        
        introSection:AddParagraph("For 3D use:")
        introSection:Add(preformatter:GeneratePreformattedCode("Array&lt;Item3D&gt; goodItems"))

        introSection:AddParagraph("These declarations tells us that we want an array and the type is either Item2D or Item3D, which is what the Scene Editor stores. By making this declaration, we can then fill the array and manipulate these items.")

        AddHeading(introSection, "Repeat (15 minutes)",2)
        Paragraph rep = introSection:AddParagraph("One big advantage of data structures like arrays is that we can loop over them, which means we can ask the computer to do the same code on each one of them. In essence, we tell our program we want to Hide a bunch of items, instead of calling Hide on each one individually. This reduces code duplication and requires we learn about ")
        rep:AddLink("repeat","/tutorials/language/repeat.html")
        rep:AddText(".")

        AddHeading(introSection, "Find the Closest Item to the Player (10 minutes)",2)
        introSection:AddParagraph("In computer science, we often create what are called algorithms, which are essentially steps for solving problems. Using our distance equation we used in a previous lesson, or a new one, use a loop to figure out which of the items we are looking for is closest to the player. At the end of this part, your algorithm should output the name of the closest item to the console. We want to give a player a way to find an item, so make the F key trigger this operation. We need to use repeat and our array to solve this problem. ")

        AddHeading(introSection, "Investigate Spatialized Sound (10 minutes)",2)
        Paragraph spatial = introSection:AddParagraph("We now have a way to find the item closest to us. For this final section, investigate the ")
        spatial:AddLink("Audio Class","/Libraries/Sound/Audio.html")
        spatial:AddText(". Try to figure out as a group how you can use this information to use sound such that it tells the player if they are getting closer, or further away from, the closest item.")
        

        bodyDiv:Add(introSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    

    action GetMetaDescription returns text
        return "Learn to use spatial sound with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Spatial Sounds"
    end

    action GetName returns text
        return "Spatial Sounds"
    end

    action GetShortDescription returns text
        return " spatial sound in a running game."
    end

    action GetLocation returns text
        return "lessons/Scenes/spatial.html"
    end
end