use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Assignment2_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 2.3: Audio Racing - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 2.3: Audio Racing ", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("In this assignment we will practice the following computer science concepts:")
        
        UnorderedList goalList
        goalList:AddListItem("Calling Actions on Objects")
        bodyDiv:Add(goalList)


        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.3, EK 1.2.3A")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.2, LO 5.2.1, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.2.1F")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1 ")
        bodyDiv:Add(ccList)

        bodyDiv:AddHeading("Overview", 2)

        Paragraph overviewP 
        overviewP:AddText("In this assignment, you will write a program that plays a simple race against two car sounds. This is an example of how you can make an accessible game or program. 
                        You will set the balance and volume of the sounds to make them appear as if they are coming in your direction and passing you. 
                        Download this ")
        overviewP:AddLink("zip file", "/files/lessons/chapter2/Assignment2_3Template.zip")
        overviewP:AddText(" for a template to help you get started. We've included two .wav audio files for you. Once you get your program running you can consider trying it with different .ogg files you download as well. Recall that Quorum will play .ogg files as well.")
        bodyDiv:Add(overviewP)

        bodyDiv:AddParagraph("You may also use the IDE below to write and test code.")

        CodingOnline addStatementIDE
        addStatementIDE:SetUniqueIdentifier("assignment2_3IDE")
        addStatementIDE:GetIDETitle():AddText("Audio Racing")
        addStatementIDE:GetIDEInputArea():AddText("use Libraries.Game.Game
use Libraries.Sound.Audio
use Libraries.Compute.Math

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/

class Main is Game
    Audio car1              // car1 is an Audio object
    Audio car2              // car2 is an Audio object
    number speed1 = 0.1     // speed of the sound of car 1
    number speed2 = 0.08    // speed of the sound of car 2

    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */

    action CreateGame
    end

    /*
        The update action is called on every " + dq + "frame" + dq + " of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */

    action Update(number seconds)
    end
end")
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)

        bodyDiv:AddHeading("Understanding the Provided Template", 2)


        Paragraph templateP 
        templateP:AddText("Open the provided template and navigate to the ")
        Bold mainBold
        mainBold:AddText("main.quorum")
        templateP:Add(mainBold)
        templateP:AddText(" file.")
        bodyDiv:Add(templateP)

        Paragraph templateP2
        templateP2:AddText("Code needs to be added in two places in the template. The first place is in an action that begins on the line that starts with ")
        CodeBlock actionCreateGameCode
        actionCreateGameCode:AddText("action CreateGame")
        templateP2:Add(actionCreateGameCode)
        templateP2:AddText(". This action loads up the sounds, sets initial volumes and balances, and plays the sounds.")
        bodyDiv:Add(templateP2)

        bodyDiv:AddParagraph("Here is what the action looks like, on lines 35 through line 36.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("action CreateGame" + cr 
                                                        + "end"))

        Paragraph templateP3
        templateP3:AddText("You write your code to move the sounds in the action labeled ")
        CodeBlock UpdateNumberSecondsCode
        UpdateNumberSecondsCode:AddText("Update(number seconds)")
        templateP3:Add(UpdateNumberSecondsCode)
        templateP3:AddText(". This action is found on line 45 through line 46.")
        bodyDiv:Add(templateP3)

        bodyDiv:AddParagraph("The action looks like this:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("action Update(number seconds)" + cr 
                                                        + "end"))


        bodyDiv:AddHeading("Goal 1: Calling Actions on Objects", 2)

        Paragraph goalP1
        goalP1:AddText("Before we can begin racing the sounds, we need to set up the ")
        CodeBlock audioCode
        audioCode:AddText("Audio")
        goalP1:Add(audioCode)
        goalP1:AddText(" objects. Navigate to the above mentioned ")
        goalP1:Add(actionCreateGameCode)
        goalP1:AddText(" line, on line 17. You need to set up the audio files to your ")
        goalP1:Add(audioCode)
        goalP1:AddText(" objects here.")
        bodyDiv:Add(goalP1)


//        SideBySideIDE loadSoundsIDE
//        loadSoundsIDE:SetUniqueIdentifier("loadSounds")
//        loadSoundsIDE:GetIDETitle():AddText("Activity: Load sounds")
//        Paragraph p
//        p:AddText("Load sounds to the two ")
//        p:Add(audioCode)
//        p:AddText(" objects, set the balances to the left ear, and play the ")
//        p:Add(audioCode)
//        p:AddText(" objects.")
//        loadSoundsIDE:SetIDESubtitle(p)
//        loadSoundsIDE:Setup()
//        bodyDiv:Add(loadSoundsIDE)

        Paragraph activity1Paragraph
        Bold activity1Bold
        activity1Bold:AddText("Activity: Load sounds to the two  ")
        activity1Bold:Add(audioCode)
        activity1Bold:AddText(" objects, set the balances to the left ear, and play the ")
        activity1Bold:Add(audioCode)
        activity1Bold:AddText(" objects.")
        activity1Paragraph:Add(activity1Bold)
        bodyDiv:Add(activity1Paragraph)



        Paragraph activityP1 
        activityP1:AddText("The first thing you need to do with the ")
        activityP1:Add(audioCode)
        activityP1:AddText(" objects is load files to them.  If you have trouble with this review Lab 2.4. Once you have done this, you need to set the initial balances for the ")
        activityP1:Add(audioCode)
        activityP1:AddText(" objects. Since the sounds should move from the left to the right, the balances should start playing completely in the left ear. 
                            After this, you can play the ")
        activityP1:Add(audioCode)
        activityP1:AddText(" objects.")
        bodyDiv:Add(activityP1)

        Paragraph activityP2
        activityP2:AddText("Now that you have the set-up out of the way, you can begin writing the code to move the sounds. 
                            Navigate to the above mentioned ")
        activityP2:Add(UpdateNumberSecondsCode)
        activityP2:AddText(" line, on line 45.")
        bodyDiv:Add(activityP2)

        bodyDiv:AddParagraph("In order to simulate the sounds coming near you and then passing you, we need the balance and volume to change with time. 
                            The balance should change from playing only in the left ear to playing equally in both ears to playing only in the right ear. 
                            The volume should start off quietly and then get progressively louder as the balance approaches 0, and then get progressively quieter until the balance reaches 1.")

        Paragraph activityP3
        CodeBlock getBalanceCode
        CodeBlock secondsCode
        CodeBlock updateCode
        getBalanceCode:AddText("GetBalance")
        secondsCode:AddText("seconds")
        updateCode:AddText("Update")
        activityP3:AddText("The balance should change linearly with time. 
                        To do this, you need to update the balance using the current balance (the ")
        activityP3:Add(getBalanceCode)
        activityP3:AddText(" action returns the current balance) and add in the speed of the sound multiplied by ")
        activityP3:Add(secondsCode)
        activityP3:AddText(" the parameter for the ")
        activityP3:Add(updateCode)
        activityP3:AddText(" action).")
        bodyDiv:Add(activityP3)


        bodyDiv:Add(break)


        Paragraph example1Paragraph
        Bold example1bold
        example1bold:AddText("Example: Set the new balance of one of the ")
        example1bold:Add(audioCode)
        example1bold:AddText(" objects.")
        example1Paragraph:Add(example1bold)
        bodyDiv:Add(example1Paragraph)


        CodeBlock example1Code
        Span s1
        Span s11
        s1:AddText(     "// This line gets the current balance of the audio object" + cr )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "number balance1 = car1:GetBalance()" + cr )
        s11:AddText(     "// This line sets the new balance to be the current balance + speed * seconds" + cr )
        s11:SetClassAttribute("comment")
        example1Code:Add(s11)
        example1Code:AddText(   "car1:SetBalance(balance1 + speed1 * seconds)" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))



//        SideBySideIDE setBalanceIDE
//        setBalanceIDE:SetUniqueIdentifier("setBalance")
//        setBalanceIDE:GetIDETitle():AddText("Activity: Set the balance")
//        Paragraph p2
//        p2:AddText("Set the balance of the other ")
//        p2:Add(audioCode)
//        p2:AddText(" objects.")
//        setBalanceIDE:SetIDESubtitle(p2)
//        setBalanceIDE:Setup()
//        bodyDiv:Add(setBalanceIDE)

        Paragraph activity2Paragraph
        Bold activity2Bold
        activity2Bold:AddText("Activity: Set the balance of the other ")
        activity2Bold:Add(audioCode)
        activity2Bold:AddText(" object.")        
        activity2Paragraph:Add(activity2Bold)
        bodyDiv:Add(activity2Paragraph)


        Paragraph activityP4
        CodeBlock libMathCode
        CodeBlock mathCode
        libMathCode:AddText("Libraries.Compute.Math")
        mathCode:AddText("Math")
        activityP4:AddText("A good function that gives us the relationship we want between the balance and volume is the ")
        activityP4:AddLink("cosine", "http://mathworld.wolfram.com/Cosine.html")
        activityP4:AddText(" function. 
                            If you think of the balance as the x-axis and the volume of the y-axis, the cosine function has the behavior we want for the relationship between balance and volume. 
                            At the x-value of -1, the cosine function is close to 0. 
                            At the x-value of 0, the cosine function is at its maximum of 1. 
                            At the x-value of 1, the cosine function is back to being close to 0. 
                            To use this function, you need to use the ")
        activityP4:Add(libMathCode)
        activityP4:AddText(" library and declare a ")
        activityP4:Add(mathCode)
        activityP4:AddText(" object.")
        bodyDiv:Add(activityP4)

        bodyDiv:Add(break)

//        SideBySideIDE instantiateObjectIDE
//        instantiateObjectIDE:SetUniqueIdentifier("instantiateObject")
//        instantiateObjectIDE:GetIDETitle():AddText("Activity: Instantiate object" )
//        Paragraph p3
//        p3:AddText("Instantiate a ")
//        p3:Add(mathCode)
//        p3:AddText(" object.")
//        instantiateObjectIDE:SetIDESubtitle(p3)
//        instantiateObjectIDE:Setup()
//        bodyDiv:Add(instantiateObjectIDE)

        Paragraph activity3Paragraph
        Bold activity3Bold
        activity3Bold:AddText("Activity: Instantiate a ")
        activity3Bold:Add(mathCode)
        activity3Bold:AddText(" object.")
        activity3Paragraph:Add(activity3Bold)
        bodyDiv:Add(activity3Paragraph)



        Paragraph activityP5 
        CodeBlock cosineCode
        CodeBlock numberCode
        cosineCode:AddText("Cosine")
        numberCode:AddText("number")
        activityP5:AddText("The cosine action in Quorum is called ")
        activityP5:Add(cosineCode)
        activityP5:AddText(", and takes a ")
        activityP5:Add(numberCode)
        activityP5:AddText(" as a parameter that represents the value (in radians) to take the cosine of and returns a ")
        activityP5:Add(numberCode)
        activityP5:AddText(" that represents the cosine of that value.")
        bodyDiv:Add(activityP5)

        bodyDiv:Add(break)

        Paragraph example2Paragraph
        Bold example2bold
        example2bold:AddText("Example: Use the ")
        example2bold:Add(cosineCode)
        example2bold:AddText(" action on the ")
        example2bold:Add(mathCode)
        example2bold:AddText(" object with the balance of one of the ")
        example2bold:Add(audioCode)
        example2bold:AddText(" objects to set the new volume of the ")
        example2bold:Add(audioCode)
        example2bold:AddText(" object.")
        example2Paragraph:Add(example2bold)
        bodyDiv:Add(example2Paragraph)


        CodeBlock example2Code
        Span s2
        Span s21
        s2:AddText(     "// This line uses the Math object to calculate the volume based on the balance" + cr )
        s2:SetClassAttribute("comment")
        example2Code:Add(s2)
        example2Code:AddText(   "number volume1 = math:Cosine(balance1)" + cr )
        s21:AddText(     "// This line sets the new volume" + cr )
        s21:SetClassAttribute("comment")
        example2Code:Add(s21)
        example2Code:AddText(   "car1:SetVolume(volume1)" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))

//        SideBySideIDE setVolumeIDE
//        setVolumeIDE:SetUniqueIdentifier("setVolume")
//        setVolumeIDE:GetIDETitle():AddText("Activity: Set the new volume" )
//        Paragraph p4
//        p4:AddText("Set the new volume of the other ")
//        p4:Add(audioCode)
//        p4:AddText(" object in the same manner.")
//        setVolumeIDE:SetIDESubtitle(p4)
//        setVolumeIDE:Setup()
//        bodyDiv:Add(setVolumeIDE)

        Paragraph activity4Paragraph
        Bold activity4Bold
        activity4Bold:AddText("Activity: Set the new volume of the other ")
        activity4Bold:Add(audioCode)
        activity4Bold:AddText(" object in the same manner.")
        activity4Paragraph:Add(activity4Bold)
        bodyDiv:Add(activity4Paragraph)




        bodyDiv:AddParagraph("You should now be able to compile and run your program. 
                            The two sound files for the cars should play, starting from the right ear and moving towards the left ear, getting first louder and then quieter. 
                            If there are any errors, fix them and try again.")


        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("The two audio sounds should start off playing in just the left ear. 
                            With time, the audio sound should progressively change balance from playing in just the left ear to playing in both ears to playing in just the right ear. 
                            At the same time, the volume should progressively change from quiet to louder to quiet again. 
                            This gives the effect of the car sounds passing you.")


        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)


    end

    action GetMetaDescription returns text
        return "Learn about mathematical concepts while writing an audio racing game in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Assignment (Audio Racing)"
    end
    action GetName returns text
        return "Assignment 2.3"
    end
    action GetShortDescription returns text
        return "how work Audio Racing in Quorum."
    end
    action GetLocation returns text
        return "lessons/chapter2/assignment2_3.html"
    end
end