use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent

class Lab2_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 2.1: Types - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 2.1: Types", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following:")
        
        UnorderedList goalList
        goalList:AddListItem("Declaring variables")
        goalList:AddListItem("Naming rules for variable declarations")
        goalList:AddListItem("How to concatenate text using the + operator")
        bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")


        bodyDiv:Add(ccList) 


        bodyDiv:AddHeading("Vocabulary", 2)
        UnorderedList vocabularyList
        vocabularyList:AddListItem("Projects window")
        vocabularyList:AddListItem("Quorum Studio Output window")
        vocabularyList:AddListItem("Editor")
        vocabularyList:AddListItem("Declare")
        vocabularyList:AddListItem("Initialize")
        vocabularyList:AddListItem("Variable type")
        vocabularyList:AddListItem("Integer")
        vocabularyList:AddListItem("Text")
        vocabularyList:AddListItem("Boolean")
        vocabularyList:AddListItem("Number")
        vocabularyList:AddListItem("Concatenation")
        bodyDiv:Add(vocabularyList)

        bodyDiv:AddHeading("Hotkeys", 2)
        UnorderedList hotkeysList
        hotkeysList:AddListItem("Build Project")
        hotkeysList:AddListItem("Editor Window")
        hotkeysList:AddListItem("Output Window")
        hotkeysList:AddListItem("Projects Window")
        hotkeysList:AddListItem("Run Project")
        bodyDiv:Add(hotkeysList)

        bodyDiv:Add(break)

        bodyDiv:AddText("A list of Hotkeys can be found on the ")
        bodyDiv:AddLink("Getting Started with Quorum Studio", "/tutorials/language/gettingStarted.html")
        bodyDiv:AddText(" page if the online system is not being used for this lesson.")

        bodyDiv:AddHeading("Overview", 2)

        bodyDiv:AddParagraph("This lab will guide you through declaring variables with the appropriate name, 
primitive data type and matching value. In addition to declaring variables you will 
also be learning the rules to name a variable and how to initialize them. Then, you will 
learn to use the say and output commands and how to concatenate using the " + dq + "+" + dq + " operator.
This lesson can be done online in the editors or offline in Quorum Studio. References to both are included.")

        bodyDiv:AddHeading("Goal 1: Declaring Variables", 3)
        bodyDiv:AddParagraph("Start by opening Quorum Studio and creating a new project. In the New Project dialog, make sure " + dq + "Quorum" + dq + " is selected in the Categories list. Then select the " + dq + "Blank Application" + dq + " project in the Projects list and press Enter. On the next step, name the new project " + dq + "Lab2_1" + dq + " in the Project Name text field. Press Enter or click the Finish button to create a new project. Before you begin writing any code, be sure to check the new project is the main project.")

        bodyDiv:AddParagraph("For this lab, you will use the following windows in Quorum Studio: 1) the Projects window, 2) the Quorum Studio Output window, and 3) the Editor. The Projects window holds a list of folders and files that allows you to organize and navigate the project. This is where source files and other files will be found. The Sodbeans Output window displays any compiler errors you may have and it displays any output statements executed during the programs runtime. Finally, the Editor window is where you will write your code. ")

        bodyDiv:AddParagraph("There are four types of primitive data types that you can use in Quorum:")
        
        UnorderedList primitiveList
        
        ListItem li1
        CodeBlock cb1
        cb1:AddText("integer")
        li1:Add(cb1)
        li1:AddText(": a positive or negative number (including 0) that does not have a decimal. Examples: 1, 0, -10")
        primitiveList:Add(li1)

        ListItem li2
        CodeBlock cb2
        cb2:AddText("number")
        li2:Add(cb2)
        li2:AddText(": a numerical value with a decimal. Examples: 1.0, 0.0, -10.35")
        primitiveList:Add(li2)

        ListItem li3
        CodeBlock cb3
        cb3:AddText("boolean")
        li3:Add(cb3)
        li3:AddText(": a true/false value. Example: true, false")
        primitiveList:Add(li3)

        ListItem li4
        CodeBlock cb4
        cb4:AddText("text")
        li4:Add(cb4)
        li4:AddText(": a literal string/text value enclosed in quotes. Examples: " + dq + "Hello World" + dq + ", " + dq + "5" + dq + ", " + dq + "true" + dq + "")
        primitiveList:Add(li4)

        bodyDiv:Add(primitiveList)
        bodyDiv:Add(break)

        Paragraph primitiveParagraph
        primitiveParagraph:AddText("To initialize a variable, the format of the code is: ")
        CodeBlock cb5
        cb5:AddText("type variableName = value")
        primitiveParagraph:Add(cb5)
        primitiveParagraph:AddText(".")
        bodyDiv:Add(primitiveParagraph)

        bodyDiv:AddHeading("Example: Declare a variable with the integer type called myInteger.", 4)
        Paragraph example1Paragraph
        example1Paragraph:AddText("In the example below we declare a variable called myInteger with the ")
        CodeBlock cb6
        cb6:AddText("integer")
        example1Paragraph:Add(cb6)
        example1Paragraph:AddText(" type and assign the variable the value of 4.")
        bodyDiv:Add(example1Paragraph)

        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer myInteger = 4"))

        bodyDiv:AddParagraph("Whenever we initialize a variable we are doing three things:")

        UnorderedList initializingList
        initializingList:AddListItem("reserving a location in memory of the type declared")
        initializingList:AddListItem("assigning a name to the memory location that we can use in our program")
        initializingList:AddListItem("storing a value in the memory location")
        bodyDiv:Add(initializingList)

//        bodyDiv:Add(break)

        AddSideBySideIDE(bodyDiv, "declaringVariable", "Activity: Declaring Variables", 
            "Assign the variable myText the value of 'Hello!'? to do the activity. Once this variable 
            is declared build your project and check for any compiler errors. 
            Nothing in the output window? Did you output your variable?")

        bodyDiv:AddHeading("Goal 2: Naming rules for variable declarations", 3)
        bodyDiv:AddParagraph("Each variable has to have an unique name. If you want more than one variable to have similar names you should insert something to differentiate from the other.")
        bodyDiv:AddHeading("Example: Declare two variables with similar names.", 4)
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer myInteger = 4" + cr + "integer myInteger2 = 6"))
        bodyDiv:AddParagraph("Notice that the names are similar but we add the 2 in the end to differentiate from the first one. The name of the variable must start with a letter, with can be upper or lower case. It can have more than one word in the name but it cannot have space between them. Camel case is a common format used for easy readability. Although it is not required, by convention, variable names usually begin with a lower case letter and class names usually start with a capital letter. The following is an example of this convention.")
        bodyDiv:AddHeading("Example: Declare variables using camel case.", 4)
        bodyDiv:Add(preformatter:GeneratePreformattedCode("text myFirstText = " + dq + "Hi!?" + dq + cr + "boolean whatIsBoolean = true"))
        bodyDiv:AddParagraph("There are some characters that you cannot use to name a variable. You cannot use a number or a symbol as the beginning of the name. In addition, you cannot use certain words that are reserved for specific functions in Quorum.")
        bodyDiv:AddHeading("Example: Declaring variables that break the naming rules.", 4)

        CodeBlock cb7
        Span s1
        s1:AddText("// This code generates an ERROR" + cr)
        s1:SetClassAttribute("comment")
        cb7:Add(s1)
        cb7:AddText("number 2number = 4.6" + cr + "boolean boolean = false")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb7))

        bodyDiv:AddParagraph("The message in the Output window should give you a clue as to what went wrong. In addition, Quorum will automatically display a line under the code that has an error so that you will know where something went wrong. Once all of the compiler errors are gone, run the program by going to Run -> Run Main Project or by pressing F6. When the project runs, nothing will be in the output window because all you have done is declared the variable.")

        AddSideBySideIDE(bodyDiv, "declaringSimilarVariables", "Activity: Declaring Similar Variables", 
            "Declare two variables of each type with similar names. Do not forget to follow the naming rules")

        bodyDiv:AddHeading("Goal 3: How to concatenate text using the + operator", 3)
        bodyDiv:AddParagraph("Add more variables and types to the program. Do the following steps to add types:")

        UnorderedList activityList
        CodeBlock cb8
        CodeBlock cb9
        CodeBlock cb10
        CodeBlock cb11
        ListItem li5
        ListItem li6
        ListItem li7
        ListItem li8

        li5:AddText("Define an ")
        cb8:AddText("integer")
        li5:Add(cb8)
        li5:AddText(" type and assign it the name firstInteger. Assign 4 to firstInteger.")
        activityList:Add(li5)
        
        li6:AddText("Define a ")
        cb9:AddText("number")
        li6:Add(cb9)
        li6:AddText(" type and assign it the name secondNumber. Assign 8.9 to secondNumber.")
        activityList:Add(li6)

        li7:AddText("Define a ")
        cb10:AddText("boolean")
        li7:Add(cb10)
        li7:AddText(" type and assign it the name checkResult. Assign true to checkResult.")
        activityList:Add(li7)

        li8:AddText("Define a ")
        cb11:AddText("text")
        li8:Add(cb11)
        li8:AddText(" type and assign it the name quorumText. Assign " + dq + " You just wrote your first program. " + dq + " to quorumText.")
        activityList:Add(li8)

        bodyDiv:Add(activityList)

        AddSideBySideIDE(bodyDiv, "moreTypes", "Activity: Adding more types", 
            "Complete adding the types")


        bodyDiv:AddParagraph("Now that you have defined these four new variables, have Quorum output and say each variable to the user.")
        bodyDiv:AddHeading("Example: Output and say the variable firstInteger to the user.", 4)
        bodyDiv:AddParagraph("Use the following code as an example to output and say each of the variables that you just initialized.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("output firstInteger" + cr + "say firstInteger"))
        bodyDiv:AddParagraph("Notice that each of the commands need a separate line, so for 4 variables we need 8 lines of code to output and say everything.")
        
        AddSideBySideIDE(bodyDiv, "outputSay", "Activity: Output and Say", 
            "Write for each variable one line to output the variable and one line to say it, as in the example above")

        bodyDiv:AddHeading("Example: Concatenation", 4)
        bodyDiv:AddParagraph("You can use concatenation to combine two or more variables or phrases using the "+" operator. The following code shows how to construct an output statement using concatenation:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("output secondNumber + " + dq + " is greater than " + dq + " + firstInteger" + cr + "say secondNumber + " + dq + " is greater than " + dq + " + firstInteger"))
        bodyDiv:AddParagraph("When using text make sure you put space inside the quotes, otherwise there will not be the space between the last word and the variable or between the variable and the first word.")
        
        Paragraph p
        p:AddText("Now have your program output the following sentence using the variable names above:")
        p:Add(break)
        CodeBlock cb12
        cb12:AddText("If the second number is 8.9 and the first number is 4, then checkResult is true.")
        p:Add(cb12)
        bodyDiv:Add(p)

        AddSideBySideIDE(bodyDiv, "allTogether", "Activity: Putting it all together", 
            "Finish the lab")

        Paragraph p2
        CodeBlock cb13
        CodeBlock cb14
        CodeBlock cb15
        cb13:AddText("10")
        cb14:AddText("false")
        cb15:AddText("If the second number is 8.9 and the first number is 10, then checkResult is false.")
        p2:AddText("To check your output statement, change the value assigned to firstInteger to ")
        p2:Add(cb13)
        p2:AddText(" and checkResult to ")
        p2:Add(cb14)
        p2:AddText(" and then run your program again. If you wrote your output statement correctly, your program should display this line:")
        p2:Add(break)
        p2:Add(cb15)
        bodyDiv:Add(p2)

        bodyDiv:AddParagraph("Once you have completed this, you are done! Show your work to the instructor.")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about declaring variables and concatenation in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Types) "
    end
    action GetName returns text
        return "Lab 2.1"
    end

    action GetShortDescription returns text
        return "how types work in Quorum."
    end
    action GetLocation returns text
        return "lessons/chapter2/lab2_1.html"
    end
end