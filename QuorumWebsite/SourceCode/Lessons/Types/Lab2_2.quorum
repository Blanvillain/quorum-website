use Libraries.Web.Page.all
use Libraries.Containers.Array

class Lab2_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times

        //html header stuff
        SetWebPageTitle("Lab 2.2: Math, Output and User Input - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Lab 2.2: Math, Output and User Input", 1)
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goal of this lab is to learn the following:")

        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Using basic mathematical operations in Quorum")
        goalList:AddListItem("Getting input from the user")
        section_goals:Add(goalList)

        Section section_csp_curriculum
        section_csp_curriculum:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Abstraction: ", "EK 2.1.2C")
        section_csp_curriculum:Add(list)

        Section section_standards
        section_standards:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_standards, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.A1")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 

        Section section_vocabulary
        section_vocabulary:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_vocabulary, "Vocabulary", 2)
        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("list-disc list-outside pl-8")
        vocabularyList:AddListItem("Operations")
        vocabularyList:AddListItem("Addition")
        vocabularyList:AddListItem("Subtraction")
        vocabularyList:AddListItem("Multiplication")
        vocabularyList:AddListItem("Division")
        vocabularyList:AddListItem("Modulus")
        vocabularyList:AddListItem("User Input")
        section_vocabulary:Add(vocabularyList)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("  In this lab you will write a program in Quorum that performs basic mathematical operations and solves written math problems. 
                                You will demonstrate how to work with numbers by performing addition, subtraction, multiplication, division, and remainder operations in Quorum. 
                                You will also learn how to get input from the users. ")

        AddHeading(section_overview, "Goal 1: Using basic mathematical operations in Quorum ", 3)
        section_overview:AddParagraph("You will concentrate on performing basic mathematical operations in Quorum. Then, you will move onto solving problem statements. Start by opening Sodbeans and creating a new blank Quorum project. Name the project Lab2_2. ")
        Paragraph p1
        CodeBlock c11   
        CodeBlock c12
        p1:AddText("Declare and initialize two ")
        c11:AddText("integer")
        p1:Add(c11)
        p1:AddText(" variables: a to 7 and b to 4. Next, declare and initialize two ")
        c12:AddText("number")
        p1:Add(c12)
        p1:AddText(" variables: c to 8.5 and d to 9.2. You will use these variables to perform mathematical operations and output the results to the Sodbeans Output window. We will start with addition, let's add a and b. ")
        section_overview:Add(p1)

        AddHeading(section_overview, "Example: Assign the result of adding a and b to the variable sum1.", 4)
        section_overview:Add(preformatter:GeneratePreformattedCode(  "integer a = 7" + cr
                                                        +   "integer b = 4" + cr
                                                        +   "integer sum1 = a + b" + cr
                                                        +   "output sum1"))

        section_overview:AddParagraph("After you run the example you should have in the output window the number 11. ")


        CodeForIDE code_overview1
        code_overview1:AddFileText("Main.quorum", "//Assign the result of adding a, b, c and d to the variable sum2. Do not forget to output your answer.")
        IDE ide_overview1 = AddIDE()
        ide_overview1:HideDisplay()
        ide_overview1:SetCodeForIDE(code_overview1:GetJsonArray())
        ide_overview1:SetIdeTitle("Activity: Assign the result")
        section_overview:Add(ide_overview1)

        section_overview:AddParagraph("  If you are going to perform a mathematical operation that includes at least one number variable, your answer should also be a number.
                                You will apply the same concepts to the other mathematical operations. ")

        section_overview:AddParagraph(" To perform the subtraction you will use the minus sign (-) and for multiplication you should use the asterisk (*). 
                               Output all your answers. ")
        section_overview:AddParagraph(" Now move onto division by dividing a by b and assigning the result in the variable called divide1. ")
    

        AddHeading(section_overview, "Example: Divide a by b and run the program.", 4)
        section_overview:Add(preformatter:GeneratePreformattedCode("integer divide1 = a/b"
        +cr+"output divide1"))
        Paragraph p2
        CodeBlock c21
        p2:AddText("Why was divide1 assigned the value of 1 when it should be 1.75? That happens because the variables are integers, so the result is going to be an integer. To see the difference, declare two new ")
        p2:Add(c12)
        p2:AddText(" variables called e and f with the same values of a and b, respectively. ")
        section_overview:Add(p2)

        CodeForIDE code_overview2
        code_overview2:AddFileText("Main.quorum", "//You should have as output 1.75 if you declare the types correctly. Always run and output the operations.")
        IDE ide_overview2 = AddIDE()
        ide_overview2:HideDisplay()
        ide_overview2:SetCodeForIDE(code_overview2:GetJsonArray())
        ide_overview2:SetIdeTitle("Activity: Divide a by b.")
        section_overview:Add(ide_overview2)

        Paragraph p21
        p21:AddText("The final mathematical operation available in Quorum is the modulus or remainder. This is written using the keyword mod. You will use the ")
        Bold operation
        operation:AddText(  "mod")
        p21:Add(operation) 
        p21:AddText(" operation to get the remainder of a division. ")
        section_overview:Add(p21)

        section_overview:Add(preformatter:GeneratePreformattedCode("number remainder = 10 mod 6"))
        section_overview:AddText("In this example, remainder would contain the value of 4 because 10 divide by 6 equals 1 with the remainder of 4.")
        

        AddHeading(section_overview, "Example: Using mod get the remainder of dividing c by b.", 4)
        section_overview:Add(preformatter:GeneratePreformattedCode("number remainder1 = c mod b "
        +cr+"output remainder1"))
        section_overview:AddParagraph(" You will have in the output window the value of 0.5. The example above shows that you can use mod with decimal numbers, but it is not usually done.")
        section_overview:AddParagraph("Let's wrap up what you have done with the mathematical operations. Write code that combines all four operations into one statement: addition, subtraction, multiplication and division. Name a variable result and perform the following operations:")
        section_overview:Add(preformatter:GeneratePreformattedCode("(a + b) * (c - b) + (d / b) "))


        CodeForIDE code_overview3
        code_overview3:AddFileText("Main.quorum", "//Compute this answer for yourself, given the values you have assigned to the variables a, b, c, and d.")
        IDE ide_overview3 = AddIDE()
        ide_overview3:HideDisplay()
        ide_overview3:SetCodeForIDE(code_overview3:GetJsonArray())
        ide_overview3:SetIdeTitle("Activity: Output the answer to the operations above.")
        section_overview:Add(ide_overview3)


  

        section_overview:AddParagraph("Then, check your answer by adding another output statement for the result variable. The output for this operation should be 51.8. ")


        AddHeading(section_overview, "Goal 2: Getting input from the user", 3)
        section_overview:AddParagraph("  When you write programs, you don't always merely perform computation on data you already know, as in the first part of this lab. 
                                Most of the time, you need to get input from the user to perform your calculations. 
                                As an example, a desktop calculator is a program taking input from the user (via the keypad), and providing output (the answer to the equation you entered)")
        section_overview:AddParagraph("You may get input from the user in Quorum using the input keyword. The code below asks the user for their name; inside the parenthesis, you tell the user what information you are requesting. ")
        
        AddHeading(section_overview, "Example: Ask and output the user name.", 4)
        section_overview:Add(preformatter:GeneratePreformattedCode("text name = input("+dq+"Please enter your first name:"+dq+")"
                                                        +cr+"output name"))
        section_overview:AddParagraph(" When you run this program, "+dq+"Please enter your name."+dq+" will appear in the output window. Enter your name and press Enter, or click the "+dq+"OK"+dq+" button. Your name will appear in the output window.")
        section_overview:AddParagraph("It can do more than ask for input such as a name. You can also request numerical values. Let's create a second input statement that asks us to enter an integer value. The code should look something like the following: ")                                               
        section_overview:Add(preformatter:GeneratePreformattedCode("text ageInput = input("+dq+"How old are you?"+dq+")"))                                  
        Paragraph p3
        CodeBlock c31
        CodeBlock c32
        CodeBlock c33
        CodeBlock c34
        CodeBlock c35
        p3:AddText("Notice, input will always be of type ")
        c31:AddText("text")
        p3:Add(c31)
        p3:AddText(". However, you can convert the ")
        p3:Add(c31)
        p3:AddText(" value of the ")
        c32:AddText("ageInput")
        p3:Add(c32)
        p3:AddText(" variable to any other type you desire, such as ")
        c33:AddText("integer")
        p3:Add(c33)
        p3:AddText(" or ")
        c34:AddText("number")
        p3:Add(c34)
        p3:AddText(". You do this using the ")
        c35:AddText("cast")
        p3:Add(c35)
        p3:AddText(" statement, as below. Here, you desire to have the age as a whole number, so you will use the ")
        p3:Add(c33)
        p3:AddText(" type.")
        section_overview:Add(p3)
        section_overview:Add(break)

        section_overview:Add(preformatter:GeneratePreformattedCode("integer age = cast(integer, ageInput)"))

        CodeForIDE code_overview4
        code_overview4:AddFileText("Main.quorum", "//It should say " + dq + "Hi," + dq + " followed by the name entered by the user.")
        IDE ide_overview4 = AddIDE()
        ide_overview4:HideDisplay()
        ide_overview4:SetCodeForIDE(code_overview4:GetJsonArray())
        ide_overview4:SetIdeTitle("Activity: Write the code to speak the age result.")
        section_overview:Add(ide_overview4)

        section_overview:AddParagraph("Next, concatenate on the words, " + dq + "you are " + dq + " followed by the age variable and finally the words " + dq + " years old." + dq + " " )

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_vocabulary)
        bodyDiv:Add(section_overview)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about math and getting user input in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Math)"
    end
    action GetName returns text
        return "Lab 2.2"
    end
    action GetShortDescription returns text
        return "how work math in Quorum."
    end
    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter2/lab2_2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Change this later"
    end
end
