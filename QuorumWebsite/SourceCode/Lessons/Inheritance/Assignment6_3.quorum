use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Assignment6_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 6.3: Inheritance Practice")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 6.3: Inheritance Practice", 1)
        headDiv:AddText("An employee system")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to use inheritance")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create class actions and use derived actions")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to use Polymorphism")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this assignment you will create a program that tells the user the different amounts an employee can make, depending on what kind of employee they are. There are three different kinds of employees: a salaried employee, an hourly employee, and a commissioned employee. Each one will require different inputs and will require a different method for calculating earnings.")
        bodyDiv:AddHeading("Requirements", 2)
        bodyDiv:AddParagraph("You will need five classes: Employee, SalariedEmployee, HourlyEmployee, CommissionEmployee, and Main. Class Employee will be your base class, and will contain actions and blueprint actions to be used in each class that inherits from Employee.")
        bodyDiv:AddHeading("Class Employee", 2)
        bodyDiv:AddParagraph("In this class, you will implement several setters and getters for variables that will be used in each class that inherits from Employee. Since every employee, regardless of how they are paid, share some common information (they have a name and a social security number), this class will obtain and provide that information. Class Employee will have the following actions:")
        UnorderedList unorderedList4
        bodyDiv:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("blueprint action Earnings returns number")
        bodyDiv:AddParagraph("Each class will have a separate implementation for Earnings, so a blueprint action will work well here.")
        UnorderedList unorderedList6
        bodyDiv:Add(unorderedList6)
        ListItem listItem7
        unorderedList6:Add(listItem7)
        listItem7:AddText("action SetFirstName(text name): Setter for the text variable firstName")
        ListItem listItem8
        unorderedList6:Add(listItem8)
        listItem8:AddText("action GetFirstName returns text: Getter for the first name of an employee.")
        ListItem listItem9
        unorderedList6:Add(listItem9)
        listItem9:AddText("action SetLastName(text name): Setter for the text variable lastName")
        ListItem listItem10
        unorderedList6:Add(listItem10)
        listItem10:AddText("action GetLastName returns text: Getter for the last name of an employee.")
        ListItem listItem11
        unorderedList6:Add(listItem11)
        listItem11:AddText("action SetSSN(integer value): Setter for the integer variable ssn")
        ListItem listItem12
        unorderedList6:Add(listItem12)
        listItem12:AddText("action GetSSN returns integer: Getter for the social security number of an employee.")
        ListItem listItem13
        unorderedList6:Add(listItem13)
        listItem13:AddText("action Print: The Print action will be generic in this class, with only a say statement to tell the user the first and last name and social security number. In other classes, you will use polymorphism to implement a more custom print action.")
        bodyDiv:AddHeading("Class SalariedEmployee", 2)
        bodyDiv:AddParagraph("This class will inherit from Employee. It needs the following actions:")
        UnorderedList unorderedList14
        bodyDiv:Add(unorderedList14)
        ListItem listItem15
        unorderedList14:Add(listItem15)
        listItem15:AddText("action SetWeeklySalary(number salary): Setter for the number variable weeklySalary.")
        ListItem listItem16
        unorderedList14:Add(listItem16)
        listItem16:AddText("action GetWeeklySalary returns number: Getter for the weekly salary of an employee.")
        ListItem listItem17
        unorderedList14:Add(listItem17)
        listItem17:AddText("action ReportSalariedEmployee(text first, text last, integer ssn, number salary): ReportSalariedEmployee should call the setters for the name(first and last), ssn, and weekly salary of an employee.")
        ListItem listItem18
        unorderedList14:Add(listItem18)
        listItem18:AddText("action Earnings returns number: Earnings should return the weekly salary of an employee by making a call to action GetWeeklySalary. It should look similar to the following:")
        PreformattedText pre19
        bodyDiv:Add(pre19)
        pre19:AddAttribute("class", "code")
        CodeBlock code20
        code20:AddText(
"action Earnings returns number
    return GetWeeklySalary()
end")
        pre19:Add(code20)
        bodyDiv:AddParagraph("Since action GetWeeklySalary returns a value, you can call the action in a return statement, as seen above.")
        bodyDiv:AddHeading("Class HourlyEmployee", 2)
        bodyDiv:AddParagraph("This class also inherits from Employee. It needs the following actions:")
        UnorderedList unorderedList21
        bodyDiv:Add(unorderedList21)
        ListItem listItem22
        unorderedList21:Add(listItem22)
        listItem22:AddText("action SetWage(number wage): Setter for the number variable hourlyWage.")
        ListItem listItem23
        unorderedList21:Add(listItem23)
        listItem23:AddText("action GetWagereturns number: Getter for the hourly wage of an employee.")
        ListItem listItem24
        unorderedList21:Add(listItem24)
        listItem24:AddText("action SetHours(number hours): Setter for the number variable hoursWorked.")
        ListItem listItem25
        unorderedList21:Add(listItem25)
        listItem25:AddText("action GetHours returns number: Getter for the hours worked by an employee.")
        ListItem listItem26
        unorderedList21:Add(listItem26)
        listItem26:AddText("action ReportHourlyEmployee(text first, text last, integer ssn, number wage, number hours): ReportHourlyEmployee does the same thing ReportSalariedEmployee does, only it should call the setters for wage and hours instead.")
        ListItem listItem27
        unorderedList21:Add(listItem27)
        listItem27:AddText("action Earnings returns number: Earnings should return the weekly earnings of an hourly employee. If the hourly employee has worked over 40 hours, then make sure that action Earnings is giving the employee the proper overtime(overtime is 1.5x the normal pay).")
        bodyDiv:AddHeading("Class CommissionEmployee", 2)
        bodyDiv:AddParagraph("This class also inherits from Employee. It needs the following actions:")
        UnorderedList unorderedList28
        bodyDiv:Add(unorderedList28)
        ListItem listItem29
        unorderedList28:Add(listItem29)
        listItem29:AddText("action SetCommissionRate(number rate): Setter for the number variable commissionRate")
        ListItem listItem30
        unorderedList28:Add(listItem30)
        listItem30:AddText("action GetCommissionRate returns number: Getter for the commission rate of an employee.")
        ListItem listItem31
        unorderedList28:Add(listItem31)
        listItem31:AddText("action SetSales(number value): Setter for the number variable sales")
        ListItem listItem32
        unorderedList28:Add(listItem32)
        listItem32:AddText("action GetSales returns number: Getter for the number of sales an employee makes.")
        ListItem listItem33
        unorderedList28:Add(listItem33)
        listItem33:AddText("action ReportCommissionEmployee(text first, text last, integer ssn, number commissionRate, number sales): ReportCommissionEmployee will do as the previous " + dq + "Report" + dq + " actions do, except it will call the setters for commission rate and sales.")
        ListItem listItem34
        unorderedList28:Add(listItem34)
        listItem34:AddText("action Earnings returns number: Earnings should return the earnings of a commissioned employee. This values can be calculated by commission rate * number of sales.")
        bodyDiv:AddHeading("Class Main", 2)
        bodyDiv:AddParagraph("In class Main, create variables that will satisfy all the arguments for each class. Then call the appropriate actions from each class to satisfy the requirements in the Sample Output section.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("When run, the program should report to the user the name of the employee, what kind of employee they are, and what their earnings are. For the hourly employee, tell the user what their hourly wage and number of hours worked are, in addition to their name, earnings, and type of employee. For a commissioned employee, tell the user their commission rate and the number of sales they made, in addition to their name, earnings, and type of employee. Output should be similar to the following:")
        PreformattedText pre35
        bodyDiv:Add(pre35)
        pre35:AddAttribute("class", "code")
        CodeBlock code36
        code36:AddText(
"Salaried employee Brandon Spencer. Total earnings for this salaried employee is 60,000 dollars.
Commission employee Brandon Spencer. Gross sales is 20 sales at 4 dollars per a sale. Total earnings for this commissioned employee is 80 dollars.
Hourly employee Brandon Spencer. Hourly wage is 16.0 and number of hours worked is 40. Total earnings for this hourly employee is 640 dollars.")
        pre35:Add(code36)


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Inheritance Practice"
    end
    action GetName returns text
        return "Assignment 6.3"
    end
    action GetShortDescription returns text
        return "another practice session with inheritance"
    end
    action GetLocation returns text
        return "lessons/chapter6/assignment6_3.html"
    end
end