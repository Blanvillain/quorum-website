use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab6_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 6.3: Inheritance Practice")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 6.3: Inheritance Practice", 1)
        headDiv:AddText("A practice session with inheritance")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this lab is to understand the following concepts:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to use inheritance across multiple classes")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create and use a class hierarchical system")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to use polymorphism")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will create a program to ask the user about their pets. It will collect some information from then, and then tell them about their pet based on the info provided. Because many pets have some of the same attributes (they eat, play, sleep, etc.), you can use inheritance to create multiple subclasses of different pets.")
        bodyDiv:AddHeading("Task 1: Getting Started", 2)
        bodyDiv:AddParagraph("Start Sodbeans. Create a new “Quorum Application” project, and name it Lab6_3. In the Main.quorum file, it should contain a Main class and Main action.")
        bodyDiv:AddParagraph("You will create four additional classes in this project. In the New File dialog, create a new file by selecting “Quorum” and “Quorum Class” in the Categories and File Types windows, respectively. Then, name the new file Pet in the New Quorum Class dialog. Repeat the above steps to create Classes named Cat, Dog, and Lizard.")
        bodyDiv:AddHeading("Task 2: Creating Your Parent Class", 2)
        bodyDiv:AddParagraph("In your Pet class, create variables to store the following data:")
        UnorderedList unorderedList4
        bodyDiv:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("a number type to store the weight")
        ListItem listItem6
        unorderedList4:Add(listItem6)
        listItem6:AddText("a text type to store food")
        ListItem listItem7
        unorderedList4:Add(listItem7)
        listItem7:AddText("a text type to store gender")
        ListItem listItem8
        unorderedList4:Add(listItem8)
        listItem8:AddText("an integer type to store number of hours of sleep")
        ListItem listItem9
        unorderedList4:Add(listItem9)
        listItem9:AddText("an integer type to store number of hours of playtime")
        ListItem listItem10
        unorderedList4:Add(listItem10)
        listItem10:AddText("an integer type to store number of toys")
        bodyDiv:AddParagraph("Remember to follow good naming convention practices when creating your variables.")
        bodyDiv:AddParagraph("Next, create access modifiers and accessor actions for weight, sleep, playtime, and toys. Create: action PetNoise")
        bodyDiv:AddParagraph("When called, PetNoise should say " + dq + "generic pet noise." + dq + " Later, you will use polymorphism to change this default message into something else for each of your pet classes. Polymorphism is the idea that some variables, operations, or objects behave differently in different contexts. For example, in Sodbeans, the + (plus) operator can be used in different ways:")
        UnorderedList unorderedList11
        bodyDiv:Add(unorderedList11)
        ListItem listItem12
        unorderedList11:Add(listItem12)
        listItem12:AddText("4 + 5 //integer addition")
        ListItem listItem13
        unorderedList11:Add(listItem13)
        listItem13:AddText("5.1 + 5.0 //floating point addition (number addition)")
        ListItem listItem14
        unorderedList11:Add(listItem14)
        listItem14:AddText("string1 + " + dq + "hello!" + dq + " //string concatenation")
        bodyDiv:AddParagraph("In the above example, the operator + is being used in several different ways, depending on the context in which it is called.")
        bodyDiv:AddHeading("Task 3: Inheriting Your Pet Class", 2)
        bodyDiv:AddParagraph("Now that your parent class has the needed actions, you will implement classes Cat, Dog, and Lizard. Using inheritance, write actions for each of the before mentioned classes that will prompt the user to input a value that will be used for each of the setter actions you made in class Pet (weight in pounds, sleep in hours, playtime in hours, and number of toys). Also, implement the PetNoise action in such a way that it overrides the default message with a noise that each of the respective animals would make (woof, meow, etc.). Recall that you had two variables of type text, one for food, and one for gender in the parent class. For each of the child classes, create actions that will return the text entered by the user for these two variables. An example of such an action might look like this:")
        PreformattedText pre15
        bodyDiv:Add(pre15)
        pre15:AddAttribute("class", "code")
        CodeBlock code16
        code16:AddText(
"class Cat is Pet
    action AskWeight()
        number pounds = cast(number, input(" + dq + "How heavy is your cat?" + dq + ")) //casting to type number is done in one go with an input statement.
        parent:Pet:SetWeight(pounds) //uses the keyword parent to access actions in the Pet class.
    end
end")
        pre15:Add(code16)
        bodyDiv:AddParagraph("First, notice that the variable pounds has to be cast to type number. In the above example, this is being done on the same line as the input statement, but it doesn't have to be. Second, notice that the action SetWeight, which was declared in class Pet, is being accessed by the keyword parent. The parent keyword allows us to reference a class directly.")
        bodyDiv:AddHeading("Task 4: Using Inherited Actions", 2)
        bodyDiv:AddParagraph("In Main, instantiate objects of your Cat, Dog, and Lizard classes. Next, ask the user what kind of pet they have, 1 for cat, 2 for dog, or 3 for lizard. You will now need to create control structures that perform like the following:")
        bodyDiv:AddParagraph("if cat:")
        UnorderedList unorderedList17
        bodyDiv:Add(unorderedList17)
        ListItem listItem18
        unorderedList17:Add(listItem18)
        listItem18:AddText("get values for weight, sleep, play, and toys")
        ListItem listItem19
        unorderedList17:Add(listItem19)
        listItem19:AddText("get food type")
        ListItem listItem20
        unorderedList17:Add(listItem20)
        listItem20:AddText("get gender")
        ListItem listItem21
        unorderedList17:Add(listItem21)
        listItem21:AddText("tell user in complete sentences about their pet")
        bodyDiv:AddParagraph("if dog:")
        UnorderedList unorderedList22
        bodyDiv:Add(unorderedList22)
        ListItem listItem23
        unorderedList22:Add(listItem23)
        listItem23:AddText("do the same as above")
        bodyDiv:AddParagraph("if lizard:")
        UnorderedList unorderedList24
        bodyDiv:Add(unorderedList24)
        ListItem listItem25
        unorderedList24:Add(listItem25)
        listItem25:AddText("do the same as above")
        bodyDiv:AddParagraph("If the user inputs anything but 1, 2, or 3, prompt them again to enter 1 for cat, 2 for dog, or 3 for lizard. Also, add control structures so that if the pet is male, it is referred to as " + dq + "he" + dq + ", and if it is female, it is referred to as " + dq + "she." + dq + " Regardless of which derived class is called, make sure to call the derived action PetNoise. If polymorphism is used correctly, the user should hear what noise their pet makes, instead of the default message.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("Here is what the program may look like if the user says they have a cat:")
        PreformattedText pre26
        bodyDiv:Add(pre26)
        pre26:AddAttribute("class", "code")
        CodeBlock code27
        code27:AddText(
"What kind of pet do you have? Enter 1 for Cat, 2 for Dog, or 3 for Lizard.
1
Meow!
How heavy is your cat?
10
What kind of food does your cat eat?
kitten chow
Is your cat a boy or girl? Enter 1 for male, 2 for female.
1
How many hours a day does your cat sleep?
16
How many hours a day do you play with your cat?
2
How many toys does your cat have?
5
Your cat weighs 10 pounds and eats kitten chow
Your cat is a boy and sleeps 16 hours a day. He plays 2 hours a day and has 5 toys to play with.")
        pre26:Add(code27)
        bodyDiv:AddParagraph("When you are done, debug and fix any errors, then show your code to your instructor.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Inheritance Practice"
    end
    action GetName returns text
        return "Lab 6.3"
    end
    action GetShortDescription returns text
        return "another practice session with inheritance"
    end
    action GetLocation returns text
        return "lessons/chapter6/lab6_3.html"
    end
end