use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Assignment6_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 6.2: Superhero Blueprints")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 6.2: Superhero Blueprints", 1)
        headDiv:AddText("Using derived blueprints")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to create and use blueprint actions")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to use derived classes with blueprint actions")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to use the Libraries.Compute.Random class")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In lab 6.2 you used blueprint actions and inheritance to create specific super heroes. In this assignment, you will create a class that has several blueprint actions, then inheriting that class and implementing those blueprints in a way so that we create several random superheroes, each with different random attributes from our blueprint class. In order to make the heroes with random attributes, you will use a random number generator, obtained from the Libraries.Compute.Random class.")
        bodyDiv:AddHeading("Requirements", 2)
        bodyDiv:AddParagraph("You will need three classes: SuperHeroParts, SuperHeroGenerator, and Main. Class SuperHeroParts will be the base class in which all of the blueprint actions are created. Recall that in Lab 6_2 two categories were defined: super powers and equipment. For this program, create 5 blueprint actions for each of the above categories. As a developer, opportunities will arise where you are able to add your own flare and zest to a program. For this task, feel free to flex your creative muscle and create unique and interesting actions to fulfill the requirements above. Each of these blueprint actions will take one argument, of type text. For example:")
        PreformattedText pre4
        bodyDiv:Add(pre4)
        pre4:AddAttribute("class", "code")
        CodeBlock code5
        code5:AddText(
"//super powers
blueprint action Fly(text name)
blueprint action Strength(text name)
blueprint action LaserVision(text name)")
        pre4:Add(code5)
        bodyDiv:AddParagraph("You will also need 1 blueprint action that returns the name of a superhero.")
        bodyDiv:AddHeading("Class SuperHeroGenerator", 2)
        bodyDiv:AddParagraph("In this class, you implement all of the blueprint actions inherited from class SuperHeroParts. Recall that the blueprint actions all take 1 argument or type text. This argument will be the name of a character. Your blueprint action that returns the name of a superhero should ask the user to input a name, and then return that text. For example:")
        PreformattedText pre6
        bodyDiv:Add(pre6)
        pre6:AddAttribute("class", "code")
        CodeBlock code7
        code7:AddText(
"action Character() returns text
    text name = input(" + dq + "Enter the name of your superhero" + dq + ")
    return name
end

action Fly(text name)
    say name + " + dq + "can fly" + dq + "
end

action Strength(text name)
    say name + " + dq + "has super human strength!" + dq + "
end

action LaserVision(text name)
    say name + " + dq + "can use laser vision" + dq + "
end")
        pre6:Add(code7)
        bodyDiv:AddParagraph("This class will contain four more actions:")
        UnorderedList unorderedList8
        bodyDiv:Add(unorderedList8)
        ListItem listItem9
        unorderedList8:Add(listItem9)
        listItem9:AddText(
"action GiveSuperPower(integer value, text name): This action should call one of the blueprint actions you implemented earlier if value is in a certain range. The input value will be a random integer. This way, super powers will be selected randomly, so there will be a high chance of different powers being selected each time the program is run. For example: 
if value > 0 and value < 5
Fly(name)
if value > 5 and value < 10
Strength(name)")
        PreformattedText pre10
        listItem9:Add(pre10)
        pre10:AddAttribute("class", "code")
        CodeBlock code11
        code11:AddText(
"if value > 0 and value < 5
Fly(name)
if value > 5 and value < 10
Strength(name)")
        pre10:Add(code11)
        ListItem listItem12
        unorderedList8:Add(listItem12)
        listItem12:AddText("action GiveCostume(integer value, text name): This action will do the same as GiveSuperPower, but will call one of the actions from your costume list instead.")
        ListItem listItem13
        unorderedList8:Add(listItem13)
        listItem13:AddText("action GiveWeapon(integer value, text name): This action does the same as GiveSuperPower, but will instead call one of the actions from your weapons list.")
        ListItem listItem14
        unorderedList8:Add(listItem14)
        listItem14:AddText("action CreateHero(integer value, text name): This action calls the above three actions, and uses the arguments passed into it as the arguments for each of the three actions it calls.")
        bodyDiv:AddHeading("Class Main", 2)
        bodyDiv:AddParagraph("Class Main should have one action, Main, which instantiates an object of class Random and SuperHeroGenerator. Use the Libraries.Compute.Random in order to create an object of class Random. Use the Random class action RandomIntegerBetween(integer min, integer max), which returns a random integer in the range of (min, max). Set the min to 0, and the max to 50. Main should also call the action CreateHero(integer value, text name) from the derived class SuperHeroGenerator.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("When run, the program should ask the user for the name of a superhero, and then should assign the superhero three attributes: one from powers, one from costume, and one from weapons. It will then tell the user what attributes their heroes have. For example:")
        PreformattedText pre15
        bodyDiv:Add(pre15)
        pre15:AddAttribute("class", "code")
        CodeBlock code16
        code16:AddText(
"Enter the name of your Super Hero:
Captain Brandon
Captain Brandon can fly. Captain Brandon wears a mask. Captain Brandon Uses a Hammer.")
        pre15:Add(code16)


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Superhero Blueprints"
    end
    action GetName returns text
        return "Assignment 6.2"
    end
    action GetShortDescription returns text
        return "using derived blueprint actions for superhero powers."
    end
    action GetLocation returns text
        return "lessons/chapter6/assignment6_2.html"
    end
end