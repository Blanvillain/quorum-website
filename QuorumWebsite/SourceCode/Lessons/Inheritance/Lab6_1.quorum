use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab6_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 6.1: An Introduction to Inheritance")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 6.1: Introduction to Inheritance", 1)
        headDiv:AddText("Using and understanding inheritance")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following concepts:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to create and use a class hierarchical system")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How a class inherits actions from another")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How accessor actions and access modifiers work")
        ListItem listItem4
        unorderedList0:Add(listItem4)
        listItem4:AddText("How classes work")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will explore the notion of inheritance. Inheritance allows one class to be used as a basis for defining another related class. When a class that is derived from another class it inherits the data and actions of that class. This way, you are able to reuse code and build more compact and maintainable programs. You will create two classes, Circle and Sphere, and observe how the actions declared in one can be accessed and used in another. You will start with creating a radius class variable, then will work up to using that radius class variable in multiple classes and in multiple actions. By the end of the lab, you will see how the Sphere class can use the actions defined in the Circle class to calculate various properties of a sphere.")
        bodyDiv:AddHeading("Task 1: Getting Started", 2)
        bodyDiv:AddParagraph("Start Sodbeans. Create a new “Quorum Application” project, and name it Lab6_1. In the Main.quorum file, it should contain a Main class and Main action.")
        bodyDiv:AddParagraph("You will create two additional classes in this project. In a New File dialog, create a new file by selecting “Quorum” and “Quorum Class” in the Categories and File Types windows, respectively. You can also access the New File dialog with the keyboard shortcut Ctrl + N. Then, name the new file Circle in a New Quorum Class dialog. Repeat the above steps to create a Class named Sphere.")
        bodyDiv:AddParagraph("You will specify code for Circle, Sphere, and Main classes in the next three tasks.")
        bodyDiv:AddHeading("Task 2: Creating Class Variables", 2)
        bodyDiv:AddParagraph("Now create a class variable and experiment with how inheritance works.")
        bodyDiv:AddParagraph("In the Circle class, add the class variable radius of type number. Recall, type number will allow us more precision than integer, so you can have a radius of 1.5 instead of 1 or 2. Set its default value to zero.")
        bodyDiv:AddParagraph("Now add a GetRadius and SetRadius action to help get a value for radius. Just as you learned in chapter 5, create an access action and access modifier for radius. Creating actions such as these to obtain values can help make your programs easy to modify and resilient to user errors. In task 3, you will be using inheritance to access these actions in class Sphere. Thanks to inheritance, you only need to write the actions once, and can then use them in both classes to obtain a value for radius.")
        bodyDiv:AddHeading("Task 3: Inheriting Actions From Another Class", 2)
        bodyDiv:AddParagraph("Now that you have your getter and setter for radius, you need to inherit those methods in class Sphere. To inherit the actions of another class, tell Sodbeans that " + dq + "class A" + dq + " is a " + dq + "B" + dq + ". The keywords here are " + dq + "is" + dq + " which is used to inherit one class into another. Lets rewrite class Sphere so that Sodbeans knows class Sphere is inheriting the actions of class Circle. Your code should look similar to the following:")
        PreformattedText pre5
        bodyDiv:Add(pre5)
        pre5:AddAttribute("class", "code")
        CodeBlock code6
        code6:AddText("class Sphere is Circle
        end")
        pre5:Add(code6)
        bodyDiv:AddParagraph("Great! Now use the SetRadius method you declared in class Circle to create a radius for Sphere. This time, you will get user input for the radius, and use that input as an argument to SetRadius:")
        PreformattedText pre7
        bodyDiv:Add(pre7)
        pre7:AddAttribute("class", "code")
        CodeBlock code8
        code8:AddText(
"class Sphere is Circle    //creates a hierarchy, where sphere is inheriting from Circle
    action SphereSetRadius
        SetRadius(cast(number, input(" + dq + "Enter a radius" + dq + ")))  //this is a method declared in our Circle class
    end
end")
        pre7:Add(code8)
        bodyDiv:AddParagraph("Now use the different actions to create diameters for Circle and Sphere. In Main, create Circle and Sphere objects. Next, create number variables circleRadius and sphereRadius. Using the set and get actions in class Circle, assign a radius value to circleRadius. Recall that in action SphereSetRadius, you've already set the value of radius to whatever the user entered, so now you only need to get that value. Using the GetRadius method from class Sphere, assign the sphereRadius variable a value. Next, multiply both values by 2 to get the circle and sphere diameters, then output or say their respective values.")
        bodyDiv:AddHeading("Task 4: Using Inherited Actions", 2)
        bodyDiv:AddParagraph("You'll now create actions that will calculate various circle and sphere properties. The sphere calculations will require a radius, which can only be obtained through inheritance from class Circle")
        UnorderedList unorderedList9
        bodyDiv:Add(unorderedList9)
        ListItem listItem10
        unorderedList9:Add(listItem10)
        listItem10:AddText("action CalculateVolume(number radius) returns number CalculateVolume requires a number type parameter and returns a number. As the name indicates, this action will calculate the volume of a sphere given its radius. The equation for sphere volume is: (4/3)*pi*radius cubed.")
        ListItem listItem11
        unorderedList9:Add(listItem11)
        listItem11:AddText("action CalculateSurfaceArea(number radius) returns number CalculateSurfaceArea requires a number type parameter and returns a number. This action calculates the surface area of a sphere given its radius. The equation for sphere surface area is: 4*pi*radius squared.")
        ListItem listItem12
        unorderedList9:Add(listItem12)
        listItem12:AddText("Now it's time to use these actions. In Main, call the actions you created above, using the radius you obtained from the Sphere class as the arguments. Create a say statement that tells the user what the radius is that was used, and what the calculated number is. Next you'll create some actions to calculate the properties of a circle.")
        ListItem listItem13
        unorderedList9:Add(listItem13)
        listItem13:AddText("action CalculateArea(number radius) returns number CalculateArea uses a number type parameter and returns a number. This action will calculate the area of a circle given its radius. The equation for circle area is: pi*radius squared.")
        ListItem listItem14
        unorderedList9:Add(listItem14)
        listItem14:AddText("action CalculateCircumference(number radius) returns number CalculateCircumference uses a number type parameter and returns a number. This action will calculate the circumference of a circle given its radius. The equation for circumference is 2*pi*radius")
        bodyDiv:AddParagraph("Now, just as you did with the sphere actions, call the actions you created above in Main, using the radius obtained from the Circle actions. Create a say statement that tells the user what the radius is that was used, and what the calculated number is.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("Run the program and notice that a different radius is used for the circle and sphere calculations. This is because you are able to set different values using the same method. With inheritance, you were able to use the get and set actions created in class Circle to create a unique radius for the sphere calculations. At the same time, you could still use those same actions to create a unique radius for the circle calculations. In the case of class Sphere, inheritance allowed you to reuse code that had already been created. When run, your program should look similar to this:")
        PreformattedText pre15
        bodyDiv:Add(pre15)
        pre15:AddAttribute("class", "code")
        CodeBlock code16
        code16:AddText(
"Circle diameter is 10.
Area of a circle with a radius of 5 is 78.537
Circumference of a circle with a radius of 5 is 31.415
Sphere diameter is 25
Sphere volume with a radius of 12.5 is 8181.223
Sphere surface area with a radius of 12.5 is 1963.493")
        pre15:Add(code16)
        bodyDiv:AddParagraph("When you're done with this lab, show your instructor your code.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Inheritance"
    end
    action GetName returns text
        return "Lab 6.1"
    end
    action GetShortDescription returns text
        return "an introduction to inheritance"
    end
    action GetLocation returns text
        return "lessons/chapter6/lab6_1.html"
    end
end