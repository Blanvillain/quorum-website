use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab6_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 6.2: Blueprint Actions")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 6.2: Blueprint Actions", 1)
        headDiv:AddText("Creating blank actions for planning")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following concepts:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to create and use blueprint actions")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create and use a class hierarchical system")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("Apply blueprint actions across multiple classes")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will learn how to use blueprints in classes. Blueprints are descriptions of what kind of functionality a class will provide. The idea behind blueprints is to specify the structure of a class without providing an implementation. Using inheritance, you can then use the blueprints to make similar classes use the same actions with the same names to do similar things. In this lab, you are going to create a SuperHero class to create superhero characters. Then, you will use a blueprint action to build each character's inventory and powers. Since the inventory and powers of superheros are different from other superheros, a blueprint action makes good sense to use.")
        bodyDiv:AddHeading("Task 1: Getting Started", 2)
        bodyDiv:AddParagraph("Start Sodbeans. Create a new “Quorum Application” project, and name it Lab6_2. In the Main.quorum file, it should contain a Main class and Main action.")
        bodyDiv:AddParagraph("Create six additional classes in this project. Name the classes SuperHero, Equipment, SuperPower, Spiderman, Superman, and CaptainAmerica.")
        bodyDiv:AddHeading("Task 2: Building Characters", 2)
        bodyDiv:AddParagraph("You are going implement two helper classes that will help set and get the names of equipment and superpowers for the heroes. Both classes should have the following:")
        UnorderedList unorderedList4
        bodyDiv:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("A text type variable to hold the name of the equipment or power")
        ListItem listItem6
        unorderedList4:Add(listItem6)
        listItem6:AddText("A setter and a getter to set the name of the equipment or power and to get the name back.")
        bodyDiv:AddParagraph("In class SuperHero, you can use the helper classes above to create arrays that will hold the names of equipment and powers for our heroes. The arrays can be created like so:")
        PreformattedText pre7
        bodyDiv:Add(pre7)
        pre7:AddAttribute("class", "code")
        CodeBlock code8
        code8:AddText(
"Array<Equipment> inventory
Array<SuperPower> powers")
        pre7:Add(code8)
        bodyDiv:AddParagraph("The arrays above are of type Equipment and SuperPower. That is, they will be made of they types that are present in those classes, instead of just type integer or type number. In this case, the arrays will be holding text values. Remember that you must use Libraries.Containers.Array to access the array class. Next, create the following actions:")
        UnorderedList unorderedList9
        bodyDiv:Add(unorderedList9)
        ListItem listItem10
        unorderedList9:Add(listItem10)
        listItem10:AddText(
"action AddSuperPower(SuperPower power): This action takes as an argument an object of class SuperPower. It should add to the powers array the object passed in. Recall that adding to an array can be done likes this: 

myArray:Add(21) //adds the integer 21 into the array called myArray")
        PreformattedText pre11
        listItem10:Add(pre11)
        pre11:AddAttribute("class", "code")
        CodeBlock code12
        code12:AddText("myArray:Add(21) //adds the integer 21 into the array called myArray")
        pre11:Add(code12)
        ListItem listItem13
        unorderedList9:Add(listItem13)
        listItem13:AddText(
"action SaySuperPowers This action should iterate through the powers array until it reaches the end and say to the user each item held in it. Recall that you can get the size of an array like this: 

myArray:Add(21)
integer size = myArray:GetSize() //size would be assigned the integer value 1")
        PreformattedText pre14
        listItem13:Add(pre14)
        pre14:AddAttribute("class", "code")
        CodeBlock code15
        code15:AddText(
"myArray:Add(21)
integer size = myArray:GetSize() //size would be assigned the integer value 1")
        pre14:Add(code15)
        ListItem listItem16
        unorderedList9:Add(listItem16)
        listItem16:AddText("action AddEquipment(Equipment item) This action should do the same as action AddSuperPower, but instead should add items to the inventory array.")
        ListItem listItem17
        unorderedList9:Add(listItem17)
        listItem17:AddText("action SayInventory This action should do the same as action SaySuperPowers, but instead should iterate through the inventory array and say to the user each item held in it.")
        ListItem listItem18
        unorderedList9:Add(listItem18)
        listItem18:AddText("blueprint action BuildCharacter This is a blueprint action that each class(Spiderman, Superman, and CaptainAmerica) will inherit from class SuperHero and implement in a different way. By using blueprints and inheritance in this program, you are able to create a general action that can be used across multiple classes in different ways. This saves you the time of creating this specific action for every class. Next, in Main, try to instantiate an object of type SuperHero. Notice that this resulted in a compiler error. This is because Sodbeans doesn't know what the blueprint actions do.")
        bodyDiv:AddHeading("Task 3: Inheriting blueprint actions from another class", 2)
        bodyDiv:AddParagraph("In this task you will be implementing the inherited blueprint action BuildCharacter for classes Superman, Spiderman, and CaptainAmerica. The BuildCharacter action should do the same thing for each class: add equipment and powers to the hero using the setters from classes Equipment and SuperPower, and add the values to the proper array using the AddEquipment action from class SuperHero. For each superhero (Superman, Spiderman, and Captain America), add powers and pieces of equipment that describe that particular hero. i.e:")
        PreformattedText pre19
        bodyDiv:Add(pre19)
        pre19:AddAttribute("class", "code")
        CodeBlock code20
        code20:AddText(
"//Superman
action BuildCharacter
    Equipment cape
    cape:SetEquipment(" + dq + "has a cape" + dq + ")
    parent:SuperHero:AddEquipment(cape)

    SuperPower vision
    vision:SetPower(" + dq + "can use laser vision" + dq + ")
    parent:SuperHero:AddSuperPower(vision)
end")
        pre19:Add(code20)
        bodyDiv:AddParagraph("In the above example, I described that Superman has a cape and can use laser vision. For each superhero, create a combination of at least 5 powers and/or equipment that that superhero has.")
        bodyDiv:AddHeading("Task 4: Using inherited actions", 2)
        bodyDiv:AddParagraph("After you have action BuildCharacter implemented for each superhero, go into Main and instantiate an object of each superhero and call BuildCharacter. Then, using the SaySuperPowers and SayInventory actions, list the powers and inventory of each superhero for the user. Notice the BuildCharacter action that is called is unique to each superhero.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("When run, the user should be told which superhero is being described, and then told that superhero's powers and equipment. Here is a sample output for Superman:")
        PreformattedText pre21
        bodyDiv:Add(pre21)
        pre21:AddAttribute("class", "code")
        CodeBlock code22
        code22:AddText(
"Superman
has a cape
has a blue costume
can use laser vision
can use super strength
can fly")
        pre21:Add(code22)
        bodyDiv:AddParagraph("When finished, debug and fix any errors, then show your instructor you code.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Blueprint Actions"
    end
    action GetName returns text
        return "Lab 6.2"
    end
    action GetShortDescription returns text
        return "an introduction to blueprint actions."
    end
    action GetLocation returns text
        return "lessons/chapter6/lab6_2.html"
    end
end