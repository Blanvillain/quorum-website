use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Challenge6_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Challenge 6.1: Battle Simulator")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Challenge 6.1: Battle Simulator", 1)
        headDiv:AddText("Use inheritance to simulate battle")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to use inheritance")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create class actions and use derived actions")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to use the audio library to record and play sounds")
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this assignment you will create an interactive battle simulator. Users will be given the chance to record their own sound effects. They will be given a description of three different types of champions, and will get to choose their champion and their opponent. Then, the two will fight to the death, with the user's own sound effects detailing each hit and miss in this epic battle.")
        bodyDiv:AddHeading("Requirements", 2)
        bodyDiv:AddParagraph("You will need six classes: Equipment, Sounds, Stats, Warrior, Wizard, and Ranger. Class Stats will be your base class, and will contain actions and blueprint actions to be used in each class that inherits from Stats.")
        bodyDiv:AddParagraph("To do : You have to put your own record (.wav) in the good files. And only after, you can run this project. When it's implemented, each of the records should last no more than 2 seconds.")
        bodyDiv:AddHeading("Class Equipment", 2)
        bodyDiv:AddParagraph("In this class, you will implement a getter and a setter a class variable of type text called name:")
        UnorderedList unorderedList4
        bodyDiv:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("action SetEquipment(text equipment): Setter for name.")
        ListItem listItem6
        unorderedList4:Add(listItem6)
        listItem6:AddText("action GetEquipment returns text: Getter for name.")
        bodyDiv:AddHeading("Class Stats", 2)
        bodyDiv:AddParagraph("This class will need the following library: use Libraries.Containers.Array. As you did in Lab 6.2, you will need to create an array of type Equipment. Name this array inventory. Class Stats will use the following actions:")
        UnorderedList unorderedList7
        bodyDiv:Add(unorderedList7)
        ListItem listItem8
        unorderedList7:Add(listItem8)
        listItem8:AddText("action AddEquipment(Equipment item): This action adds the input parameter to the array inventory.")
        ListItem listItem9
        unorderedList7:Add(listItem9)
        listItem9:AddText("action SayInventory: This action should iterate through inventory until it reaches the end and say to the user each item held in it.")
        ListItem listItem10
        unorderedList7:Add(listItem10)
        listItem10:AddText("blueprint action BuildCharacter: This is a blueprint that will be later implemented in classes Warrior, Wizard, and Ranger.")
        bodyDiv:AddHeading("Class Sounds", 2)
        bodyDiv:AddParagraph("This class will contain several actions to record your own sound effects to be used in the simulator. Implement the following actions:")
        UnorderedList unorderedList11
        bodyDiv:Add(unorderedList11)
        ListItem listItem12
        unorderedList11:Add(listItem12)
        listItem12:AddText("action RecordHit: Records for 2 seconds a " + dq + "hit" + dq + " sound. To be used when your champion or your enemy successfully makes a hit.")
        ListItem listItem13
        unorderedList11:Add(listItem13)
        listItem13:AddText("action RecordMiss: Records for 2 seconds a " + dq + "miss" + dq + " sound. To be used when your champion or your enemy misses a hit.")
        ListItem listItem14
        unorderedList11:Add(listItem14)
        listItem14:AddText("action RecordOuch: Records for 2 seconds an " + dq + "ouch" + dq + " sound. To be used when you champion or your enemy gets hit.")
        ListItem listItem15
        unorderedList11:Add(listItem15)
        listItem15:AddText("action RecordTaunt:Records for 2 seconds a taunting sound. To be used when you champion misses the enemy, or the enemy misses your champion.")
        ListItem listItem16
        unorderedList11:Add(listItem16)
        listItem16:AddText("action RecordVictory: Records for 2 seconds a victory song. To be used if your champion deafeats the enemy.")
        ListItem listItem17
        unorderedList11:Add(listItem17)
        listItem17:AddText("action RecordDefeat: Records for 2 seconds a " + dq + "defeat" + dq + " sound. To be used if your enemy defeats your champion.")
        bodyDiv:AddHeading("Class Ranger", 2)
        bodyDiv:AddParagraph("Class Ranger will inherit from class Stats. It will have one action: action BuildCharacter. Similar to Lab 6.2, BuildCharacter will describe the Ranger in terms of his equipment and weapons. Using the inherited actions from class Stats, add at least 5 items to describe the Ranger. Example:")
        PreformattedText pre18
        bodyDiv:Add(pre18)
        pre18:AddAttribute("class", "code")
        CodeBlock code19
        code19:AddText(
"action BuildCharacter
    Equipment bow
    bow:SetEquipment(" + dq + "uses a two hand bow with steel arrows" + dq + ")
    parent:Stats:AddEquipment(bow)
end")
        pre18:Add(code19)
        bodyDiv:AddHeading("Class Warrior", 2)
        bodyDiv:AddParagraph("Class Warrior will inherit from class Stats. It will have one action: action BuildCharacter. BuildCharacter will do the same in class Warrior as it did in class Ranger.")
        bodyDiv:AddHeading("Class Wizard", 2)
        bodyDiv:AddParagraph("Class Wizard will inherit from class Stats. It will have one action: action BuildCharacter. BuildCharacter will do the same in class Wizard as it did in class Warrior.")
        bodyDiv:AddHeading("Class Main", 2)
        bodyDiv:AddParagraph("Class Main will have two actions:")
        UnorderedList unorderedList20
        bodyDiv:Add(unorderedList20)
        ListItem listItem21
        unorderedList20:Add(listItem21)
        listItem21:AddText(
"action Damage(integer HP) returns integer Damage will use a random number generator (named value to generate integers no larger than 50). It will then follow this format: 
if value is between 0 and 10, decrement HP by 10.
if value is between 10 and 20, decrement HP by 20.
//Continue this up until 50, then return HP.")
        PreformattedText pre22
        listItem21:Add(pre22)
        pre22:AddAttribute("class", "code")
        CodeBlock code23
        code23:AddText(
"if value is between 0 and 10, decrement HP by 10.
if value is between 10 and 20, decrement HP by 20.
//Continue this up until 50, then return HP.")
        pre22:Add(code23)
        ListItem listItem24
        unorderedList20:Add(listItem24)
        listItem24:AddText("action Main: Mainshould call all the actions to describe the three champions. It should also call all of the actions so the user can record their own sound effects. After this, the user should be prompted to choose a champion. If the user selects the warrior, tell them they selected the warrior, and using the audio files that came with this project, play " + dq + "Warrior.wav" + dq + ". Do the same if the user selects the Ranger or the Wizard, playing the appropriate files for each.")
        bodyDiv:AddParagraph("Next, prompt the user to choose an opponent. Do the same for the opponent selection as you did for the champion selection: telling the user which opponent they selected, and playing the appropriate sound. Now you will simulate a battle between the champion and the opponent. Create a random number generator (named decider) that will generate integers between 0 and 3. Repeat the following until either the champion or the opponent has less than or equal to 0 hp:")
        PreformattedText pre25
        bodyDiv:Add(pre25)
        pre25:AddAttribute("class", "code")
        CodeBlock code26
        code26:AddText(
"if decider = 0
Play " + dq + "Hit.wav" + dq + ". Decrement the opponent's hp.  Play " + dq + "Ouch.wav" + dq + ". Tell the user
their champion made a successful hit, and tell them the enemies current hp.

if decider = 1
Tell the user their champion missed the enemy. Play " + dq + "Miss.wav" + dq + ". Play " + dq + "Taunt.wav" + dq + ".

if decider = 2
Play " + dq + "Hit.wav" + dq + ". Decrement the champion's hp. Play " + dq + "Ouch.wav" + dq + ". Tell the user
their champion was successfully hit by their opponent, and tell them the champions current hp.

if decider = 3
Tell the user the opponent missed their attack on the champion. Play " + dq + "Miss.wav" + dq + ". Play " + dq + "Taunt.wav" + dq + "")
        pre25:Add(code26)
        bodyDiv:AddParagraph("Lastly, check to see if either the champion or the opponent has died. If the champion died, play " + dq + "Defeat.wav" + dq + " and tell the user the opponent was the victor. If the opponent died, play " + dq + "Victory.wav" + dq + " and tell the user the champion was the victor.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("When run, the program should describe the three champions to the user. Then, the user will select a champion and an opponent. The battle will ensue, and the user will be told who the victor was in the end. The following is an example of when the program is run after the champions are described:")
        PreformattedText pre27
        bodyDiv:Add(pre27)
        pre27:AddAttribute("class", "code")
        CodeBlock code28
        code28:AddText(
"Choose a Champion: Enter 1 for the Warrior, 2 for the Ranger, or 3 for the Wizard
1
You have chosen the Warrior as your champion.
*Play Warrior.wav*
Choose an opponent: Enter 1 for the Warrior, 2 for the Ranger, or 3 for the Wizard
2
You have chosen the Ranger as your opponent
*Play Ranger.wav*

*Play Hit.wav*
*Play Ouch.wav*
Successfully hit the enemy! His HP is 50

Your opponent missed their attack on you.
*Play Miss.wav*
*Play Taunt.wav*

*Play Hit.wav*
*Play Ouch.wav*
Successfully hit the enemy! His HP is 0

Your champion is the victor!!!
*Play Victory.wav*")
        pre27:Add(code28)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetSummaryName returns text
        return "Battle Simulator"
    end
    action GetName returns text
        return "Challenge 6.1"
    end
    action GetShortDescription returns text
        return "an audio environment for battles using inheritance."
    end
    action GetLocation returns text
        return "lessons/chapter6/challenge6_1.html"
    end
end