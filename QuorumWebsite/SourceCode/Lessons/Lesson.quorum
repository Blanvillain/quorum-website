use Libraries.Web.Page.WebPage
use Libraries.Web.Page.MetaData
use Libraries.System.File
use Libraries.Web.Page.Division
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.StrongText
use Libraries.Web.Page.HeaderLink
use Libraries.Web.Page.WebPageHeader
use Libraries.Web.Page.MainContent
use Libraries.Containers.Array
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Script
use Libraries.Web.Page.MathML
use Libraries.Web.Page.Link
use Libraries.Web.Page.NavigationDivision
use Libraries.Web.Page.Heading
use Libraries.Web.Page.Section
use Libraries.Web.Page.Button
use Libraries.Web.Page.Attributes
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.TableHeaderCell
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableData
use Libraries.Web.Page.TableBody
use Libraries.Web.Page.Image


class Lesson is WebPage
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper
    Lesson nextLesson = undefined
    Lesson prevLesson = undefined
    text scriptsLocation = "/script/"
    boolean IdeScriptSet = false
    Array<Heading> headingArray


    action Setup
        //html header stuff
        SetWebPageTitle("Quorum Lessons - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Division headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Quorum Lessons", 1)
        headDiv:AddText("These pages provide extra labs and assignments that can be freely used in the classroom.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        ComboButtonList comboButtons
        comboButtons:AddComboButton("Join Mary in an Hour of Code", "/media/HourOfCodeDark.png", "hourofcode/part1.html")
        comboButtons:AddComboButton("1: Tutorials on Quorum", "/media/quorumoffline.png", "reference.html")
        comboButtons:AddComboButton("2: Variables and Types", "/media/basics/variables.png", "lessons/chapter2.html")
        comboButtons:AddComboButton("3: Control Structures", "/media/control.png", "lessons/chapter3.html")
        comboButtons:AddComboButton("4: Actions", "/media/basics/actions.png", "lessons/chapter4.html")
        comboButtons:AddComboButton("5: Classes", "/media/basics/classes.png", "lessons/chapter5.html")
        comboButtons:AddComboButton("6: Inheritance", "/media/basics/inheritance.png", "lessons/chapter6.html")

        bodyDiv:Add(comboButtons)

        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetTextFromSource(text path) returns text
        File file
        file:SetPath(path)
        text value = file:Read()
        return value
    end

    action GetNextLesson returns Lesson
        return nextLesson
    end

    action SetNextLesson(Lesson next)
        nextLesson = next
        if nextLesson not= undefined
            nextLesson:SetPreviousLesson(me)
        end
    end

    action GetPreviousLesson returns Lesson
        return prevLesson
    end

    action SetPreviousLesson(Lesson prev)
        prevLesson = prev
    end

    action CreateLinkedArrays() returns Array<Lesson>
        // Initialize the arrays if not already done
        Array<Lesson> chronologicalLinks
    
        // Collect links of all previous lessons
        Lesson prevLesson = GetPreviousLesson()
        Array<Lesson> pastLessons
        repeat while prevLesson not= undefined
            pastLessons:Add(prevLesson)
            prevLesson = prevLesson:GetPreviousLesson()
        end
        
        // Since we collected the previous lessons in reverse order, we need to reverse the array
        // to put the lessons in chronological order
        integer i = pastLessons:GetSize() - 1
        repeat while i >= 0 // Include the first lesson at index 0
            chronologicalLinks:Add(pastLessons:Get(i))
            i = i - 1
        end

    
        // Add the current lesson
        chronologicalLinks:Add(me)
        
        // Add all next lessons in order
        Lesson nextLesson = GetNextLesson()
        repeat while nextLesson not= undefined
            chronologicalLinks:Add(nextLesson)
            nextLesson = nextLesson:GetNextLesson()
        end
    
        // Return the single array with all lessons in chronological order
        return chronologicalLinks
    end


    //used for making the table of contents on the right side of screen
    action AddToHeadingArray(Heading heading) returns Heading
        text lowerCase = heading:GetAttribute("data-text"):GetValue():ToLowerCase()
        text formattedHeadingText = lowerCase:Replace(" ", "_")
        output formattedHeadingText
        heading:SetIdentifier(formattedHeadingText)
        heading:AddAttribute("data-test", formattedHeadingText)
        heading:AddAttribute("data-onpage-toc", "true")
        headingArray:Add(heading)
        return heading
    end

    action ZoomImages
        // Outer container for the zoomed image and its description
        Division div
            div:SetIdentifier("zoomedImageContainer")
            // Use 'flex-col' to stack children vertically and 'items-center' to center them horizontally
            div:AddClassAttribute("hidden fixed inset-0 bg-neutral-grey-65 bg-opacity-50 flex flex-col items-center p-8 z-50")
        
        // Container for the image
        Image image
            image:SetIdentifier("zoomedImage")
            // 'mb-8' adds margin at the bottom of the image, creating space for the paragraph below
            image:AddClassAttribute("h-5/6 object-contain mb-8")
        
        // Adding the image to the main container
        div:Add(image)
        
        // Paragraph for the image description
        Paragraph paragraph
            paragraph:SetIdentifier("zoomedAltText")
            // 'text-white' for white text color, 'text-xl' for font size, and 'px-6 py-4' for padding
            // 'bg-neutral-800' for a darker background and 'rounded' for rounded corners to make the text more legible
            paragraph:AddClassAttribute("h-1/6 text-neutral-white text-2xl px-6 py-4 bg-neutral-800 rounded")
        
        // Adding the paragraph to the main container
        div:Add(paragraph)
        
        // Adding the main container to the page
        Add(div)



        Script script
        script:SetCode("
             document.addEventListener('DOMContentLoaded', () => {
                // Function to zoom the image
                function zoomImage(src, alt) {
                  const zoomedImageContainer = document.getElementById('zoomedImageContainer');
                  const zoomedImage = document.getElementById('zoomedImage');
                  const zoomedAltText = document.getElementById('zoomedAltText');
                
                  // Set the source of the zoomed image to the clicked image's source
                  zoomedImage.src = src;

                  zoomedAltText.textContent = alt
                
                  // Show the zoomed image container
                  zoomedImageContainer.classList.remove('hidden');
                }
                
                // Function to hide the zoomed image
                function unzoomImage() {
                  const zoomedImageContainer = document.getElementById('zoomedImageContainer');
                  
                  // Hide the zoomed image container
                  zoomedImageContainer.classList.add('hidden');
                }
                
               document.querySelectorAll('img[data-zoom]').forEach(img => {
                  img.addEventListener('click', () => zoomImage(img.src, img.alt)); // Removed img.alt if not needed
                  img.tabIndex = 0;
                  img.setAttribute('aria-label', 'Click to zoom image');
                  img.style.cursor = 'pointer';
                });
                
                let unzoomContainer = document.getElementById('zoomedImageContainer');
                unzoomContainer.addEventListener('click', unzoomImage);
            })
        ")
        Add(script)
    end

    action GetHeadingArray returns Array<Heading>
        return headingArray
    end

    action CreateHeadingTableOfContents returns Division
        Array<Lesson> lessonArray = CreateLinkedArrays()
        Division div
        div:AddClassAttribute("h-toc overflow-auto")
        Division innerDiv
        NavigationDivision nav
        nav:SetIdentifier("onPageTableOfContents")
        nav:AddClassAttribute("font-sans")
        Heading h2
        h2:SetScale(2)
        h2:AddClassAttribute("font-bold uppercase")
        h2:AddText("On this page")
        nav:Add(h2)
        UnorderedList ul
        ul:AddClassAttribute("space-y-2")
        integer i = 0
        repeat while i < headingArray:GetSize()
            Heading headingIndex = headingArray:Get(i)
            
            ListItem li
            li:AddClassAttribute("w-full rounded-xl hover:bg-quorum-blue-25")
            
            Link headingLink
            headingLink:AddClassAttribute("block w-full py-1 px-2")
            headingLink:AddText(headingIndex:GetAttribute("data-text"):GetValue())
            headingLink:SetAddress("#" + headingIndex:GetIdentifier():GetValue())
            li:Add(headingLink)
            ul:Add(li)
            i = i + 1
        end
        nav:Add(ul)

        Script script

script:SetCode("
    document.addEventListener('DOMContentLoaded', () => {
        // Only select headings with the 'data-onpage-toc' attribute
        const headings = document.querySelectorAll('#content section h1[data-onpage-toc], #content section h2[data-onpage-toc], #content section h3[data-onpage-toc]');
        const links = document.querySelectorAll('#onPageTableOfContents ul li a');
        let currentSectionIndex = -1;
        let isClickScrolling = false; // Flag to indicate scroll triggered by a click
        let scrollTimeout = null; // Variable to store the timeout ID

        // Function to clear all active classes
        function clearActiveStates() {
            links.forEach(function(link) {
                link.classList.remove('font-bold', 'text-quorum-blue-150');
            });
        }

        // Function to update active link on scroll
        function updateActiveLinkOnScroll() {
            if (isClickScrolling) return; // Do nothing if scroll is due to a click

            var scrollPosition = window.pageYOffset || document.documentElement.scrollTop;
            headings.forEach((heading, index) => {
                if (heading.getBoundingClientRect().top - 150 <= 0) {
                    currentSectionIndex = index;
                }
            });

            clearActiveStates();
            if (currentSectionIndex !== -1 && links[currentSectionIndex]) {
                links[currentSectionIndex].classList.add('font-bold', 'text-quorum-blue-150');
            }
        }

        // Add click event listeners to each link
        links.forEach((link, index) => {
            link.addEventListener('click', function(event) {
                event.preventDefault();
                isClickScrolling = true;
                currentSectionIndex = index;
                clearActiveStates();
                link.classList.add('font-bold', 'text-quorum-blue-150');

                const id = link.getAttribute('href').substring(1);
                const headingToScrollTo = document.getElementById(id);
                if (headingToScrollTo) {
                    headingToScrollTo.scrollIntoView({ behavior: 'smooth', block: 'start' });
                    
                    // Clear any existing timeout to reset the timer
                    clearTimeout(scrollTimeout);
                    // Set a new timeout to reset the flag after scrolling finishes
                    scrollTimeout = setTimeout(() => {
                        isClickScrolling = false;
                    }, 1000); // Adjust time as needed
                }
            });
        });

        updateActiveLinkOnScroll(); // Initial call
        window.addEventListener('scroll', updateActiveLinkOnScroll); // Add scroll event listener
    });
")

        Add(script)
        innerDiv:Add(nav)
        div:Add(innerDiv)

        return div
    end

    action CreateTableOfContents returns Division
        Array<Lesson> lessonArray = CreateLinkedArrays()
        Division div
        div:AddClassAttribute("h-toc overflow-auto")
        Division innerDiv
        NavigationDivision nav
        nav:AddClassAttribute("font-sans")
        Heading h2
        h2:SetScale(2)
        h2:AddClassAttribute("font-bold uppercase")
        h2:AddText(GetSectionName())
        nav:Add(h2)
        UnorderedList ul
        ul:AddClassAttribute("space-y-2")
        integer i = 0
        repeat while i < lessonArray:GetSize()
            Lesson LessonIndex = lessonArray:Get(i)
            
            ListItem li
            li:AddClassAttribute("w-full rounded-xl hover:bg-quorum-blue-25")
            
            Link lessonLink
            lessonLink:AddClassAttribute("block w-full py-1 px-2 capitalize")
            lessonLink:SetAddress("/" + LessonIndex:GetLocation())
            lessonLink:AddText(LessonIndex:GetLinkName())
            
            if LessonIndex:GetLocation() = GetLocation()
                lessonLink:AddClassAttribute("bg-quorum-blue-50 font-bold rounded-xl")
            end
            li:Add(lessonLink)
            ul:Add(li)
            i = i + 1
        end   
        nav:Add(ul)

        Script script
 script:SetCode("
        // Define the function outside the event listener
        function updateViewableHeight(main) {
            const rect = main.getBoundingClientRect();
            let visibleHeight;
        
            // Calculate the visible height of the element
            if (rect.top >= 0 && rect.bottom <= window.innerHeight) {
            visibleHeight = rect.height; // Fully visible
            } else if (rect.bottom > 0 && rect.top < 0) {
            visibleHeight = rect.bottom; // Partly visible, top is out of view
            } else if (rect.top < window.innerHeight && rect.bottom > window.innerHeight) {
            visibleHeight = window.innerHeight - rect.top; // Partly visible, bottom is out of view
            } else {
            visibleHeight = 0; // Not visible
            }
        
            // Update the CSS variable
            document.documentElement.style.setProperty('--main-viewable-height', `${visibleHeight}px`);
        }
        
        // Event listener for DOMContentLoaded
        document.addEventListener('DOMContentLoaded', () => {
            // Call the function on initial load
            const main = document.getElementById('mainDiv');
            updateViewableHeight(main);
        
            // Set up the event listener for scrolling
            window.addEventListener('scroll', () => {
                updateViewableHeight(main);
            });
        });
        ")
    
        Add(script)
        innerDiv:Add(nav)
        div:Add(innerDiv)

        return div
    end


    action GenerateList(Array<text> list) returns OrderedList
        OrderedList ol
        integer i = 0
        repeat while i < list:GetSize()
            ol:AddListItem(list:Get(i))
            i = i + 1
        end
        
        return ol
    end

    action GetName returns text
        return ""
    end

    action GetShortDescription returns text
        return ""
    end

    action GetLinkName returns text
        return ""
    end
    
    action GetSectionName returns text
        return ""
    end
    
    action AddIDEScript
        if IdeScriptSet not= true
            VersionHelper versions
            AddScript("/script/widgets/IDE/widget-js/IDE-"+ versions:GetIDEVersion() +".js")
            IdeScriptSet = true
        end
    end

    action AddDefaultHeaders
        //add language headers
        me:AddAttribute("xml:lang", "en")
        me:SetLanguage("en")

        //add the meta-data character set
        MetaData charset
        charset:SetCharacterSet("UTF-8")
        AddMetaData(charset)

        MetaData viewport
        viewport:SetContent("width=device-width, initial-scale=1")
        viewport:SetName("viewport")
        AddMetaData(viewport)

        text metaDescriptionContent = GetMetaDescription()
        if metaDescriptionContent not= undefined
            MetaData description
            description:SetContent(metaDescriptionContent)
            description:SetName("description")
            AddMetaData(description)
        end

        // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        AddKeywords()
        AddScript("/script/jquery-1.8.3.min.js")
        AddScript("/script/QuorumStandardLibrary.js" + versions:GetLanguageVersionQuery())
        AddScript("/script/script.js" + versions:GetScriptVersionQuery())
        AddScript("/script/prism-quorum.js" + versions:GetPrismVersionQuery())
        Script moduleLocateFile
        moduleLocateFile:SetCode("        var Module = {
            locateFile: function(path, prefix) {
                if (path.endsWith("+dq+".data"+dq+")) return "+dq+scriptsLocation+dq+" + path;
                return prefix + path;
            }
        };")
        GetWebPageHeader():Add(moduleLocateFile)
        AddScript("/script/load.js" + versions:GetLoadVersionQuery())

        //add style sheet tags
        //AddStylesheet("/style/style.css" + versions:GetCSSVersionQuery())
        AddStylesheet("/style/google.css")
        AddStylesheet("/style/output.css")
        AddIcon("/media/favicon.ico")

        //Add Responsive Stylesheets
        WebPageHeader webHeader = me:GetWebPageHeader()

        Script googleScript
        googleScript:SetGenerateType(false)
        googleScript:SetAsync(true)
        googleScript:SetAddress("https://www.googletagmanager.com/gtag/js?id=G-LVNXB6THBP")

        Script googleScript2
        googleScript2:SetGenerateType(false)
googleScript2:AddText(
"
  window.dataLayer = window.dataLayer || [];
  function gtag(){dataLayer.push(arguments);}
  gtag('js', new Date());

  gtag('config', 'G-LVNXB6THBP');
"
)
        Add(googleScript)
        Add(googleScript2)
        //Add the navigation bar
        NavigationBar navigation
        Add(navigation)
    end

    action AddMathHeader 
        AddScript("/script/load-mathjax.js")
    end

    action AdjustMain(MainContent mainRegion)
        mainRegion:AddAttribute("role","main")
        mainRegion:SetIdentifier("main")
        mainRegion:SetTabIndex("-1")
    end

    action GetMediaStyleSheet(text name, text media) returns HeaderLink
        HeaderLink link
        link:SetAddress(name)
        link:SetType("text/css")
        link:SetRelationship("stylesheet")
        link:SetMedia(media)
        return link
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "programming for beginners, game programming, 
        lego programming, computer courses, programming 3D, programming,
        animation, graphics, multimedia, games, accessibility, computer science for all,
        computer science, computer languages, Quorum programming language, robot programming,
        online programming")
        AddMetaData(keywords)
    end

    action GetDataScienceDefaultKeywords returns text
        return "programming for beginners, data science, charts,
        graphs, tidy, data transformation, business intelligence, data analytics,
        data exploration, data management, data scientist, machine learning, machine, statistics, statistical,
        models, algorithms, predictive, modeling, artificial intelligence, dataset, Inferential Statistics, descriptive statistics,
        data mining, big data, data analysis, data processing"
    end

    action GetMetaDescription returns text
        return undefined
    end

    // wrappers for html tags
    action AddItalicFront(text italic, text nonitalic) returns text
        return "<i>" + italic + "</i>" + nonitalic 
    end

    action AddTextBoldFront(text bold, text nonbold) returns text
        return "<b>" + bold + "</b>" + nonbold
    end

    action AddStrongTag(text strong) returns text
        return "<strong>" + strong + "</strong>"
    end

    action AddCodeTag(text code) returns text
        return "<code>" + code + "</code>"
    end

    action AddListItemWithBoldAtFront(UnorderedList list, text bold, text value)
        ListItem item
        StrongText myBold
        myBold:AddText(bold)
        item:Add(myBold)

        item:AddText(value)

        list:Add(item)
    end

    action MakeNestedUnorderedList(Array<text> list) returns text

        text unorderedList = "<ul>"
        integer iterator = 0

        repeat list:GetSize() times
            unorderedList = unorderedList + "<li>" + list:Get(iterator) + "</li>"
            iterator = iterator + 1
        end
    
        return unorderedList + "</ul>"
    end

    action MakeNestedOrderedList(Array<text> list) returns text

        text orderedList = "<ol>"
        integer iterator = 0

        repeat list:GetSize() times
            orderedList = orderedList + "<li>" + list:Get(iterator) + "</li>"
            iterator = iterator + 1
        end
    
        return orderedList + "</ol>"
    end

    // HTML tags for general tables
    // general format is add tags to text, then add text to array (for both rows and columns) 
    // then the "rows" array 

    action AddTableHeaderRow(Array<text> tableHeaderArray) returns TableHeader
        integer i = 0
        TableHeader tableHeader
        tableHeader:AddClassAttribute("bg-neutral-black text-neutral-white overflow-hidden")
        TableRow rowHeader

        repeat while i < tableHeaderArray:GetSize()
            TableHeaderCell th
            th:AddClassAttribute("text-left py-3 px-4 font-semibold break-words text-sm first:rounded-tl-lg last:rounded-tr-lg")
            th:AddClassAttribute("w-1/"+tableHeaderArray:GetSize())
            th:AddText(tableHeaderArray:Get(i))
            rowHeader:Add(th)
            i = i + 1
        end

        tableHeader:Add(rowHeader)
        return tableHeader
    end

    action AddTableBody returns TableBody
        TableBody tableBody
        tableBody:AddClassAttribute("bg-neutral-grey-25")
        return tableBody
    end

    action AddTableBodyRow(Array<text> rowEntries) returns TableRow
        TableRow row
        row:AddClassAttribute("border-y border-neutral-grey-40 last:border-t last:border-y-0")

        integer i = 0
        repeat while i < rowEntries:GetSize()
            TableData cell
            cell:AddText(rowEntries:Get(i))
            cell:AddClassAttribute("text-left py-3 px-4 break-words")
            if i = 0
                cell:AddClassAttribute("font-bold")
            end
            row:Add(cell)
            i = i + 1
        end
        
        return row
    end


    action AddWebTable(text captionText) returns WebTable 
         WebTable table
         table:AddClassAttribute("rounded-lg shadow overflow-hidden border-collapse table-fixed w-full")
         TableCaption caption
         caption:AddClassAttribute("text-xl font-bold p-4 bg-[transparent]")
         caption:AddText(captionText)
         table:Add(caption)
         return table
    end

    action AddTableHeaderTag(Array<text> headerText) returns text
        text columnTextWithTags = ""
        integer iterator = 0

        repeat headerText:GetSize() times
            columnTextWithTags = columnTextWithTags + "<th>" + headerText:Get(iterator) + "</th>"
            iterator = iterator + 1
        end

        return columnTextWithTags
    end

    action AddTableDataTag(Array<text> columnText) returns text
        text columnTextWithTags = ""
        integer iterator = 0

        repeat columnText:GetSize() times
            columnTextWithTags = columnTextWithTags + "<td>" + columnText:Get(iterator) + "</td>"
            iterator = iterator + 1
        end

        return columnTextWithTags
    end 

    action AddRowTag(Array<text> rowEntries) returns text
        text rowTextWithTags = ""
        text css = "style=" + dq + " background-color:lightgrey;color:black;" + dq
            integer iterator = 0
        repeat rowEntries:GetSize() times
            if iterator mod 2 = 1
            rowTextWithTags = rowTextWithTags + "<tr>" + rowEntries:Get(iterator) + "</tr>"
            iterator = iterator + 1
            else
            rowTextWithTags = rowTextWithTags + "<tr "+ css +
                                ">" + rowEntries:Get(iterator) + "</tr>"
            iterator = iterator + 1
            end
        end
        return rowTextWithTags
    end

    action AddTableTag(text tableRows, text caption) returns text 
        return "<table style=" + dq +
                 " border: 1px solid black; border-radius: 12px; padding: 5px;" + dq + ";>"  + 
                "<caption>" + caption + "</caption>" +
                tableRows + "</table>"
    end

    action GetSummaryName returns text
        return ""
    end

    action GetImageLocation returns text
        return ""
    end

    action GetLocation returns text
        return ""
    end

   /*
        This is a helper action for creating an IDE on a page and potentially including source code in it.
        If codePath is undefined, it is ignored. If it points to an invalid file, an error is thrown.

        Attribute: Parameter div
        Attribute: Parameter ideName this name must be unique
        Attribute: Parameter the title of the IDE
        Attribute: Parameter the subtitle of the IDE
        Attribute: Parameter a path to a file with the code that lives in this IDE
    */
    action AddIDE(Division div, text ideName, text title, text subtitle, text codePath, text dialogTitle)
        CodingOnline ide
        ide:SetDevelopmentLabel(title)
        ide:SetUniqueIdentifier(ideName)
        ide:SetDialogTitle(dialogTitle)
        ide:Setup()
        ide:GetIDESubtitle():AddText(subtitle)
        div:Add(ide)

        if codePath not= undefined
            File file
            file:SetPath(codePath)
            if file:Exists() and file:GetFileSize() > 0
                ide:GetIDEInputArea():AddText(file:Read())
            end
        end
    end
   
    action AddMath(Division div, text fileName)
       MathML math
       math:AddSource(fileName)
       div:AddNestedTag(math)
    end

    action AddCodeSample(Division div, text codePath)
        if codePath not= undefined
            File file
            file:SetPath(codePath)
            if file:Exists() and file:GetFileSize() > 0
                text result = file:Read()
                if result not= undefined
                    div:Add(preformatter:GeneratePreformattedCode(result))
                end
            end
        end
        
    end

    action AddIDE() returns IDE
        AddIDEScript()
        IDE ide
        ide:Init()
        return ide
    end

    action AddIDE(Division div, text ideName, text title, text subtitle)
        AddIDE(div, ideName, title, subtitle, undefined, undefined)
    end

    action AddIDE(Division div, text ideName, text title, text subtitle, text codePath)
        AddIDE(div, ideName, title, subtitle, codePath, undefined)
    end

    action AddSideBySideIDE(Division div, text ideName, text title, text subtitle)
        CodingOnline ide
        ide:SetDevelopmentLabel(title)
        ide:SetUniqueIdentifier(ideName)
        ide:Setup()
        ide:GetIDESubtitle():AddText(subtitle)
        div:Add(ide)
    end

    action AddGameIDE(Division div, text ideName, text title, text subtitle)
        CodingOnline ide
        ide:SetDevelopmentLabel(title)
        ide:SetUniqueIdentifier(ideName)
        ide:Setup()
        ide:GetIDESubtitle():AddText(subtitle)
        div:Add(ide)
    end

    action Write(text prepend)
        text value = GetLocation()
        File file
        file:SetPath(prepend + value)
        File parentFile = file:GetParentDirectory()
        if parentFile not= undefined and not parentFile:Exists()
            parentFile:CreateDirectories()
        end
        file:Write(Generate())
    end

    action WriteNextTutorial(Division div)
        // Link to the next tutorial
        Lesson lesson = GetNextLesson()
        if lesson not= undefined
            div:AddHeading("Next Tutorial", 2)
            Paragraph next = div:AddParagraph("In the next tutorial, we will discuss ")
            next:AddLink(lesson:GetName(), "/" + lesson:GetLocation())
            next:AddText(", which describes " + lesson:GetShortDescription() + ".")
        end
    end

      action WriteNextTutorial(Section div)
        // Link to the next tutorial
        if GetPreviousLesson() not= undefined or GetNextLesson() not= undefined 
            Heading nextTutorial = div:AddHeading("Next Tutorial", 2)
            nextTutorial:AddAttribute("data-text", "Next Tutorial")
            AddToHeadingArray(nextTutorial)
            nextTutorial:AddClassAttribute("text-2xl font-bold")
            Paragraph next = div:AddParagraph("In the next tutorial, we will discuss ")
            next:AddLink(GetNextLesson():GetName(), "/" + GetNextLesson():GetLocation())
            next:AddText(", which describes " + GetNextLesson():GetShortDescription() + ".")
            Division button_div
            button_div:AddClassAttribute("flex flex-col md:flex-row justify-end")
            if GetPreviousLesson() not= undefined
                Link previousLesson
                previousLesson:AddClassAttribute("py-2 px-5 bg-neutral-grey-25 font-bold captitalize rounded-2xl")
                previousLesson:SetAddress("/" + GetPreviousLesson():GetLocation())
                previousLesson:AddText("Go Back")
                button_div:Add(previousLesson)
            end
            
            if GetNextLesson() not= undefined
                Link nextLesson
                nextLesson:AddClassAttribute("py-2 px-10 w-fit bg-quorum-blue-100 ml-4 font-bold captitalize rounded-2xl")
                nextLesson:SetAddress("/" + GetNextLesson():GetLocation())
                nextLesson:AddText("Next Tutorial")
                button_div:Add(nextLesson)
            end
            div:Add(button_div)
        end
        ZoomImages()
    end

    /*
    * returns array of Divisions 
    * div 0 is the left table of contents
    * div 1 is the body
    * div 2 is the on page table of contents
    */
    action InitializeTutorialPage returns Array<Division>
        Division outerDiv
        outerDiv:AddClassAttribute("flex flex-col h-full-body box-border")

        //Figure out getting main regions properly.
        MainContent mainRegion
        mainRegion:AddClassAttribute("my-8 mx-16 box-border flex-grow")
        AdjustMain(mainRegion)
        

        Division innerDiv
        innerDiv:SetIdentifier("mainDiv")
        innerDiv:AddClassAttribute("flex flex-row box-border h-full")
                
        /*
            lesson table of contents
        */
        Division tocDiv
        tocDiv:Add(CreateTableOfContents())
        tocDiv:AddClassAttribute("w-1/5 sticky top-8 h-0")

        /*
            content body
        */
        Division bodyDiv
        bodyDiv:SetIdentifier("content")
        bodyDiv:AddClassAttribute("flex flex-col w-3/5 mx-4 overflow-auto gap-y-3")

        /*
            On this page table of contents
        */
        Division onPageDiv
        onPageDiv:AddClassAttribute("w-1/5 sticky top-8 h-0")

        innerDiv:Add(tocDiv)
        innerDiv:Add(bodyDiv)
        innerDiv:Add(onPageDiv)

        PageFooter footer
        mainRegion:Add(innerDiv)
        outerDiv:Add(mainRegion)
        outerDiv:Add(footer)
        Add(outerDiv)

        Array<Division> divs
        divs:Add(tocDiv)
        divs:Add(bodyDiv)
        divs:Add(onPageDiv)
        return divs
    end

end
