use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.Section
use Libraries.Containers.Array
use Libraries.Web.Page.Link

class Challenge5_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Challenge 5.2: A *")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(headDiv, "Challenge 5.2: A *", 1)
        headDiv:AddText("Learn about automatic navigation with the A * (star) algorithm")
        bodyDiv:Add(headDiv)


        Section goalsSection
        goalsSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goalsSection, "Goals", 2)
        goalsSection:AddParagraph("The goals of this assignment are to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:SetClassAttribute(GetDefaultListStyle())
        goalsSection:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to use recursion in programming")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("Understand a " + dq + "pathfinding" + dq + " algorithm and how it works")
        
        
        Section cspCurriculumSection
        cspCurriculumSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(cspCurriculumSection, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:SetClassAttribute(GetDefaultListStyle())
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity", "EU 1.3, LO 1.3.1, EK 1.3.1D")
        cspCurriculumSection:Add(list) 

        Section cspStandardsSection
        cspStandardsSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(cspStandardsSection, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:SetClassAttribute(GetDefaultListStyle())
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        cspStandardsSection:Add(ccList) 

        Section vocabSection
        vocabSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(vocabSection, "Vocabulary", 2)
        UnorderedList unorderedList5
        unorderedList5:SetClassAttribute(GetDefaultListStyle())
        vocabSection:Add(unorderedList5)
        ListItem listItem6
        unorderedList5:Add(listItem6)
        listItem6:AddText("A* (pronounced A Star)")
        ListItem listItem7
        unorderedList5:Add(listItem7)
        listItem7:AddText("Algorithm")
        ListItem listItem8
        unorderedList5:Add(listItem8)
        listItem8:AddText("Edge")
        ListItem listItem9
        unorderedList5:Add(listItem9)
        listItem9:AddText("Factorial")
        ListItem listItem10
        unorderedList5:Add(listItem10)
        listItem10:AddText("Graph")
        ListItem listItem11
        unorderedList5:Add(listItem11)
        listItem11:AddText("Node")
        ListItem listItem12
        unorderedList5:Add(listItem12)
        listItem12:AddText("Parameter")
        ListItem listItem13
        unorderedList5:Add(listItem13)
        listItem13:AddText("Pathfinding")
        ListItem listItem14
        unorderedList5:Add(listItem14)
        listItem14:AddText("Recursion")

        Section overviewSection
        overviewSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(overviewSection, "Overview", 2)
        overviewSection:AddParagraph("In this lesson we will learn about a computer science programming technique called recursion and then use it in a pathfinding algorithm called A* (A star). A* is very common in programming, one application being self-driving cars!")
        
        Section goal1Section
        goal1Section:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal1Section, "Goal 1: Recursion", 2)
        goal1Section:AddParagraph("Before we can work on a pathfinding algorithm we need to understand a technique called recursion. Recursion basically involves an action calling itself repeatedly until a stopping condition is hit. Typically you call a recursive function from a main procedure once and then the recursive procedure executes until it returns a final value. For a simple example of recursion we will look at a factorial operation from mathematics. As a reminder, factorial is denoted by an exclamation point following the number and represents the product of all positive integers less than or equal to the number.")
        goal1Section:AddParagraph("For example, the factorial of 5 is: 5! = 5 * 4 * 3 * 2 * 1 = 120")
        
        Section exampleFactorialSection
        exampleFactorialSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(exampleFactorialSection, "Example: Create a template for a factorial calculator", 3)
        exampleFactorialSection:AddParagraph("We can write a factorial calculator program in a few lines of code. Lets setup up a class Main with two actions, Main and Factorial. The Factorial(integer n) action will take an integer parameter and will return an integer. In action Main, place a single statement output Factorial(5)")
        CodeBlock code16
        code16:AddText(
"class Main
    action Main
      output Factorial(5)
    end

    action Factorial(integer n) returns integer

    end
end")
        exampleFactorialSection:Add(preformatter:GeneratePreformattedCode(code16))

        AddIDE(exampleFactorialSection, "challenge5_2IDE", "Try Your Code Here", "", true)


        exampleFactorialSection:AddParagraph("Inside the Factorial action, we will call Factorial recursively (meaning that the function will call itself repeatedly). In math, we know that n! = n * (n-1)!. So in our computer program we can say, assuming that Factorial(n-1) returns the correct value, that n * Factorial(n-1) is equivalent to Factorial(n). In the Factorial action , lets insert the statement: return n * Factorial(n-1). Let's run the program now and see what happens.")
        
        Section incompleteFactorialSection
        incompleteFactorialSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(incompleteFactorialSection, "Incomplete Factorial program:", 4)
        CodeBlock code18
        code18:AddText(
"class Main
    action Main
      output Factorial(5)
    end

    action Factorial(integer n) returns integer
      return n * Factorial(n-1)
    end
end")
        incompleteFactorialSection:Add(preformatter:GeneratePreformattedCode(code18))
        incompleteFactorialSection:AddParagraph("If we run the program now, we will get an error like this:")
        PreformattedText pre19
        incompleteFactorialSection:Add(pre19)
        pre19:AddAttribute("class", "code")
        CodeBlock code20
        code20:AddText(
"Error: class java.lang.StackOverflowError, null
file: main.quorum,  class: Main,  action: Factorial,  line: 10 
file: main.quorum,  class: Main,  action: Factorial,  line: 10 
...
file: main.quorum,  class: Main,  action: Factorial,  line: 10")
        pre19:Add(code20)
        incompleteFactorialSection:AddParagraph("This is called a stack overflow error. The problem with our program is that the recursive function kept calling itself repeatedly until the computer ran out of memory (on its " + dq + "stack" + dq + "). In order to fix this, we need to tell the Factorial action when to stop. Typically this is done in the first lines of the recursive function with an if statement to check for the stopping condition, and then the if statement will return a base value instead of calling the function recursively again.")
        
        Section activitySection
        activitySection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(activitySection, "Activity", 3)
        activitySection:AddParagraph("In our factorial calculation program, the base stopping condition is when n = 1 since we multiply the value passed to the action by n-1 for all positive integers and 1 is the lowest positive integer. When we reach 1 in the base case through the recursive calls, we should return the value 1 since 1! = 1, so in our program Factorial(1) should return the value 1. To fix the program, we insert an if statement code block to check if n = 1 and if so, simply return the value 1 and the action will no longer call itself. After the base case is returned, all of the other nested recursive calls can then return one by one, until the top level call is returned.")
        activitySection:AddParagraph("For this activity, add the stopping condition so that the program correctly outputs 120, the correct value of 5!.")
        
        Section pathfindingOverviewSection
        incompleteFactorialSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(pathfindingOverviewSection, "Pathfinding Overview", 2)
        pathfindingOverviewSection:AddParagraph("Now that we understand how recursion works, we will use it in an algorithm to navigate automatically through a graph or a map. In order to perform this navigation your program needs to be able to choose the best path among several possibilities at each step. For example, when you need to go from point A to point B you may have the choice between several paths but we will use this algorithm to find the shortest.")
        pathfindingOverviewSection:AddParagraph("In this assignment, you will write a program that uses a well known computer science algorithm called A* (A Star), which will find the best (shortest) path between 2 points in a grid with obstacles. This is commonly called pathfinding. To perform this operation you will use recursion in your algorithm. In our case, we will call the action to take the best next step in the path until we find the end point (which is our stopping condition).")
        pathfindingOverviewSection:AddParagraph("The action AlgorithmAStar(integer iteration) in our code (the template is below) is the recursive action which will call itself repeatedly until we have achieved our goal and further calls are no long necessary. You will notice that the action AlgorithmAStar(integer iteration) has one parameter (integer iteration) which uses an integer variable called iteration which will be incremented by 1 each time we call the recursive action. The action also has a return value integer pathSize which returns the length of the final path (or -1 if there is no solution). The different positions/points are represented in the grid by Nodes which have several attributes like the position, the different values of G, H and F, a reference to the parent Node and a field indicating if the node is a starting or ending point.")
        pathfindingOverviewSection:AddParagraph("In this algorithm we basically " + dq + "visit" + dq + " each Node iteratively (one at a time) and analyze the best path from that Node forward. The program we will write uses two lists : List<Node> openList and List<Node> closedList. The first list, openList, will contain the list of Nodes which have not yet been visited and the second list, closedList, will contain the Nodes which have already been visited. We will start by placing all of the Nodes in openList and move them one by one to closedList as we visit them.")
        pathfindingOverviewSection:AddParagraph("When we visit a Node in the A* algorithm we analyze it by calculating values for each of the following fields of each Node :")
        UnorderedList unorderedList21
        unorderedList21:SetClassAttribute(GetDefaultListStyle())
        pathfindingOverviewSection:Add(unorderedList21)
        ListItem listItem22
        unorderedList21:Add(listItem22)
        listItem22:AddText("stepsFromStart : This integer value represents the " + dq + "cost so far" + dq + " (in number of steps) necessary to go from the starting point to this particular point")
        ListItem listItem23
        unorderedList21:Add(listItem23)
        listItem23:AddText("stepsToEnd : This integer value is a heuristic (an estimation of the forward distance between the current point and the ending point). When calculating the heuristic, we do not take any obstacles in consideration, we just consider a basic estimate " + dq + "as a crow flies" + dq + " straight to the end point. We use a heuristic estimate that is very simple in our algorithm for this lesson, but in advanced cases there are more complex estimation methods to make the algorithm more efficient.")
        ListItem listItem24
        unorderedList21:Add(listItem24)
        listItem24:AddText("stepsTotal : This integer is the sum of the stepsFromStart and the stepsToEnd and gives an estimate of the total cost of the best path through that particular point. The lowest stepsTotal value will be the next Node visited, because it will be the Node most likely to be on the optimal path.")
        pathfindingOverviewSection:AddParagraph("Now we will program the actual algorithm with the instructions below. Download this Challenge 5.2 Template.zip file for a template to get started.")
        Link link = pathfindingOverviewSection:AddLink("Challenge 5.2 Template", "/files/lessons/chapter5/Challenge5_2Template.zip")
        link:AddClassAttribute(GetDefaultLinkStyle())

        
        Section goal2Section
        goal2Section:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal2Section, "Goal 2: Choose the Node to visit next", 2)
        goal2Section:AddParagraph("The first thing we have to do in this algorithm is to declare an integer which will contain the size of the path (starting at 0 in the first point). Next we will choose the Node to visit, which we take from openList. We determine which Node to take from openList by selecting the Node which has the best chance to be on the optimal path. As we described before, the Node with the lowest stepsTotal value will be the Node to analyze next since that value will represent the lowest overall estimation of the final total cost if the path crosses the current Node.")
        
        Section goal2ExampleSection
        goal2ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal2ExampleSection, "Example:", 3)
        goal2ExampleSection:AddParagraph("This code calls an action GetNodeWithLowestEstimate(List<Node> nodeList) which finds the Node in the openList with the lowest score for stepsTotal, the estimate of the total number of steps from the start to the end point. The action is already written for you in the template project you downloaded earlier, so you will only need to call the action in your code.")
        CodeBlock code26
        code26:AddText(
"// Select the Node from openList with the lowest estimate of total steps
Node currentNode = GetNodeWithLowestEstimate(openList)")
        goal2ExampleSection:Add(preformatter:GeneratePreformattedCode(code26))
        
        Section goal2ActivitySection
        goal2ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal2ActivitySection, "Activity:", 3)
        goal2ActivitySection:AddParagraph("In the action AlgorithmAStar(...) in the template code, follow these steps:")
        UnorderedList unorderedList27
        unorderedList27:SetClassAttribute(GetDefaultListStyle())
        goal2ActivitySection:Add(unorderedList27)
        ListItem listItem28
        unorderedList27:Add(listItem28)
        listItem28:AddText("Find the Node with the lowest stepsTotal value with the openList as a parameter by calling Node GetNodeWithLowestEstimate(openList).")
        ListItem listItem29
        unorderedList27:Add(listItem29)
        listItem29:AddText("Assign the result of the previous call to a new Node variable called currentNode as indicated in the example")
        ListItem listItem30
        unorderedList27:Add(listItem30)
        listItem30:AddText("Declare a variable called pathSize and initialize it to 0.")
        goal2ActivitySection:AddParagraph("We will use currentNode as the startingNode for our example.")


        Section goal3Section
        goal3Section:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal3Section, "Goal 3: Visit the Node", 2)
        goal3Section:AddParagraph("After choosing the node with the lowest steps estimate, we have to visit it and perform our analysis by recalculating the values. We do this using recursion, but like in the Factorial example above, we must first determine the stopping condition. In the recursive procedure, the stopping condition is checked first to determine if we should proceed with the recursion or stop and return a value for the base case. In this example, the stopping condition is when our currentNode is the end Node. So the first thing we check when we visit a Node is whether or not it is the end Node. If so, the algorithm has encountered the stopping condition and we have completed our path. If not, we must continue the algorithm to take another step. In this step, we consider the case where we have arrived at the end Node and we take the correct actions.")
        

        Section goal3ExampleSection
        goal3ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal3ExampleSection, "Example:", 3)
        goal3ExampleSection:AddParagraph("If we are at the end Node, we must do three things for our example:")
        UnorderedList unorderedList31
        unorderedList31:SetClassAttribute(GetDefaultListStyle())
        goal3ExampleSection:Add(unorderedList31)
        ListItem listItem32
        unorderedList31:Add(listItem32)
        listItem32:AddText("We update and display our grid")
        ListItem listItem33
        unorderedList31:Add(listItem33)
        listItem33:AddText("We retrace our optimal path in the reverse direction and mark each Node orange for display purposes")
        ListItem listItem34
        unorderedList31:Add(listItem34)
        listItem34:AddText("We count the length of the path")

        Section goal3ActivitySection
        goal3ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal3ActivitySection, "Activity:", 3)
        goal3ActivitySection:AddParagraph("In the template project for Step 2, first create a code block that executes if currentNode is the end Node. You can check this condition by calling the IsEndingNode() action of currentNode. If this condition is not true then you will proceed to Step 3 so you will not need an else condition.")
        goal3ActivitySection:AddParagraph("Inside the conditional code block you perform three tasks:")
        UnorderedList unorderedList35
        unorderedList35:SetClassAttribute(GetDefaultListStyle())
        goal3ActivitySection:Add(unorderedList35)
        ListItem listItem36
        unorderedList35:Add(listItem36)
        listItem36:AddText("Redraw the grid by calling the DrawGrid() action, which is already included for you in main.quorum")
        ListItem listItem37
        unorderedList35:Add(listItem37)
        listItem37:AddText("Retrace the optimal path by moving the currentNode from the ending Node to the startingNode and marking each Node on that path by changing its color to orange. This may seem out of order at this point, but remember that the base case is the ending condition, so we can assume that the path from each Node to the next best Node has already been set (even though we don't actually write the code for this until later. Set up a repeat loop to execute while currentNode:IsStartingNode() = false.")
        ListItem listItem38
        unorderedList35:Add(listItem38)
        listItem38:AddText("Inside the repeat loop block, first change the Node in the nodeGrid array by calling SetColor(color:Orange) on the Node and then set currentNode = currentNode:GetParent() to move it back one Node on the path.")
        ListItem listItem39
        unorderedList35:Add(listItem39)
        listItem39:AddText("In order to get the correct Node from the NodeGrid, use the GetPositionX() and GetPositionY() actions from the currentNode. You will use the GetParent() action on the currentNode to find the previous step on the optimal path. Note that this field will be set during the analysis phase of a non-ending node (Goal 4).")
        ListItem listItem40
        unorderedList35:Add(listItem40)
        listItem40:AddText("Increment the pathSize variable by 1.")
        ListItem listItem41
        unorderedList35:Add(listItem41)
        listItem41:AddText("Return the pathSize variable.")


        Section goal4Section
        goal4Section:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal4Section, "Goal 4: Identify adjacent Nodes", 2)
        goal4Section:AddParagraph("In this step, the stopping condition has not been met, which means we are that currentNode is not the end Node. So we have two things we must do:")
        UnorderedList unorderedList42
        unorderedList42:SetClassAttribute(GetDefaultListStyle())
        goal4Section:Add(unorderedList42)
        ListItem listItem43
        unorderedList42:Add(listItem43)
        listItem43:AddText("First, we must remove the currentNode from the openList and add it to the closedList since we are now analyzing it.")
        ListItem listItem44
        unorderedList42:Add(listItem44)
        listItem44:AddText("Second, we have to add any new Nodes adjacent to the currentNode which are not obstacles to the openList which we can see now. These new nodes are candidates for analysis in the future. We can adjust the stepsFromStart field of each new Node to be the value of the currentNode's stepsFromStart value + 1 since it will take 1 more step to reach that Node from where we are.")
        
        Section goal4ExampleSection
        goal4ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal4ExampleSection, "Example:", 3)
        goal4ExampleSection:AddParagraph("Following is an example of how you can check adjacent Nodes to the currentNode by calling the AdjacentNode action. The AdjacentNode action is already written for you and will first verify that the Node you are checking is not already in either the openList or closeList and that it is not an obstacle. If none of these are true, the action adds the Node to the openList and sets the Parent to the currentNode for the back tracing step from Goal 2.")
        CodeBlock code46
        code46:AddText(
"// Note that each Node as four adjacent Nodes at positions (x+1, y+0), (x-1, y+0), (x+0, y+1), (x+0, y-1) relative to the currentNode.
// Call the AdjacentNode action to each node to verify: (i)that the Node is not an obstacle or in either 
// the openList or closedList and set the Parent of the Node to currentNode.
if currentNode:GetPositionX() + 1 < nodeGrid:GetMaxNumberOfRows()
    AdjacentNode(currentNode, currentNode:GetPositionX() + 1, currentNode:GetPositionY())
end")
        goal4ExampleSection:Add(preformatter:GeneratePreformattedCode(code46))


        Section goal4ActivitySection
        goal4ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal4ActivitySection, "Activity:", 3)
        goal4ActivitySection:AddParagraph("In the next line of the AlgorithmAStar() action after the stopping condition block's, do the following:")
        UnorderedList unorderedList47
        unorderedList47:SetClassAttribute(GetDefaultListStyle())
        goal4ActivitySection:Add(unorderedList47)
        ListItem listItem48
        unorderedList47:Add(listItem48)
        listItem48:AddText("Add currentNode to the closedList")
        ListItem listItem49
        unorderedList47:Add(listItem49)
        listItem49:AddText("Remove currentNode from the openist")
        ListItem listItem50
        unorderedList47:Add(listItem50)
        listItem50:AddText("Call AdjacentNode as in the example above on each of the four adjacent Nodes.")


        Section goal5Section
        goal5Section:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal5Section, "Goal 5 : Implement recursion", 2)
        goal5Section:AddParagraph("After we have completed our maintenance activities on the currentNode and our Node lists, we call AlgorithmAStar() recursively to find the next best Node from the current Node.")
        UnorderedList unorderedList51
        unorderedList51:SetClassAttribute(GetDefaultListStyle())
        goal5Section:Add(unorderedList51)
        ListItem listItem52
        unorderedList51:Add(listItem52)
        listItem52:AddText("When the openList is empty, it means that we have reached a dead end and the algorithm can not continue because there are no further Nodes to analyze. So there is no path between the starting and the ending point. in this case you should return -1 to indicate no solution is found.")
        ListItem listItem53
        unorderedList51:Add(listItem53)
        listItem53:AddText("Otherwise call AlgorithmAStar() again with the parameter set to iteration + 1 and assign the result to pathSize and then return pathSize.")
        
        Section goal5ExampleSection
        goal5ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal5ExampleSection, "Example:", 3)
        goal5ExampleSection:AddParagraph("This is an example of how to call AlgorithmAStar(integer iteration) recursively:")
        CodeBlock code55
        code55:AddText("pathSize = AlgorithmAStar(iteration + 1)")
        goal5ExampleSection:Add(preformatter:GeneratePreformattedCode(code55))

        Section goal5ActivitySection
        goal5ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal5ActivitySection, "Activity:", 3)
        UnorderedList unorderedList56
        unorderedList56:SetClassAttribute(GetDefaultListStyle())
        goal5ActivitySection:Add(unorderedList56)
        ListItem listItem57
        unorderedList56:Add(listItem57)
        listItem57:AddText("Implement a condition to check if openList:IsEmpty() is true. If so, return -1 to indicate that the algorithm failed to find a path, otherwise, set the pathSize variable to the recursive call to AlgorithmAStar(). Be sure to pass iteration + 1 as the parameter.")
        ListItem listItem58
        unorderedList56:Add(listItem58)
        listItem58:AddText("Return the pathSize variable")

        Section sampleOutputSection
        sampleOutputSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(sampleOutputSection, "Sample Output", 2)
        sampleOutputSection:AddParagraph("Now that you have written the complete AlgorithmAStar() with the 4 previous parts, you can run the program. The instruction will be put at the top of the game window. Choose a starting and an ending point and press " + dq + "ENTER" + dq + " to execute the algorithm, it will find the best path.")
        sampleOutputSection:AddParagraph("If you want to change the obstacles you can do it in the main.quorum class, in the CreateGame() action, you will find 2 loops which browse all the grid and a condition with the positions of obstacles (i and j), change the value in this condition will change the positions of obstacles. Congratulations! You now understand a pathfinding algorithm and recursion and have an idea on how to use A* Algorithm.")

        bodyDiv:Add(goalsSection)
        bodyDiv:Add(cspCurriculumSection)
        bodyDiv:Add(cspStandardsSection)
        bodyDiv:Add(vocabSection)
        bodyDiv:Add(overviewSection)
        bodyDiv:Add(goal1Section)
        bodyDiv:Add(exampleFactorialSection)
        bodyDiv:Add(incompleteFactorialSection)
        bodyDiv:Add(activitySection)
        bodyDiv:Add(pathfindingOverviewSection)
        bodyDiv:Add(goal2Section)
        bodyDiv:Add(goal2ExampleSection)
        bodyDiv:Add(goal2ActivitySection)
        bodyDiv:Add(goal3Section)
        bodyDiv:Add(goal3ExampleSection)
        bodyDiv:Add(goal3ActivitySection)
        bodyDiv:Add(goal4Section)
        bodyDiv:Add(goal4ExampleSection)
        bodyDiv:Add(goal4ActivitySection)
        bodyDiv:Add(goal5Section)
        bodyDiv:Add(goal5ExampleSection)
        bodyDiv:Add(goal5ActivitySection)
        bodyDiv:Add(sampleOutputSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about recursion and navigation using the A-star algorithm in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Navigation using A*"
    end

    action GetName returns text
        return "Challenge 5.2"
    end

    action GetShortDescription returns text
        return "a technique called A * (star) for navigation."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter5/challenge5_2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Classes"
    end
end