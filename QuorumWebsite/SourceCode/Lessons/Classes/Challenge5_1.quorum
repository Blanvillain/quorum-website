use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Challenge5_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Challenge 5.1: Decorate your Map")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Challenge 5.1: Decorate your Map", 1)
        headDiv:AddText("Create a game map and decorate it with items")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Practice with class actions")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to use the List structure")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to add actions using the keyboard")

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.4, EK 1.2.4A, EK 1.2.4B, EK 1.2.4C, EK 1.2.4D, EK 1.2.4E, EK 1.2.4F")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.1, LO 5.1.3, EK 5.1.3A, EK 5.1.3C, EK 5.1.3E, EK 5.1.3F")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.3, LO 5.3.1, EK 5.1.1K")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1 ")
        bodyDiv:Add(ccList)

        bodyDiv:AddHeading("Overview", 1)
        bodyDiv:AddParagraph("Begin by downloading the template program for this challenge. This template will compile, but needs to be finished during the challenge. It can be found here:")
        bodyDiv:AddLink("Challenge 5.1 Template", "/files/lessons/chapter5/Challenge5_1Template.zip")


        bodyDiv:AddParagraph("In this assignment, you will have to complete an existing project to create a 
            game using the Quorum game engine, and its primitive 3D shapes. In this game, you will move in first 
            person in the terrain. The character is the camera moving in the 3D field. Most of the locations 
            are already coded, but when you have finished the exercises, you can try modifying the game to make the world your own.")
        bodyDiv:AddHeading("Goal 1: Practice with Class Actions", 2)
        bodyDiv:AddParagraph("Your first goal will be to build a forest in your game. You have already been given the complete class Tree. 
            A tree in this gameis composed of two boxes: one very thin, long, and brown box, and a green cube at the top of the first. 
            They both are " + dq + "added" + dq + " to the Tree class so they are bound to each other, and one cannot exist without the other. 
            This is the ideal way to create models that are made of several primitives.")
        bodyDiv:AddHeading("Template: Tree class", 2)
        bodyDiv:AddParagraph("Read through the Tree class, and see if you understand what the code says.")


        PreformattedText pre7
        bodyDiv:Add(pre7)
        pre7:AddAttribute("class", "code")
        CodeBlock code8
        code8:AddText(
"use Libraries.Game.Graphics.Model
use Libraries.Compute.Vector3
use Libraries.Game.Game
use Libraries.Game.Graphics.Color

class Tree is Model


    action createTree(number size, Vector3 vPos)  
        Color brown
            brown:SetColor(0.611, 0.4666, 0.31,1)
        Model trunk
            trunk:LoadBox(1.2*size,40*size,1.2*size,brown)

        Color green
            green:SetColor(0.08, 0.35, 0.04,1)
        Model branches
            branches:LoadBox(13*size,13*size,13*size,green)

        me:Add(trunk)
        trunk:Add(branches)

        me:SetPosition(vPos)
        trunk:SetPosition(0,20*size,0)
        branches:SetPosition(0,25*size,0)
    end

end")
        pre7:Add(code8)

        Paragraph treeTemp
        CodeBlock loadBoxCode
        loadBoxCode:AddText("LoadBox()")
        treeTemp:AddText("As you can see, when creating a tree, you choose its size, which will influence how 
            the boxes are scaled when we create the trunk and the treetop. The other thing you have to choose 
            is the position of the tree. The boxes are created by calling the ")
        treeTemp:Add(loadBoxCode)
        treeTemp:AddText(" action on a Model object. Here is an example of adding a tree in your own code.")
        bodyDiv:Add(treeTemp)
        
        CodeBlock addTreeCode
        Span s1
        Span s2
        Span s3
        Span s4
        s1:AddText("//A Vector3 object allows you to set an object in 3D space.")
        s1:AddClassAttribute("comment")
        addTreeCode:Add(s1)
        addTreeCode:Add(break)
        addTreeCode:AddText("Vector3 treePosition" + cr + "treePosition:SetPosition(0,0,0)")
        addTreeCode:Add(break)
        s2:AddText("//This object references the Tree class we made.")
        s2:AddClassAttribute("comment")
        addTreeCode:Add(s2)
        addTreeCode:Add(break)
        addTreeCode:AddText("Tree tree")
        addTreeCode:Add(break)
        s3:AddText("//This line creates one tree with a size of 3 in the position we set earlier (0,0,0).")
        s3:AddClassAttribute("comment")
        addTreeCode:Add(s3)
        addTreeCode:Add(break)
        addTreeCode:AddText("tree:createTree(3,treePosition)")
        s4:AddText("//As with all models, you have to add the tree")
        s4:AddClassAttribute("comment")
        addTreeCode:Add(s4)
        addTreeCode:Add(break)
        addTreeCode:AddText("Add(tree)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(addTreeCode))


        bodyDiv:AddParagraph("Adding trees one by one would be tedious, so we will create a class Forest that will randomly 
            generate trees in an area we define. The template has the start of this class, now you will finish it.")

        Paragraph example1
        Bold example1B
        CodeBlock randomXCode
        CodeBlock randomCode
        CodeBlock returnNumberCode
        randomXCode:AddText("private action randomX()")
        randomCode:AddText("Random")
        returnNumberCode:AddText("returns number")
        example1B:AddText("Example: Complete the ")
        example1B:Add(randomXCode)
        example1B:AddText(" action.")
        example1:Add(example1B)
        example1:Add(break)
        example1:AddText("This action will use a ")
        example1:Add(randomCode)
        example1:AddText(" object to create a random number for the X coordinate of a tree. The action has ")
        example1:Add(returnNumberCode)
        example1:AddText(" after the () because this action gives, or returns, a number.")
        bodyDiv:Add(example1)
       
        CodeBlock example1C
        Span s5
        s5:AddText("//This action is private, meaning it can only be used in the Forest class.")
        s5:AddClassAttribute("comment")
        example1C:Add(s5)
        example1C:Add(break)
        example1C:AddText("private action randomX() returns number")
        example1C:Add(break)
        example1C:AddText( "number r = random:RandomInteger(cast(integer,width/2))" + cr +
                           "    r = r + random:RandomNumber()" + cr +
                           "    boolean b= random:RandomBoolean()" + cr +
                           "        if b =true" + cr +
                           "            return r" + cr +
                           "        else " + cr +
                           "            return -r" + cr +
                           "        end" + cr +
                           "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1C))

        Paragraph activity1
        Bold activity1B
        CodeBlock randomZCode
        randomZCode:AddText("private action randomZ()")
        activity1B:AddText("Activity: Complete the ")
        activity1B:Add(randomZCode)
        activity1B:AddText(".")
        activity1:Add(activity1B)
        activity1:Add(break)
        activity1:AddText("Use the example above to complete the ")
        activity1:Add(randomZCode)
        activity1:AddText(".")
        bodyDiv:Add(activity1)

        bodyDiv:Add(break)

        Paragraph activity2
        Bold activity2B
        CodeBlock createTreesCode
        CodeBlock randomIntegerCode
        createTreesCode:AddText("createTrees()")
        randomIntegerCode:AddText("random:RandomIntegerBetween()")
        activity2B:AddText("Activity: Modify the ")
        activity2B:Add(createTreesCode)
        activity2B:AddText(" action, so that is generates trees in random positions and sizes.")
        activity2:Add(activity2B)
        activity2:Add(break)
        activity2:AddText("Use ")
        activity2:Add(randomXCode)
        activity2:AddText(" and ")
        activity2:Add(randomZCode)
        activity2:AddText(" to set the position of the trees. Use ")
        activity2:Add(randomIntegerCode)
        activity2:AddText(" for the size of the tree. Sizes can be between 1 and 3.")
        bodyDiv:Add(activity2)

        bodyDiv:Add(break)

        Paragraph activity3
        Bold activity3B
        activity3B:AddText("Activity: Use a loop to generate ntree trees.")
        activity3:Add(activity3B)
        activity3:Add(break)
        activity3:AddText("Use a loop ntree times around your code to creat that many trees.")
        bodyDiv:Add(activity3)

        bodyDiv:AddHeading("Goal 2: How to Use the List Structure", 2)
        bodyDiv:AddParagraph("In every game, we want to have a goal. In this case, we will have checkpoints on several parts of the map. 
            We will make the checkpoints spinning cubes on the ground that emit a sound. When you walk over a checkpoint, it disappears and the next one appears.")

        bodyDiv:AddParagraph("Here is an example of code for a single checkpoint, and how you put it in the game.")
        PreformattedText pre22
        bodyDiv:Add(pre22)
        pre22:AddAttribute("class", "code")
        CodeBlock code23
        code23:AddText(
"Vector3 checkPointPosition
checkPointPosition:Set(100,0,0)
AudioCheckPoint ACP 
ACP:createChecPoint(checkPointPosition)")
        pre22:Add(code23)
        bodyDiv:AddParagraph("There must be a call the checkPosition() action in the Update action of main.quourm. This is done for you in the program template.")
        bodyDiv:AddParagraph("As is, the program can only handle one checkPoint at a time. This is not practical 
            if you want several checkPoints, so your need to create multiple objects. The simplest way to do so is to use a data structure. 
            We will use the List structure. If you know arrays, this data structure will be used in a similar way. Here is an example.")

        CodeBlock listExample
        Span s6
        Span s7
        Span s8
        s6:AddText("//This line declares a List of numbers.")
        s6:AddClassAttribute("comment")
        listExample:Add(s6)
        listExample:Add(break)
        listExample:AddText("List<number> list")
        listExample:Add(break)
        s7:AddText("//Use the action Add() to add to a list. The first position is 0, the second is 1, and so on." + cr +
            "//The number you want to add is the parameter, and goes in the ().")
        s7:AddClassAttribute("comment")
        listExample:Add(s7)
        listExample:Add(break)
        listExample:AddText("list:Add(3)" + cr + "list:Add(7)")
        listExample:Add(break)
        s8:AddText("//You retrieve something from the list with the Get() action." + cr +
            "//The position you want to retieve from is the parameter, and goes in the ()")
        s8:AddClassAttribute("comment")
        listExample:Add(s8)
        listExample:Add(break)
        listExample:AddText("number positionOne = list:Get(1)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(listExample))
        bodyDiv:Add(break)

        Paragraph activity4
        Bold activity4B
        activity4B:AddText("Activity: Modify the AudioCheckPoint class to use a List instead of one object.")
        activity4:Add(activity4B)
        activity4:Add(break)
        activity4:AddText("First, you need to change the object " + dq + "coor" + dq + " to a List<Vector3>" + " object, to create the list for the checkpoints. 
            Then, in the AudiCheckPoint class, you need to change parameter to " + dq + "List<Vector3> lst" + dq + ", so the action will use the List. 
             Finally set " + dq + "coor" + dq + " to " + dq + "1st" + dq + ".")
        bodyDiv:Add(activity4)
        bodyDiv:Add(break)

        Paragraph activity5
        Bold activity5B
        CodeBlock checkPositionCode
        checkPositionCode:AddText("checkPosition()")
        activity5B:AddText("Activity: Modify the ")
        activity5B:Add(checkPositionCode)
        activity5B:AddText(" action.")
        activity5:Add(activity5B)
        activity5:Add(break)
        activity5:AddText("Replace the template code with the code below. This will make checkpoints disappear after the player reaches them. 
            It will also set an exception for when the player reaches the final checkpoint and wins.")
        bodyDiv:Add(activity5)
        CodeBlock activity5C
        Span s9
        Span s10
        s9:AddText("//This line keeps the listener going after each checkpoint")
        s9:AddClassAttribute("comment")
        activity5C:Add(s9)
        activity5C:Add(break)
        activity5C:AddText( "aud:EnableLooping()" + cr +
                            "aud:SetListenerPosition(cam:GetPosition())" + cr +
                            "aud:SetListenerDirection(cam:GetDirection())")
        s10:AddText("//The loop uses a counter to track the number of checkpoints, and compare it to the coordinates in the List" + cr +
                    "//It also hides the old checkpoint, and sets the new one.")
        s10:AddClassAttribute("comment")
        activity5C:Add(s10)
        activity5C:Add(break)
        activity5C:AddText( "if count < coor:GetSize()" + cr +
                            "    if cam:GetPosition():GetX() > GetX() + 50 or cam:GetPosition():GetX() < GetX() - 50" + cr +
                            "    or cam:GetPosition():GetZ() > GetZ() + 50 or cam:GetPosition():GetZ() < GetZ() - 50" + cr +
                            "        aud:Stream()" + cr +
                            "    else" + cr +
                            "        count = count +1" + cr +
                            "        if count < coor:GetSize()" + cr +
                            "            aud:SetPosition(coor:Get(count))" + cr +
                            "            SetPosition(coor:Get(count))" + cr +
                            "        else" + cr +
                            "            me:Hide()" + cr +
                            "        end" + cr +
                            "    end" + cr +
                            "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(activity5C))
 
        bodyDiv:AddHeading("Goal 3: How to Add Actions Using the Keyboard", 2)
        Paragraph goal3
        CodeBlock lookAtCode
        CodeBlock cameraCode
        CodeBlock keyboardCode
        CodeBlock mainCode
        lookAtCode:AddText("LookAt()")
        cameraCode:AddText("Camera")
        keyboardCode:AddText("KeyboardListener")
        mainCode:AddText("Main")
        goal3:AddText("If you ever get lost in the game, you might need assistance to find your way to the next checkpoint. 
            This is why we need a way for the player to know where the next checkpoint is. We will use the ")
        goal3:Add(lookAtCode)
        goal3:AddText(" action of the ")
        goal3:Add(cameraCode)
        goal3:AddText(" class. This will get called when we press a certain key. We will need a ")
        goal3:Add(keyboardCode)
        goal3:AddText(" to do this.")
        goal3:Add(break)
        goal3:Add(break)
        goal3:AddText("This is what is in the ")
        goal3:Add(mainCode)
        goal3:AddText(" class, which is already a ")
        goal3:Add(keyboardCode)
        goal3:AddText(". The action that detects when you press a key is already coded.")
        bodyDiv:Add(goal3)

        CodeBlock goal3C
        Span s11
        goal3C:AddText("action PressedKey(KeyboardEvent event)")
        goal3C:Add(break)
        s11:AddText("//This line checks if the letter B was pressed.")
        s11:AddClassAttribute("comment")
        goal3C:Add(s11)
        goal3C:Add(break)
        goal3C:AddText( "    if event:keyCode = event:B" + cr +
                        "        Vector3 point" + cr +
                        "        point:Set(100,100,100)" + cr +
                        "        camera:LookAt(point)" + cr +
                        "    end" + cr +
                        "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(goal3C))

        bodyDiv:AddParagraph("Here, when you press B, the camera looks at the point you just created: 
            (100, 100, 100). You can also directly pass the x,y,z coordinates as a parameter of the action (example: LookAt(100,100,100)).")

        Paragraph activity6
        Bold activity6B
        CodeBlock keyPressedCode
        CodeBlock getCountCode
        keyPressedCode:AddText("PressedKey()")
        getCountCode:AddText("ACP:getCount()")
        activity6B:AddText("Activity: Modify the action, so the player will look towards the next checkpoint.")
        activity6:Add(activity6B)
        activity6:Add(break)
        activity6:AddText("Modify the ")
        activity6:Add(lookAtCode)
        activity6:AddText(" action in the ")
        activity6:Add(keyPressedCode)
        activity6:AddText(" action, so the player will look at the current checkpoint. You will need to use ")
        activity6:Add(getCountCode)
        activity6:AddText(" action to check which checkpoint is up. Setting that action to a new variable, such as count, will simplify your code.
            Remember to set a condition for if count = -1, as the winning condition.")
        bodyDiv:Add(activity6)

        bodyDiv:AddHeading("Collaborate", 2)
        bodyDiv:AddParagraph("Collaboration is an important part of programming. When you work with other programmers, you get other points-of-view 
            that make your programs even better. The final part of this assignment requires Git, a tool for collaborating. 
            Look at the Teams and Version Control Tutorial if you want more information on Git:")
        bodyDiv:AddLink("Teams and Version Control Tutorial", "/tutorials/language/teamsAndVersionControl.html")


        bodyDiv:AddHeading("Collaboration Activity:", 3)
        UnorderedList unorderedList28
        bodyDiv:Add(unorderedList28)
        ListItem listItem29
        unorderedList28:Add(listItem29)
        listItem29:AddText("Create a repository for the Quorum game applications that you will want to share")
        ListItem listItem30
        unorderedList28:Add(listItem30)
        listItem30:AddText("Add your game to your repository")
        ListItem listItem31
        unorderedList28:Add(listItem31)
        listItem31:AddText("Commit and push your repository")
        ListItem listItem32
        unorderedList28:Add(listItem32)
        listItem32:AddText("Invite a friend to your repository to pull your project")
        ListItem listItem33
        unorderedList28:Add(listItem33)
        listItem33:AddText("Have your friend add two more checkpoints in your game (see paragraph below)")
        ListItem listItem34
        unorderedList28:Add(listItem34)
        listItem34:AddText("Have your friend commit and push their change")
        bodyDiv:AddParagraph("Adding two more checkpoints is not a lot of work, but imagine how much help collaboration 
            could be on bigger, more complex projects. When you collaborate, the amount of work each individual programmer 
            has to do gets smaller. However, each programmer is also responsible for communicating what they are doing and what 
            they expect others to do. If you did not tell your friend that he, or she needed to add two checkpoints, the collaboration 
            would not have worked. Communication skills are essential when collaborating. This especially applies to documenting programs. 
            Make sure that your program has informative variable names and comments that help others understand your code. Remember, comments are created with //.
            Look at your templates for examples of comments. When you ask your friend to add two checkpoints, be clear and thank them for collaborating with you.")
        bodyDiv:AddParagraph("Because collaborating means that we work with other programmers more, we have to develop different 
            skills than we need to write programs on our own. Think about your program in sections. What parts of your program depend on other parts? 
            How could you divide the work on one program between two people? Collaborating can help us think of ways to make parts of our program more 
            independent. Think about all of the different classes you were given in this program template. Discuss with a friend, write an email, or post on 
            a social media about how classes can help make program components more independent. While you are sharing, share your Quorum Game. 
            Invite your friends to download and play your game.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how to design a simple virtual world map using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Decorate your Map"
    end

    action GetName returns text
        return "Challenge 5.1"
    end

    action GetShortDescription returns text
        return "a session on creating an in-game map in Quorum"
    end

    action GetLocation returns text
        return "lessons/chapter5/challenge5_1.html"
    end
end