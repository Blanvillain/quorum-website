use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab5_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 5.2:  Introduction to Class Variables and Access Modifiers")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 5.2: Class Variables and Modifiers", 1)
        headDiv:AddText("An Introduction to Class Variables and Access Modifiers")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goals of this lab are to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to apply class scoping to class variables and access class variables outside the class")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create and use accessor actions and access modifiers")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to set up a constructor to initialize class variables")
        ListItem listItem4
        unorderedList0:Add(listItem4)
        listItem4:AddText("More practice with classes")


        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 


        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will learn how to use class variables, accessor actions, access modifiers, and a constructor. You will create a basic Car class to learn and observe how they work with a Main class. You will start with defining and experimenting with class variables, then you will work your way up to using class variables with accessor actions and access modifiers. Next, you will make action calls to a Car object in the Main class and understand how a constructor works. At the end of the lab, you will fine-tune your program by organizing the code and practice more with actions. The goal of this lab is to help you learn and master object-oriented programming, as this is a very important part of programming!")

        AddIDE(bodyDiv, "lab5_2IDE", "Activity:", "You can use this IDE (Integrated Development Environment) for most of your in this lesson instead of using Quorum Studio:")

        bodyDiv:AddHeading("Task 1: Getting Started", 2)
        bodyDiv:AddParagraph("Start Quorum Studio. Create a new Main Application project, and name it Lab5_2. In the Main.quorum file, it should contain a Main class and Main action as shown below:")
        CodeBlock code6
        code6:AddText(
"class Main
    action Main
    end
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code6))
        bodyDiv:AddParagraph("You will create an additional class in the project. In the New File dialog, create a new file by selecting “Quorum” and “Quorum Class” in the Categories and File Types windows, respectively. Then, name the new file Car in the New Quorum Class dialog. The Car class will appear with the following code:")
        CodeBlock code8
        code8:AddText(
"class Car
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code8))
        bodyDiv:AddParagraph("You will fill Car and Main classes with the code in the next four tasks.")
        bodyDiv:AddHeading("Task 2: Creating Class Variables", 2)
        bodyDiv:AddParagraph("You are going to create class variables and experiment with how they work between two classes. There are two ways to control access to class variables: you can use access modifiers and accessor actions (getters and setters) or by making the class variables public. In programming, you typically want to write code that is secure and encapsulated. Encapsulation is one of the four fundamental object oriented programming concepts. It is the technique of making class variables private and providing access to them with public actions. If a variable is private, then it can't be accessed by anything outside of the class is was created in, except through the use of getters and setters. This is also known as data hiding. Encapsualtion gives maintainability, flexibility, and extensibility to your code.")
        bodyDiv:AddParagraph("In the Car class, add two class variables:")
        UnorderedList unorderedList9
        bodyDiv:Add(unorderedList9)
        ListItem listItem10
        unorderedList9:Add(listItem10)
        listItem10:AddText("numberOfDoors is an integer that keeps track of the number of doors on a car. Define it as a public variable and set it to four.")
        ListItem listItem11
        unorderedList9:Add(listItem11)
        listItem11:AddText("color is a text that holds the color of a car. Define it as a private variable and set it to Blue.")
        bodyDiv:AddParagraph("The code should look similar to the following:")
        CodeBlock code13
        code13:AddText(
"class Car
    public integer numberOfDoors = 4
    private text color = " + dq + "Blue" + dq + "
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code13))
        bodyDiv:AddParagraph("Then, in the Main class, you will add the code that will access class variables from the Car class. You will need to create a Car object in order to use its variables and actions. You only have two variables for now, so do the following to access them:")
        UnorderedList unorderedList14
        bodyDiv:Add(unorderedList14)
        ListItem listItem15
        unorderedList14:Add(listItem15)
        listItem15:AddText("Instantiate a Car object.")
        ListItem listItem16
        unorderedList14:Add(listItem16)
        listItem16:AddText("Call the numberOfDoors variable and set it to four.")
        ListItem listItem17
        unorderedList14:Add(listItem17)
        listItem17:AddText("Call the color variable and set it to Blue.")
        bodyDiv:AddParagraph("It should look like the sample code shown below:")
        CodeBlock code19
        code19:AddText(
"class Main
    action Main
        Car car
        car:numberOfDoors = 4
        car:color = " + dq + "Blue" + dq + "
    end
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code19))
        bodyDiv:AddParagraph("Run the program and observe what happens. Answer the following questions:")
        UnorderedList unorderedList20
        bodyDiv:Add(unorderedList20)
        ListItem listItem21
        unorderedList20:Add(listItem21)
        listItem21:AddText("Which variable was accessible to the Main class?")
        ListItem listItem22
        unorderedList20:Add(listItem22)
        listItem22:AddText("Which variable was not accessible to the Main class?")
        ListItem listItem23
        unorderedList20:Add(listItem23)
        listItem23:AddText("What did the compiler error say about an inaccessible variable? Why is it happening?")
        bodyDiv:AddHeading("Task 3: Creating and Using Access Modifiers and Accessor Actions", 2)
        bodyDiv:AddParagraph("Now that you know how to use class variables and control access to them, you are going to apply the class scoping concept to class variables. Class scoping allows you to use class variables anywhere in a class to pass values around and make any changes to the stored values in the variables. You are going to learn how to take advantage of class scoping by creating and calling accesor actions and access modifiers (getters and setters).")
        bodyDiv:AddParagraph("Before you get started with accessor actions and access modifiers, you will need to make changes to class variables in the Car class. Since you are going to use getters and setters, you don’t want variables to be defined public, so you will make them private. The private keyword is optional in Quorum, because Quorum automatically defines class variables as private variables. You will let Quorum do the work for you. Make changes to a Car class to match the following code sample:")
        CodeBlock code25
        code25:AddText(
"class Car
    integer numberOfDoors = 4
    text color = "+dq+"Blue"+dq+"
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code25))
        bodyDiv:AddParagraph("Let's use private class variables to set up accessor actions and access modifiers to allow a Main class to access them. You will start with the numberOfDoors variable. First, create an accessor action and name it GetNumberOfDoors. It has no parameter and returns an integer value for a number of doors on a car. Next, create an access modifier to modify a number of doors on a car. Name it SetNumberOfDoors. It has a parameter and no return value. The parameter is an integer value used for setting a new value for a number of doors. The code should look like the following:")

        CodeBlock code27
        code27:AddText(
"class Car
    integer numberOfDoors = 4
    text color = " + dq + "Blue" + dq + "
    action GetNumberOfDoors returns integer
        return numberOfDoors
    end
    action SetNumberOfDoors(integer value)
        numberOfDoors = value
    end
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code27))
        bodyDiv:AddParagraph("The accessor actions and access modifiers always start with “Get” and “Set” in their names, respectively. This helps you recognize a type of an action and the purpose of its name.")
        bodyDiv:AddParagraph("It’s time to make calls to a Car object! Switch to the Main class. Use a Car object to call both GetNumberOfDoors and SetNumberOfDoors actions. The Main class should look similar to the following:")
        CodeBlock code29
        code29:AddText(
"class Main
    action Main
        Car car
        car:GetNumberOfDoors()
        car:SetNumberOfDoors(2)
    end
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code29))
        bodyDiv:AddParagraph("This basically gives you an idea of how to make action calls to the getters and setters. Modify the code so that it matches the output shown below:")
        PreformattedText pre30
        bodyDiv:Add(pre30)
        pre30:AddAttribute("class", "code")
        CodeBlock code31
        code31:AddText(
"The car has 4 doors.
The car has 2 doors.")
        pre30:Add(code31)
        bodyDiv:AddParagraph("The first call should get the current value of a number of doors. The second call should change a number of doors from four to two. The final call displays a new change that has been made to the numberOfDoors variable.")
        bodyDiv:AddParagraph("Add a getter and setter for the color variable in the Car class. Do the same that you did for the numberOfDoors variable in the Main class. The color of a car should be set to “Black.” The output should match the following:")
        PreformattedText pre32
        bodyDiv:Add(pre32)
        pre32:AddAttribute("class", "code")
        CodeBlock code33
        code33:AddText(
"The car has 4 doors.
The color of a car is Blue.
The car has 2 doors.
The color of a car is Black.")
        pre32:Add(code33)
        bodyDiv:AddHeading("Task 4: Defining a Constructor", 2)
        bodyDiv:AddParagraph("In this task you are going to define a constructor to initialize class variables. When an object is instantiated, a constructor is immediately called to execute the code within a constructor. The constructor can do a variety of things, but you will focus on initializing class variables for this lab. It is always a good practice to initialize variables to the default values in a constructor. For example, if a user does not choose a number of doors and the color of a car, the default values will be used.")
        bodyDiv:AddParagraph("In a Car class, create a constructor between class variables and the first accessor action. In a constructor, initialize numberOfDoors to four and color to Silver. Since you are initializing variables in a constructor, you no longer need to initialize class variables outside the constructor and actions. The code should match the following part of a Car class:")
        CodeBlock code35
        code35:AddText(
"class Car
    integer numberOfDoors = 0
    text color = " + dq + "" + dq + "
    on create
        numberOfDoors = 4
        color = " + dq + "Silver" + dq + "
    end
    action GetNumberOfDoors returns integer
        return numberOfDoors
    end
    …
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code35))
        bodyDiv:AddParagraph("You don’t have to make any changes to the Main class. Run the program and it should still function as before.")
        bodyDiv:AddHeading("Task 5: Fine-tuning Car and Main Classes", 2)
        bodyDiv:AddParagraph("In this final task, you are going to fine-tune a program to add user input checking to the access modifiers in the Car class and enhance the code in the Main class.")
        bodyDiv:AddParagraph("In the Car class, add the user input checking code to two setters based on the following descriptions:")
        UnorderedList unorderedList36
        bodyDiv:Add(unorderedList36)
        ListItem listItem37
        unorderedList36:Add(listItem37)
        listItem37:AddText("The car must have two or four doors. If a user enters an invalid value, then a value will be set to two.")
        ListItem listItem38
        unorderedList36:Add(listItem38)
        listItem38:AddText("The color of a car must be Black, Red, or Silver. If a user enters an invalid value, then a value will be set to Red.")
        bodyDiv:AddParagraph("In the Main class, make action calls to set a number of doors to three and the color of a car to Purple. Output or speak the output to see what happens to the invalid values. The output should look like the following:")
        CodeBlock code40
        code40:AddText(
"The car has 4 doors.
The color of a car is Silver.
The car has 2 doors.
The color of a car is Black.
The car has 2 doors.
The color of a car is Red.")
        preformatter:SetIsQuorumCode(false)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code40))
        preformatter:SetIsQuorumCode(true)
        bodyDiv:AddParagraph("You are going to make one more change to a Main class. You are making a series of action calls with the same code, so you are going to convert them into two separate actions for a better reusability.")
        bodyDiv:AddParagraph("Use the code snippet below to add new actions in a Main class:")
        CodeBlock code42
        code42:AddText(
"/* Action Change has three parameters and no return value. The first
* parameter is a Car object, the second parameter is a number of doors,
* and the third parameter is the color of a car.
* This action modifies the existing values of a number of doors and the
* color of a car.
*/
action Change(Car vehicle, integer numDoors, text color)
   // Insert the code here
end

/* Action Display has one parameter and no return value. The first parameter
* is a Car object.
* This action outputs a number of doors and the color of a car to the user.
*/
action Display(Car vehicle)
   // Insert the code here
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code42))
        bodyDiv:AddParagraph("Notice that you are passing a Car object into actions. This is one of ways to pass an object around in the class. You will learn how to apply the class scoping concept to an object in the next lab.")
        bodyDiv:AddParagraph("Fill these actions with the appropriate code. Call both Change and Display actions with the same values. The program should still function the same with same results in the output as before. Show the work to the instructor.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about class variables (fields) and modifiers (public/private) with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Class Variables and Modifiers"
    end
    action GetName returns text
        return "Lab 5.2"
    end
    action GetShortDescription returns text
        return "an introduction to class variables and access modifiers."
    end
    action GetLocation returns text
        return "lessons/chapter5/lab5_2.html"
    end
end