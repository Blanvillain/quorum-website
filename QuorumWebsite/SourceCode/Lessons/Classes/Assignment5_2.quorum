use Libraries.Web.Page.all
use Libraries.Containers.Array

class Assignment5_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 5.2: Recursion")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(headDiv, "Assignment 5.2: Recursion", 1)
        headDiv:AddText("When actions Call Themselves")
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:AddClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:AddClassAttribute("list-disc list-outside pl-8")
        section_goals:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Recursion and how it's used")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to identify reusable components from existing code")

        Section section_csp_curriculum
        section_csp_curriculum:AddClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        
        section_csp_curriculum:Add(list)

        Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_standards, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 

        Section section_overview
        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("In this assignment you will be modifying Assignment 5.1, where you had to create a radio which played a user-determined station for a user-determined length of time. It also had you create two separate files for your source code, and taught you how to save the Station class to an existing package.")
        section_overview:AddParagraph("You will be changing the play action in the Station class to use recursion instead of a repeat statement. Recursion is when a function calls itself, and each time it calls itself it moves closer and closer to meeting its end condition. An end condition is a condition that, when met, the recursive action stops calling itself. An example of this is having an end condition be when some integer variable is 0. This end condition is technically termed the base case.")

        Section section_factorial
        AddHeading(section_factorial, "Factorial Example", 2)
        section_factorial:AddParagraph("The code below calculates the factorial of a given number using recursion. The factorial of a number is the multiplication of that number with all integers smaller than it, but greater than or equal to 1. For example, in Quorum, one might hard code the factorial of 5 as:")
        CodeBlock code4
        code4:AddText("integer FactorialOfFive = 5 * 4 * 3 * 2 * 1")
        section_factorial:Add(preformatter:GeneratePreformattedCode(code4))
        section_factorial:AddParagraph("which is the integer value 120.")
        CodeBlock code6
        code6:AddText(
"action Main
    integer a = Factorial(5)
    output " + dq + "a is equal to" + dq + " + a

end

action Factorial (integer num) returns integer
    // This is the " + dq + "base case" + dq + " condition. You want to stop multiplying integers when you reach one. Otherwise, you will compute the wrong answer, particularly if you mistakenly multiply by 0!
    if num <= 1
         return 1
    else
         // This is the recursive step.
         return Factorial(num-1) * num 
    end
end")
        section_factorial:Add(preformatter:GeneratePreformattedCode(code6))
        PreformattedText pre7
        section_factorial:Add(pre7)
        pre7:AddAttribute("class", "code")
        CodeBlock code8
        code8:AddText("" + dq + "a is equal to 120" + dq + "")
        pre7:Add(code8)
        section_factorial:AddParagraph("What's happening in this example is that the end condition, also called a base case is:")
        CodeBlock code10
        code10:AddText(
"if num <= 1 then
return 1")
        section_factorial:Add(preformatter:GeneratePreformattedCode(code10))
        section_factorial:AddParagraph("This is the condition that will stop the recursive calls when it's met. The original call to that action, 5 in this case, got passed into the factorial function and started the recursive chain. After it ran through the function the first time it got to:")
        CodeBlock code12
        code12:AddText("return Factorial(num-1) * num")
        section_factorial:Add(preformatter:GeneratePreformattedCode(code12))
        section_factorial:AddParagraph("Thus calling itself, the Factorial action, with num -1. Num is now one step closer to the base case, which is equal to or less than one. Consider what would happen if you used an addition operator in place of the subtraction operator. Would the program ever end? What about if num wasn't changed in the function?")
        section_factorial:AddParagraph("An important take-away from this is that recursive actions have to have parameters to communicate with themselves. Without parameters there is no way for a recursive action to call itself while working towards a base case. What would happen if the recursive action was instead:")
        CodeBlock code14
        code14:AddText(
"action Factorial() returns integer
    if num <= 1 then
         return 1
    end else then
         num-1
         return Factorial() * num 
    end
end")
        section_factorial:Add(preformatter:GeneratePreformattedCode(code14))
        section_factorial:AddParagraph("In that code example there is no way for the recursive action to pass the information that num got decremented by 1 to the next action call. It would go into an infinite loop and crash the program.")

        Section section_design_criteria
        section_design_criteria:AddClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_design_criteria, "Design Criteria", 2)
        UnorderedList unorderedList15
        unorderedList15:AddClassAttribute("list-disc list-outside pl-8")
        section_design_criteria:Add(unorderedList15)
        ListItem listItem16
        unorderedList15:Add(listItem16)
        listItem16:AddText("Open your project from 5.1")
        ListItem listItem17
        unorderedList15:Add(listItem17)
        listItem17:AddText("In your Station.quorum file delete the contents of the Play action, keeping the action declaration and end statement. Leaving you with:")
        CodeBlock code19
        code19:AddText("private action Play(integer time, integer note) returns integer

end")
        section_design_criteria:Add(preformatter:GeneratePreformattedCode(code19))
        ListItem listItem20
        unorderedList15:Add(listItem20)
        listItem20:AddText("Inside this action use a Music object to play a series of notes, up to 10. For example: 
        music:Play(note, .1)
        music:Play(note+3, .1)
        ...")
        PreformattedText pre21
        listItem20:Add(pre21)
        pre21:AddAttribute("class", "code")
        CodeBlock code22
        code22:AddText(
"music:Play(note, .1)
music:Play(note+3, .1)
...")
        pre21:Add(code22)
        UnorderedList unorderedList23
        unorderedList23:AddClassAttribute("list-disc list-outside pl-8")
        section_design_criteria:Add(unorderedList23)
        ListItem listItem24
        unorderedList23:Add(listItem24)
        listItem24:AddText("Establish a base case that one of your parameters will meet")
        ListItem listItem25
        unorderedList23:Add(listItem25)
        listItem25:AddText("Complete the recursive function by appropriately calling the Play action")

        Section section_sample_output
        section_sample_output:AddClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_sample_output, "Sample Output", 2)
        section_sample_output:AddParagraph("Entering an invalid time")
        PreformattedText pre26
        section_sample_output:Add(pre26)
        pre26:AddAttribute("class", "code")
        CodeBlock code27
        code27:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "3" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "0" + dq + "
" + dq + "Incorrect input. Please try again." + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "" + dq + "
" + dq + "6" + dq + "")
        pre26:Add(code27)
        section_sample_output:AddParagraph("Entering an invalid station")
        PreformattedText pre28
        section_sample_output:Add(pre28)
        pre28:AddAttribute("class", "code")
        CodeBlock code29
        code29:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "5" + dq + "
" + dq + "Incorrect input. Please try again." + dq + "
output] " + dq + "Please select your station (1-4):" + dq + "
" + dq + "4" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "10" + dq + "")
        pre28:Add(code29)
        section_sample_output:AddParagraph("Entering valid information")
        PreformattedText pre30
        section_sample_output:Add(pre30)
        pre30:AddAttribute("class", "code")
        CodeBlock code31
        code31:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "2" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "19" + dq + "")
        pre30:Add(code31)

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_factorial)
        bodyDiv:Add(section_design_criteria)
        bodyDiv:Add(section_sample_output)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to code recursive actions when problem solving using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Recursion"
    end
    action GetName returns text
        return "Assignment 5.2"
    end
    action GetShortDescription returns text
        return "an introduction to recursion."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter5/assignment5_2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Classes"
    end
end
