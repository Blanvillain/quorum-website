use Libraries.Web.Page.all
use Libraries.Containers.Array

class Lab5_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 5.1:  Practicing Classes")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Lab 5.1: Practicing Classes", 1)
        headDiv:AddText("An Introduction to Classes and Objects")
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:AddClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goals of this lab are to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:AddClassAttribute("list-disc list-outside pl-8")
        section_goals:Add(unorderedList0)

        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to create a class")

        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to write actions for an existing class")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to understand class & action syntax")

        Section section_csp_curriculum
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        section_csp_curriculum:Add(list)

        Section section_standards
        AddHeading(section_standards, "Common Core Standards ", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 


        Section section_overview
        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("In this lab you will learn about classes and how they can be used. You will start by looking at the code for a basic class named Animal. You will then code a few simple lines for the class and can then observe how you're able to change the class's attributes. The goal of this lab is to give you a foundation in classes needed for moving onto the next labs and subsequent programming assignments.")

        AddIDE(section_overview, "lab5_1IDE", "Activity:", "//You can use this IDE (Integrated Development Environment) for all your coding in this lesson instead of using Sodbeans:", true)

        Section section_task1
        AddHeading(section_task1, "Task 1: Getting started", 2)
        section_task1:AddParagraph("First, start Sodbeans. You will create a new project; however, you will not be creating a blank application this time. Instead, in the New Project dialog, select " + dq + "Quorum Application." + dq + " You must select this option when using actions due to the way Quorum understands your programs. (We will discuss this later in Chapter 5). Name the project " + dq + "FunWithAnimals" + dq + ".")
        section_task1:AddParagraph("When your project opens in Sodbeans, main.quorum will contain the code listed below. You will be typing your code in two different locations--between action Main and the first end, and between class Main and the second end.")
        CodeBlock code4
        code4:AddText(
"class Main
    action Main
    end
end")
        section_task1:Add(preformatter:GeneratePreformattedCode(code4))

        Section section_task2
        section_task2:AddClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_task2, "Task 2: Creating Basic Actions", 2)
        section_task2:AddParagraph("First, you will create the foundation of your code.")

        CodeBlock code6
        code6:AddText(
"class Animal
    action Main
    end
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code6))
        section_task2:AddParagraph("This sets your class name to Animal. Now you will code a few characteristics of animals. You will start with common things like number of arms, and the animal's color.")
        CodeBlock code8
        code8:AddText(
"class Animal
    integer arms = 2
    text color = " + dq + "brown" + dq + "
    action Main
    end
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code8))
        section_task2:AddParagraph("So now your animal has two arms and is brown. From this point you want to output the animal's existing characteristics, so you are going to put an output line in Main that has some text in it, as well as the variables you just coded. We have coded the output statement to show the number of arms the animal has, but it's your job to code the output statement for it's color.")
        CodeBlock code10
        code10:AddText(
"class Animal
    integer arms = 2
    text color = " + dq + "brown" + dq + "
    action Main
        output " + dq + "The animal has " + dq + " + arms + " + dq + " arms." + dq + "
    end
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code10))
        section_task2:AddParagraph("So now you're telling the user a few things about your animal. Add legs and adjust your output statement as well.")
        section_task2:AddParagraph("But what if the user would like to change the animal?")
        section_task2:AddParagraph("Next you're going to code a few actions for your class that will change the variables. These are called methods when they're actions for a class, and they're an integral part of class development.")
        section_task2:AddParagraph("Reusability is a fundamental part of programming, so you're going to move the output statements into their own method (called actions in Quorum), called Display. The skeleton code is provided for you. Don't forget to call the Display method once you're finished.")
        CodeBlock code12
        code12:AddText(
"class Animal
    integer arms = 2
    text color = " + dq + "brown" + dq + "
    action Main
        output " + dq + "The animal has " + dq + " + arms + " + dq + " arms and " + dq + " + legs + " + dq + " legs." + dq + "
    end
    action Display
    end
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code12))
        section_task2:AddParagraph("So now your program has the same functionality as before, but it's been decomposed into a method. One great benefit of this is that you're able to reuse that method now, without having to type it all out again. Reusability is a big time-saver and really simplifies your program.")
        section_task2:AddParagraph("The next thing that you're going to do is create three more methods that change the characteristics of the animal. This way the user can create their own animal with any number of legs, arms, and color.")
        section_task2:AddParagraph("So you're going to name the actions " + dq + "Change(NameOfAttribute)" + dq + "...ChangeArms for example. Inside these actions you're going to ask the user to enter a number or text. Then you're going to reassign the already created variables to what the user entered. Before you can do that though you have to cast the user's entry from a text to an integer.")
        section_task2:AddParagraph("You also need to be sure that you call those actions from within the Main.")
        section_task2:AddParagraph("One action is provided for you. It's your job to write the other actions that will allow the user to change the animal's color and legs.")
        section_task2:AddParagraph("Once you're finished with writing those actions you should call the Display method again so the user can see that the changes made have been saved.")
        CodeBlock code14
        code14:AddText(
"class Animal
    integer arms = 2
    text color = " + dq + "brown" + dq + "
    action Main
    end
    action Display
    end
    action ChangeArms
        output " + dq + "How many arms would you like your animal to have?" + dq + "
        text result = input(" + dq + "Number of Arms" + dq + ")
        integer v = cast(integer, result)
        arms = v
    end
    action ChangeColor
    end
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code14))
        section_task2:AddParagraph("From this foundation you should be able to code a few more characteristics, and a few more actions. Most animals have legs, so let's add a legs variable similar to your arm variable if you haven't already. Let's also add a variable so you can give your animal a name like " + dq + "Fido." + dq + " Don't forget to add actions that allow the user to change those variables as well.")
        section_task2:AddParagraph("So by the time you're finished you should have 4 variables: arms, legs, name, and color. It should also have these 5 actions: " + dq + "Display" + dq + ", " + dq + "ChangeArms" + dq + ", " + dq + "ChangeLegs" + dq + ", " + dq + "ChangeColor" + dq + ", and " + dq + "ChangeName" + dq + ".")

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_task1)
        bodyDiv:Add(section_task2)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about classes and abstraction with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Classes"
    end
    action GetName returns text
        return "Lab 5.1"
    end
    action GetShortDescription returns text
        return "an introduction to classes and objects."
    end
    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter5/lab5_1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Classes"
    end
end
