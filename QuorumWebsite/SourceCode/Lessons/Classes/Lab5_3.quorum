use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.Section
use Libraries.Containers.Array
use Libraries.Web.Page.Link

class Lab5_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 5.3:  Practicing Arrays")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header

        Header headDiv
        headDiv:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(headDiv, "Lab 5.3: Practicing Arrays", 1)
        headDiv:AddText("An Introduction to Using Arrays")
        bodyDiv:Add(headDiv)

        //goals
        Section section_goals
        section_goals:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goals of this lab are to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:SetClassAttribute(GetDefaultListStyle())
        section_goals:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Understand the basic concepts of an array container (data structure)")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create and modify arrays")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to apply generic concepts to an array")
        ListItem listItem4
        unorderedList0:Add(listItem4)
        listItem4:AddText("More practice with class and object concepts")

        //curriculum
        Section section_csp_curriculum
        section_csp_curriculum:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList unorderedList5
        unorderedList5:SetClassAttribute(GetDefaultListStyle())
        section_csp_curriculum:Add(unorderedList5)
        ListItem listItem6
        unorderedList5:Add(listItem6)
        listItem6:AddText("Big Idea: Abstraction: EU 2.1, LO 2.1.1, EK 2.1.1A, EK 2.1.1C")
        ListItem listItem7
        unorderedList5:Add(listItem7)
        listItem7:AddText("Big Idea: Abstraction: EU 2.2, LO 2.2.1, EK 2.2.1A, EK 2.2.1B, EK 2.2.1C")
        ListItem listItem8
        unorderedList5:Add(listItem8)
        listItem8:AddText("Big Idea: Abstraction: EU 2.2, LO 2.2.2, EK 2.2.2A, EK 2.2.2B")
        UnorderedList unorderedList9
        unorderedList9:SetClassAttribute(GetDefaultListStyle())
        section_csp_curriculum:Add(unorderedList9)
        ListItem listItem10
        unorderedList9:Add(listItem10)
        listItem10:AddText("Big Idea: Data and Information: EU 3.1, LO 3.1.1, EK 3.1.1C")
        ListItem listItem11
        unorderedList9:Add(listItem11)
        listItem11:AddText("Big Idea: Data and Information: EU 3.1, LO 3.1.3, EK 3.1.3A, EK 3.1.3B, EK 3.1.3E")
        ListItem listItem12
        unorderedList9:Add(listItem12)
        listItem12:AddText("Big Idea: Data and Information: EU 3.2, LO 3.2.1, EK 3.2.1G, EK 3.2.1H, EK 3.2.1I")
        
        //common core
        Section common_core
        common_core:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(common_core, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:SetClassAttribute(GetDefaultListStyle())
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.8")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1  ")
        common_core:Add(ccList)

        Section vocab
        vocab:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(vocab, "Vocabulary", 2)
        UnorderedList unorderedList13
        unorderedList13:SetClassAttribute(GetDefaultListStyle())
        vocab:Add(unorderedList13)
        ListItem listItem14
        unorderedList13:Add(listItem14)
        listItem14:AddText("Array")
        ListItem listItem15
        unorderedList13:Add(listItem15)
        listItem15:AddText("Container")
        ListItem listItem16
        unorderedList13:Add(listItem16)
        listItem16:AddText("Data Structure")
        ListItem listItem17
        unorderedList13:Add(listItem17)
        listItem17:AddText("Generic")
        ListItem listItem18
        unorderedList13:Add(listItem18)
        listItem18:AddText("Indexed")
        ListItem listItem19
        unorderedList13:Add(listItem19)
        listItem19:AddText("Metadata")
        ListItem listItem20
        unorderedList13:Add(listItem20)
        listItem20:AddText("Inventory")
        ListItem listItem21
        unorderedList13:Add(listItem21)
        listItem21:AddText("Spawning")
        ListItem listItem22
        unorderedList13:Add(listItem22)
        listItem22:AddText("Vector")

        Section overview
        overview:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(overview, "Overview", 2)
        overview:AddParagraph("First, we will have a quick overview of Array objects and how to use them, and then you will be shown how to use Arrays in an example: an inventory in a video game. You will need the following template for this task:")
        Link link = overview:AddLink("Lab 5.3 Template", "/files/lessons/chapter5/Lab5_3Template.zip")
        link:AddClassAttribute(GetDefaultLinkStyle())

        Section goal1
        goal1:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal1, "Goal 1 : The main characteristics of arrays", 2)
        goal1:AddParagraph("Before you start working with your game, let’s review the definition of an array. An array is an indexed data structure or container. The rules of using an array are the following:")
        UnorderedList unorderedList23
        unorderedList23:SetClassAttribute(GetDefaultListStyle())
        goal1:Add(unorderedList23)
        ListItem listItem24
        unorderedList23:Add(listItem24)
        listItem24:AddText("It can hold any number of items.")
        ListItem listItem25
        unorderedList23:Add(listItem25)
        listItem25:AddText("It must use the same type (primitive or object) for items in the array.")
        ListItem listItem26
        unorderedList23:Add(listItem26)
        listItem26:AddText("It always starts with 0 for an index. Items are stored in sequence and associated with an index or location in the array.")
        

        Section goal2
        goal2:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goal2, "Goal 2 : Spawning Pickables and putting them in an inventory", 2)
        goal2:AddParagraph("Start by opening the project you downloaded at the beginning of this lesson. Now that remember some of the characteristics of arrays, you will use them to build an inventory in a 3D game. The goal is to make a simple game: you walk on a flat map, pick up cubes and cylinders that spawn randomly, and store them into your inventory. When you have enough cubes and cylinders, you win. If too much time passes, you lose. Look over the template and notice how the world was created...we have
        classes for the forest, sky, terrain, trees, etc. We're also using sound files for the footsteps and other sound affects.")
        

        Section activity1
        activity1:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(activity1, "Activity: Create a PickableSpawner", 3)
        activity1:AddParagraph("On our map, we will have several pickable objects. Each of these objects are of the class Pickable. This class has a action which creates either a cube or a cylinder of a random color. We want to put several of these Pickable objects on our map, and to keep a trace of them. For this purpose we will create class PickableSpawner. The purpose of this class is to create a certain amount of pickables within a certain area, and to store them in an Array. In the code provided class PicakbleSpawner has several actions. First, action Create(number width, number depth, integer nb, Game game) will set the attributes of our object. 'Width' and 'Depth' are used to know the size of the area where the pickables will spawn, 'nb' sets the number of pickables that will spawn at a time, and 'game' is the current Game. The pickables will, by default, spawn around the origin, but you could add another parameter that would set the center around which pickables will spawn.")
        activity1:AddParagraph("In order to create a pickable object, you need just one parameter: a Vector3 that represents the position at which the pickable will be created. This is how a pickable would be created with a Vector3 called position:")
        CodeBlock code38
        code38:AddText(
"Pickable pickable
pickable:CreatePickable(position)")
        activity1:Add(preformatter:GeneratePreformattedCode(code38))
        activity1:AddParagraph("You will need to complete two actions. First, action Spawn(). This action's goal is to create all the pickables, and to put them in an Array. The Array is an attribute of the class: Array<Pickable> pickables. In order to set the position Vector3, you will have to use two already written actions: randomX() and randomZ(). Both of these actions will generate a random number: one according to the width of the ground, and the other according to the length. The Y value of the position vector should always be 50. Each time a pickable is instantiated, it should be added to the array immediately. Then call its CreatePickable action. You will need to use a loop to do all of this. A related example below shows how to Add all the integers from one to ten into an Array:")
        CodeBlock code40
        code40:AddText(
"Array<integer> example
integer i = 1
repeat 10 times
    example:Add(i)
    i = i+1
end")
        activity1:Add(preformatter:GeneratePreformattedCode(code40))
        activity1:AddParagraph("Based on this example, write the Spawn() action, so that max new pickables will be instantiated, added to the pickables array, and then created using CreatePickable().")
        activity1:AddParagraph("The second action is action AddAll(). It goes through the Array of pickables, and Adds them to the game. For this action too, you will need a loop. This related example shows how to output every number from the array created in the previous example.")
        CodeBlock code42
        code42:AddText(
"integer c = 0
repeat 10 times
    output example:Get(c)
    c = c+1
end")
        activity1:Add(preformatter:GeneratePreformattedCode(code42))
        activity1:AddParagraph("Now, based on this example, finish the AddAll() action.")

        Section activity2
        activity2:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(activity2, "Activity : Create the Inventory", 3)
        activity2:AddParagraph("You can now spawn pickables in your game. Next we want the player to be able to pick them up and to put them in the inventory. For this purpose, we create the class Inventory. This class has 3 attributes : An array containing every pickable the player has picked up, and two numbers: metadata representing how many cubes and how many cylinders the player has. The most important action of this class is action PickUp(Camera cam, Array<Pickable> pickables). This action is called every time the space key is pressed. The parameter 'cam' is used to see if the player is next to a pickable. The parameter 'pickables' is actually the same Array that was created in the class PickableSpawner. The game passes this array to the action, so the inventory knows all the pickables not yet picked up, and their position. First you will have to finish this action. Code what happens when a pickable is next to the player. The pickable should be:")
        UnorderedList unorderedList43
        unorderedList43:SetClassAttribute(GetDefaultListStyle())
        activity2:Add(unorderedList43)
        ListItem listItem44
        unorderedList43:Add(listItem44)
        listItem44:AddText("Added to the Array in the Inventory")
        ListItem listItem45
        unorderedList43:Add(listItem45)
        listItem45:AddText("Removed from the game.")
        ListItem listItem46
        unorderedList43:Add(listItem46)
        listItem46:AddText("Removed from the Array in PickableSpawner.")
        activity2:AddParagraph("Here is how to remove something from an Array at a certain position: example:RemoveAt(0). To make the Pickable disappear from the game, use action Destructor() from the Pickable class. Another important action is action Number(). It provides metadata (data about our data): how many cubes and cylinders are in the inventory. Write this action using loops. Every pickable has a description when it is created in the class Pickable. Use the action GetDescription() to know whether a pickable is a cube or a cylinder. A related example can be found below. This code will count how many even and odd numbers are held in an Array of integers called 'example'")
        CodeBlock code48
        code48:AddText(
"integer i = 0
integer NEven = 0
integer NUneven = 0
repeat example:GetSize() times
    if example:Get(i) mod 2 = 0
        NEven = NEven + 1
    else NUneven = NUneven + 1
    end
    i = i +1")
        activity2:Add(preformatter:GeneratePreformattedCode(code48))
        activity2:AddParagraph("Now, based on this example, in the action PickUp(), implement the loop to calculate the metadata (count how many cylinders and cubes are held in the pickables array). Now you can play your game. Remember you will need to press the space key to pick up the Pickables. Good luck!")

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(common_core)
        bodyDiv:Add(vocab)
        bodyDiv:Add(overview)
        bodyDiv:Add(goal1)
        bodyDiv:Add(goal2)
        bodyDiv:Add(activity1)
        bodyDiv:Add(activity2)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Practice using generics and arrays for storing data in memory with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Arrays"
    end
    action GetName returns text
        return "Lab 5.3"
    end

    action GetShortDescription returns text
        return "an introduction to arrays."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter5/lab5_3.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Classes"
    end
end