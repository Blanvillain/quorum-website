use Libraries.Web.Page.all
use Libraries.Containers.Array

class Assignment5_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 5.1: Input Validation and Multiple Files")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(headDiv, "Assignment 5.1: Input Validation and Multiple Files", 1)
        headDiv:AddText("How to use multiple files and validate input")
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goals of this assignment are to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:SetClassAttribute("list-disc list-outside pl-8")
        section_goals:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to validate user input")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create class methods")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to place source code in multiple files")

        Section section_csp_curriculum
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:SetClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        section_csp_curriculum:Add(list)

        Section section_standards
        section_standards:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_standards, "Common Core Standards ", 2)
        UnorderedList ccList
        ccList:SetClassAttribute("list-disc list-outside pl-8")
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 
        
        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("In this assignment you will be creating a program that mimics a radio. The user will be able to select from 1 of 4 stations and each station will play a different tune. The user will also be able to set how long the tune plays for.")
        section_overview:AddParagraph("The duration and station input from the user must be checked for correctness. These values will be verified in the Main class, and then passed to the Station class. The Station class will be responsible for playing the music after receiving the station and duration input. The Main class will be responsible for asking the user for these values. You will learn about how to use separate files, and how to utilize the classes you define in them. Create a new assignment and label it Assignment 5_1.")


        Section section_class_main
        section_class_main:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_class_main, "Class Main", 2)
        section_class_main:AddParagraph("Class Main should have the following actions:")
        UnorderedList unorderedList4
        unorderedList4:SetClassAttribute("list-disc list-outside pl-8")
        section_class_main:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("action StationCheck(integer station) returns boolean: StationCheck should check to make sure the integer value passed in is between 1 and 4, inclusively. This means the value can be either 1, 2, 3, or 4. If the value passed in is valid, then this action should return true. If the value is not valid, it should output an error message and then return false.")
        ListItem listItem6
        unorderedList4:Add(listItem6)
        listItem6:AddText("action GetStation returns integer: GetStation should ask the user to input a station (1-4) and then return the integer they enter. It should continue to ask for a station until the user enters a valid station number.")
        ListItem listItem7
        unorderedList4:Add(listItem7)
        listItem7:AddText("action TimeCheck(integer time) returns boolean: TimeCheck will do the same things that StationCheck does: it should check if the integer passed in is between 1 and 20, inclusively. If it is, then it should return true. If not, output an error message and return false.")
        ListItem listItem8
        unorderedList4:Add(listItem8)
        listItem8:AddText("action GetTime() returns integer: GetTime should ask the user to input an integer between 1 and 20 inclusively, and then return that integer value. It should continue to ask the user for a value until a valid one is given.")

        Section section_class_station
        section_class_station:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_class_station, "Class Station", 2)
        section_class_station:AddParagraph("Class Station should have the following actions:")
        UnorderedList unorderedList9
        unorderedList9:SetClassAttribute("list-disc list-outside pl-8")
        section_class_station:Add(unorderedList9)
        ListItem listItem10
        unorderedList9:Add(listItem10)
        listItem10:AddText("private action Play(integer time, integer note) Play should use the Play action from the Music library to play the note passed for the duration of time(the first integer passed in).")
        ListItem listItem11
        unorderedList9:Add(listItem11)
        listItem11:AddText("action Station(integer note, integer time): Station should use action Play from above using the parameters passed in to Station as the parameters needed for Play.")

        Section section_separate_files
        AddHeading(section_separate_files, "Using Separate Files", 2)
        UnorderedList unorderedList12
        unorderedList12:SetClassAttribute("list-disc list-outside pl-8")
        section_separate_files:Add(unorderedList12)
        ListItem listItem13
        unorderedList12:Add(listItem13)
        listItem13:AddText("Make sure to include " + dq + "package Music.Players" + dq + " at the top of the Station.quorum file. 
                    package Music.Players")
        PreformattedText pre14
        listItem13:Add(pre14)
        pre14:AddAttribute("class", "code")
        CodeBlock code15
        code15:AddText("package Music.Players")
        pre14:Add(code15)
        ListItem listItem16
        unorderedList12:Add(listItem16)
        listItem16:AddText("Include the following use statement: " + dq + "use Music.Players.Station" + dq + " at the top of the main.quorum file. 
                    ")
        PreformattedText pre17
        listItem16:Add(pre17)
        pre17:AddAttribute("class", "code")
        CodeBlock code18
        code18:AddText("use Music.Players.Station")
        pre17:Add(code18)
        ListItem listItem19
        unorderedList12:Add(listItem19)
        listItem19:AddText("The first statement is saving the class Station into the Music.Players library.")
        ListItem listItem20
        unorderedList12:Add(listItem20)
        listItem20:AddText("The second statement is responsible for making that specific class available to the main.quorum file. This way the user can call the class by simply typing the class name, then a variable name: 
                    'Station radio'")
        PreformattedText pre21
        listItem20:Add(pre21)
        pre21:AddAttribute("class", "code")
        CodeBlock code22
        code22:AddText("Station radio")
        pre21:Add(code22)
        ListItem listItem23
        unorderedList12:Add(listItem23)
        listItem23:AddText(
"Now any public methods of the Station class can be called by typing the variable of the Station class, in this case radio, like so: 
radio:<action name>(parameter(s))")
        PreformattedText pre24
        listItem23:Add(pre24)
        pre24:AddAttribute("class", "code")
        CodeBlock code25
        code25:AddText("radio:<action name>(parameter(s))")
        pre24:Add(code25)

        Section section_other_information
        section_other_information:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_other_information, "Other Information", 2)
        UnorderedList unorderedList26
        unorderedList26:SetClassAttribute("list-disc list-outside pl-8")

        section_other_information:Add(unorderedList26)
        ListItem listItem27
        unorderedList26:Add(listItem27)
        listItem27:AddText("Before you begin, think about how you might change the note that's played based only on the user's input")
        ListItem listItem28
        unorderedList26:Add(listItem28)
        listItem28:AddText("If you use a repeat statement, and don't change the variable you're using for the note, it will play the same sound for as long as the user specified")
        ListItem listItem29
        unorderedList26:Add(listItem29)
        listItem29:AddText("Within the repeat structure you're able to change the variable, so consider how you might change it to make it a more complex sound, rather than playing one note over and over again")
        ListItem listItem30
        unorderedList26:Add(listItem30)
        listItem30:AddText("Another consideration is that you want to make unique sounds for each station selected, but the human ear has a limited range of pitches that it is able to hear. It might take some tinkering, but try to make it so that every station played produces an audible sound.")
        ListItem listItem31
        unorderedList26:Add(listItem31)
        listItem31:AddText("Reminder: when you want to speak a word in the Sodbeans environment, you can use the say statement. However, if you want to output a word to the Sodbeans output window, you must use an output statement. Be aware of these differences when completing this assignment.")

        Section section_sample_output
        section_sample_output:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_sample_output, "Sample Output", 2)
        section_sample_output:AddParagraph("Entering an invalid time")
        PreformattedText pre32
        section_sample_output:Add(pre32)
        pre32:AddAttribute("class", "code")
        CodeBlock code33
        code33:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "3" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "0" + dq + "
" + dq + "Incorrect input. Please try again." + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "" + dq + "
" + dq + "6" + dq + "")
        pre32:Add(code33)
        section_sample_output:AddParagraph("Entering an invalid station")
        PreformattedText pre34
        section_sample_output:Add(pre34)
        pre34:AddAttribute("class", "code")
        CodeBlock code35
        code35:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "5" + dq + "
" + dq + "Incorrect input. Please try again." + dq + "
" + dq + "Please select your station (1-4):" + dq + "
" + dq + "4" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "10" + dq + "")
        pre34:Add(code35)
        section_sample_output:AddParagraph("Entering valid information")
        PreformattedText pre36
        section_sample_output:Add(pre36)
        pre36:AddAttribute("class", "code")
        CodeBlock code37
        code37:AddText(
"" + dq + "Please select your station (1-4):" + dq + "
" + dq + "2" + dq + "
" + dq + "How long do you want to play? (1-20):" + dq + "
" + dq + "19" + dq + "")
        pre36:Add(code37)

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_class_main)
        bodyDiv:Add(section_class_station)
        bodyDiv:Add(section_separate_files)
        bodyDiv:Add(section_other_information)
        bodyDiv:Add(section_sample_output)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to write programs with multiple files and to validate user input with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Input Validation and Multiple Files"
    end
    action GetName returns text
        return "Assignment 5.1"
    end
    action GetShortDescription returns text
        return "an introduction to validating input and using multiple files."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter5/assignment5_1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Assignment 5"
    end
end
