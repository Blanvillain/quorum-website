use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.all

class Assignment3_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 3.3: Key Press Madness - Audio - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 3.3: Key Press Madness - Audio", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("In this assignment, we will practice the following computer science concepts")
        
        UnorderedList goalsList
        goalsList:AddListItem("Using conditional statements")
        goalsList:AddListItem("Using logical operations")
        bodyDiv:Add(goalsList)


       bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.3, EK 1.2.3A")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.2, LO 5.2.1, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.2.1F")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1  ")
        bodyDiv:Add(ccList)


        bodyDiv:AddHeading("Overview", 2)

        Paragraph p1
        CodeBlock gamesCode
        CodeBlock audioCode
        CodeBlock inputMonitorCode
        CodeBlock keyboardEventCode
        gamesCode:AddText("Games")
        audioCode:AddText("Audio")
        inputMonitorCode:AddText("InputMonitor")
        keyboardEventCode:AddText("KeyboardEvent")
        p1:AddText("This lab demonstrates how to map certain sounds to specific keys on the keyboard. When that key is pressed the program will play the designated sound. 
                    The Quorum ")
        p1:Add(gamesCode)
        p1:AddText(" and ")
        p1:Add(audioCode)
        p1:AddText(" libraries will be used, along with the ")
        p1:Add(inputMonitorCode)
        p1:AddText(" and ")
        p1:Add(keyboardEventCode)
        p1:AddText(" libraries to handle keyboard input during the program. 
                    You will write a program that will play certain sounds upon a key being pressed. 
                    Download this ")
        p1:AddLink("zip file", "/files/lessons/chapter3/Assignment3_3Template.zip")
        p1:AddText(" for a template to help you get started.")
        bodyDiv:Add(p1)

        bodyDiv:AddParagraph("You may also use the IDE below for this assignment. The sounds we recommend using for this assignment are: ")
        UnorderedList soundsList
        soundsList:AddListItem("media/Bing.ogg")
        soundsList:AddListItem("media/Boom.ogg")
        soundsList:AddListItem("media/Chime.ogg")
        soundsList:AddListItem("media/Clang.ogg")
        soundsList:AddListItem("media/Firework.ogg")
        soundsList:AddListItem("media/Fwip.ogg")
        soundsList:AddListItem("media/longSong.ogg")
        soundsList:AddListItem("media/Modem.ogg")
        soundsList:AddListItem("media/Motorcycle.ogg")
        soundsList:AddListItem("media/Robot.ogg")
        soundsList:AddListItem("media/song.ogg")
        bodyDiv:Add(soundsList)

        CodingOnline addStatementIDE
        addStatementIDE:SetUniqueIdentifier("assignment3_3IDE")
        addStatementIDE:GetIDETitle():AddText("Controlling Audio")
        addStatementIDE:GetIDEInputArea():AddText("use Libraries.Game.Game
use Libraries.Game.InputMonitor
use Libraries.Sound.Audio
use Libraries.Interface.Events.KeyboardEvent

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/

class Main is Game
    InputMonitor inputMonitor       // This handles user input during game
    KeyboardEvent keys              // This helps determine which key is pressed

    Audio sound1                    // audio object 1 (to map to a key)
    Audio sound2                    // audio object 2 (to map to a key)
    Audio sound3                    // audio object 3 (to map to a key)

    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */

    action CreateGame
    end

    /*
        The update action is called on every " + dq + "frame" + dq + " of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */

    action Update(number seconds)
    end
end")
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)

        bodyDiv:AddHeading("Goal 1: Using Conditional Statements", 2)

        Paragraph p2
        CodeBlock createGameCode
        CodeBlock updateCode
        Bold mainBold
        Bold soundsBold
        createGameCode:AddText("CreateGame")
        updateCode:AddText("Update(number seconds)")
        mainBold:AddText("main.quorum")
        soundsBold:AddText("media")
        p2:AddText("Open the provided template. In the ")
        p2:Add(mainBold)
        p2:AddText(" file code needs to be written in two places. The first place is in an action called ")
        p2:Add(createGameCode)
        p2:AddText(" on lines 38 through 39. In this action, you set up your ")
        p2:Add(audioCode)
        p2:AddText(" objects. The second place you write code is in the action called ")
        p2:Add(updateCode)
        p2:AddText(" on lines 48 through 49. In this action, you write the code that plays the ")
        p2:Add(audioCode)
        p2:AddText(" objects when keys are pressed. Three ")
        p2:Add(audioCode)
        p2:AddText(" objects have already been declared for you. A folder called ")
        p2:Add(soundsBold)
        p2:AddText(" has been provided to you that includes sounds for you to use for this program.")
        bodyDiv:Add(p2)


//        SideBySideIDE loadSoundsIDE
//        loadSoundsIDE:SetUniqueIdentifier("loadSounds")
//        loadSoundsIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p3
//        p3:AddText("Load sounds to the three ")
//        p3:Add(audioCode)
//        p3:AddText(" objects and enable looping on the three ")
//        p3:Add(audioCode)
//        p3:AddText(" objects.")
//        loadSoundsIDE:SetIDESubtitle(p3)
//        loadSoundsIDE:Setup()
//        bodyDiv:Add(loadSoundsIDE)

        
        Paragraph activity1Paragraph
        Bold activity1Bold
        activity1Bold:AddText("Activity: Load sounds to three ")
        activity1Bold:Add(audioCode)
        activity1Bold:AddText(" objects and enable looping on the three ")
        activity1Bold:Add(audioCode)
        activity1Bold:AddText(" objects.")
        activity1Paragraph:Add(activity1Bold)
        bodyDiv:Add(activity1Paragraph)



        Paragraph p4
        p4:AddText("Go through the ")
        p4:Add(soundsBold)
        p4:AddText(" folder and choose three sounds you want to play during your program. 
                    Once you have chosen your sounds, you need to load them to your ")
        p4:Add(audioCode)
        p4:AddText(" objects. 
                    You may want to enable looping on these sounds once you have loaded them so that the sounds play over and over again while a key is pressed.")
        bodyDiv:Add(p4)

        Paragraph p5
        p5:AddText("Choose the three keys you want to play sounds when pressed and choose which ")
        p5:Add(audioCode)
        p5:AddText(" object to play when that key is pressed. In the ")
        p5:Add(updateCode)
        p5:AddText(" action beginning on line 27, check for these keys being pressed. 
                    If they are, play the ")
        p5:Add(audioCode)
        p5:AddText(" object for that key.")
        bodyDiv:Add(p5)


        bodyDiv:Add(break)
        bodyDiv:AddHeading("Example: Play a sound when a key is pressed.", 4)

        CodeBlock example1Code
        Span s1
        Span s2
        s1:AddText(     "// this line checks if the " + dq + "A" + dq + " key is pressed." + cr )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "if inputMonitor:IsKeyPressed(keys:A)" + cr )
        s2:AddText(     "   // this line plays the sound we chose to associate with the A key" + cr )
        s2:SetClassAttribute("comment")
        example1Code:Add(s2)
        example1Code:AddText(   "   sound1:Play()" + cr 
                            +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))


//        SideBySideIDE playObjectsIDE
//        playObjectsIDE:SetUniqueIdentifier("playObjects")
//        playObjectsIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p6
//        p6:AddText("Choose 2 more keys and play the other two ")
//        p6:Add(audioCode)
//        p6:AddText(" objects when those two keys are pressed.")
//        playObjectsIDE:SetIDESubtitle(p6)
//        playObjectsIDE:Setup()
//        bodyDiv:Add(playObjectsIDE)

        Paragraph activity2Paragraph
        Bold activity2Bold
        activity2Bold:AddText("Activity: Choose 2 more keys and play the other two ")
        activity2Bold:Add(audioCode)
        activity2Bold:AddText(" objects when those two keys are pressed.")
        activity2Paragraph:Add(activity2Bold)
        bodyDiv:Add(activity2Paragraph)


        bodyDiv:AddParagraph("When you run your program and press those keys, the sounds you associated with those keys should play. 
                            You can keep a key pressed down to play a sound for a longer period of time (due to the loops you created earlier) or just tap the key to play the sound for a short period of time. You will only hear the sound for the period you press the key. If you tap it you will barely hear a sound! 
                            Additionally, you may press more than one key at once to play multiple sounds.")

        bodyDiv:AddParagraph("Compile and run your program (after fixing any errors). 
                            You may notice that the sounds do not sound right if you hold a key down. 
                            Why might this be?")



        bodyDiv:AddHeading("Goal 2: Using Logical Operations", 2)

        Paragraph p7
        CodeBlock playCode
        playCode:AddText("Play")
        p7:AddText("Recall that the ")
        p7:Add(updateCode)
        p7:AddText(" action is called on every frame of your program. Also recall that the ")
        p7:Add(playCode)
        p7:AddText(" action plays the audio file from the beginning. So each time the ")
        p7:Add(updateCode)
        p7:AddText(" action is called, any audio object currently playing will be played again from the beginning if the appropriate key is still pressed down. 
                    How might you fix this?")
        bodyDiv:Add(p7)

        Paragraph p8
        CodeBlock isPlayingCode
        CodeBlock booleanCode
        CodeBlock trueCode
        CodeBlock falseCode
        isPlayingCode:AddText("IsPlaying")
        booleanCode:AddText("boolean")
        trueCode:AddText("true")
        falseCode:AddText("false")
        p8:AddText("One easy way to fix this is to use the ")
        p8:Add(isPlayingCode)
        p8:AddText(" action. ")
        p8:Add(isPlayingCode)
        p8:AddText(" returns a ")
        p8:Add(booleanCode)
        p8:AddText(" â ")
        p8:Add(trueCode)
        p8:AddText(" if the audio is playing and ")
        p8:Add(falseCode)
        p8:AddText(" if not. 
                    We can use this action to our advantage because we only want to start playing our Audio objects if the appropriate key is pressed AND if the ")
        p8:Add(audioCode)
        p8:AddText(" object is not already playing.")
        bodyDiv:Add(p8)


        bodyDiv:Add(break)
        bodyDiv:AddHeading("Example: Only start playing the sound if the key is pressed and it is not already playing.", 4)

        CodeBlock example2Code
        Span s3
        Span s4
        s3:AddText(     "// this line checks if the " + dq + "A" + dq + " key is pressed and that the sound is not already" + cr 
                    +   "// playing" + cr )
        s3:SetClassAttribute("comment")
        example2Code:Add(s3)
        example2Code:AddText(   "if inputMonitor:IsKeyPressed(keys:A) and not sound1::IsPlaying()" + cr )
        s4:AddText(     "   // this line plays the sound we chose to associate with the A key" + cr )
        s4:SetClassAttribute("comment")
        example2Code:Add(s4)
        example2Code:AddText(   "   sound1:Play()" + cr 
                            +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))

//        SideBySideIDE addConditionIDE
//        addConditionIDE:SetUniqueIdentifier("addCondition")
//        addConditionIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p9
//        p9:AddText("Add the additional condition for the other ")
//        p9:Add(audioCode)
//        p9:AddText(" objects.")
//        addConditionIDE:SetIDESubtitle(p9)
//        addConditionIDE:Setup()
//        bodyDiv:Add(addConditionIDE)

        Paragraph activity3Paragraph
        Bold activity3Bold
        activity3Bold:AddText("Activity: Add the additional condition for the other ")
        activity3Bold:Add(audioCode)
        activity3Bold:AddText(" objects.")
        activity3Paragraph:Add(activity3Bold)
        bodyDiv:Add(activity3Paragraph)


        Paragraph p10
        p10:AddText("For extra fun, instantiate more ")
        p10:Add(audioCode)
        p10:AddText(" objects (near the top of the file, above the ")
        p10:Add(createGameCode)
        p10:AddText(" action), load files to them, and play them on certain key presses!")
        bodyDiv:Add(p10)


        bodyDiv:AddHeading("Sample Output", 2)

        bodyDiv:AddParagraph("The program should play at least 3 different sounds upon three different key presses. 
                            The sounds should continue to play smoothly while a key is held down.")


        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)


    end

    action GetMetaDescription returns text
        return "Learn to code 3D audio applications and keyboard listeners with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Assignment (Key Press Madness - Audio)"
    end
    action GetName returns text
        return "Assignment 3.3"
    end

    action GetShortDescription returns text
        return "Key Press Madness - Audio in Quorum."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/assignment3_3.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end