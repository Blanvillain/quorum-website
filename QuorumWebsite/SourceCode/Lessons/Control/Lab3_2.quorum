use Libraries.Web.Page.all
use Libraries.Containers.Array

class Lab3_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.2: Loops - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Lab 3.2: Loops", 1)
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goal of this lab is to learn the following:")
        
        UnorderedList goalsList
        goalsList:AddClassAttribute("list-disc list-outside pl-8")
        goalsList:AddListItem("Understanding the types of repeat statement")
        goalsList:AddListItem("Using loops")
        section_goals:Add(goalsList)

        Section section_csp_curriculum
        section_csp_curriculum:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        section_csp_curriculum:Add(list)

        Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_standards, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 


        Section section_vocabulary
        AddHeading(section_vocabulary, "Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("list-disc list-outside pl-8")
        vocabularyList:AddListItem(    "Loops")
        vocabularyList:AddListItem(    "Repeat times")
        vocabularyList:AddListItem(    "Repeat while")
        vocabularyList:AddListItem(    "Repeat until")
        vocabularyList:AddListItem(    "Random")
        section_vocabulary:Add(vocabularyList)


        Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_overview, "Overview", 2)

        section_overview:AddParagraph("In this lab, we will learn about using loops in Quorum. ")

        Section section_goal1
        AddHeading(section_goal1, "Goal 1: Understanding the types of repeat statement", 2)

        section_goal1:AddParagraph("The concept of repetition, where we do the same 
            thing over and over again, is common in computer programming. Robots in the real world, 
            for example, might do the same thing repeatedly in order to allow 
            humans not to. Programs as well, might use repetition to do things like long 
            searches, like looking for a phone number in a list. In this first goal, 
            we will use the 'repeat' statement to do this.")


        Paragraph p1
        CodeBlock repeatCode
        CodeBlock repeatTimesCode
        CodeBlock repeatWhileCode
        CodeBlock repeatUntilCode
        repeatCode:AddText("repeat")
        repeatTimesCode:AddText("repeat times")
        repeatWhileCode:AddText("repeat while")
        repeatUntilCode:AddText("repeat until")
        p1:AddText("In order to use loops you must use the ")
        p1:Add(repeatCode)
        p1:AddText(" statement. There are 3 types of the repeat statement: ")
        p1:Add(repeatTimesCode)
        p1:AddText(", ")
        p1:Add(repeatWhileCode)
        p1:AddText(" and ")
        p1:Add(repeatUntilCode)
        p1:AddText(". ")
        section_goal1:Add(p1)

        Paragraph p2
        p2:AddText("The ")
        p2:Add(repeatTimesCode)
        p2:AddText(" statement you will use to perform a task a certain number of times. ")
        section_goal1:Add(p2)


        section_goal1:Add(break)

        AddHeading(section_goal1, "Example: Write " + dq + "Hello!" + dq + " 5 times.", 3)

        CodeBlock example1Code
        example1Code:AddText(   "repeat 5 times" + cr 
                            +   "     output " + dq + "Hello!" + dq + "" + cr 
                            +   "end" + cr )
        section_goal1:Add(preformatter:GeneratePreformattedCode(example1Code))

        section_goal1:AddParagraph("You should see in your output window exactly 5 " + dq + "Hello!" + dq + ".")

        AddIDE(section_goal1, "writePhrase", "Activity: Write a phrase 10 times.", "//You can choose the phrase that you want for this particular activity.", true)

        section_goal1:Add(break)

        Paragraph p3
        CodeBlock endCode
        endCode:AddText("end")
        p3:AddText("The ")
        p3:Add(repeatWhileCode)
        p3:AddText(" loop works differently than the ")
        p3:Add(repeatTimesCode)
        p3:AddText(" loop. The ")
        p3:Add(repeatWhileCode)
        p3:AddText(" loop works like an if statement, but at the ")
        p3:Add(endCode)
        p3:AddText(" keyword, Quorum evaluates and determines if the loop should go again.")
        section_goal1:Add(p3)


        Paragraph example2Paragraph
        Bold example2bold
        example2bold:AddText("Example: Use ")
        example2bold:Add(repeatWhileCode)
        example2bold:AddText(" to check how many apps for your phone you can buy.")
        example2Paragraph:Add(example2bold)
        section_goal1:Add(example2Paragraph)

        CodeBlock example2Code
        example2Code:AddText(   "text balanceInput  = input(" + dq + "How much money do you have in your account?" + dq + ")" + cr 
                            +   "number balance = cast(number, balanceInput)" + cr 
                            +   "integer counter = 0" + cr 
                            +   "repeat while balance > 1" + cr 
                            +   "     number price = 1.0" + cr 
                            +   "     counter = counter + 1" + cr 
                            +   "     balance = balance - price" + cr 
                            +   "     output " + dq + "You have enough money to buy another app!" + dq + "" + cr 
                            +   "end" + cr 
                            +   "output " + dq + "You don't have money enough to buy another app! You have bought " + dq + " + counter + " + dq + " apps!" + dq + "" + cr )
        section_goal1:Add(preformatter:GeneratePreformattedCode(example2Code))

        section_goal1:AddParagraph("For testing, let's use 6 as the input. Our output 
            should be 5 times the phrase that we have enough money to buy 
            another app. The last line is the phrase saying we do not have 
            enough money and how many apps you have bought.")


        AddIDE(section_goal1, "repeatWhileActivity", "Use 'repeat while' to check how many cheeseburgers you can buy.", "//Activity: Use $1.19 as the price for the cheeseburgers, and write a phrase telling how many cheeseburgers you bought.", true)

        section_goal1:Add(break)

        Paragraph p5
        p5:AddText("The final type of loop in Quorum is the ")
        p5:Add(repeatUntilCode)
        p5:AddText(" loop. The ")
        p5:Add(repeatUntilCode)
        p5:AddText(" functions much in the same way as ")
        p5:Add(repeatWhileCode)
        p5:AddText(" , but the interpretation of your condition is slightly different. 
                    Instead of saying repeat while balance > 1 you can say repeat until balance < 1. 
                    The difference between these two conditions is that in the repeat while the number 1 is not included while in the repeat until the number 1 is included, for them to match exactly you should use <=(less or equal).")
        section_goal1:Add(p5)

        AddIDE(section_goal1, "repeatUntilActivity", "Activity: Repeat the previous activity using 'repeat until' instead of 'repeat while'","", true)


        section_goal1:AddParagraph("Your output should look exactly the same for the same input with both statements.")

        section_goal1:Add(break)

        Section section_goal2
        section_goal2:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_goal2, "Goal 2: Using Loops", 2)

        Paragraph p6
        CodeBlock randomCode
        randomCode:AddText("Random")
        p6:AddText("You will work with all three kinds of loops to get a grasp of each loop. 
                    Also, for this task, you will be using the ")
        p6:Add(randomCode)
        p6:AddText(" class. Add a use statement for the ")
        p6:Add(randomCode)
        p6:AddText(" class, found in the Compute library, at the top of the file. 
                    To help you become familiar with the ")
        p6:Add(randomCode)
        p6:AddText(" class, sample code using the ")
        p6:Add(randomCode)
        p6:AddText(" class is provided below.")
        section_goal2:Add(p6)

        AddHeading(section_goal2, "Example: How to use the Random Class.", 3)

        CodeBlock example3Code
        example3Code:AddText(   "use Libraries.Compute.Random" + cr 
                            +   "Random choice" + cr 
                            +   "integer counter1 = 0" + cr 
                            +   "integer randomValue = 0" + cr 
                            +   "repeat 6 times" + cr 
                            +   "     randomValue = choice:RandomInteger(100)" + cr 
                            +   "     counter1 = counter1 + 1" + cr 
                            +   "     output " + dq + "counter = " + dq + " + counter1" + cr 
                            +   "     output " + dq + "random value = " + dq + " + randomValue" + cr 
                            +   "end" + cr )
        section_goal2:Add(preformatter:GeneratePreformattedCode(example3Code))

        Paragraph p7
        CodeBlock integerCode
        integerCode:AddText("integer")
        p7:AddText("The loop repeats the block of code 6 times as you can see and each time the computer choose a randomly generated ")
        p7:Add(integerCode)
        p7:AddText(" value between 0 and 100.")
        section_goal2:Add(p7)

        AddIDE(section_goal2, "repeatRandomNumber", "Activity: Write a program that repeats until the random number is greater than 50",
                "//You can choose if you wnat to use the 'repeat while' or the 'repeat until' statements and the number should be randomly generated by the computer", true)

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_vocabulary)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_goal1)
        bodyDiv:Add(section_goal2)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to code different kinds of loops (i.e., times, while, and until) in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Loops)"
    end
    action GetName returns text
        return "Lab 3.2"
    end
    action GetShortDescription returns text
        return "how work Loops in Quorum."
    end
    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/lab3_2.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end
