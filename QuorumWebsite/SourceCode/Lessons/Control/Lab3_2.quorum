use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent


class Lab3_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.2: Loops - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 3.2: Loops", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following:")
        
        UnorderedList goalsList
        goalsList:AddListItem("Understanding the types of repeat statement")
        goalsList:AddListItem("Using loops")
        bodyDiv:Add(goalsList)

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 


        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "Loops")
        vocabularyList:AddListItem(    "Repeat times")
        vocabularyList:AddListItem(    "Repeat while")
        vocabularyList:AddListItem(    "Repeat until")
        vocabularyList:AddListItem(    "Random")
        bodyDiv:Add(vocabularyList)


        bodyDiv:AddHeading("Overview", 2)

        bodyDiv:AddParagraph("In this lab, we will learn about using loops in Quorum. ")

        bodyDiv:AddHeading("Goal 1: Understanding the types of repeat statement", 2)

        bodyDiv:AddParagraph("The concept of repetition, where we do the same 
            thing over and over again, is common in computer programming. Robots in the real world, 
            for example, might do the same thing repeatedly in order to allow 
            humans not to. Programs as well, might use repetition to do things like long 
            searches, like looking for a phone number in a list. In this first goal, 
            we will use the 'repeat' statement to do this.")


        Paragraph p1
        CodeBlock repeatCode
        CodeBlock repeatTimesCode
        CodeBlock repeatWhileCode
        CodeBlock repeatUntilCode
        repeatCode:AddText("repeat")
        repeatTimesCode:AddText("repeat times")
        repeatWhileCode:AddText("repeat while")
        repeatUntilCode:AddText("repeat until")
        p1:AddText("In order to use loops you must use the ")
        p1:Add(repeatCode)
        p1:AddText(" statement. There are 3 types of the repeat statement: ")
        p1:Add(repeatTimesCode)
        p1:AddText(", ")
        p1:Add(repeatWhileCode)
        p1:AddText(" and ")
        p1:Add(repeatUntilCode)
        p1:AddText(". ")
        bodyDiv:Add(p1)

        Paragraph p2
        p2:AddText("The ")
        p2:Add(repeatTimesCode)
        p2:AddText(" statement you will use to perform a task a certain number of times. ")
        bodyDiv:Add(p2)


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Example: Write " + dq + "Hello!" + dq + " 5 times.", 4)

        CodeBlock example1Code
        example1Code:AddText(   "repeat 5 times" + cr 
                            +   "     output " + dq + "Hello!" + dq + "" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))

        bodyDiv:AddParagraph("You should see in your output window exactly 5 " + dq + "Hello!" + dq + ".")


        SideBySideIDE writePhraseIDE
        writePhraseIDE:SetUniqueIdentifier("writePhrase")
        writePhraseIDE:GetIDETitle():AddText("Activity: Write a phrase 10 times.")
        writePhraseIDE:GetIDESubtitle():AddText("You can choose the phrase that you want for this particular activity.")
        writePhraseIDE:Setup()
        bodyDiv:Add(writePhraseIDE)

        bodyDiv:Add(break)

        Paragraph p3
        CodeBlock endCode
        endCode:AddText("end")
        p3:AddText("The ")
        p3:Add(repeatWhileCode)
        p3:AddText(" loop works differently than the ")
        p3:Add(repeatTimesCode)
        p3:AddText(" loop. The ")
        p3:Add(repeatWhileCode)
        p3:AddText(" loop works like an if statement, but at the ")
        p3:Add(endCode)
        p3:AddText(" keyword, Quorum evaluates and determines if the loop should go again.")
        bodyDiv:Add(p3)


        Paragraph example2Paragraph
        Bold example2bold
        example2bold:AddText("Example: Use ")
        example2bold:Add(repeatWhileCode)
        example2bold:AddText(" to check how many apps for your phone you can buy.")
        example2Paragraph:Add(example2bold)
        bodyDiv:Add(example2Paragraph)

        CodeBlock example2Code
        example2Code:AddText(   "text balanceInput  = input(" + dq + "How much money do you have in your account?" + dq + ")" + cr 
                            +   "number balance = cast(number, balanceInput)" + cr 
                            +   "integer counter = 0" + cr 
                            +   "repeat while balance > 1" + cr 
                            +   "     number price = 1.0" + cr 
                            +   "     counter = counter + 1" + cr 
                            +   "     balance = balance - price" + cr 
                            +   "     output " + dq + "You have enough money to buy another app!" + dq + "" + cr 
                            +   "end" + cr 
                            +   "output " + dq + "You don't have money enough to buy another app! You have bought " + dq + " + counter + " + dq + " apps!" + dq + "" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))

        bodyDiv:AddParagraph("For testing, let's use 6 as the input. Our output 
            should be 5 times the phrase that we have enough money to buy 
            another app. The last line is the phrase saying we do not have 
            enough money and how many apps you have bought.")


        SideBySideIDE checkCheeseburgersIDE
        checkCheeseburgersIDE:SetUniqueIdentifier("repeatWhileActivity")

        checkCheeseburgersIDE:GetIDETitle():AddText("Use ")
        checkCheeseburgersIDE:GetIDETitle():Add(repeatWhileCode)
        checkCheeseburgersIDE:GetIDETitle():AddText(" to check how many cheeseburgers you can buy.")
        checkCheeseburgersIDE:GetIDESubtitle():AddText("Activity: Use $1.19 as the price for the cheeseburgers, and write a phrase telling how many cheeseburgers you bought.")
        checkCheeseburgersIDE:Setup()
        bodyDiv:Add(checkCheeseburgersIDE)

        bodyDiv:Add(break)

        Paragraph p5
        p5:AddText("The final type of loop in Quorum is the ")
        p5:Add(repeatUntilCode)
        p5:AddText(" loop. The ")
        p5:Add(repeatUntilCode)
        p5:AddText(" functions much in the same way as ")
        p5:Add(repeatWhileCode)
        p5:AddText(" , but the interpretation of your condition is slightly different. 
                    Instead of saying repeat while balance > 1 you can say repeat until balance < 1. 
                    The difference between these two conditions is that in the repeat while the number 1 is not included while in the repeat until the number 1 is included, for them to match exactly you should use <=(less or equal).")
        bodyDiv:Add(p5)


        SideBySideIDE repeatActivityIDE
        repeatActivityIDE:SetUniqueIdentifier("repeatUntilActivity")
        repeatActivityIDE:GetIDETitle():AddText("Activity: Repeat the previous activity using ")
        repeatActivityIDE:GetIDETitle():Add(repeatUntilCode)
        repeatActivityIDE:GetIDETitle():AddText(" instead of ")
        repeatActivityIDE:GetIDETitle():Add(repeatWhileCode)
        repeatActivityIDE:GetIDETitle():AddText(".")
        repeatActivityIDE:Setup()
        bodyDiv:Add(repeatActivityIDE)

        bodyDiv:AddParagraph("Your output should look exactly the same for the same input with both statements.")

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Goal 2: Using Loops", 2)

        Paragraph p6
        CodeBlock randomCode
        randomCode:AddText("Random")
        p6:AddText("You will work with all three kinds of loops to get a grasp of each loop. 
                    Also, for this task, you will be using the ")
        p6:Add(randomCode)
        p6:AddText(" class. Add a use statement for the ")
        p6:Add(randomCode)
        p6:AddText(" class, found in the Compute library, at the top of the file. 
                    To help you become familiar with the ")
        p6:Add(randomCode)
        p6:AddText(" class, sample code using the ")
        p6:Add(randomCode)
        p6:AddText(" class is provided below.")
        bodyDiv:Add(p6)


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Example: How to use the Random Class.", 4)

        CodeBlock example3Code
        example3Code:AddText(   "use Libraries.Compute.Random" + cr 
                            +   "Random choice" + cr 
                            +   "integer counter1 = 0" + cr 
                            +   "integer randomValue = 0" + cr 
                            +   "repeat 6 times" + cr 
                            +   "     randomValue = choice:RandomInteger(100)" + cr 
                            +   "     counter1 = counter1 + 1" + cr 
                            +   "     output " + dq + "counter = " + dq + " + counter1" + cr 
                            +   "     output " + dq + "random value = " + dq + " + randomValue" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3Code))

        Paragraph p7
        CodeBlock integerCode
        integerCode:AddText("integer")
        p7:AddText("The loop repeats the block of code 6 times as you can see and each time the computer choose a randomly generated ")
        p7:Add(integerCode)
        p7:AddText(" value between 0 and 100.")
        bodyDiv:Add(p7)

        SideBySideIDE repeatRandomNumberIDE
        repeatRandomNumberIDE:SetUniqueIdentifier("repeatRandomNumber")
        repeatRandomNumberIDE:GetIDETitle():AddText("Activity: Write a program that repeats until the random number is greater than 50")
        Paragraph p8
        p8:AddText("You can choose if you want to use the ")
        p8:Add(repeatWhileCode)
        p8:AddText(" or the ")
        p8:Add(repeatUntilCode)
        p8:AddText(" statements and the number should be randomly generated by the computer.")
        repeatRandomNumberIDE:SetIDESubtitle(p8)
        repeatRandomNumberIDE:Setup()        
        bodyDiv:Add(repeatRandomNumberIDE)




        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about how to code different kinds of loops (i.e., times, while, and until) in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Loops)"
    end
    action GetName returns text
        return "Lab 3.2"
    end
    action GetShortDescription returns text
        return "how work Loops in Quorum."
    end
    action GetLocation returns text
        return "lessons/chapter3/lab3_2.html"
    end
end