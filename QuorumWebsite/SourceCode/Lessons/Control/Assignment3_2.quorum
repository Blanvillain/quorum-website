use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.all

class Assignment3_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 3.2: Number Guessing Game - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 3.2: Number Guessing Game", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        
        UnorderedList objectivesList
        objectivesList:AddListItem("Conditionals and lexical scoping")
        objectivesList:AddListItem("Loops")
        objectivesList:AddListItem("How to analyze a problem statement")
        bodyDiv:Add(objectivesList)

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)


        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.2, LO 4.2.3, EK 4.2.3A, EK 4.2.3B, EK 4.2.3C")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.2, LO 4.2.4, EK 4.2.4A, EK 4.2.4B, EK 4.2.4C, EK 4.2.4G")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.4, LO 5.4.1, EK 5.4.1M, EK 5.4.1N")
        bodyDiv:Add(list)


        bodyDiv:AddHeading("Common Core Standards", 2)

        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ",
        "CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, 
        CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4,
        CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList)


        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "Conditional")
        vocabularyList:AddListItem(    "Lexical Scoping")
        vocabularyList:AddListItem(    "Random Number")
        vocabularyList:AddListItem(    "Repeat Loop")
        bodyDiv:Add(vocabularyList)

        bodyDiv:AddHeading("Overview", 2)

        bodyDiv:AddParagraph("In this assignment you will write a program using the skills you have already learned.
                            Write a number guessing game that generates a random number between 1 and 100, inclusively (meaning 1 and 100 should be included). 
                            Once a number is generated, ask the user to guess that number and continue asking the until they guess the correct number. 
                            You will give the user hints, such as telling them their guess is too high or too low.")



        bodyDiv:AddHeading("Complete the Following Tasks to Meet All Objectives", 2)


        Paragraph p1
        Bold GuessingGameBold
        GuessingGameBold:AddText("GuessingGame")
        p1:AddText("Create a new project and name it ")
        p1:Add(GuessingGameBold)
        p1:AddText(", and open the main.quorum file.")
        bodyDiv:Add(p1)

        bodyDiv:AddParagraph("Your program should:")

        UnorderedList programList
        programList:AddListItem("Use a repeat loop, so the game will continue until the game is over.")
        programList:AddListItem("Have a conditions to determine if the users guess is less than, greater than, or equal to the random number.")
        programList:AddListItem("Ask the user to enter a number between 1 and 100.")
        bodyDiv:Add(programList)

        bodyDiv:Add(break)

        Paragraph example
        Bold exampleB
        CodeBlock useCode
        CodeBlock randomCode
        CodeBlock randomLibrary
        useCode:AddText("use")
        randomCode:AddText("RandomIntegerBetween(integer, integer)")
        randomLibrary:AddText("Libraries.Compute.Random")
        exampleB:AddText("Example: ")
        exampleB:Add(useCode)
        exampleB:AddText(" statement and ")
        exampleB:Add(randomCode)
        exampleB:AddText(" action you will need.")
        example:Add(exampleB)
        example:Add(break)
        example:AddText("You will need to use ")
        example:Add(randomLibrary)
        example:AddText(" to create a random number object. You will then need to call the ")
        example:Add(randomCode)
        example:AddText(" action on that object.")
        bodyDiv:Add(example)
        
        CodeBlock exampleCode
        Span s1
        Span s2

        s1:AddText("//This line is the use statement.")
        s1:AddClassAttribute("comment")
        exampleCode:Add(s1)
        exampleCode:Add(break)
        exampleCode:AddText("use Libraries.Compute.Random")
        exampleCode:Add(break)
        s2:AddText("//Add your Random object here." + cr + "//Call this action on your Random object. Fill in the parameters with the correct integers.")
        s2:AddClassAttribute("comment")
        exampleCode:Add(s2)
        exampleCode:Add(break)
        exampleCode:AddText("random:RandomIntegerBetween(integer, integer)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(exampleCode))

        Paragraph onlineOutput
        Bold onlineBold
        onlineBold:AddText("NOTE: Output and the Online Editor")
        onlineOutput:Add(onlineBold)
        onlineOutput:Add(break)
        onlineOutput:AddText("When running this assignment online, the results of ")
        CodeBlock outputCode
        outputCode:AddText("output")
        onlineOutput:Add(outputCode)
        onlineOutput:AddText(" won't appear until after the program finishes. This means that if we use ")
        onlineOutput:Add(outputCode)
        onlineOutput:AddText(" statements to let the user know if their guess is too low or too high, they won't get any feedback "
            + "until after they've already guessed correctly. To get around this problem, we can add our output to the beginning of our ")
        CodeBlock inputCode
        inputCode:AddText("input")
        onlineOutput:Add(inputCode)
        onlineOutput:AddText(" statements instead.")
        bodyDiv:Add(onlineOutput)
        
        CodeBlock exampleOutput
        Span s3
        Span s4

        s3:AddText("// We can store our " + dq + "output" + dq + " in this variable.")
        s3:AddClassAttribute("comment")
        exampleOutput:Add(s3)
        exampleOutput:Add(break)
        exampleOutput:AddText("text response = " + dq + "Welcome to the number guessing game. Can you guess my number?" + dq)
        exampleOutput:Add(break)
        s4:AddText("// Then we can add our variable to the front of our input statement.")
        s4:AddClassAttribute("comment")
        exampleOutput:Add(s4)
        exampleOutput:Add(break)
        exampleOutput:AddText("integer guess = cast(integer, input(response + " + dq + " Guess a number between 1 and 100:" + dq + "))")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(exampleOutput))


        SideBySideIDE outputIDE
        outputIDE:SetUniqueIdentifier("assignment3_2IDE")
        outputIDE:Setup()
        outputIDE:GetIDETitle():AddText("Activity: Write a program with the given specifications")
        outputIDE:GetIDESubtitle():AddText(" ")
        bodyDiv:Add(outputIDE)

        bodyDiv:Add(break)
        bodyDiv:AddHeading("Sample Output", 2)

        bodyDiv:AddParagraph("The input dialog statements are included in the sample output. They are identified as [Input Dialog].")

        CodeBlock example1Code
        example1Code:AddText(   "Welcome to the number guessing game. Can you guess my number?" + cr 
                            +   "[Input Dialog] Guess a number between 1 and 100: 50" + cr 
                            +   "My number is less than 50" + cr 
                            +   "[Input Dialog] Guess a number between 1 and 100: 25" + cr 
                            +   "My number is greater than 25" + cr 
                            +   "[Input Dialog] Guess a number between 1 and 100: 38" + cr 
                            +   "You guessed my number!" + cr 
                            +   "Game over." )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))


        bodyDiv:AddHeading("Short Answer", 2)

        bodyDiv:AddParagraph("Can you think of an efficient way to guess the number every time? 
                            Describe a guessing strategy for this game.")


        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)


    end

    action GetMetaDescription returns text
        return "Write a number guessing game while learning about lexical scoping, loops, and conditionals with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Assignment (Number Guessing Game)"
    end
    action GetName returns text
        return "Assignment 3.2"
    end
    action GetShortDescription returns text
        return "how work Number Guessing Game in Quorum."
    end
    action GetLocation returns text
        return "lessons/chapter3/assignment3_2.html"
    end
end