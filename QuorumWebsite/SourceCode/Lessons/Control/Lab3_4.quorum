use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent


class Lab3_4 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.4: Control the Audio - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 3.4: Control the Audio", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("In this lab, we will learn the following computer science concepts:")
        
        UnorderedList goalsList
        goalsList:AddListItem("Creating Objects")
        goalsList:AddListItem("Using conditional statements")
        bodyDiv:Add(goalsList)


        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1C, EK 4.1.1D")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 



        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "Control Structures")
        vocabularyList:AddListItem(    "If statement")
        vocabularyList:AddListItem(    "Loops")
        vocabularyList:AddListItem(    "Input Manager")
        bodyDiv:Add(vocabularyList)


        bodyDiv:AddHeading("Overview", 2)

        Paragraph p0
        p0:AddText("This lab demonstrates how to use key presses on the keyboard to perform some tasks. 
                    The task you will perform is to write a program that changes the balance of a sound file from left to right or right to left upon pressing of the left and right arrow keys. 
                    The program will also increase the volume upon pressing of the up arrow key and decrease the volume upon pressing the down arrow key. 
                    Download this ")
        p0:AddLink("zip file", "/files/lessons/chapter3/Lab3_4Template.zip")
        p0:AddText(" for a template to help you get started.")
        bodyDiv:Add(p0)

        SideBySideIDE addStatementIDE
        addStatementIDE:SetUniqueIdentifier("lab3_4IDE")
        addStatementIDE:GetIDETitle():AddText("Controlling Audio")
        addStatementIDE:SetGameEnvironment(true)
        addStatementIDE:GetIDEInputArea():AddText("use Libraries.Game.Game
use Libraries.Game.InputMonitor
use Libraries.Sound.Audio
use Libraries.Interface.Events.KeyboardEvent

/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/

class Main is Game
    InputMonitor inputMonitor       // handles user input during program
    KeyboardEvent keys              // determines which key is pressed

    Audio song                      // song to play during program

    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */

    action CreateGame
    end

    /*
        The update action is called on every " + dq + "frame" + dq + " of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */

    action Update(number seconds)
    end
end")
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)
        bodyDiv:Add(addStatementIDE:GetGameCanvas())

        bodyDiv:AddHeading("Understanding the InputMonitor and KeyboardEvent Libraries", 2)
        Paragraph p1
        Bold mainBold
        mainBold:AddText("main.quorum file")
        p1:AddText("Open the provided template and navigate to the ")
        p1:Add(mainBold)
        p1:AddText(" . Near the top of the file, there are two lines that look like this on lines 15 and 16:")
        bodyDiv:Add(p1)

        bodyDiv:AddHeading("Goal 1: Creating Objects", 2)

        CodeBlock example1Code
        Span s1
        s1:AddText(     "//This line declares an InputMonitor object called " + dq + "inputMonitor" + dq + "" + cr)
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(    "InputMonitor inputMonitor" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))

        Paragraph p2
        CodeBlock inputMonitorCode
        CodeBlock keyboardEventCode
        inputMonitorCode:AddText("InputMonitor")
        keyboardEventCode:AddText("KeyboardEvent")
        p2:AddText("Line 16 declares one of the objects you use to determine if a specific key has been pressed on the keyboard. The ")
        p2:Add(inputMonitorCode)
        p2:AddText(" object can tell you when a key is pressed down, and the ")
        p2:Add(keyboardEventCode)
        p2:AddText(" object, which you will add in the first activity, can let you know which key is pressed down. 
                    You use these objects to determine when a key is pressed down and which key is pressed down.")
        bodyDiv:Add(p2)

        Paragraph a1
        Bold activity1
        CodeBlock keys
        keys:AddText("keys")
        activity1:AddText("Activity: Declare the ")
        activity1:Add(keyboardEventCode)
        activity1:AddText(" object. Call it ")
        activity1:Add(keys)
        activity1:AddText(".")
        a1:Add(activity1)
        a1:Add(break)
        a1:AddText("Add this new line of code below the ")
        a1:Add(inputMonitorCode)
        a1:AddText(".")
        bodyDiv:Add(a1)

        Paragraph p3
        CodeBlock isKeyPressedCode
        CodeBlock booleanCode
        CodeBlock trueCode
        CodeBlock falseCode
        isKeyPressedCode:AddText("IsKeyPressed")
        booleanCode:AddText("boolean")
        trueCode:AddText("true")
        falseCode:AddText("false")
        p3:AddText("The ")
        p3:Add(inputMonitorCode)
        p3:AddText(" object has an action called ")
        p3:Add(isKeyPressedCode)
        p3:AddText(" that takes a ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object variable and returns a ")
        p3:Add(booleanCode)
        p3:AddText(" —  ")
        p3:Add(trueCode)
        p3:AddText(" if the passed key is pressed, ")
        p3:Add(falseCode)
        p3:AddText(" if not. You need to pass the ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object variable to the ")
        p3:Add(isKeyPressedCode)
        p3:AddText(" action, telling the ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object which key you want to check is pressed.")
        bodyDiv:Add(p3)


        Paragraph a2
        Bold activity2
        CodeBlock audioCode
        CodeBlock songCode
        audioCode:AddText("Audio")
        songCode:AddText("song")
        activity2:AddText("Activity: Declare the ")
        activity2:Add(audioCode)
        activity2:AddText(" object. Call it ")
        activity2:Add(songCode)
        activity2:AddText(".")
        a2:Add(activity2)
        a2:Add(break)
        a2:AddText("Add this new line of code below the ")
        a2:Add(keyboardEventCode)
        a2:AddText(".")
        bodyDiv:Add(a2)
        
        bodyDiv:Add(break)

        Paragraph p5
        CodeBlock createGameCode
        CodeBlock loadCode
        CodeBlock enableLoopingCode
        CodeBlock playCode
        loadCode:AddText("Load")
        enableLoopingCode:AddText("EnableLooping")
        playCode:AddText("Play")
        createGameCode:AddText("CreateGame")
        p5:AddText("Navigate to the action called ")
        p5:Add(createGameCode)
        p5:AddText(" on line 36 through line 37. This is where you load the song for your ")
        p5:Add(audioCode)
        p5:AddText(" object. Recall that to load an audio file to an ")
        p5:Add(audioCode)
        p5:AddText(" object, we call the ")
        p5:Add(loadCode)
        p5:AddText(" action, passing the file name of the file we want to load.")
        bodyDiv:Add(p5)

//        SideBySideIDE loadSongIDE
//        loadSongIDE:SetUniqueIdentifier("loadSong")
//        loadSongIDE:GetIDETitle():AddText("Activity: Load a song to your program")
//        Paragraph p6
//        p6:AddText("Load a song to your ")
//        p6:Add(audioCode)
//        p6:AddText(" object, enable looping on the object, and play it.")
//        loadSongIDE:SetIDESubtitle(p6)
//        loadSongIDE:Setup()
//        bodyDiv:Add(loadSongIDE)


        Paragraph e2
        Bold example2
        CodeBlock example2Code
        Span s2
        example2:AddText("Example: Load the audio file:")
        e2:Add(example2)
        bodyDiv:Add(e2)
        s2:AddText(     "//This line will load the song to the audio object" + cr)
        s2:SetClassAttribute("comment")
        example2Code:Add(s2)
        example2Code:AddText(    "song:Load(" + dq + "media/music.wav" + dq + ")" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))

        Paragraph a3
        Bold activity3
        activity3:AddText("Activity: ")
        activity3:Add(enableLoopingCode)
        activity3:AddText(", and ")
        activity3:Add(playCode)
        activity3:AddText(" your song.")
        a3:Add(activity3)
        a3:Add(break)
        a3:AddText("Once you have your ")
        a3:Add(audioCode)
        a3:AddText(" loaded, you should enable looping so that it can play over and over during your program. 
                    This is done by calling the ")
        a3:Add(enableLoopingCode)
        a3:AddText(" action on your ")
        a3:Add(audioCode)
        a3:AddText(" object. Finally, you want to play your ")
        a3:Add(audioCode)
        a3:AddText(" object. Recall that this is done by calling the ")
        a3:Add(playCode)
        a3:AddText(" action on the ")
        a3:Add(audioCode)
        a3:AddText(" object. Now that you have your ")
        a3:Add(audioCode)
        a3:AddText(" loaded and set up, you can begin writing the code to change the volume and balance upon key presses.")
        bodyDiv:Add(a3)

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Goal 2: Using Conditional Statements", 2)

        Paragraph p8
        Bold updateBold
        updateBold:AddText("Update(number seconds)")
        p8:AddText("Navigate to the action called ")
        p8:Add(updateBold)
        p8:AddText(" around line 49. This action is called on every frame of your game. 
                    This is where you write your code to handle the key presses. 
                    This action should check whether some keys are pressed down and, if they are, begin the appropriate task for those keys.")
        bodyDiv:Add(p8)




        Paragraph p9
        CodeBlock upCode
        CodeBlock downCode
        upCode:AddText("UP")
        downCode:AddText("DOWN")
        p9:AddText("The volume should be changed upon pressing of the up or down arrow keys. 
                    You need to check whether the up and down arrow keys are pressed. 
                    The names of the variables in ")
        p9:Add(keyboardEventCode)
        p9:AddText(" objects that represent the up and down arrow keys are ")
        p9:Add(upCode)
        p9:AddText(" and ")
        p9:Add(downCode)
        p9:AddText(", respectively.")
        bodyDiv:Add(p9)

        Paragraph p10
        CodeBlock getVolumeCode
        CodeBlock setVolumeCode
        CodeBlock numberCode
        getVolumeCode:AddText("GetVolume")
        setVolumeCode:AddText("SetVolume")
        numberCode:AddText("number")
        p10:AddText("If the up arrow key is pressed, the volume should be increased. 
                    To do this, you need to get the current volume of the ")
        p10:Add(audioCode)
        p10:AddText(" object by calling the ")
        p10:Add(getVolumeCode)
        p10:AddText(" action. 
                    The new volume should be set to the current volume plus some increment value. 
                    The ")
        p10:Add(setVolumeCode)
        p10:AddText(" action takes one ")
        p10:Add(numberCode)
        p10:AddText(" parameter that represents the percentage of the volume to play. A ")
        p10:Add(numberCode)
        p10:AddText(" of 1 means to play the song at 100% of its normal volume. A ")
        p10:Add(numberCode)
        p10:AddText(" of 0.8 means to play the song at 80% of its normal volume. A ")
        p10:Add(numberCode)
        p10:AddText(" of 0.5 means to play the song at 50% of its normal volume, and so on.")
        bodyDiv:Add(p10)

        bodyDiv:AddParagraph("Choose a good increment value for the volume to use when the up key is pressed down. 
                            A good one is to increase the volume by 10% with each key press.")



        bodyDiv:AddHeading("Example: Write the code that increases the volume when the Up key is pressed.", 4)

        CodeBlock example3Code
        Span s4
        Span s5
        Span s6
        Span s7
        s4:AddText(     "//This if statement checks when the Up key is pressed" + cr )
        s4:SetClassAttribute("comment")
        example3Code:Add(s4)
        example3Code:AddText(   "if inputMonitor:IsKeyPressed(keys:UP)" + cr )
        s5:AddText(     "   //This line gets the current volume of the audio" + cr )
        s5:SetClassAttribute("comment")
        example3Code:Add(s5)
        example3Code:AddText(   "   number currentVolume = song:GetVolume()" + cr )
        s6:AddText(     "   //This line uses the current volume and adds an increment value to it" + cr )
        s6:SetClassAttribute("comment")
        example3Code:Add(s6)
        example3Code:AddText(   "   number newVolume = currentVolume + 0.1" + cr )
        s7:AddText(     "   //This line sets the new volume" + cr )
        s7:SetClassAttribute("comment")
        example3Code:Add(s7)
        example3Code:AddText(   "   song:SetVolume(newVolume)" + cr 
                            +   "end" )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3Code))

//        SideBySideIDE decreaseVolumeIDE
//        decreaseVolumeIDE:SetUniqueIdentifier("decreaseVolume")
//        decreaseVolumeIDE:Setup()
//        decreaseVolumeIDE:GetIDETitle():AddText("Activity: ")
//        decreaseVolumeIDE:GetIDESubtitle():AddText("Write the code to decrease the volume if the Down key is pressed.")
//        bodyDiv:Add(decreaseVolumeIDE)

        Paragraph p11
        Bold    volumeActivity
        volumeActivity:AddText("Activity: Lower the volume of the song.")
        p11:Add(volumeActivity)
        p11:Add(break)
        p11:AddText("If the down arrow key is pressed, the volume should be decreased. 
                    To do this, you need to get the current volume of the ")
        p11:Add(audioCode)
        p11:AddText(" object by calling the ")
        p11:Add(getVolumeCode)
        p11:AddText(" action. 
                    The new volume should be set to the current volume minus some decrement value. 
                    Choose a good decrement value for the volume to use when the down key is pressed down. 
                    A good one is to decrease the volume by 10% with each key press. 
                    Write the code to do this.")
        bodyDiv:Add(p11)

        bodyDiv:Add(break)

        Paragraph p12
        CodeBlock leftCode
        CodeBlock rightCode
        leftCode:AddText("LEFT")
        rightCode:AddText("RIGHT")
        p12:AddText("The balance should be changed upon pressing the right or left arrow keys. 
                    You need to check whether the left or right arrow keys are pressed. 
                    The names of the variables in ")
        p12:Add(keyboardEventCode)
        p12:AddText(" objects that represent the left and right arrow keys are ")
        p12:Add(leftCode)
        p12:AddText(" and ")
        p12:Add(rightCode)
        p12:AddText(", respectively.")
        bodyDiv:Add(p12)

        Paragraph p13
        CodeBlock getBalanceCode
        CodeBlock setBalanceCode
        getBalanceCode:AddText("GetBalance")
        setBalanceCode:AddText("SetBalance")
        p13:AddText("If the left arrow key is pressed, the balance should move towards the left ear. 
                    To do this, you need to get the current balance of the ")
        p13:Add(audioCode)
        p13:AddText(" object by calling the ")
        p13:Add(getBalanceCode)
        p13:AddText(" action. 
                    The new balance should be set to the current balance minus some decrement value. 
                    The ")
        p13:Add(setBalanceCode)
        p13:AddText(" action takes one ")
        p13:Add(numberCode)
        p13:AddText(" parameter between -1 and 1 that represents the audio balance. A ")
        p13:Add(numberCode)
        p13:AddText(" of -1 means to play the audio fully in the left ear. A ")
        p13:Add(numberCode)
        p13:AddText(" of 1 means to play the audio fully in the right ear. A ")
        p13:Add(numberCode)
        p13:AddText(" of 0 means to play the audio equally in both ears, and so on.")
        bodyDiv:Add(p13)

        bodyDiv:AddParagraph("Choose a good decrement value for the balance to use when the left key is pressed down. 
                            A good one is to decrease the balance by 0.1 with each key press.")


        bodyDiv:AddHeading("Example: Write the code to move the balance towards the left when the Left key is pressed.", 4)

        CodeBlock example4Code
        Span s8
        Span s9
        Span s10
        Span s11
        s8:AddText(     "//This line checks for the left key being pressed" + cr )
        s8:SetClassAttribute("comment")
        example4Code:Add(s8)
        example4Code:AddText(   "if inputMonitor:IsKeyPressed(keys:LEFT)" + cr )
        s9:AddText(     "   //This line get the current balance of the audio" + cr )
        s9:SetClassAttribute("comment")
        example4Code:Add(s9)
        example4Code:AddText(   "   number currentBalance = song:GetBalance()" + cr )
        s10:AddText(     "  //This line uses the current balance and subtracts a decrement value" + cr )
        s10:SetClassAttribute("comment")
        example4Code:Add(s10)
        example4Code:AddText(   "   number newBalance = currentBalance - 0.1" + cr )
        s11:AddText(     "  //This line sets the new balance" + cr )
        s11:SetClassAttribute("comment")
        example4Code:Add(s11)
        example4Code:AddText(   "   song:SetBalance(newBalance)" + cr 
                            +   "end" )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example4Code))


//        SideBySideIDE moveBalanceIDE
//        moveBalanceIDE:SetUniqueIdentifier("moveBalance")
//        moveBalanceIDE:Setup()
//        moveBalanceIDE:GetIDETitle():AddText("Activity: ")
//        moveBalanceIDE:GetIDESubtitle():AddText("Write the code to move the balance towards the right ear if the Right key is pressed.")
//        bodyDiv:Add(moveBalanceIDE)

        Paragraph p14
        Bold balanceActivity
        balanceActivity:AddText("Activity: Change the balance towards the right ear.")
        p14:Add(balanceActivity)
        p14:Add(break)
        p14:AddText("If the right arrow key is pressed, the balance should move towards the right ear. 
                    To do this, you need to get the current balance of the ")
        p14:Add(audioCode)
        p14:AddText(" object by calling the ")
        p14:Add(getBalanceCode)
        p14:AddText(" action. 
                    The new balance should be set to the current balance plus some increment value. 
                    Choose a good increment value for the balance to use when the right arrow key is pressed down. 
                    A good one is to increase the balance by 0.1 with each key press.")
        bodyDiv:Add(p14)

        bodyDiv:Add(break)
        bodyDiv:AddParagraph("You may now compile and run your code. There should be no errors. 
                            If there are errors, fix them and try again. 
                            You should be able to change the volume and balance by pressing the appropriate keys.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)

        bodyDiv:AddHeading("Resources", 3)
        bodyDiv:AddParagraph("The music used for this lab is Beachfront Celebration by Kevin MacLeod (incompetech.com). " 
        + "Licensed under Creative Commons: By Attribution 3.0 License.")
    end

    action GetMetaDescription returns text
        return "Learn about coding stereo audio controls with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Control the Audio)"
    end
    action GetName returns text
        return "Lab 3.4"
    end
    action GetShortDescription returns text
        return "how work Control the Audio in Quorum."
    end
    action GetLocation returns text
        return "lessons/chapter3/lab3_4.html"
    end
end