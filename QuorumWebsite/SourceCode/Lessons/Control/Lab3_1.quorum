use Libraries.Web.Page.all
use Libraries.Containers.Array


class Lab3_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.1: Conditionals - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Lab 3.1: Conditionals", 1)
        bodyDiv:Add(headDiv)

        Section section_goals
        section_goals:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goal of this lab is to learn the following:")
        
        UnorderedList goalsList
        goalsList:AddClassAttribute("list-disc list-outside pl-8")
        goalsList:AddListItem("Understanding conditionals")
        goalsList:AddListItem("Using conditionals")
        section_goals:Add(goalsList)

        Section section_csp_curriculum
        section_csp_curriculum:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        AddListItemWithBoldAtFront(list, "Big Idea: Data and Information: ", " EK 3.1.1B")
        section_csp_curriculum:Add(list)
        Section section_standards
        AddHeading(section_standards, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 

        Section section_vocabulary
        section_vocabulary:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_vocabulary, "Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("list-disc list-outside pl-8")
        vocabularyList:AddListItem(   "Conditional statement")
        vocabularyList:AddListItem(   "If")
        vocabularyList:AddListItem(   "Else if")
        vocabularyList:AddListItem(   "Else")
        vocabularyList:AddListItem(   "End")
        vocabularyList:AddListItem(   "Lexical scope")
        section_vocabulary:Add(vocabularyList)


        Section section_overview
        AddHeading(section_overview, "Overview", 2)

        section_overview:AddParagraph("The goal of this lab is to learn the fundamentals of conditional statements and learn how to write Quorum programs using them.")

        Section section_goal1
        AddHeading(section_goal1, "Goal 1: Learn about conditionals.", 2)

        section_goal1:AddParagraph("Conditionals are one of the most important aspects of programming. 
                            Conditional statements allow the program to make decisions, changing the behavior of the software during runtime. 
                            So far, your code has run from top to bottom, with the same behavior each time. 
                            Conditional statements allow your program to alter its behavior depending on any condition you specify. 
                            Conditionals can be used for a variety of tasks such as determining if a number given by a user is less than the number 100, or if the battery of your phone is about to die.")


        Paragraph p1
        CodeBlock ifCode
        CodeBlock elseIfCode
        CodeBlock elseCode
        CodeBlock endCode
        ifCode:AddText("if")
        elseIfCode:AddText("elseif")
        elseCode:AddText("else")
        endCode:AddText("end")
        p1:AddText("To use conditionals you use certain statements: ")
        p1:Add(ifCode)
        p1:AddText(", ")
        p1:Add(elseIfCode)
        p1:AddText(", ")
        p1:Add(elseCode)
        p1:AddText(" and ")
        p1:Add(endCode)
        p1:AddText(". The ")
        p1:Add(ifCode)
        p1:AddText(" is the first command in your block of decision. If this condition is not true your program will move on to the ")
        p1:Add(elseIfCode)
        p1:AddText(" command if it is available. Otherwise, it will move to the ")
        p1:Add(elseCode)
        p1:AddText(" statement. The ")
        p1:Add(elseIfCode)
        p1:AddText(" is not always used. You only use it when you have more than two decisions that must be made. If the program goes between the ")
        p1:Add(ifCode)
        p1:AddText(" and ")
        p1:Add(elseCode)
        p1:AddText(" statements in the block, and neither condition is met (or true), your program will go to the ")
        p1:Add(elseIfCode)
        p1:AddText(", if it is available, or directly to a final ")
        p1:Add(elseCode)
        p1:AddText(", if you choose to do that instead. In this case the ")
        p1:Add(elseCode)
        p1:AddText(" is the final statement in the decision block and must be used, it being the last decision the computer can make if all the other decisions are false. 
                    Once your program decides your condition is true it will go to the end of the block and move on. ")
        section_goal1:Add(p1)

        Paragraph p2
        Bold lexicalBold
        lexicalBold:AddText("lexical scoping")
        p2:AddText("If you define a variable inside of the ")
        p2:Add(ifCode)
        p2:AddText(" statement, in Quorum, this means it only exists inside the scope of the ")
        p2:Add(ifCode)
        p2:AddText(" statement, between the ")
        p2:Add(ifCode)
        p2:AddText(" and ")
        p2:Add(endCode)
        p2:AddText(" keywords. This is what is called ")
        p2:Add(lexicalBold)
        p2:AddText(", and it is very useful to keep a program organized. In the case that you want the variable to be accessible outside of the ")
        p2:Add(ifCode)
        p2:AddText("statement's scope, you have to define the variable above the ")
        p2:Add(ifCode)
        p2:AddText(" statement.")
        section_goal1:Add(p2)

        section_goal1:Add(break)

        AddHeading(section_goal1, "Example: Use conditional statements to find out users' phone preferences.", 3)

        CodeBlock example1Code
        example1Code:AddText(   "text answer = input (" + dq + "Do you use apple or android?" + dq + ")" + cr 
                            +   "if answer = " + dq + "Apple" + dq + "" + cr 
                            +   "   output " + dq + "I like the iPhone too!" + dq + "" + cr 
                            +   "else" + cr 
                            +   "   output " + dq + "Android is cool!" + dq + "" + cr 
                            +   "end" + cr )
        section_goal1:Add(preformatter:GeneratePreformattedCode(example1Code))

        section_goal1:AddParagraph("Run the program and there should not be any errors. Do not forget where you should enter your preference. If you wish, try other questions and answers as well!")

        AddIDE(section_goal1, "lab3_1IDE", "Activity:", "//Use conditional statements to find out users' computer preferences.", true)

        section_goal1:AddParagraph("Use Mac and Windows as your choices; do not forget to output a phrase for each preference.")


        Section section_goal2
        AddHeading(section_goal2, "Goal 2: Using conditionals", 2)
        section_goal2:AddParagraph("Now that you understand why and how to use conditional statements, let’s have some fun using them. 
                            We will start with a program that asks the users’ breakfast preferences.")


        section_goal2:Add(break)

        AddHeading(section_goal2, "Example: Use conditional statements to find out users' breakfast preferences.", 3)

        CodeBlock example2Code
        example2Code:AddText(   "text choice = input (" + dq + "What do you prefer for breakfast? Press 1 for eggs, press 2 for pancakes or press 3 for something else." + dq + ")" + cr 
                            +   "if choice = " + dq + "1" + dq + "" + cr 
                            +   "   output " + dq + "I like mine over easy!" + dq + "" + cr 
                            +   "elseif choice = " + dq + "2" + dq + " " + cr 
                            +   "   output " + dq + "I love butter and syrup with them!" + dq + "" + cr 
                            +   "else" + cr 
                            +   "   output " + dq + "It is great to have so many choices!" + dq + "" + cr 
                            +   "end" + cr )
        section_goal2:Add(preformatter:GeneratePreformattedCode(example2Code))

        section_goal2:AddParagraph("As you can see in the example above, you can insert a number in this case, as a text, but you can only use it in your block of decision if you have quotes.")

        AddIDE(section_goal2, "usersGame", "Activity:", "//Use conditional statements to find out users' game console preference. Use these 5 choices in your activity: PlayStation, Xbox, Wii, PC, or other option. 
        Run your program and see if it works properly. Show your work to your instructor. ", true)
        
        
        //bodyDiv:AddParagraph("Use these 4 choices in your activity: PlayStation, Xbox, Wii or other option. 
         //                  Run your program and see if it works properly, show your work to your instructor.")

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_vocabulary)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_goal1)
        bodyDiv:Add(section_goal2)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about conditional statements and lexical scoping in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Conditionals)"
    end
    action GetName returns text
        return "Lab 3.1"
    end
    action GetShortDescription returns text
        return "how Conditionals work in Quorum."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/lab3_1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end
