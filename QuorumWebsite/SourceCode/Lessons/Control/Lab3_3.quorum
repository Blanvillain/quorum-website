use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent


class Lab3_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.3: More Conditionals, Loops, and Debugging - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 3.3: More Conditionals, Loops, and Debugging", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("In this lab, we will learn the following computer science concepts:")
        
        UnorderedList goalsList
        goalsList:AddListItem("Introducing the DateTime Library")
        goalsList:AddListItem("How to use the debugger tool in Sodbeans")
        bodyDiv:Add(goalsList)

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList csplist
        AddListItemWithBoldAtFront(csplist, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        bodyDiv:Add(csplist)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards � Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")

        bodyDiv:Add(ccList) 

        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "DateTime Library")
        vocabularyList:AddListItem(    "Date")
        vocabularyList:AddListItem(    "Time")
        vocabularyList:AddListItem(    "Actions")
        vocabularyList:AddListItem(    "Bug")
        vocabularyList:AddListItem(    "Debugger")
        vocabularyList:AddListItem(    "Steps")
        bodyDiv:Add(vocabularyList)


        bodyDiv:AddHeading("Hotkeys", 2)

        UnorderedList hotKeysList
        hotKeysList:AddListItem(    "Breakpoint")
        hotKeysList:AddListItem(    "Continue")
        hotKeysList:AddListItem(    "Rewind")
        hotKeysList:AddListItem(    "Run Back To Cursor")
        hotKeysList:AddListItem(    "Run To Cursor")
        hotKeysList:AddListItem(    "Start")
        hotKeysList:AddListItem(    "Step Back Into")
        hotKeysList:AddListItem(    "Step Back Over")
        hotKeysList:AddListItem(    "Step Into")
        hotKeysList:AddListItem(    "Step Over")
        hotKeysList:AddListItem(    "Stop")
        bodyDiv:Add(hotKeysList)

        Paragraph p0
        p0:AddText("A list of Hotkeys can be found on the ")
        p0:AddLink("Getting Started with NetBeans", "/tutorials/language/gettingStarted.html")
        p0:AddText(" page.")
        bodyDiv:Add(p0)


        bodyDiv:AddHeading("Overview", 2)

        bodyDiv:AddParagraph("For this lab, you will learn a different type of library and how to use it. 
                            You will also learn how to use the debugger to test your code.")

        bodyDiv:AddHeading("Goal 1: Introducing the DateTime Library", 2)



        Paragraph p1
        CodeBlock dateTimeCode
        dateTimeCode:AddText("DateTime")
        p1:AddText("Before you start writing any code, let's understand some of the ")
        p1:Add(dateTimeCode)
        p1:AddText(" class. The ")
        p1:Add(dateTimeCode)
        p1:AddText(" class is used to get the date/time information from the computer.")
        bodyDiv:Add(p1)


        bodyDiv:Add(break)

        Paragraph example1Paragraph
        Bold example1bold
        example1bold:AddText("Example: Use the ")
        example1bold:Add(dateTimeCode)
        example1bold:AddText(" Library to output today�s date.")
        example1Paragraph:Add(example1bold)
        bodyDiv:Add(example1Paragraph)

        CodeBlock example1Code
        Span s1
        s1:AddText(     "//Lab3_3 Date and Time" + cr )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "use Libraries.System.DateTime" + cr 
                            +   "DateTime timeDate" + cr 
                            +   "output timeDate:GetMonth() + " + dq + "/" + dq + " + timeDate:GetDayOfMonth() + " + dq + "/" + dq + " + timeDate:GetYear()" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))


        Paragraph p2
        p2:AddText("On the second line, the ")
        p2:Add(dateTimeCode)
        p2:AddText(" object is used to get the month, day of month, and year. All three methods return an integer value from the system.")
        bodyDiv:Add(p2)

        Paragraph p3
        CodeBlock getMonthCode
        CodeBlock getDayOfMonthCode
        CodeBlock getYearCode
        CodeBlock getHourCode
        CodeBlock getMinuteCode
        CodeBlock getSecondCode
        getMonthCode:AddText("GetMonth()")
        getDayOfMonthCode:AddText("GetDayOfMonth()")
        getYearCode:AddText("GetYear()")
        getHourCode:AddText("GetHour()")
        getMinuteCode:AddText("GetMinute()")
        getSecondCode:AddText("GetSecond()")
        p3:AddText("In addition to ")
        p3:Add(getMonthCode)
        p3:AddText(", ")
        p3:Add(getDayOfMonthCode)
        p3:AddText(" and ")
        p3:Add(getYearCode)
        p3:AddText(" the DateTime Library also have actions to get the time that are: ")
        p3:Add(getHourCode)
        p3:AddText(", ")
        p3:Add(getMinuteCode)
        p3:AddText(" and ")
        p3:Add(getSecondCode)
        p3:AddText(". All three of these methods are used to get the time information from the system.")
        bodyDiv:Add(p3)

        AddSideBySideIDE(bodyDiv, "outputTime", "Activity: Try using dates and time", 
            "Use a library to output the current time")

//        SideBySideIDE outputTimeIDE
//        outputTimeIDE:SetUniqueIdentifier("outputTime")
//        outputTimeIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p4
//        p4:AddText("Use the ")
//        p4:Add(dateTimeCode)
//        p4:AddText(" Library to output the current time.")
//        outputTimeIDE:SetIDESubtitle(p4)
//        outputTimeIDE:Setup()
//        bodyDiv:Add(outputTimeIDE)

        Paragraph p5
        p5:AddText("The output should be in hour:minute:second format. For more information about the DateTime class, check out the documentation for the ")
        p5:AddLink("DateTimeclass", "/libraries/System/DateTime.html")
        p5:AddText(".")
        bodyDiv:Add(p5)


        bodyDiv:AddHeading("Goal 2: Use the Debugger", 2)

        bodyDiv:AddParagraph("It�s time to try out the Sodbeans debugger! 
                            Our goal is to help you become familiar with the functionality of the debugger in Sodbeans. 
                            The debugger has controls, such as pause, continue, breakpoints, and step over, to navigate through the code in debugger mode.")

        bodyDiv:AddParagraph("The debugger is a tool in Quorum that helps you solve complicated logic problems in your code, also known as a bug. 
                            It executes the program line by line so that you can keep track of what is going on at runtime and observe the behavior of your code. 
                            The debugger issues steps to check the current state of a program and the value of variables. 
                            Steps are commands that execute one line of code or part of the program. 
                            Quorum's debugger offers different types of functionality to help you debug your code.")

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Breakpoint", ": Inserts a stop location into the debugger at a specific line number in the editor to tell the debugger where to stop.")
        AddListItemWithBoldAtFront(list, "Continue", ": Runs the program or continues the debugger until a breakpoint is found or the end of the program is reached.")        
        AddListItemWithBoldAtFront(list, "Rewind", ": Moves the debugger back to the beginning of the program or back to the last breakpoint that was found.")        
        AddListItemWithBoldAtFront(list, "Run Back To Cursor", ": Moves the debugger backwards to the point in the program that matches the line the cursor is currently located on.")        
        AddListItemWithBoldAtFront(list, "Run To Cursor", ": Keeps moving the debugger forward to the end of the program or to the cursor.")
        AddListItemWithBoldAtFront(list, "Start", ": Starts the debugger and runs the program after the build is successful and the focus is set to the editor.")
        AddListItemWithBoldAtFront(list, "Step Back Into", ": Moves the debugger's active line into part of the previous line of code.")
        AddListItemWithBoldAtFront(list, "Step Back Over", ": Moves the debugger's active line over one complete previous line of code.")
        AddListItemWithBoldAtFront(list, "Step Into", ": Moves the debugger's active line into part of the next line of code. If that line has an action call the debugger steps into that action.")
        AddListItemWithBoldAtFront(list, "Step Over", ": Moves the debugger's active line over one complete next line of code. If that line has an action call the debugger executes over all of the code in that action.")
        AddListItemWithBoldAtFront(list, "Stop", ": Turns off the debugger and stops the program from running.")
        bodyDiv:Add(list)

        bodyDiv:AddParagraph("This section of the lab was divided into smaller parts to help you accomplish a specific task with the debugger. 
                            For your reference, the debugger keyboard shortcuts are in the beginning of this lab and can also be found in Lab 1.1.")


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Start and stop debugger", 4)

        bodyDiv:AddParagraph("First, you need to start the debugger. To start the debugger, do one of the three following options:")
        UnorderedList debuggerList
        debuggerList:AddListItem(    "Visually click on the debugger button on the toolbar.")
        debuggerList:AddListItem(    "Use the menu bar by going to Debugger -> Debug Main Project.")
        debuggerList:AddListItem(    "Use the keyboard shortcut.")
        bodyDiv:Add(debuggerList)
        bodyDiv:AddParagraph("To finish the debugger session, either click on the Finish Debugger Session button, go to the menu, or use the keyboard shortcuts.")


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Setting breakpoints", 4)
        bodyDiv:AddParagraph("Now, let�s try setting breakpoints. 
                            Set at least three breakpoints in the editor, preferably at the start of each conditional and loop. 
                            To set a breakpoint, click on the line number on the side of the editor or use the shortcut. 
                            For the sighted users, a colored line will appear on the line where a breakpoint has been set. 
                            When you start debugging, the program will run until it hits a breakpoint that you set in the editor by using continue.")
        bodyDiv:AddParagraph("Start the debugger. 
                            Tell the debugger to continue and the program will then halt at the first breakpoint you just set.")


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Step controls", 4)
        bodyDiv:AddParagraph("Use the Step Over to move the active line to the next line. 
                            Use the step controls, such as Step Back Over, Step Back Into, Step Over, and so on, to move the active line around in the editor. 
                            Watch and/or listen to how the active line moves into the part of the code. 
                            For instance, notice how it jumps into the proper conditional. 
                            It only skips a block of the code in the conditional because it was checked as false, and it only enters a block of the code in the conditional that returns true. 
                            In the case of a loop, notice that the active line keeps moving around until the proper action in the program has been taken.")


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Variables window", 4)
        bodyDiv:AddParagraph("You can also use the Variables window to observe the use of variables in the case of lexical scoping. 
                            Open the Variables window and use any of the step controls in the debugger to observe variables and their respective values. 
                            The Variables window can be helpful in some cases; for example, keeping track of each time the program goes through a loop. 
                            Try this in the loop to see what happens in the Variables window.")
        bodyDiv:AddParagraph("Step through all lines in the editor to finish the debugger, even though you could just simply stop the debugger without taking steps. 
                            The step controls in the debugger should be finished when the active line reaches the end of the program.")

        bodyDiv:AddParagraph("Below is an example of code that has a few logic errors. The program is supposed to take in four numbers as inputs, convert them to integers, and then call an action to perform a series of computations. The variables of userInput1-4 are supposed to correspond to integers w-z and the function parameters a-d, as you would likely expect. You may be able to see the logic errors just by reading through the code, but pretend that you cannot so you can practice using the debugger.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("class Main" + cr + cr
            + "    action Main" + cr
            + "        text userInput1 = input(" + dq + "Input the first number:" + dq + ")" + cr
            + "        text userInput2 = input(" + dq + "Input the second number:" + dq + ")" + cr
            + "        text userInput3 = input(" + dq + "Input the third number:" + dq + ")" + cr
            + "        text userInput4 = input(" + dq + "Input the fourth number:" + dq + ")" + cr + cr
            + "        integer w = cast(integer, userInput1)" + cr
            + "        integer x = cast(integer, userInput2)" + cr
            + "        integer y = cast(integer, userInput2)" + cr
            + "        integer z = cast(integer, userInput4)" + cr + cr
            + "        output " + dq + "The final result is " + dq + " + Computation(w, x, y, z) + " + dq + "." + dq + cr
            + "    end" + cr + cr
            + "    action Computation(integer a, integer d, integer c, integer b) returns integer" + cr
            + "        integer temp1 = a + b" + cr
            + "        integer temp2 = c * d" + cr
            + "        integer temp3 = a / d" + cr
            + "        integer temp4 = b - c" + cr + cr
            + "        integer result = temp1 * (temp2 - temp3) / temp4" + cr + cr
            + "        return result" + cr
            + "    end" + cr
            + "end" + cr))

        bodyDiv:AddParagraph("Hopefully you were able to spot at least the first two logic errors in this code using the debugger. The first is that integer y is assigned userInput2, but it should have been assigned userInput3. The second is that the parameters of the action are out of order: integers b and d should be swapped. The last logic error is not quite as obvious, but rather depends on the inputs you provide. For instance, try inputting 2 as both the second and fourth number (without fixing the other two logic errors). This will result in temp4 = 0, which will cause a runtime error because the final result computation tries to divide by zero.")

        bodyDiv:AddParagraph("Optionally, if there is enough time and if more practice is needed, you can practice more with the debugger by going through the Debugging Programs tutorial in the Sodbeans Tutorials.")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about the DateTime class, conditionals, and debugging in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (More Conditionals, Loops, and Debugging)"
    end
    action GetName returns text
        return "Lab 3.3"
    end
    action GetShortDescription returns text
        return "More Conditionals, Loops, and Debugging in Quorum."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/lab3_3.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end