use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.all

class Challenge3_3 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Challenge 3.3: Trivia Challenge - Visual - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Challenge 3.3: Trivia Challenge - Visual", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("In this assignment, you will practice the following computer science concepts:")
        
        UnorderedList goalsList
        goalsList:AddListItem("Reading Files")
        goalsList:AddListItem("Using Control Structures")
        bodyDiv:Add(goalsList)


        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.1, LO 1.1.1, EK 1.1.1A, EU 1.2, LO 1.2.1, EK 1.2.1E")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.3, LO 5.3.1, EK 5.3.1I, EU 5.5, LO 5.5.1, EK 5.5.1H, EK 5.5.1I, EK 5.5.1J")
        bodyDiv:Add(list)

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Common Core Standards", 2)

        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ",
        "CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, 
        CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4,
        CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList)

        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "Array")
        vocabularyList:AddListItem(    "Control Structures")
        vocabularyList:AddListItem(    "File Reader")
        bodyDiv:Add(vocabularyList)

        bodyDiv:AddHeading("Overview", 2)

        Paragraph p1
        Bold mainBold
        mainBold:AddText("main.quorum")
        p1:AddText("In this assignment, you will create a trivia game. This assignment allows you to create your own questions and answers for the game. Download this ")
        p1:AddLink( "zip file" , "/files/lessons/chapter3/Challenge3_3Template.zip")
        p1:AddText(" for a template to help you get started. 
                    Open the provided project template and navigate to the ") 
        p1:Add(mainBold)
        p1:AddText(" file.")        
        bodyDiv:Add(p1)

//        SideBySideIDE writeQuestionsIDE
//        writeQuestionsIDE:SetUniqueIdentifier("writeQuestions")
//        writeQuestionsIDE:Setup()
//        writeQuestionsIDE:GetIDETitle():AddText("Activity 1: Write The Questions (And Answers)")
//        writeQuestionsIDE:GetIDESubtitle():AddText(" ")
//        bodyDiv:Add(writeQuestionsIDE)

        Paragraph p2
        Bold txtBold
        txtBold:AddText( dq + ".txt" + dq )
        p2:AddText("This assignment stores the questions and answers for your game in separate " )
        p2:Add(txtBold)
        p2:AddText(" files. 
                    This allows you to update or change your questions/answers without having to modify your program code. 
                    Create two " )
        p2:Add(txtBold)
        p2:AddText(" files, one for the questions and one for the answers. 
                    Come up with the questions and answers for your game and put them in the appropriate files, one question or answer per line.")  
        bodyDiv:Add(p2)


        bodyDiv:AddHeading("Understanding FileReaders", 3)

        Paragraph p3
        CodeBlock librariesSystemCode
        CodeBlock fileReaderCode
        CodeBlock arrayCode
        CodeBlock librariesContainersCode
        CodeBlock fileCode
        librariesSystemCode:AddText("Libraries.System.FileReader")
        fileReaderCode:AddText("FileReader")
        arrayCode:AddText("Array")
        librariesContainersCode:AddText("Libraries.Containers.Array")
        fileCode:AddText("File")
        p3:AddText("Because your questions and answers are stored in separate ")
        p3:Add(txtBold)
        p3:AddText(" files, your program needs to read those files in order to access your questions. 
                    To do this, you need to use the ")
        p3:Add(fileReaderCode)
        p3:AddText(" object from the ") 
        p3:Add(librariesSystemCode)
        p3:AddText(" library. The ") 
        p3:Add(fileReaderCode)
        p3:AddText(" object reads a Quorum ") 
        p3:Add(fileCode)
        p3:AddText(" object sequentially starting from the beginning of the file. 
                    To store the questions and answers during the program you use an object known in Quorum as an ") 
        p3:Add(arrayCode)
        p3:AddText(". An ") 
        p3:Add(arrayCode)
        p3:AddText(" is simply a container that stores items in a contiguous block of memory. To use the ") 
        p3:Add(arrayCode)
        p3:AddText(" object, you need to include the ")  
        p3:Add(librariesContainersCode)
        p3:AddText(" library.")        
        bodyDiv:Add(p3)


//        SideBySideIDE createObjectsIDE
//        createObjectsIDE:SetUniqueIdentifier("createObjects")
//        createObjectsIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p4

//        p4:AddText("Declare the ")
//        p4:Add(fileReaderCode)
//        p4:AddText(" and ")
//        p4:Add(fileCode)
//        p4:AddText(" objects for the questions and answers, and set the paths of the files.")
//        createObjectsIDE:SetIDESubtitle(p4)
//        createObjectsIDE:Setup()
//        bodyDiv:Add(createObjectsIDE)

        Paragraph p5
        CodeBlock actionCreateGameCode
        CodeBlock endCode
        actionCreateGameCode:AddText("action CreateGame")
        endCode:AddText("end")
        Bold questionsTxtBold
        Bold answersTxtBold
        questionsTxtBold:AddText( dq + "questions.txt" + dq )  
        answersTxtBold:AddText( dq + "answers.txt" + dq )
        p5:AddText("In order to use ")
        p5:Add(fileReaderCode)
        p5:AddText(" objects, you first need to declare both ")
        p5:Add(fileCode)
        p5:AddText(" and ") 
        p5:Add(fileReaderCode)
        p5:AddText(" objects. Do this below the other declarations but above the line that starts with ") 
        p5:Add(actionCreateGameCode)
        p5:AddText(". Since you have 2 files, one for questions and one for answers, you need two ") 
        p5:Add(fileCode)
        p5:AddText(" objects, one that represents the ")  
        p5:Add(questionsTxtBold)
        p5:AddText(" file and another that represents the ")  
        p5:Add(answersTxtBold)
        p5:AddText(" file. You also need two ")  
        p5:Add(fileReaderCode)
        p5:AddText(" objects, one to read the ")   
        p5:Add(questionsTxtBold)
        p5:AddText(" file and another to read the ")  
        p5:Add(answersTxtBold)
        p5:AddText(" file.")   
        bodyDiv:Add(p5)

        Paragraph exampleParagraph
        Bold exampleBold
        exampleBold:AddText("Example: Declare ")
        exampleBold:Add(fileCode)
        exampleBold:AddText(" and ")
        exampleBold:Add(fileReaderCode)
        exampleBold:AddText(" objects to store the questions.")
        exampleParagraph:Add(exampleBold)
        bodyDiv:Add(exampleParagraph)

        CodeBlock exampleCode
        Span sA
        Span sB
        sA:AddText(     "// this line declares a file object called questionsFile" + cr )
        sA:SetClassAttribute("comment")
        exampleCode:Add(sA)
        exampleCode:AddText(   "File questionsFile" + cr + cr )
        sB:AddText(     "// this line declares fileReader object called questionsReader" + cr )
        sB:SetClassAttribute("comment")
        exampleCode:Add(sB)
        exampleCode:AddText(   "FileReader questionReader" + cr + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(exampleCode))

        Paragraph activity1
        Bold activity1Bold
        activity1Bold:AddText("Activity: Declare ")
        activity1Bold:Add(fileCode)
        activity1Bold:AddText(" and ")
        activity1Bold:Add(fileReaderCode)
        activity1Bold:AddText(" objects to store answers.")
        activity1:Add(activity1Bold)
        activity1:Add(break)
        activity1:AddText("Declare the needed objects.")
        bodyDiv:Add(activity1)
        
        bodyDiv:Add(break)

        Paragraph p5a
        p5a:AddText("You also need to set the paths of the ")   
        p5a:Add(fileCode)
        p5a:AddText(" objects to your questions and answers files. Also do this in ")   
        p5a:Add(actionCreateGameCode)
        p5a:AddText(", below the existing code, but above the line that starts with ")   
        p5a:Add(endCode)
        p5a:AddText(".")
        bodyDiv:Add(p5a)

        Paragraph example1a
        Bold example1aBold
        CodeBlock setPathCode
        setPathCode:AddText("SetPath")
        example1aBold:AddText("Example: Set the path for the question file. Use the ")
        example1aBold:Add(setPathCode)
        example1aBold:AddText(" action on the questionFile object.")
        example1a:Add(example1aBold)
        bodyDiv:Add(example1a)


        CodeBlock example1aCode
        example1aCode:AddText("questionsFile:SetPath(" + dq + "questions.txt" + dq + ")" + cr +cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1aCode))

        Paragraph activity1a
        Bold activity1aBold
        activity1aBold:AddText("Activity: Set the path for the answers file.")
        activity1a:Add(activity1aBold)
        activity1a:Add(break)
        bodyDiv:Add(activity1a)

        bodyDiv:Add(break)

        Paragraph p5bis
        p5bis:AddText("Your program needs a place to store the questions and answers read from the files. To do this, we can use arrays. Navigate back up to where you placed your declarations for the ")
        p5bis:Add(fileCode)
        p5bis:AddText(" and ")
        p5bis:Add(fileReaderCode)
        p5bis:AddText(" objects. You will place the declarations for the Arrays below these declarations.")        
        bodyDiv:Add(p5bis)


        Paragraph example1Paragraph
        Bold example1Bold
        example1Bold:AddText("Example: Declare an ")
        example1Bold:Add(arrayCode)
        example1Bold:AddText(" object to store the questions.")
        example1Paragraph:Add(example1Bold)
        bodyDiv:Add(example1Paragraph)

        CodeBlock example1Code
        Span s1
        s1:AddText(     "// this line declares an array called questions. The &#60text&#62 part tells the Array" + cr 
                    +   "// that it will store text" + cr  )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "Array&#60text&#62 questions" + cr + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))

        Paragraph activity2
        Bold activity2Bold
        activity2Bold:AddText("Activity: Declare an ")
        activity2Bold:Add(arrayCode)
        activity2Bold:AddText(" object to store the answer text.")
        activity2:Add(activity2Bold)
        activity2:Add(break)
        activity2:AddText("Declare the needed object.")
        bodyDiv:Add(activity2)

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Goal 1: Reading Files", 2)
        Paragraph p6
        CodeBlock openForReadCode
        openForReadCode:AddText( "OpenForRead" )  
        p6:AddText("To get your questions and answers from their files into your program, you need to tell your program to read the files. 
                    In order to read a file, it must first be opened. 
                    In Quorum, you must also tell files what they are being opened for (reading, writing, reading and writing). 
                    Since we are going to be reading our file once it has been opened, we use the ")
        p6:Add(openForReadCode)
        p6:AddText(" action on our ")
        p6:Add(fileReaderCode)
        p6:AddText(" objects. This action takes a single parameter that represents the ") 
        p6:Add(fileCode)
        p6:AddText(" object we want to open for read. Call these actions in the ") 
        p6:Add(actionCreateGameCode)
        p6:AddText(" action, below the code you wrote to set the paths of the ")  
        p6:Add(fileCode)
        p6:AddText(" objects.")        
        bodyDiv:Add(p6)

        Paragraph example2a
        Bold example2aBold
        example2aBold:AddText("Example: Open question file to be read.")
        example2a:Add(example2aBold)
        bodyDiv:Add(example2a)

        CodeBlock example2aCode
        example2aCode:AddText("    questionsReader:OpenForRead(questionsFile)" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2aCode))

        Paragraph activity2a
        Bold activity2aBold
        activity2aBold:AddText("Activity: Open the answers file to be read.")
        activity2a:Add(activity2aBold)
        bodyDiv:Add(activity2a)

        bodyDiv:Add(break)

        Paragraph p8
        CodeBlock readCode
        CodeBlock readLineCode
        CodeBlock readLinesCode
        CodeBlock isAtEndOfFileCode
        CodeBlock trueCode
        CodeBlock falseCode
        readCode:AddText( "Read" )  
        readLineCode:AddText( "ReadLine" )  
        readLinesCode:AddText( "ReadLines" )  
        isAtEndOfFileCode:AddText( "IsAtEndOfFile" )  
        trueCode:AddText( "true" )  
        falseCode:AddText( "false" )  
        p8:AddText("Now, your file is open and ready to read. We will read our files in the ")
        p8:Add(actionCreateGameCode)
        p8:AddText("  action, below the code that opened the files for reading. There are many options for actions to read your file. The ")
        p8:Add(readCode)
        p8:AddText(" action reads and returns the entire contents of the file. The ") 
        p8:Add(readLineCode)
        p8:AddText(" action reads and returns a single line from the file. The ")  
        p8:Add(readLinesCode)
        p8:AddText(" action reads and returns all the remaining lines of the file starting from the current position. You can know if you have read the entire file or not by calling the ")  
        p8:Add(isAtEndOfFileCode)
        p8:AddText(" action. This action returns ") 
        p8:Add(trueCode)
        p8:AddText(" if the end of the file has been reached and ")  
        p8:Add(falseCode)
        p8:AddText(" otherwise.")        
        bodyDiv:Add(p8)




        Paragraph example3aParagraph
        Bold example3aBold
        CodeBlock questionsReaderCode
        questionsReaderCode:AddText( "questionsReader" ) 
        example3aBold:AddText("Example: Use the ")
        example3aBold:Add(questionsReaderCode)
        example3aBold:AddText(" object to read the questions file one line at a time into the questions array until the end of the file has been reached.")
        example3aParagraph:Add(example3aBold)
        bodyDiv:Add(example3aParagraph)

        CodeBlock example3aCode
        Span s4
        Span s5
        Span s6
        Span s7
        Span s8
        s4:AddText(     "// This line initially reads the file. This is needed before calling the " + cr 
                    +   "// IsAtEndOfFile action" + cr  )
        s4:SetClassAttribute("comment")
        example3aCode:Add(s4)
        example3aCode:AddText(   "text question = questionsReader:ReadLine()" + cr + cr )
        s5:AddText(     "// this line adds the question we just read into the questions Array" + cr )
        s5:SetClassAttribute("comment")
        example3aCode:Add(s5)
        example3aCode:AddText(   "questions:Add(question)" + cr + cr )
        s6:AddText(     "// this repeat statement reads the rest of the file until the end of the file is" + cr 
                    +   "// reached" + cr )
        s6:SetClassAttribute("comment")
        example3aCode:Add(s6)
        example3aCode:AddText(   "repeat until questionsReader:IsAtEndOfFile()" + cr + cr )
        s7:AddText(     "   // this line reads in another line from the file" + cr )
        s7:SetClassAttribute("comment")
        example3aCode:Add(s7)
        example3aCode:AddText(   "   question = questionsReader:ReadLine()" + cr + cr )
        s8:AddText(     "   // this line adds the question we just read into the questions Array" + cr )
        s8:SetClassAttribute("comment")
        example3aCode:Add(s8)
        example3aCode:AddText(   "   questions:Add(question)" + cr 
                            +   "end" )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3aCode))

        Paragraph activity3aParagraph
        Bold activity3aBold
        CodeBlock answersReaderCode
        answersReaderCode:AddText( "answersReader" ) 
        activity3aBold:AddText("Example: Use the ")
        activity3aBold:Add(questionsReaderCode)
        activity3aBold:AddText(" object to read the questions file one line at a time into the questions array until the end of the file has been reached.")
        activity3aParagraph:Add(activity3aBold)
        activity3aParagraph:Add(break)
        activity3aParagraph:AddText("The answers file is read in the exact same way.")
        bodyDiv:Add(activity3aParagraph)



//        SideBySideIDE closeIDE
//        closeIDE:SetUniqueIdentifier("close")
//        closeIDE:Setup()
//        closeIDE:GetIDETitle():AddText("Activity: Close the FileReader objects.")
//        closeIDE:GetIDESubtitle():AddText(" ")
//        bodyDiv:Add(closeIDE)

        Paragraph p9
        CodeBlock closeCode
        closeCode:AddText( "Close" )   
        p9:AddText("Once you have read the contents of your questions and answers files into their respective arrays, you are done with those files and ")
        p9:Add(fileReaderCode)
        p9:AddText(" objects. In Quorum, once you are done using a file that you have opened in your program, you need to tell Quorum that you are done with it and that it is okay to close the file. You can do this by calling the ")
        p9:Add(closeCode)
        p9:AddText(" action on your ") 
        p9:Add(fileReaderCode)
        p9:AddText(" objects. Write this code after the code you have just completed.")        
        bodyDiv:Add(p9)

        Paragraph example3b
        Bold example3bBold
        example3bBold:AddText("Example: Close the questions file.")
        example3b:Add(example3bBold)
        bodyDiv:Add(example3b)

        CodeBlock example3bCode
        example3bCode:AddText("    questionsReader:Close()" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3bCode))        

        Paragraph activity3b
        Bold activity3bBold
        activity3bBold:AddText("Activity: Close the answers file")
        activity3b:Add(activity3bBold)
        bodyDiv:Add(activity3b)

        bodyDiv:AddHeading("Goal 2: Using Control Structures", 2)
        Paragraph p10
        CodeBlock inputCode
        CodeBlock trimCode
        CodeBlock textBoxCode
        inputCode:AddText( "input" )   
        trimCode:AddText( "Trim" )
        textBoxCode:AddText("TextBox")
        p10:AddText("Once the program has read all of the questions and answers, it should start the game. Your program should output all of the questions and ask the user for answers. The user input is captured with a ")
        p10:Add(textBoxCode)
        p10:AddText(". The user input should be checked against the answer, and if the answer is correct, a message should be displayed. If the answer is not correct, a different message should be displayed. For the convenience of whoever is playing your game, you may want to ignore any whitespace before and after their answer. Calling the ")
        p10:Add(trimCode)
        p10:AddText(" action on the text they inputted will accomplish this.")        
        bodyDiv:Add(p10)

        Paragraph p10bis
        CodeBlock actionUpdateCode
        CodeBlock actionPressedKeyCode
        actionUpdateCode:AddText( "action Update(number seconds)" )   
        actionPressedKeyCode:AddText( "action PressedKey" )   
        p10bis:AddText("To accomplish this, we will write code in two places. The first place is in our game's ")
        p10bis:Add(actionUpdateCode)
        p10bis:AddText(" action, where we will display the question for the user to answer if the game is not over, and if the game is over, we will display a message telling them how many questions they got right out of the total number of questions. The second place we will write code is in the action labeled ")
        p10bis:Add(actionPressedKeyCode)
        p10bis:AddText(" where we will write code to get the user's input guess and check it against the correct answer, displaying a message to the user telling them if they were right or wrong.")        
        bodyDiv:Add(p10bis)

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Use control structures to ask questions, or display a message when the game is over.", 4)

        CodeBlock example3Code
        Span s9
        Span s10
        Span s11
        Span s12
        example3Code:AddText(   "action Update(number seconds)")
        s9:AddText(     cr + "   // This statement checks if it is time to get a new question for the " + cr 
                    +   "   // user, or if the game is over" + cr )
        s9:SetClassAttribute("comment")
        example3Code:Add(s9)
        example3Code:AddText(   "   if nextQuestion and not gameOver" + cr )
        s10:AddText(    "       //If the game is not over, the text of the label  used to display" + cr 
                    +   "       //the question is set to the next question" + cr)
        s10:SetClassAttribute("comment")
        example3Code:Add(s10)
        example3Code:AddText(   "       label:SetText(questions:Get(index))" + cr + cr )
        s11:AddText(    "       // once a new question is displayed, a new question will not be" + cr 
                    +   "       // ready until the question is answered" + cr )
        s11:SetClassAttribute("comment")
        example3Code:Add(s11)
        example3Code:AddText(   "       nextQuestion = false" + cr 
                            +   "   end" + cr + cr 
                            +   "   if gameOver" + cr )
        s12:AddText(    "       // if the game is over, display the game over message, telling" + cr 
                    +   "       // the user how many questions they got right" + cr )
        s12:SetClassAttribute("comment")
        example3Code:Add(s12)
        example3Code:AddText(   "       label:SetText(" + dq + "Game Over! You got " + dq + " + correctGuesses + " + dq + "/" + dq + " + questions:GetSize() + " + dq + " questions correct!" + dq + ")" + cr 
                            +   "   end" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3Code))




        Paragraph p11
        CodeBlock actionPressedKey2Code
        CodeBlock keyboardListenerCode
        actionPressedKey2Code:AddText( "action PressedKey(KeyboardEvent event)" )   
        keyboardListenerCode:AddText("KeyboardListener")
        p11:AddText("Our game is declared as a ")
        p11:Add(keyboardListenerCode)
        p11:AddText(", which means that the Quorum Game Engine will tell our game any time a key is pressed on the keyboard. When keys are pressed on the keyboard, if they are letters, numbers, or symbols, they will appear in the text box. We can tell our program what to do when a key is pressed by writing code in the action labeled ")        
        p11:Add(actionPressedKey2Code)
        p11:AddText(". If the user hits the enter key, we will then capture whatever is currently in the text box as their guess. That guess can then be checked against the correct answer to determine if the user is right or wrong. It is important to note that there is currently no way to clear text from a TextBox object, so users playing the game will have to backspace over any previously entered input.")
        bodyDiv:Add(p11)



        bodyDiv:AddHeading("Get the user's input from the TextBox when the enter key is pressed and check the guess against the correct answer.", 2)


        CodeBlock example4Code
        Span s13
        Span s14
        Span s15
        Span s16
        Span s17
        Span s18
        Span s19
        Span s20
        Span s21
        s13:AddText(    "//This line checks if the key being pressed is the enter key." + cr 
                    +   "//If it is, then the input in the textbox is captured. If it is not, then the" + cr 
                    +   "//event is ignored" + cr )
        s13:SetClassAttribute("comment")
        example4Code:Add(s13)
        example4Code:AddText(   "if event:keyCode = event:ENTER and index not= answers:GetSize()" + cr )
        s14:AddText(    "   //This line gets whatever text is in the textbox and stores it as the variable guess" + cr )
        s14:SetClassAttribute("comment")
        example4Code:Add(s14)
        example4Code:AddText(   "   text guess = box:GetInput()" + cr + cr )
        s15:AddText(    "   //This line removes whitespace from the user's guess." + cr )
        s15:SetClassAttribute("comment")
        example4Code:Add(s15)
        example4Code:AddText(   "   guess = guess:Trim()" + cr + cr )
        s16:AddText(    "   //This if statement checks the user's input against the answer to the" + cr 
                    +   "   //question. The EqualsIgnoringCase action will return true if the user's" + cr 
                    +   "   //guess is the same as the answer ignoring upper/lowercase." + cr )
        s16:SetClassAttribute("comment")
        example4Code:Add(s16)
        example4Code:AddText(   "   if guess:EqualsIgnoringCase(answers:Get(index))" + cr )
        s17:AddText(    "       //If the guess was correct, increment the correctGuesses counter." + cr )
        s17:SetClassAttribute("comment")
        example4Code:Add(s17)
        example4Code:AddText(   "       correctGuesses = correctGuesses + 1" + cr + cr )
        s18:AddText(    "       //Show the correct message." + cr )
        s18:SetClassAttribute("comment")
        example4Code:Add(s18)
        example4Code:AddText(   "       correct:Show()" + cr 
                            +   "   else" + cr )
        s19:AddText(    "       //If the guess was not correct, then show the incorrect message." + cr )
        s19:SetClassAttribute("comment")
        example4Code:Add(s19)
        example4Code:AddText(   "       incorrect:Show()" + cr 
                            +   "   end" + cr + cr )
        s20:AddText(    "   //This line allows the next question and answer to be accessed." + cr )
        s20:SetClassAttribute("comment")
        example4Code:Add(s20)
        example4Code:AddText(   "   index = index + 1" + cr + cr )
        s21:AddText(    "   //This line checks if there is another question avaliable to ask." + cr 
                    +   "   //If there is not, then the game is over." + cr )
        s21:SetClassAttribute("comment")
        example4Code:Add(s21)
        example4Code:AddText(   "   if index < questions:GetSize()" + cr 
                            +   "       nextQuestion = true" + cr 
                            +   "   else" + cr 
                            +   "       gameOver = true" + cr 
                            +   "   end" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example4Code))

        bodyDiv:AddParagraph("You can now compile and run your game. If there are any errors, fix them and try again. Each question should appear on the screen. The player may enter text into the text box, pressing enter when he/she is done guessing. A message should display that tells the user if they were correct or incorrect.")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about control structures and reading files by coding a visual trivia game in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Challenge (Trivia Challenge - Visual)"
    end
    action GetName returns text
        return "Challenge 3.3"
    end
    action GetShortDescription returns text
        return "how work Trivia Challenge - Visual in Quorum."
    end
    
    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/challenge3_3.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end