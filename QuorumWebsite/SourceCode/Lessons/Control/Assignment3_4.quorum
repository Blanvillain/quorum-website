use Libraries.Web.Page.all
use Libraries.Containers.Array

class Assignment3_4 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 3.4: Key Press Madness - Visual - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Assignment 3.4: Key Press Madness - Visual", 1)
        bodyDiv:Add(headDiv)

        Section section_goals
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("In this assignment, we will practice the following computer science concepts")
        
        UnorderedList goalsList
        goalsList:AddClassAttribute("flex flex-col gap-y-3")
        goalsList:AddListItem("Using conditional statements")
        goalsList:AddListItem("Managing User Input")
        section_goals:Add(goalsList)


        Section section_csp_curriculum
        section_csp_curriculum:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)

        UnorderedList List
        List:AddClassAttribute("flex flex-col gap-y-3")
        AddListItemWithBoldAtFront(List, "Big Idea: Creativity: ", "EU 1.3, LO 1.3.1, EK 1.3.1D ")
        AddListItemWithBoldAtFront(List, "Big Idea: Programming: ", "EU 5.1, LO 5.1.2, EK 5.1.2A, EK 5.1.2B, EU 5.5, LO 5.5.1, EK 5.5.1E, EK 5.5.1F, EK 5.5.1G")
        section_csp_curriculum:Add(List)

        Section section_standards
        section_standards:SetClassAttribute("flex flex-col gap-y-3")
        AddHeading(section_standards, "Common Core Standards", 2)

        UnorderedList ccList
        ccList:AddClassAttribute("flex flex-col gap-y-3")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ",
        "CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, 
        CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4,
        CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, CCSS.Math.Practice.MP8")
        section_standards:Add(ccList)


        Section section_vocabulary
        section_vocabulary:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_vocabulary, "Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("flex flex-col gap-y-3")
        vocabularyList:AddListItem(    "Actions")
        vocabularyList:AddListItem(    "Class")
        vocabularyList:AddListItem(    "Conditional")
        vocabularyList:AddListItem(    "Image Sheet")
        section_vocabulary:Add(vocabularyList)


        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-3")

        AddHeading(section_overview, "Overview", 2)

        Paragraph p1
        CodeBlock gameCode
        CodeBlock inputMonitorCode
        CodeBlock keyboardEventCode
        gameCode:AddText("Game")
        inputMonitorCode:AddText("InputMonitor")
        keyboardEventCode:AddText("KeyboardEvent")
        p1:AddText("This lab demonstrates how to map certain animations to keys on the keyboard to play when that key is pressed. 
                    The Quorum ")
        p1:Add(gameCode)
        p1:AddText(" library will be used, along with the ")
        p1:Add(inputMonitorCode)
        p1:AddText(" and ")
        p1:Add(keyboardEventCode)
        p1:AddText(" libraries to handle keyboard input during the program. 
                    You will write a program that will play certain animations upon a key being pressed. 
                    Download ")
        p1:AddLink("Assignment3_4Template", "/files/lessons/chapter3/Assignment3_4Template.zip")
        p1:AddText(" for a template to help you get started.")
        section_overview:Add(p1)


        AddHeading(section_overview, "Goal 1: Using Conditional Statements", 2)

        Paragraph p2
        CodeBlock createGameCode
        CodeBlock spriteCode
        CodeBlock updateCode
        Bold mainBold
        Bold spriteBold
        createGameCode:AddText("CreateGame")
        spriteCode:AddText("Sprite")
        updateCode:AddText("Update(number seconds)")
        mainBold:AddText("main.quorum")
        spriteBold:AddText("Sprite.quorum")
        p2:AddText("Open the provided template. In the ")
        p2:Add(mainBold)
        p2:AddText(" file, code needs to be written in two places. The first place is in an action called ")
        p2:Add(createGameCode)
        p2:AddText(". In this action, you set up your ")
        p2:Add(spriteCode)
        p2:AddText(" object. The second place you write code is in the action called ")
        p2:Add(updateCode)
        p2:AddText(". In this action, you write the code that plays the animations when keys are pressed. You can easily jump between Actions by using the Navigator window.
                    The key command for the Navigator window is Ctrl+7. A Sprite object has already been declared for you. 
                    A file, or class, called ")
        p2:Add(spriteBold)
        p2:AddText(" has been provided to you that includes code that implements the animations. 
                    You can look through this file to see what animations are supported, and how they work. 
                    The sprite can:")
        section_overview:Add(p2)


        section_overview:Add(break)

        UnorderedList spriteList
        spriteList:AddClassAttribute("flex flex-col gap-y-3")
        CodeBlock punchCode
        CodeBlock crouchCode
        CodeBlock jumpCode
        CodeBlock jumpAndPunchCode
        CodeBlock shootPlasmaCode
        CodeBlock walkCode
        CodeBlock specialMoveCode
        CodeBlock doNothingCode
        punchCode:AddText("Punch")
        crouchCode:AddText("Crouch")
        jumpCode:AddText("Jump")
        jumpAndPunchCode:AddText("JumpAndPunch")
        shootPlasmaCode:AddText("ShootPlasma")
        walkCode:AddText("Walk")
        specialMoveCode:AddText("SpecialMove")
        doNothingCode:AddText("DoNothing")

        ListItem li
        li:Add(punchCode)
        spriteList:Add(li) 

        ListItem li1
        li1:Add(crouchCode)
        spriteList:Add(li1) 

        ListItem li2
        li2:Add(jumpCode)
        spriteList:Add(li2) 

        ListItem li3
        li3:Add(jumpAndPunchCode)
        spriteList:Add(li3) 

        ListItem li4
        li4:Add(shootPlasmaCode)
        spriteList:Add(li4) 

        ListItem li5
        li5:Add(walkCode)
        spriteList:Add(li5) 

        ListItem li6
        li6:Add(specialMoveCode)
        spriteList:Add(li6) 

        ListItem li7
        li7:Add(doNothingCode)
        spriteList:Add(li7) 

        section_overview:Add(spriteList)


//        SideBySideIDE prepareSpriteIDE
//        prepareSpriteIDE:SetUniqueIdentifier("prepareSprite")
//        prepareSpriteIDE:Setup()
//        prepareSpriteIDE:GetIDETitle():AddText("Activity: ")
//        prepareSpriteIDE:GetIDESubtitle():AddText("Prepare the Sprite for animation in the game.")
//        bodyDiv:Add(prepareSpriteIDE)

        Paragraph p11
        CodeBlock setImageSheetParamCode
        CodeBlock setImageSheetCode
        CodeBlock setUpCode
        CodeBlock addCode
        setImageSheetParamCode:AddText("SetImageSheet(text sheetName)")
        setImageSheetCode:AddText("SetImageSheet")
        setUpCode:AddText("SetUp")
        addCode:AddText("Add")
        p11:AddText("Navigate to the ")
        p11:Add(createGameCode)
        p11:AddText(" action. In this action, we prepare the Sprite to be animated by the game. 
                    First, tell the Sprite object which ImageSheet to get animation images from. 
                    Do this by calling the ")
        p11:Add(setImageSheetParamCode)
        p11:AddText(" action on the Sprite. The ")
        p11:Add(setImageSheetCode)
        p11:AddText(" action takes a text parameter that represents the name of the ImageSheet. 
                    An ImageSheet has already been provided for in the template, located in the resources folder. 
                    Once we have told our Sprite where to get its animation images, we setup the Sprite by calling the ")
        p11:Add(setUpCode)
        p11:AddText(" action on the Sprite. 
                    This action sets the Sprite to its default pose. 
                    Next, ")
        p11:Add(addCode)
        p11:AddText(" the Sprite to the game. You can look back in previous lesson to remember how to add an object.")
        section_overview:Add(p11)

        Paragraph p12
        p12:AddText("Choose the three keys you want to play animations when pressed, and choose which animations to play when that key is pressed.
                    You will write a conditional statement in the ")
        p12:Add(updateCode)
        p12:AddText(" action to check for these keys being pressed. 
                    If they are, play the animation for that key.")
        section_overview:Add(p12)


        section_overview:Add(break)
        AddHeading(section_overview, "Example: Jump when a key is pressed.", 3)

        CodeBlock example1Code
        Span s1
        Span s2
        s1:AddText(     "// this line checks if the " + dq + "A" + dq + " key is pressed." + cr )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "if inputMonitor:IsKeyPressed(keys:A)" + cr )
        s2:AddText(     "   // this line makes the sprite jump when we press the A key" + cr )
        s2:SetClassAttribute("comment")
        example1Code:Add(s2)
        example1Code:AddText(   "   fighter:Jump()" + cr 
                            +   "end")
        section_overview:Add(preformatter:GeneratePreformattedCode(example1Code))


//        SideBySideIDE chooseKeysIDE
//        chooseKeysIDE:SetUniqueIdentifier("chooseKeys")
//        chooseKeysIDE:Setup()
//        chooseKeysIDE:GetIDETitle():AddText("Activity: ")
//        chooseKeysIDE:GetIDESubtitle():AddText("Choose 2 more keys and play the other two animations when those two keys are pressed.")
//        bodyDiv:Add(chooseKeysIDE)

        AddHeading(section_overview, "Activity: Add three more conditions." , 3)
        Paragraph p13
        CodeBlock ifElseifCode
        ifElseifCode:AddText("if... elseif")
        p13:AddText("Because the Sprite can only do one animation at a time, it makes sense to use the ")
        p13:Add(ifElseifCode)
        p13:AddText(" structure in this situation. 
                    This ensures that only one animation will play. Add the conditions for two more keys, and the condition for when no keys are pressed. 
                    If no keys are pressed, the Sprite's idle animation should play, by calling the ")
        p13:Add(doNothingCode)
        p13:AddText(" action.")
        section_overview:Add(p13)

        section_overview:AddParagraph("When you run your program and press those keys, the animations you associated with those keys will play. 
                            You can keep a key pressed down to play a animation for a longer period of time or just tap the key to play the animation for a short period of time.")

        section_overview:AddParagraph("To expand your game, choose more keys to associate animations with, check for those keys being pressed, and play more animations!")


        Section section_sample_output
        AddHeading(section_sample_output, "Sample Output", 2)

        section_sample_output:AddParagraph("The program should play at least 3 different animations upon three different key presses. 
                            The Sprite should display its idle animation when no keys are pressed down.")

        bodyDiv:Add(section_goals)
        bodyDiv:Add(section_csp_curriculum)
        bodyDiv:Add(section_standards)
        bodyDiv:Add(section_vocabulary)
        bodyDiv:Add(section_overview)
        bodyDiv:Add(section_sample_output)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn to code 2D image applications and keyboard listeners with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Assignment (Key Press Madness - Visual)"
    end
    action GetName returns text
        return "Assignment 3.4"
    end
    action GetShortDescription returns text
        return "how work Key Press Madness - Visual in Quorum."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/assignment3_4.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end
