use Libraries.Web.Page.all
use Libraries.System.File
use Libraries.Containers.Array

class Assignment3_5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 3.5: Robots - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
         Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
         Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Assignment 3.5: Robots - Visual", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Assignment 3.5: Robots - Visual")
        AddToHeadingArray(h_heading)

        bodyDiv:Add(headDiv)
        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Visualizing Robots", 2)
        

        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("In this lab you will practice the following computer science concepts in a team or small group environment:")
        
        
        UnorderedList goalsList
        goalsList:AddClassAttribute("list-disc list-outside pl-8")
        goalsList:AddListItem("Creating Objects")
        goalsList:AddListItem("Using conditional statements and looping statements")
        section_intro:Add(goalsList)


        AddHeading(section_intro, "Computer Science Principles Curriculum", 3)

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.3, EK 1.2.3A, EU 1.3, LO 1.3.1, EK 1.3.1A")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.1, LO 5.1.1, EK 5.1.1B, EU 5.2, LO 5.2.1, EK 5.2.1C, EK 5.2.1D")
        section_intro:Add(list)

        AddHeading(section_intro, "Common Core Standards", 3)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1  ")
        section_intro:Add(ccList)


        AddHeading(section_intro, "Vocabulary", 3)
        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("list-disc list-outside pl-8")
        vocabularyList:AddListItem("Control Structures")
        vocabularyList:AddListItem("If statement")
        vocabularyList:AddListItem("Loops")
        vocabularyList:AddListItem("Input Manager")
        vocabularyList:AddListItem("Infrared Sensor")
        vocabularyList:AddListItem("Remote")
        section_intro:Add(vocabularyList)

        CodeBlock infraredSensorCode
        CodeBlock motorCode
        CodeBlock legoCode
        infraredSensorCode:AddText("InfraredSensor")
        motorCode:AddText("Motor")
        legoCode:AddText("Lego")


                Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_overview)
        AddHeading(section_overview, "Overview", 2)
        Paragraph p0
        p0:AddText("In this assignment you will use the ")
        p0:Add(infraredSensorCode)
        p0:AddText(" Library to control the robot using the remote.")
        section_overview:Add(p0) 

        AddHeading(section_overview, "Goal 1:  Creating objects", 3)
     
        Paragraph p1
        p1:AddText("Create a new Robot project. 
                    Name it properly and open the main.quorum file. 
                    In the top of the file type the appropriate code to use the Quorum  ")
        p1:Add(infraredSensorCode)
        p1:AddText(" and ")
        p1:Add(motorCode)
        p1:AddText(" libraries inside the ")
        p1:Add(legoCode)
        p1:AddText(" library.")
        section_overview:Add(p1)

//        SideBySideIDE instantiateObjectsIDE
//        instantiateObjectsIDE:SetUniqueIdentifier("instantiateObjects")
//        instantiateObjectsIDE:Setup()
//        instantiateObjectsIDE:GetIDETitle():AddText("Activity: ")
//        instantiateObjectsIDE:GetIDESubtitle():AddText("Instantiate the Motor and the InfraredSensor objects.")
//        section_overview:Add(instantiateObjectsIDE)

        Paragraph activity1Paragraph
        Bold activity1Bold
        activity1Bold:AddText("Activity: Instantiate the ")
        activity1Bold:Add(motorCode)
        activity1Bold:AddText(" and ")
        activity1Bold:Add(infraredSensorCode)
        activity1Bold:AddText(" objects.")
        activity1Paragraph:Add(activity1Bold)
        section_overview:Add(activity1Paragraph)


        Paragraph p2
        CodeBlock motorMiniCode
        CodeBlock infraredSensorMiniCode
        motorMiniCode:AddText("motor")
        infraredSensorMiniCode:AddText("infraredSensor")
        p2:AddText("Call the ")
        p2:Add(motorCode)
        p2:AddText(" object ")
        p2:Add(motorMiniCode)
        p2:AddText(" and the ")
        p2:Add(infraredSensorCode)
        p2:AddText(" object ")
        p2:Add(infraredSensorMiniCode)
        p2:AddText(".")
        section_overview:Add(p2)

        Paragraph p3
        CodeBlock setPortCode
        setPortCode:AddText("SetPort")
        p3:AddText("Now you must set the port to work with. That will be the port that the Infrared Sensor is connected to on the robot. 
                    You will do that using the ")
        p3:Add(setPortCode)
        p3:AddText(" statement.")
        section_overview:Add(p3)


          AddHeading(section_overview, "Example: Set the port your Infrared Sensor is connected", 3)

        CodeBlock example1Code
        Span s1
        s1:AddText(     "// This line of code will set the port to work with" + cr )
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(   "infraredSensor:SetPort(4) " + cr )
        section_overview:Add(preformatter:GeneratePreformattedCode(example1Code))

        section_overview:AddParagraph("After that you should set the speed of the motors. This will affect the speed of your robot during turns and while moving straight.")

//        SideBySideIDE writeSpeedIDE
//        writeSpeedIDE:SetUniqueIdentifier("writeSpeed")
//        writeSpeedIDE:Setup()
//        writeSpeedIDE:GetIDETitle():AddText("Activity: ")
//        writeSpeedIDE:GetIDESubtitle():AddText("Write the proper code to set the speed of the motors B and C.")
//        section_overview:Add(writeSpeedIDE)

        Paragraph activity2Paragraph
        Bold activity2Bold
        activity2Bold:AddText("Activity: Write the proper code to set the speed of the motors 'B' and 'C'. ")
        activity2Paragraph:Add(activity2Bold)
        section_overview:Add(activity2Paragraph)

        section_overview:AddParagraph("Again you should have some lines of code before the conditions:")

        CodeBlock example2Code
        Span s2
        Span s3
        Span s4
        s2:AddText(     "//This first line is just giving a value for the loop to start with but it’s going to change once the loop starts so the value doesn’t matter" + cr )
        s2:SetClassAttribute("comment")
        example2Code:Add(s2)
        example2Code:AddText(   "integer command = 0" + cr )
        s3:AddText(     "//This line is the looping condition, once the condition doesn’t match anymore the program stops" + cr )
        s3:SetClassAttribute("comment")
        example2Code:Add(s3)
        example2Code:AddText(   "repeat while true" + cr )
        s4:AddText(     "// This line is giving “command” the value that comes back from the GetRemoteCommand statement, that takes as parameter the channel you’re using in the remote" + cr )
        s4:SetClassAttribute("comment")
        example2Code:Add(s4)
        example2Code:AddText(   "command = infraredSensor:GetRemoteCommand(1)" + cr )
        section_overview:Add(preformatter:GeneratePreformattedCode(example2Code))


        AddHeading(section_overview, "Goal 2: Using conditional and looping statements", 3)

        section_overview:AddParagraph("In this assignment we’re going to use the left part of the remote to control the robot's forward movement (top left button) or backwards movement (bottom left button). The right part of the remote will control if the robot turns right (top right button) or left (bottom right button).")

        section_overview:AddParagraph("Let’s do the conditions now. In this assignment it is clear what the conditions are: when pressed, each button should tell the motors what they should do. 
                            The top left button is represented by the number 1, the bottom left is the number 2, the top right the number 3, and the bottom right the number 4.")


                Section section_lesson
        section_lesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_lesson)
        AddHeading(section_lesson, "Example: Create the condition in which the top left button is pressed", 2)
  
        CodeBlock example3Code
        Span s5
        Span s6
        s5:AddText(     "//This line creates the condition in which the top left button is pressed" + cr )
        s5:SetClassAttribute("comment")
        example3Code:Add(s5)
        example3Code:AddText(   "if command = 1" + cr )
        s6:AddText(     "//These lines tell the robot to move forward" + cr )
        s6:SetClassAttribute("comment")
        example3Code:Add(s6)
        example3Code:AddText(   "motor:RotateBackward(" + dq + "B" + dq + ")" + cr 
                            +   "motor:RotateBackward(" + dq + "C" + dq + ")" )
        section_lesson:Add(preformatter:GeneratePreformattedCode(example3Code))


//        SideBySideIDE usingElseifIDE
//        usingElseifIDE:SetUniqueIdentifier("usingElseif")
//        usingElseifIDE:Setup()
//        usingElseifIDE:GetIDETitle():AddText("Activity: ")
//        usingElseifIDE:GetIDESubtitle():AddText("Using elseif do the other conditions.")
//        section_lesson:Add(usingElseifIDE)

        Paragraph activity3Paragraph
        CodeBlock elseifCode
        elseifCode:AddText("elseif")
        Bold activity3Bold
        activity3Bold:AddText("Activity: Use ") 
        activity3Bold:Add(elseifCode)
        activity3Bold:AddText(" statements to create the other conditions.")
        activity3Paragraph:Add(activity3Bold)
        section_lesson:Add(activity3Paragraph)

        Paragraph p4
        Bold elseIfBold
        elseIfBold:AddText("Elseif")
        p4:AddText("Create the other conditions now: ")
        p4:Add(elseifCode)
        p4:AddText(" the command is equal to 2, ")
        p4:Add(elseifCode)
        p4:AddText(" the command is equal to 3, and ")
        p4:Add(elseifCode)
        p4:AddText(" the command is equal to 4. Remember you are making the robot go backwards, turn right, or turn left based on what button is pressed.
                    To finish you will do the last condition: if no buttons are pressed.")
        section_lesson:Add(p4)

        AddHeading(section_lesson, "Example: Condition in which no buttons are pressed", 3)

        CodeBlock example4Code
        Span s7
        Span s8
        Span s9
        s7:AddText(     "//This line tells the robot what to do in case none of the above is true" + cr )
        s7:SetClassAttribute("comment")
        example4Code:Add(s7)
        example4Code:AddText(   "else" + cr )
        s8:SetClassAttribute("comment")
        example4Code:Add(s8)
        example4Code:AddText(   "motor:Stop(" + dq + "B" + dq + ")" + cr 
                            +   "motor:Stop(" + dq + "C" + dq + ")" )
        s9:AddText(     "//These lines finish the looping and conditional statements" + cr )
        s9:SetClassAttribute("comment")
        example4Code:Add(s9)
        example4Code:AddText(   "end" + cr 
                            +   "end" )
        section_lesson:Add(preformatter:GeneratePreformattedCode(example4Code))

        section_lesson:AddParagraph("Congrats! You are finished with this assignment! Run your program and see if you get any errors. 
                            If you do, go back and fix them. Make sure your robot is doing what you expect it to. Did you assign everything as you intended to?")


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())


    end

    action GetMetaDescription returns text
        return "Learn to remotely control a LEGO Mindstorms robot using loops and conditionals with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Assignment (Robots)"
    end
    action GetName returns text
        return "Assignment 3.5"
    end
    action GetShortDescription returns text
        return "how Robots work in Quorum."
    end


    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/assignment3_5.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end
