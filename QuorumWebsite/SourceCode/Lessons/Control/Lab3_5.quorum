use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent


class Lab3_5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.5: Control the Quorum Bunny - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 3.5: Control the Quorum Bunny", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("In this lab, we will learn the following computer science concepts:")
        
        UnorderedList objectivesList
        objectivesList:AddListItem("Creating Objects")
        objectivesList:AddListItem("Using conditional statements")
        bodyDiv:Add(objectivesList)


        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1A, EK 4.1.1C, EK 4.1.1D")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8,")
        bodyDiv:Add(ccList) 


        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem(    "Control Structures")
        vocabularyList:AddListItem(    "If Statement")
        vocabularyList:AddListItem(    "Looping")
        vocabularyList:AddListItem(    "Input Manager")
        bodyDiv:Add(vocabularyList)


        bodyDiv:AddHeading("Overview", 2)

        Paragraph p0
        p0:AddText("This lab demonstrates how to use key presses on the keyboard to perform some tasks. 
                    The task you will perform is to write a program that moves an image of a bunny around the screen upon pressing of the up, down, left, and right arrow keys. 
                    Download this ")
        p0:AddLink("zip file", "/files/lessons/chapter3/Lab3_5Template.zip")
        p0:AddText(" for a template to help you get started, or use the IDE below.")
        bodyDiv:Add(p0)

        CodingOnline addStatementIDE
        addStatementIDE:SetUniqueIdentifier("lab3_5IDE")
        addStatementIDE:GetIDETitle():AddText("Controlling your Game")
        addStatementIDE:GetIDEInputArea():AddText("use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Game.InputMonitor
use Libraries.Interface.Events.KeyboardEvent
/*
    This is a default class for creating a game in Quorum. Note that the Main 
    action begins by calling StartGame(), which loads a window a game can 
    be displayed in. The action CreateGame is where the game should load any 
    assets, like images to be displayed, frames of animation, or sounds to be
    played. 
*/

class Main is Game
    InputMonitor inputMonitor       // handles user input during game
    KeyboardEvent keys              // helps determine which key is pressed

    Drawable bunny                  // bunny image
    number speed = 100

    /*
        This action, Main, starts our computer program. In Quorum, programs always
        begin from Main.
    */

    action Main
        StartGame()
    end

    /*
        This action sets up the default values for a game. For example, we might
        use the Libraries.Game.Graphics.Drawable class to load up an image or 
        a shape. Or, we might add a Libraries.Interface.Button for making something clickable
        or a Libraries.Interface.TextBox for gathering user input in a game.
    */

    action CreateGame
    end

    /*
        The update action is called on every " + dq + "frame" + dq + " of animation in a game. This
        action should be used to do operations on items. So, for example, we 
        might use this action to change frames of animation, to rotate items, 
        or to make creatures jump.
    */

    action Update(number seconds)
    end
end")
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)

        bodyDiv:AddHeading("Understanding the InputMonitor and KeyboardEvent Libraries", 2)
        Paragraph p1
        Bold mainBold
        mainBold:AddText("Main.quorum file")
        p1:AddText("Open the provided template and navigate to the ")
        p1:Add(mainBold)
        p1:AddText(" . Near the top of the file, there are two lines that look like this:")
        bodyDiv:Add(p1)


        CodeBlock example1Code
        Span s1
        Span s2
        s1:AddText(     "// this line declares an InputMonitor object called " + dq + "inputMonitor" + dq + "" + cr)
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(    "InputMonitor inputMonitor" + cr )
        s2:AddText(     "// this line declares a KeyboardEvent object called " + dq + "keys" + dq + "" + cr)
        s2:SetClassAttribute("comment")
        example1Code:Add(s2)
        example1Code:AddText(    "KeyboardEvent keys" )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1Code))

        Paragraph p2
        CodeBlock inputMonitorCode
        CodeBlock keyboardEventCode
        inputMonitorCode:AddText("InputMonitor")
        keyboardEventCode:AddText("KeyboardEvent")
        p2:AddText("These two lines declare the objects you use to determine if a specific key has been pressed on the keyboard. The ")
        p2:Add(inputMonitorCode)
        p2:AddText(" object knows when a key is pressed down, and the ")
        p2:Add(keyboardEventCode)
        p2:AddText(" object knows which key is pressed down. 
                    You use these objects to determine when a key is pressed down and which key is pressed down.")
        bodyDiv:Add(p2)

        Paragraph p3
        CodeBlock isKeyPressedCode
        CodeBlock booleanCode
        CodeBlock trueCode
        CodeBlock falseCode
        isKeyPressedCode:AddText("IsKeyPressed")
        booleanCode:AddText("boolean")
        trueCode:AddText("true")
        falseCode:AddText("false")
        p3:AddText("The ")
        p3:Add(inputMonitorCode)
        p3:AddText(" object has an action called ")
        p3:Add(isKeyPressedCode)
        p3:AddText(" that takes a ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object variable and returns a ")
        p3:Add(booleanCode)
        p3:AddText(" —  ")
        p3:Add(trueCode)
        p3:AddText(" if the passed key is pressed, ")
        p3:Add(falseCode)
        p3:AddText(" if not. You need to pass the ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object variable to the ")
        p3:Add(isKeyPressedCode)
        p3:AddText(" action, telling the ")
        p3:Add(keyboardEventCode)
        p3:AddText(" object which key you want to check is pressed. This is done with the following code:")
        bodyDiv:Add(p3)


        bodyDiv:Add(break)

        Paragraph example1Paragraph
        Bold example1bold
        example1bold:AddText("Example: Use the ")
        example1bold:Add(inputMonitorCode)
        example1bold:AddText(" and ")
        example1bold:Add(keyboardEventCode)
        example1bold:AddText(" object to execute code when a key is pressed.")
        example1Paragraph:Add(example1bold)
        bodyDiv:Add(example1Paragraph)

        CodeBlock example2Code
        Span s3
        s3:AddText(     "// This line of code will execute the statement(s) inside the if statement when" + cr 
                    +   "// the A key is pressed down." + cr )
        s3:SetClassAttribute("comment")
        example2Code:Add(s3)
        example2Code:AddText(   "if inputMonitor:IsKeyPressed(keys:A)" + cr 
                            +   "   output " + dq + "The 'A' Key was pressed!" + dq + "" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))


        Paragraph p4
        CodeBlock inputMonitorMiniCode
        CodeBlock ifCode
        inputMonitorMiniCode:AddText("inputMonitor")
        ifCode:AddText("if")
        p4:AddText("This line looks a little complicated, so let’s break it down. ")
        p4:Add(inputMonitorMiniCode)
        p4:AddText(" is the name of our ")
        p4:Add(inputMonitorCode)
        p4:AddText(" object. We are calling its ")
        p4:Add(isKeyPressedCode)
        p4:AddText(" action. Its parameter is a variable that lives in our ")
        p4:Add(keyboardEventCode)
        p4:AddText(" object. The variable is the all-caps representation for the key. 
                    For example, " + dq + "A" + dq + " represents the A key, " + dq + "NUM_7" + dq + " represents the 7 key, and " + dq + "F2" + dq + " represents the F2 key. 
                    This action returns a ")
        p4:Add(booleanCode)
        p4:AddText(" which we can use with an ")
        p4:Add(ifCode)
        p4:AddText(" statement to execute code only when that action returns ")
        p4:Add(trueCode)
        p4:AddText("—i.e., when the key in question is pressed down.")
        bodyDiv:Add(p4)


        bodyDiv:AddHeading("Goal 1: Creating Objects", 2)


        Paragraph p5
        CodeBlock createGameCode
        CodeBlock drawableCode
        CodeBlock bunnyCode
        createGameCode:AddText("CreateGame")
        drawableCode:AddText("Drawable")
        bunnyCode:AddText("bunny")
        p5:AddText("Navigate to the action called ")
        p5:Add(createGameCode)
        p5:AddText(" on line 36 through line 37. This is where you load the images for your ")
        p5:Add(drawableCode)
        p5:AddText(" objects. An ")
        p5:Add(drawableCode)
        p5:AddText(" object has already been declared for you, called ")
        p5:Add(bunnyCode)
        p5:AddText(". Load the image called " + dq + "media/bunny.png" + dq + " to the")
        p5:Add(drawableCode)
        p5:AddText(" object.")
        bodyDiv:Add(p5)

//        SideBySideIDE loadImageIDE
//        loadImageIDE:SetUniqueIdentifier("loadImage")
//        loadImageIDE:GetIDETitle():AddText("Activity: ")
//        Paragraph p6
//        p6:AddText("Load an image to your ")
//        p6:Add(drawableCode)
//        p6:AddText(" object and add it to the screen.")
//        loadImageIDE:SetIDESubtitle(p6)
//        loadImageIDE:Setup()
//        bodyDiv:Add(loadImageIDE)

        Paragraph activity1Paragraph
        Bold activity1Bold
        activity1Bold:AddText("Activity: Load an image to your ")
        activity1Bold:Add(drawableCode)
        activity1Bold:AddText(" object and add it to the screen.")
        activity1Paragraph:Add(activity1Bold)
        bodyDiv:Add(activity1Paragraph)


        Paragraph p7
        CodeBlock loadCode
        CodeBlock addCode
        CodeBlock playCode
        loadCode:AddText("Load")
        addCode:AddText("Add")
        playCode:AddText("Play")
        p7:AddText("Recall that to load an image to a ")
        p7:Add(drawableCode)
        p7:AddText(" object, we call the ")
        p7:Add(loadCode)
        p7:AddText(" action, passing the file name of the file we want to load. Once you have your ")
        p7:Add(drawableCode)
        p7:AddText(" loaded, you should add it to the game. This is done by calling the ")
        p7:Add(addCode)
        p7:AddText(" action with your ")
        p7:Add(drawableCode)
        p7:AddText(" as the parameter. Now that you have your ")
        p7:Add(drawableCode)
        p7:AddText(" loaded and added to the game, you can begin writing the code to move the image around the screen upon key presses.")
        bodyDiv:Add(p7)


        Paragraph p8
        CodeBlock updateCode
        updateCode:AddText("Update(number seconds)")
        p8:AddText("Navigate to the action called ")
        p8:Add(updateCode)
        p8:AddText(" on line 46 through line 47. This action is called on every frame of your game. 
                    This is where you write your code to handle the key presses. 
                    This action should check whether some keys are pressed down and, if they are, begin the appropriate task for those keys.")
        bodyDiv:Add(p8)


        bodyDiv:AddHeading("Goal 2: Using Conditional Statements", 2)

        Paragraph p9
        CodeBlock upCode
        CodeBlock downCode
        upCode:AddText("UP")
        downCode:AddText("DOWN")
        p9:AddText("The bunny should move vertically upon pressing of the up or down arrow keys. 
                    You need to check whether the up and down arrow keys are pressed. 
                    The names of the variables in ")
        p9:Add(keyboardEventCode)
        p9:AddText(" objects that represent the up and down arrow keys are ")
        p9:Add(upCode)
        p9:AddText(" and ")
        p9:Add(downCode)
        p9:AddText(", respectively.")
        bodyDiv:Add(p9)

        Paragraph p10
        CodeBlock getYCode
        getYCode:AddText("GetY")
        p10:AddText("If the up arrow key is pressed, the bunny should move up the screen. 
                    To do this, you need to get the current y-coordinate of the ")
        p10:Add(drawableCode)
        p10:AddText(" object by calling the ")
        p10:Add(getYCode)
        p10:AddText(" action. The new y-coordinate should be set to the current y-coordinate plus the speed of the ")
        p10:Add(drawableCode)
        p10:AddText(" (declared and set earlier in the program) multiplied by the time between frames (the parameter of the ")
        p10:Add(updateCode)
        p10:AddText(" action in which you are currently writing your code).")
        bodyDiv:Add(p10)

        bodyDiv:Add(break)

        bodyDiv:AddHeading("Example: Write the code that moves the bunny up when the Up key is pressed.", 4)

        CodeBlock example3Code
        Span s4
        Span s5
        Span s6
        Span s7
        s4:AddText(     "// this if statement checks when the Up key is pressed" + cr )
        s4:SetClassAttribute("comment")
        example3Code:Add(s4)
        example3Code:AddText(   "if inputMonitor:IsKeyPressed(keys:UP)" + cr )
        s5:AddText(     "   // this line of code gets the current y position of the bunny" + cr )
        s5:SetClassAttribute("comment")
        example3Code:Add(s5)
        example3Code:AddText(   "   number y = bunny:GetY()" + cr )
        s6:AddText(     "   // this line calculates the new y position based on the current y" + cr )
        s6:SetClassAttribute("comment")
        example3Code:Add(s6)
        example3Code:AddText(   "   number newY = y + speed * seconds" + cr )
        s7:AddText(     "   // this line sets the new y position" + cr )
        s7:SetClassAttribute("comment")
        example3Code:Add(s7)
        example3Code:AddText(   "   bunny:SetY(newY)" + cr 
                            +   "end" + cr )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3Code))

//        SideBySideIDE moveBunnyIDE
//        moveBunnyIDE:SetUniqueIdentifier("moveBunny")
//        moveBunnyIDE:Setup()
//        moveBunnyIDE:GetIDETitle():AddText("Activity: ")
//        moveBunnyIDE:GetIDESubtitle():AddText("Write the code to move the bunny down the screen if the Down key is pressed.")
//        bodyDiv:Add(moveBunnyIDE)

        Paragraph p11
        p11:AddText("If the down arrow key is pressed, the bunny should move down the screen. 
                    To do this, you need to get the current y-coordinate of the ")
        p11:Add(drawableCode)
        p11:AddText(" object by calling the ")
        p11:Add(getYCode)
        p11:AddText(" action. 
                    The new y-coordinate should be set to the current y-coordinate minus the speed multiplied by the seconds.")
        bodyDiv:Add(p11)

        Paragraph activity2Paragraph
        Bold activity2Bold
        activity2Bold:AddText("Activity: Write the code to move the bunny down the screen if the ")
        activity2Bold:Add(downCode)
        activity2Bold:AddText(" key is pressed.")
        activity2Paragraph:Add(activity2Bold)
        bodyDiv:Add(activity2Paragraph)

        Paragraph p12
        CodeBlock leftCode
        CodeBlock rightCode
        leftCode:AddText("LEFT")
        rightCode:AddText("RIGHT")
        p12:AddText("The bunny should move horizontally upon pressing the right or left arrow keys. 
                    You need to check whether the left or right arrow keys are pressed. 
                    The names of the variables in ")
        p12:Add(keyboardEventCode)
        p12:AddText(" objects that represent the left and right arrow keys are ")
        p12:Add(leftCode)
        p12:AddText(" and ")
        p12:Add(rightCode)
        p12:AddText(", respectively.")
        bodyDiv:Add(p12)

        Paragraph p13
        CodeBlock getXCode
        getXCode:AddText("GetX")
        p13:AddText("If the left arrow key is pressed, the bunny should move left across the screen. 
                    To do this, you need to get the current x-coordinate of the ")
        p13:Add(drawableCode)
        p13:AddText(" object by calling the ")
        p13:Add(getXCode)
        p13:AddText(" action. 
                    The new x-coordinate should be set to the current x-coordinate minus the speed of the ")
        p13:Add(drawableCode)
        p13:AddText(" (declared and set earlier in the program) multiplied by the seconds between frames (the parameter of the ")
        p13:Add(updateCode)
        p13:AddText(" action in which you are currently writing your code).")
        bodyDiv:Add(p13)


        bodyDiv:Add(break)

        bodyDiv:AddHeading("Example: Write the code to move the bunny towards the left when the Left key is pressed.", 4)

        CodeBlock example4Code
        Span s8
        Span s9
        Span s10
        Span s11
        s8:AddText(     "// this if statement checks when the Left key is pressed" + cr )
        s8:SetClassAttribute("comment")
        example4Code:Add(s8)
        example4Code:AddText(   "if inputMonitor:IsKeyPressed(keys:LEFT)" + cr )
        s9:AddText(     "   // this line gets the current x position" + cr )
        s9:SetClassAttribute("comment")
        example4Code:Add(s9)
        example4Code:AddText(   "   number x = bunny:GetX()" + cr )
        s10:AddText(     "  // this line calculates the new x position based on the current x" + cr )
        s10:SetClassAttribute("comment")
        example4Code:Add(s10)
        example4Code:AddText(   "   number newX = x – speed * seconds" + cr )
        s11:AddText(     "  // this line sets the new x position" + cr )
        s11:SetClassAttribute("comment")
        example4Code:Add(s11)
        example4Code:AddText(   "   bunny:SetX(newX)" + cr 
                            +   "end" )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example4Code))

//        SideBySideIDE moveBunnyRightIDE
//        moveBunnyRightIDE:SetUniqueIdentifier("moveBunnyRight")
//        moveBunnyRightIDE:Setup()
//        moveBunnyRightIDE:GetIDETitle():AddText("Activity: ")
//        moveBunnyRightIDE:GetIDESubtitle():AddText("Write the code to move the bunny towards the right when the Right key is pressed.")
//        bodyDiv:Add(moveBunnyRightIDE)

        Paragraph p14
        p14:AddText("If the right arrow key is pressed, the bunny should move right across the screen. 
                    To do this, you need to get the current x-coordinate of the ")
        p14:Add(drawableCode)
        p14:AddText(" object by calling the ")
        p14:Add(getXCode)
        p14:AddText(" action. 
                    The new x-coordinate should be set to the current x-coordinate plus the speed multiplied by the seconds.")
        bodyDiv:Add(p14)

        Paragraph activity3Paragraph
        Bold activity3Bold
        activity3Bold:AddText("Activity: Write the code to move the bunny towards the right when the  ")
        activity3Bold:Add(rightCode)
        activity3Bold:AddText(" key is pressed.")
        activity3Paragraph:Add(activity3Bold)
        bodyDiv:Add(activity3Paragraph)

        bodyDiv:AddParagraph("You may now compile and run your code. 
                            There should be no errors. 
                            If there are errors, fix them and try again. 
                            You should be able to move the bunny horizontally and vertically around the screen by pressing the appropriate keys.")

        Paragraph activity4Paragraph
        CodeBlock wCode
        wCode:AddText("W")
        CodeBlock aCode
        aCode:AddText("A")
        CodeBlock dCode
        dCode:AddText("D")
        CodeBlock sCode
        sCode:AddText("S") 
        Bold activity4Bold
        activity4Bold:AddText("Bonus Activity! Try experimenting with different keys and moving the bunny in different directions. You might try using the ")
        activity4Bold:Add(wCode)
        activity4Bold:AddText(", ")
        activity4Bold:Add(dCode)
        activity4Bold:AddText(", ")
        activity4Bold:Add(aCode)
        activity4Bold:AddText(", and ")
        activity4Bold:Add(sCode)
        activity4Bold:AddText(" buttons. If you ever intend to make an MMORPG you'll need to start here!")
        activity4Paragraph:Add(activity4Bold)
        bodyDiv:Add(activity4Paragraph)                   

        //WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about manipulating visual images with the keyboard using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Control the Quorum Bunny)"
    end
    action GetName returns text
        return "Lab 3.5"
    end
    action GetShortDescription returns text
        return "how to Control the Quorum Bunny in Quorum."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/lab3_5.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end