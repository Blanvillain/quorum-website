use Libraries.Web.Page.all
use Libraries.System.File
use Libraries.Containers.Array

class Lab3_6 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 3.6: Robot - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
         Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
         Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Lab 3.6: Robot", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Lab 3.6: Robot")
        AddToHeadingArray(h_heading)

        bodyDiv:Add(headDiv)
        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Robot", 2)
        

        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("In this lab you will practice the following computer science concepts in a team or small group environment:")
        

        
        UnorderedList objectivesList
        objectivesList:AddClassAttribute("list-disc list-outside pl-8")
        objectivesList:AddListItem("Taking actions based on user input")
        objectivesList:AddListItem("Using conditional and looping statements")

        section_intro:Add(objectivesList)


        AddHeading(section_intro, "Computer Science Principles Curriculum", 3)

        UnorderedList List
        List:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(List, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1C, EK 4.1.1D")
        section_intro:Add(List)

        AddHeading(section_intro, "Common Core Standards", 3)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ",
        "CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, 
        CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4,
        CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, CCSS.Math.Practice.MP8")
        section_intro:Add(ccList)


        AddHeading(section_intro, "Vocabulary", 3)

        UnorderedList vocabularyList
        vocabularyList:AddClassAttribute("list-disc list-outside pl-8")
        vocabularyList:AddListItem(    "Control Structures")
        vocabularyList:AddListItem(    "Conditional")
        vocabularyList:AddListItem(    "If statement")
        vocabularyList:AddListItem(    "Loops")
        vocabularyList:AddListItem(    "Input Manager")
        section_intro:Add(vocabularyList)


        Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_overview)
        AddHeading(section_overview, "Overview", 2)

        section_overview:AddParagraph("This lab demonstrates how to use the InfraredSensor Library. 
                            You will use the Infrared Sensor to move the robot in the direction of the remote.")


        AddHeading(section_overview, "Goal 1: Taking actions based on user input", 3)

        Paragraph p1
        CodeBlock infraredSensorCode
        CodeBlock legoCode
        CodeBlock motorCode
        infraredSensorCode:AddText("InfraredSensor")
        legoCode:AddText("Lego")
        motorCode:AddText("Motor")
        p1:AddText("Create a new Robot project. Name it properly and open the main.quorum file. 
                    In the top of the file type the appropriate code to use both the Quorum ")
        p1:Add(infraredSensorCode)
        p1:AddText(" Library,and the ")
        p1:Add(motorCode)
        p1:AddText(" library inside the ")
        p1:Add(legoCode)
        p1:AddText(" library. After that, you will create objects from each library.")
        section_overview:Add(p1)

        AddHeading(section_overview, "Example: Declare a Motor object", 3)
   
        CodeBlock example1Code
        Span s1
        s1:AddText(     "// this line declares a Motor object called " + dq + "motor" + dq + "" + cr)
        s1:SetClassAttribute("comment")
        example1Code:Add(s1)
        example1Code:AddText(    "Motor motor" + cr )
        section_overview:Add(preformatter:GeneratePreformattedCode(example1Code))

        AddHeading(section_overview, "Activity: Declare an InfraredSensor object called infraredSensor", 3)
       


        Paragraph p2
        CodeBlock setPortCode
        setPortCode:AddText("SetPort")
        p2:AddText("Sensors work differently than motors, in that you  must set the port that the sensor is connected to. 
                    You will do that using the ")
        p2:Add(setPortCode)
        p2:AddText(" statement.")
        section_overview:Add(p2)


        AddHeading(section_overview, "Example: Tell the port your Infrared Sensor is connected", 4)
     
        CodeBlock example2Code
        Span s3
        Span s4
        s3:AddText(     "// This line of code will set the port to work with" + cr )
        s3:SetClassAttribute("comment")
        example2Code:Add(s3)
        example2Code:AddText(   "infraredSensor:SetPort(4) " )
        s4:AddText(     " //Inside the parentheses you should put the number of the port that your Infrared Sensor is connected" + cr )
        s4:SetClassAttribute("comment")
        example2Code:Add(s4)
        section_overview:Add(preformatter:GeneratePreformattedCode(example2Code))

        Section section_lesson
        section_lesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_lesson)
        AddHeading(section_lesson, "Activity: Set the default speed of the motors. You may choose your speed", 2)
       

//        SideBySideIDE setSpeedIDE
//        setSpeedIDE:SetUniqueIdentifier("setSpeed")
//        setSpeedIDE:Setup()
//        setSpeedIDE:GetIDETitle():AddText("Activity: Set motor speed")
//        setSpeedIDE:GetIDESubtitle():AddText("Write the proper code to set the speed of the motors B and C.")
//        section_lesson:Add(setSpeedIDE)

        AddHeading(section_lesson, "Activity: Set the default speed of the motors. You may choose your speed", 3)


        section_lesson:AddParagraph("You should have some lines of code before the conditions. 
                            These lines and why you should use each of them are below:")

        CodeBlock example3Code
        Span s5
        Span s6
        Span s7
        s5:AddText(     "//This first line gives a value for the loop to start. It will change once the loop starts so the value doesn't matter" + cr )
        s5:SetClassAttribute("comment")
        example3Code:Add(s5)
        example3Code:AddText(   "integer direction = 0 " + cr )
        s6:AddText(     "//This line starts the loop; it keeps the program working unless something break the loop" + cr )
        s6:SetClassAttribute("comment")
        example3Code:Add(s6)
        example3Code:AddText(   "repeat while true " + cr )
        s7:AddText(     "//This line gives the number variable " + dq + "direction" + dq + " the value that comes back from the GetRemoteDirection statement, it takes as parameter the channel you're using on the remote " + cr )
        s7:SetClassAttribute("comment")
        example3Code:Add(s7)
        example3Code:AddText(   "number direction = infraredSensor:GetRemoteDirection(1)" + cr )
        section_lesson:Add(preformatter:GeneratePreformattedCode(example3Code))

        Paragraph p3
        CodeBlock getRemoteDirectionCode
        getRemoteDirectionCode:AddText("GetRemoteDirection")
        p3:AddText("The ")
        p3:Add(getRemoteDirectionCode)
        p3:AddText(" statement returns a value that represents the relative angle between the remote and the sensor. 
                    These values will be between -180 and 180.")
        section_lesson:Add(p3)

        Paragraph p4
        p4:AddText("For the ")
        p4:Add(getRemoteDirectionCode)
        p4:AddText(" statement to work, you need to press the large button (top center button) in the remote. 
                    Every condition, and the whole program, will only work if you press the button. That is what makes the repeat statement true.")
        section_lesson:Add(p4)




        section_lesson:AddParagraph("You will use conditional statements to define how the robot will respond to the position of the remote.")

        Paragraph p5
        CodeBlock rotateForwardCode
        CodeBlock rotateBackwardCode
        rotateForwardCode:AddText("RotateForward")
        rotateBackwardCode:AddText("RotateBackward")
        p5:AddText("The values between -180 and 180 represent the relative angle between the sensor and the remote. These values will be used in the conditional statements. 
                    If the value is negative, it means the remote is in the left of the robot; if the value is positive, the remote is to the right of the robot, 
                    and if the value is 0, the remote is directly ahead of the robot.")
        section_lesson:Add(p5)

        Section section_lesson1
        section_lesson1:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_lesson1)
        AddHeading(section_lesson1, "Example: Negative values", 2)
     

        CodeBlock example4Code
        Span s8
        Span s9
        s8:AddText(     "//This line checks to see if the condition returns a negative number" + cr )
        s8:SetClassAttribute("comment")
        example4Code:Add(s8)
        example4Code:AddText(   "if direction < 0 " + cr )
        s9:AddText(     "//These lines make the robot turn left, towards the remote" + cr )
        s9:SetClassAttribute("comment")
        example4Code:Add(s9)
        example4Code:AddText(   "motor:RotateBackward(" + dq + "B" + dq + ")" + cr 
                            +   "motor:Stop(" + dq + "C" + dq + ")")
        section_lesson1:Add(preformatter:GeneratePreformattedCode(example4Code))

        AddHeading(section_lesson1, "Activity: Add another statement to respond to positive values", 3)
     
        Paragraph p5a
        CodeBlock elseifCode
        elseifCode:AddText("elseif")
        p5a:AddText("Use an ")
        p5a:Add(elseifCode)
        p5a:AddText(" statement to make the robot turn left if direction > 0.")
        section_lesson1:Add(p5a)
//        SideBySideIDE doConditionIDE
//        doConditionIDE:SetUniqueIdentifier("doCondition")
//        doConditionIDE:Setup()
//        doConditionIDE:GetIDETitle():AddText("Activity: ")
//        doConditionIDE:GetIDESubtitle():AddText("Using elseif, do the condition in case the value is positive.")
//        section_lesson1:Add(doConditionIDE)


        section_lesson1:AddParagraph("Our next condition also uses elseif, but now the only possible option it will be the value 0, so we don't need to specify that. 
                            We will define a minumum and maximum range the robot can be from the remote, so it will stop.")

        Paragraph example5Paragraph
        CodeBlock getRemoteDistanceCode
        getRemoteDistanceCode:AddText("GetRemoteDistance")
        Bold example5bold
        example5bold:AddText("Example: Condition using the ")
        example5bold:Add(getRemoteDistanceCode)
        example5bold:AddText(" statement.")
        example5Paragraph:Add(example5bold)
        section_lesson1:Add(example5Paragraph)

        CodeBlock example5Code
        Span s10
        s10:AddText(     "//This line of code only runs if direction = 0, and the distance from the remote is between 10 cm and 50 cm (the maximum distance it could be from the remote) " + cr )
        s10:SetClassAttribute("comment")
        example5Code:Add(s10)
        example5Code:AddText(   "elseif infraredSensor:GetRemoteDistance(1) > 10 and infraredSensor:GetRemoteDistance(1) <= 50")
        section_lesson1:Add(preformatter:GeneratePreformattedCode(example5Code))

        AddHeading(section_lesson1, "Activity: Write the code to make each motor move", 3)


//        SideBySideIDE doMotorIDE
//        doMotorIDE:SetUniqueIdentifier("doMotor")
//        doMotorIDE:Setup()
//        doMotorIDE:GetIDETitle():AddText("Activity: ")
//        doMotorIDE:GetIDESubtitle():AddText("Write what each motor is supposed to do in this case that the value is 0.")
//        section_lesson1:Add(doMotorIDE)

        section_lesson1:AddParagraph("You've already done the three possible direction conditions, so it's time to write the last condition, which is if none of these conditions are true. 
                            In that case the robot should stop both motors, to write that you'll use the else statement.")


        AddHeading(section_lesson1, "Example: Last condition, in case none of the above is true", 4)

        CodeBlock example6Code
        Span s11
        Span s12
        s11:AddText(     "//These lines of code is to tell the motors to stop in any case that doesn't match the previous conditions" + cr )
        s11:SetClassAttribute("comment")
        example6Code:Add(s11)
        example6Code:AddText(   "else" + cr 
                            +   "motor:Stop(" + dq + "B" + dq + ")" + cr 
                            +   "motor:Stop(" + dq + "C" + dq + ")" + cr )
        s12:AddText(     "//These lines you use to finish the if loop and the repeat loop" + cr )
        s12:SetClassAttribute("comment")
        example6Code:Add(s12)
        example6Code:AddText(   "end" + cr 
                            +   "end" + cr )
        section_lesson1:Add(preformatter:GeneratePreformattedCode(example6Code))


        section_lesson1:AddParagraph("You now have a working program, run and see if you get any errors. 
                            If you do, go back and fix it, otherwise just try to see if the robot is doing what you've told it to do when you keep the first button pressed with the remote in each position. 
                            Have fun!")



        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())

    end

    action GetMetaDescription returns text
        return "Learn about controlling the LEGO Mindstorms robot with the keyboard using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lab Manual (Robot)"
    end
    action GetName returns text
        return "Lab 3.6"
    end
    action GetShortDescription returns text
        return "how work Robot in Quorum."
    end


    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter3/lab3_6.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Control Structures"
    end
end