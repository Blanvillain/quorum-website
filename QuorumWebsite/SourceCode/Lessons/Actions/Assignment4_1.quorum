use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Section

class Assignment4_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 4.1:  Frogger")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(headDiv, "Assignment 4.1: Frogger", 1)
        headDiv:AddText("Making a Frogger-like game")
        bodyDiv:Add(headDiv)

        Section goalsSection
        goalsSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(goalsSection, "Goals", 2)
        goalsSection:AddParagraph("The goals of this assignment are to learn to do the following:")
        UnorderedList unorderedList0
        unorderedList0:SetClassAttribute(GetDefaultListStyle())
        goalsSection:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Move a character using different actions")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("Load a Model (in this case a box) on a scene and move it")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("Use conditional statements in actions to manage collision between a box and a model")

        Section cspCurriculumSection
        cspCurriculumSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(cspCurriculumSection, "Computer Science Principles Curriculum", 2)
        UnorderedList unorderedList4
        unorderedList4:SetClassAttribute(GetDefaultListStyle())
        cspCurriculumSection:Add(unorderedList4)
  
        AddListItemWithBoldAtFront(unorderedList4, "Big Idea: Data and Information:", "EU 3.3, LO 3.3.1, EK 3.3.1G, EK 3.3.1H")
        AddListItemWithBoldAtFront(unorderedList4, "Big Idea: Programming:", "EU 5.1, LO 5.1.3, EK 5.1.3B, EK 5.1.3D")
        AddListItemWithBoldAtFront(unorderedList4, "Big Idea: Global Impact:", "EU 7.1, LO 7.1.1, EK 7.1.1C, EK 7.1.1H")

        Section cspStandardsSection
        cspStandardsSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(cspStandardsSection, "Common Core Standards", 2)
        UnorderedList ccList
        ccList:SetClassAttribute(GetDefaultListStyle())
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1  ")
        cspStandardsSection:Add(ccList)

        Section vocabSection
        vocabSection:SetClassAttribute(GetDefaultSectionStyle())
        AddHeading(vocabSection, "Vocabulary", 2)
        UnorderedList unorderedList10
        unorderedList10:SetClassAttribute(GetDefaultListStyle())
        vocabSection:Add(unorderedList10)
        ListItem listItem11
        unorderedList10:Add(listItem11)
        listItem11:AddText("Ambient Light")
        ListItem listItem12
        unorderedList10:Add(listItem12)
        listItem12:AddText("Camera")
        ListItem listItem13
        unorderedList10:Add(listItem13)
        listItem13:AddText("Collisions")
        ListItem listItem14
        unorderedList10:Add(listItem14)
        listItem14:AddText("Commit")
        ListItem listItem15
        unorderedList10:Add(listItem15)
        listItem15:AddText("Coordinate System (x,y,z)")
        ListItem listItem16
        unorderedList10:Add(listItem16)
        listItem16:AddText("Directional Light")
        ListItem listItem17
        unorderedList10:Add(listItem17)
        listItem17:AddText("File Extension")
        ListItem listItem18
        unorderedList10:Add(listItem18)
        listItem18:AddText("Git")
        ListItem listItem19
        unorderedList10:Add(listItem19)
        listItem19:AddText("Instantiate")
        ListItem listItem20
        unorderedList10:Add(listItem20)
        listItem20:AddText("Light Intensity")
        ListItem listItem21
        unorderedList10:Add(listItem21)
        listItem21:AddText("Model")
        ListItem listItem22
        unorderedList10:Add(listItem22)
        listItem22:AddText("Model File Formats (g3db and obj)")
        ListItem listItem23
        unorderedList10:Add(listItem23)
        listItem23:AddText("Point Light")
        ListItem listItem24
        unorderedList10:Add(listItem24)
        listItem24:AddText("Pull")
        ListItem listItem25
        unorderedList10:Add(listItem25)
        listItem25:AddText("Push")
        ListItem listItem26
        unorderedList10:Add(listItem26)
        listItem26:AddText("Repository")
        ListItem listItem27
        unorderedList10:Add(listItem27)
        listItem27:AddText("Scaling")
        ListItem listItem28
        unorderedList10:Add(listItem28)
        listItem28:AddText("Strafe")
        ListItem listItem29
        unorderedList10:Add(listItem29)
        listItem29:AddText("Version Control")


Section overviewSection
overviewSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(overviewSection, "Overview", 2)
Paragraph value = overviewSection:AddParagraph("This project requires you to download this")
value:AddLink(" program template for the Frogger game", "/files/lessons/chapter4/Assignment4_1Template.zip")
value:AddText(", which will be completed in this assignment.")
// , which will be completed in this assignment.")
Paragraph value1 = overviewSection:AddParagraph("In this assignment, you will learn the basics of loading
 models on a scene, and how you can make them move using actions. We will take 
the example of a Frogger-style game (if you don't know Frogger, check out this ") 
value1:AddLink("Frogger information page","https://en.wikipedia.org/wiki/Frogger")
value1:AddText(". In this game, you can control (move) a character in order to reach a goal. On the way, you will encounter rows of moving obstacles. If you collide with one of the obstacles, you come back to the starting point and lose a life. When you lose all your lives, it is a Game Over. In our case, one mistake will be a Game Over.")

overviewSection:AddParagraph("Start this assignment by opening the given project template. We will look at the code that is given, and then complete the game by: making a given model move, loading and moving more obstacles, and setting the win conditions by managing collisions.")

Section templateSection
templateSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(templateSection, "Optional Template Explanation", 2)
templateSection:AddParagraph("First, we will look at what some of the code in the given template does. Navigate to the CreateGame action in the template.")
templateSection:AddParagraph("Before loading the character model, a Camera was added to look somewhere on the scene. It represents the starting point, and the character's position is chosen according to the direction of the Camera.")

CodeBlock code1
        code1:AddText(
"// the camera
PerspectiveCamera camera = undefined

action CreateGame

    /* initialize camera position, and direction */
    camera = cast(PerspectiveCamera,GetCamera3D())
    camera:SetPosition(-3, 1, 0)
    camera:LookAt(1, 1, 0) 
    camera:SetUp(0,1,0)
    /* *************************************** */

end"
)
templateSection:Add(preformatter:GeneratePreformattedCode(code1))

templateSection:AddParagraph("You can choose any value you want for the X, Y, Z values to adjust the camera angle. Feel free to experiment with these values to see how they affect things. In the case of this game we are looking 'down' the x-axis in the positive direciton. The character is added next:")
CodeBlock code2
        code2:AddText(
"// the character and the light
Model character
PointLight pointLight

action CreateGame
    <comment>// the following code comes after the camera setup </comment>

    <comment>/* initialize character, his size and position */</comment>
    character:Load(" + dq + "Models/man.g3db" + dq + ") // load the g3db model</comment>
    character:Scale(0.005, 0.005, 0.005)
    character:SetPosition(1, -2, 0)
    Add(character)
    /* ************************* */

    /* Add light for the character */
    AmbientLight ambient
    ambient:SetColor(0.7, 0.3, 0.3, 1)
    SetAmbientLight(ambient)

    DirectionalLight light
    light:SetColor(0, 0.3, 0.4, 1)
    light:SetDirection(0.2, -0.8, 0.8)
    Add(light)

    pointLight:SetColor(1, 1, 1, 1)
    pointLight:SetPosition(0, 3, 0)
    pointLight:SetIntensity(20)
    character:Add(pointLight)
    /* ************************** */
end"
)
templateSection:Add(preformatter:GeneratePreformattedCode(code2))

templateSection:AddParagraph("The character comes from a g3db file. There are many file formats that a 3D model can take, but different file formats will not all work in the same game engine. In Quorum, for example, only 3D Models stored in a .g3db file or a .obj file will be able to be opened. Both of these file types are different ways of representing a bunch of points in 3-space. There are trade-offs in using one file or the other. .obj files cannot be animated, but they are not stored as binary, so it is easier to modify the model. .g3db files are a binary conversion of another file format that is better for larger models.")
templateSection:AddParagraph("We load the file using Load(FilePath) from the Model class. Since the Model is too big for our scene when it loads, we scale (using the Scale action) it by reducing his width, height and depth to 0.005 of the original. You can also adjust these values if you wish.")
templateSection:AddParagraph("Now that we have our character in front of the camera, we want the camera to follow the character, no matter what his move will be. Each Quorum program has an action called Update(number seconds), which is called multiple times per second. We manage all of the actions that deal with movement and changing values in the Update action.")
templateSection:AddParagraph("Navigate to the Update action in the template.")
CodeBlock code3
        code3:AddText(
"// these are the values that we will use to move the character
number positionX = 0
number positionY = 0
number positionZ = 0

action Update(number seconds)

    /* we move the character every update depending on the values of the 3 fields */
    character:Move(positionX*seconds, positionY*seconds, positionZ*seconds)
    /* *** */

    /* we need the camera to move according to the character position */
    camera:SetPosition(character:GetPosition():GetX()-4,character:GetPosition():GetY()+3,character:GetPosition():GetZ())
end"
)
templateSection:Add(preformatter:GeneratePreformattedCode(code3))

templateSection:AddParagraph("We use the seconds parameter in order to move the camera smoothly. Set the camera position according to the position used in the default settings. (At the beginning, the camera X-position was -4 and the character position was 1, and the difference between these two values is -4. That is why we subtract 4 from the character X-position. The same calculation applies to the Y and Z position).")
templateSection:AddParagraph("So we have looked at the code for a camera, a character, and to have the camera follow the character. Now we will look at the code that applies to movement. In order to make movement clear when the camera stays on a character, a scene needs stationary objects. The template adds 2 walls and a floor so that the movement will be more noticeable.")
templateSection:AddParagraph("This code can be found at the beginning of the Main class:")
CodeBlock code4
        code4:AddText(
"// The model for the wall and their color
Model wallLeft
Model wallRight

// a floor
Model floor

Color grey
Color red

action CreateGame
    // the following code comes after the character and lighting setup

    // Create and add wall on the scene
    grey:SetColor(128, 128, 128, 1)
    red = red:Red()
    wallLeft:LoadBox(100, 20, 5, grey)
    wallLeft:SetPosition(30, -2, -32)
    wallRight:LoadBox(100, 20, 5, grey)
    wallRight:SetPosition(30, -2, 32)
    floor:LoadBox(90, 0.8, 68, grey)
    floor:SetPosition(40,-4,0)
    Add(wallLeft)
    Add(wallRight)
    Add(floor)
end"
)
templateSection:Add(preformatter:GeneratePreformattedCode(code4))


Section goal1Section
goal1Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal1Section, "Goal 1 : Moving a character using 4 actions", 2)

Section goal1ExampleSection
goal1ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal1ExampleSection, "Example", 3)
goal1ExampleSection:AddParagraph("To move our character, we will write actions. In the template, the action MoveForward() has already been written. Right beneath the MoveForward() action, you will find headers for the actions MoveBackward(), StrafeRight(), and StrafeLeft(). Each of these actions, including MoveForward() has one parameter: a number called speed. Let's take a look at the MoveForward() more closely:")
goal1ExampleSection:AddParagraph("Navigate to the MoveForward() action toward the end of the program template.")
CodeBlock code5
        code5:AddText(
"action MoveForward() 
    positionX = speed       //By setting the X position, we move the character forward
    positionY = 0
    positionZ = 0
end"
)
goal1ExampleSection:Add(preformatter:GeneratePreformattedCode(code5))

goal1ExampleSection:AddParagraph("This action is responsible for updating 3 variables that are used to move the characters. Right now, our character can only move forward. We need to finish the remaining 3 movement actions.")


Section goal1ActivitySection
goal1ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal1ActivitySection, "Activity", 3)
goal1ActivitySection:AddParagraph("Finish the 3 others actions: MoveBackward(number speed), StrafeLeft(number speed), and StrafeRight(number speed) based on the MoveForward(number speed) action. Think about which coordinates (x, y, or z) should be changed to move the character backward, to the left and to the right. Remember, we are looking down the x-axis. Imagine the character is moving in a positive direction on the x-axis as you have him move forward.")


Section goal2Section
goal2Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Section, "Goal 2 : Add boxes and move them", 2)
goal2Section:AddParagraph("After the character, we need to add the obstacles. We will use the primitive boxes from the Model class to do it.")

Section goal2ExampleSection
goal2ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2ExampleSection, "Example", 3)
goal2ExampleSection:AddParagraph("This example comes from the program template. Right now, there is only one obstacle. The first step to load one of these box obstacles is threefold. We have to")
UnorderedList unorderedList38
unorderedList38:SetClassAttribute(GetDefaultListStyle())
goal2ExampleSection:Add(unorderedList38)
ListItem listItem39
unorderedList38:Add(listItem39)
listItem39:AddText("Instantiate a model (Our box)")
ListItem listItem40
unorderedList38:Add(listItem40)
listItem40:AddText("Instantiate a color object (to apply to our box)")
ListItem listItem41
unorderedList38:Add(listItem41)
listItem41:AddText("Instantiate an Audio3D object (the sound of our box)")
CodeBlock code7
        code7:AddText(
"// The box we are using
Model box1

// We have to choose a color for the box
Color colorBox1

// We put a sound on a model
Audio3D soundCar"
)
goal2ExampleSection:Add(preformatter:GeneratePreformattedCode(code7))

Section goal2ActivitySection
goal2ActivitySection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2ActivitySection, "Activity", 3)
goal2ActivitySection:AddParagraph("To make our Frogger game better we need to add more obstacles. Following the example above, let's instantiate 3 more boxes. Don't forget to instantiate an Audio3D object and a Color for each box we add.")

Section goal2Example2Section
goal2Example2Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Example2Section, "Example", 3)
goal2Example2Section:AddParagraph("The next step in creating an obstacle is to load the model (the box in our case). The action LoadBox() from the model class requires three parameters: the width, height, and depth of our box and the color we want our box to be.")
goal2Example2Section:AddParagraph("When we load a box, we must do the following:")
UnorderedList unorderedList44
unorderedList44:SetClassAttribute(GetDefaultListStyle())
goal2Example2Section:Add(unorderedList44)
ListItem listItem45
unorderedList44:Add(listItem45)
listItem45:AddText("Set the color of our color object")
ListItem listItem46
unorderedList44:Add(listItem46)
listItem46:AddText("Load a box into our model object")
ListItem listItem47
unorderedList44:Add(listItem47)
listItem47:AddText("Add the model to the game")
ListItem listItem48
unorderedList44:Add(listItem48)
listItem48:AddText("Set the position of the box")
goal2Example2Section:AddParagraph("When we set the color of our color objects, we call the color action")

PreformattedText pre200
goal2Example2Section:Add(pre200)
CodeBlock code43
code43:AddText("SetColor(number redValue, number blueValue, number greenValue, number alphaValue)")
goal2Example2Section:Add(code43)
pre200:Add(code43)

goal2Example2Section:AddParagraph("Each parameter should be a decimal value between 0 and 1. 0 means that the color (red, blue, or green) is totally absent. 1 means the complete presence of that color. The fourth number, the alpha value, sets the color transparency, but we should leave this as 1 for this project.")
goal2Example2Section:AddParagraph("Navigate to the CreateGame() action to see the example where we load our first box.")
CodeBlock code8
        code8:AddText(
"// in CreateGame

/* Position, color of a box */
colorBox1:SetColor(0, 0, 255, 1)
box1:LoadBox(2,2,2,colorBox1) // width, height, depth = 2
Add(box1) // we add it to scene
box1:SetPosition(10, -2, 0)"
)
goal2Example2Section:Add(preformatter:GeneratePreformattedCode(code8))

Section goal2Activity2Section
goal2Activity2Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Activity2Section, "Activity", 3)
goal2Activity2Section:AddParagraph("Following the example of our first box, load, add, and set the position of our 9 new boxes. Set the positions so that two boxes exist on the same row (horizontal line across the screen) but not the same place. This should create 5 rows of obstacles.")


Section goal2Example3Section
goal2Example3Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Example3Section, "Example", 3)
goal2Example3Section:AddParagraph("The next step is adding the sound to our boxes. We can add the Audio3D directly to our model so that the sound will have the same position as our obstacle. When an Audio3D object is added to a model, the following steps must be done:")
UnorderedList unorderedList51
unorderedList51:SetClassAttribute(GetDefaultListStyle())
goal2Example3Section:Add(unorderedList51)
ListItem listItem52
unorderedList51:Add(listItem52)
listItem52:AddText("Load the sound file (to stream) into the Audio3D object")
ListItem listItem53
unorderedList51:Add(listItem53)
listItem53:AddText("Set the volume")
ListItem listItem54
unorderedList51:Add(listItem54)
listItem54:AddText("Tell the sound to begin playing")
ListItem listItem55
unorderedList51:Add(listItem55)
listItem55:AddText("Enable Looping")
ListItem listItem56
unorderedList51:Add(listItem56)
listItem56:AddText("Add the sound to our model")
goal2Example3Section:AddParagraph("In the CreateGame action, find the code below. This is our example which adds our first Audio3D object to our first model.")
CodeBlock code9
        code9:AddText(
"// in CreateGame 

// Enable the audio file and attach it to the box
soundCar:LoadToStream(" + dq + "Sound/carSound.wav" + dq + ")
soundCar:SetVolume(0.3)
soundCar:Play()
soundCar:EnableLooping()
box1:Add(soundCar)"
)
goal2Example3Section:Add(preformatter:GeneratePreformattedCode(code9))


Section goal2Activity3Section
goal2Activity3Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Activity3Section, "Activity", 3)
goal2Activity3Section:AddParagraph("Following the example above, add one Audio3D object to each of the boxes we have created.")

Section goal2Example4Section
goal2Example4Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Example4Section, "Example", 3)
goal2Example4Section:AddParagraph("The last thing we need to do for our obstacles is make them move. This is done in the Update(number seconds) action. When a box hits one wall, it should be moved back to the starting position (z-value 10 or -10).")
goal2Example4Section:AddParagraph("Navigate to the Update action and let's look at the code to move our obstacle across the screen.")
CodeBlock code10
        code10:AddText(
"// every update, we move the boxes along the z-axis
box1:Move(0, 0, seconds * -5)

// when a box hits the other wall, we have to put it back to the original position 
if box1:GetZ() < -10 // -10 is the Z-Axis position of the left wall 
    Remove(box1) // we remove it from the scene temporarily
    box1:SetZ(10) // the starting point
    Add(box1) // we put it again on the scene
end"
)
goal2Example4Section:Add(preformatter:GeneratePreformattedCode(code10))

goal2Example4Section:AddParagraph("In this example, we make the box move from 10 to -10 on the Z-axis (where our walls are located). Now we need to move the rest of our obstacles. You can try varying the speed of your different obstacles as well to make your game a bit more challenging.")


Section goal2Activity4Section
goal2Activity4Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal2Activity4Section, "Activity", 3)
goal2Activity4Section:AddParagraph("Following the above example, in the Update action, call the Move action of each box and write a conditional to reset the position when it reaches the wall. Try making the two different rows of boxes go opposite directions.")
goal2Activity4Section:AddParagraph("The final aim of this section is to have 2 rows with 2 boxes on each (with different colors if possible) that are moving from one wall to another. For the first row, the boxes should go from left to right. For the second row, they should go from right to left.")


Section goal3Section
goal3Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal3Section, "Goal 3 : Win or lose the game", 2)
goal3Section:AddParagraph("Now we have to set the win/lose conditions of our game. The program template has some of the code written for us.")

Section goal3ExampleSection
goal3ExampleSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal3ExampleSection, "Example", 3)
goal3ExampleSection:AddParagraph("Our game has two possible endings: we hit a box and we lose the game or we reach the goal and we win the game. The template manages the win condition (collision with the goal), and manages collisions with our first box. The template uses the action")
CodeBlock code60
code60:AddText("IsColliding(Model character, Model box)")
goal3ExampleSection:Add(code60)
goal3ExampleSection:AddParagraph("which returns a boolean value indicating whether the two parameters are colliding.")
goal3ExampleSection:AddParagraph("We can use an action that returns a boolean value in our conditional statements. In this case, we want to call the action Lose() if the character is colliding with the box. Let's look at the win/lose conditional statement in our template. This is in the Update action of our program.")
goal3ExampleSection:AddParagraph("The general idea of this conditional statement is: if there is a collision with a box, you lose the game. Otherwise, if there is a collision with the goal, you win the game. If neither of those things has happened, the game should play normally. This is what that looks like in the template:")
CodeBlock code11
        code11:AddText(
"if IsColliding(character, box1) // if the player is hit by a box, GAME OVER
    Lose()
//elseif {check box 2 collision and then check for the remaining boxes}
elseif IsColliding(character, goal)<comment>// if he hit the goal, victory
    Win()
else
    //this is where the code to move the boxes is (from Goal #2)

    //this is where the audio management code is (completed in the next activity)

end"
)
goal3ExampleSection:Add(preformatter:GeneratePreformattedCode(code11))

Section goal3ActivitySection
vocabSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal3ActivitySection, "Activity", 3)
goal3ActivitySection:AddParagraph("Following the above example, modify the conditional statement (by adding more elseif statements) to check the collision for the new boxes you have added. Each time you call the")
CodeBlock code62
code62:AddText("IsColliding(Model character, Model box)")
goal3ActivitySection:Add(code62)
goal3ActivitySection:AddParagraph("action, be sure to pass the character and the box you are checking. If any of them return true, call the Lose() action.")


Section goal3Example2Section
goal3Example2Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal3Example2Section, "Example", 3)
goal3Example2Section:AddParagraph("The last thing that must be done in order to play the game, is managing the Audio for our boxes. When our character is near a box, we need to stream the car sound for that box. Our program template has an action")

CodeBlock code600
code600:AddText("IsNearCar(Model character, Model box, Audio3D soundCar) returns boolean")
goal3Example2Section:Add(code600)

goal3Example2Section:AddParagraph("which, like the previous IsColliding action, returns a boolean value that indicates if the character is near the box. If the character is near box1, we Stream the audio attached to box1 (soundCar1). This is what the code to do this for box1 look like:")

CodeBlock code12
        code12:AddText(
"// every update we check if the character is near a box
if IsNearCar(character, box1, soundCar1)
    // if the character is near a box we play the sound car
    soundCar1:Stream()
//elseif {check nearness for box 2 and then for the rest of the boxes}
end "
)
goal3Example2Section:Add(preformatter:GeneratePreformattedCode(code12))

Section goal3Activity2Section
goal3Activity2Section:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(goal3Activity2Section, "Activity", 3)
goal3Activity2Section:AddParagraph("Following the above example, and using the IsNearCar action, modify the conditional statement to manage the audio for the boxes you have created. Remember to pass the character, the box you are checking, and the audio for that box.")
goal3Activity2Section:AddParagraph("Now, you have a basic Frogger style game. To make this game even better, you can add more rows of boxes.")


Section collaborateSection
collaborateSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(collaborateSection, "Collaborate", 2)
Paragraph value2 = collaborateSection:AddParagraph("Collaboration is an important part of programming. 
When you work with other programmers, you get other points-of-view that make 
your programs even better. The final part of this assignment requires you to 
learn how to use Git, a great tool for collaborating. Head over to the ")
value2:AddLink("Teams and Version Control Tutorial ", "/tutorials/language/teamsAndVersionControl.html")
value2:AddText("if you need to know how to use Git.")

Section collaborateActivitySection
collaborateActivitySection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(collaborateActivitySection, "Collaboration Activity:", 3)
UnorderedList unorderedList64
unorderedList64:SetClassAttribute(GetDefaultListStyle())
collaborateActivitySection:Add(unorderedList64)
ListItem listItem65
unorderedList64:Add(listItem65)
listItem65:AddText("Create a repository for the Quorum game applications that you will want to share")
ListItem listItem66
unorderedList64:Add(listItem66)
listItem66:AddText("Add your game to your repository")
ListItem listItem67
unorderedList64:Add(listItem67)
listItem67:AddText("Commit and push your repository")
ListItem listItem68
unorderedList64:Add(listItem68)
listItem68:AddText("Invite a friend to your repository to pull your project")
ListItem listItem69
unorderedList64:Add(listItem69)
listItem69:AddText("Have your friend make one change to your game (the color of a box or the speed of the character, for example)")
ListItem listItem70
unorderedList64:Add(listItem70)
listItem70:AddText("Have your friend commit and push their change")
collaborateActivitySection:AddParagraph("When multiple programmers work on the same project, it is easier to find and fix any problems. The more people who collaborate on a project, the more points-of-view you get, and the easier it is to find errors and improve. This last activity will help grow your network of programmers.")

Section collaborateSocialSection
collaborateSocialSection:SetClassAttribute(GetDefaultSectionStyle())
AddHeading(collaborateSocialSection, "Optional Collaboration Activity", 4)
collaborateSocialSection:AddParagraph("Social media has changed the way that we communicate. It has provided a simple way to disseminate or broadcast information. It continues to develop new ways to communicate. Take advantage of this modern form of communication by creating a social media account (if you are older than 13) and sharing your Quorum Game. Invite your friends to download and play your game.")


        bodyDiv:Add(goalsSection)
        bodyDiv:Add(cspCurriculumSection)
        bodyDiv:Add(cspStandardsSection)
        bodyDiv:Add(overviewSection)
        bodyDiv:Add(goal1Section)
        bodyDiv:Add(goal1ExampleSection)
        bodyDiv:Add(goal1ActivitySection)
        bodyDiv:Add(goal2Section)
        bodyDiv:Add(goal2ExampleSection)
        bodyDiv:Add(goal2ActivitySection)
        bodyDiv:Add(goal2Example2Section)
        bodyDiv:Add(goal2Activity2Section)
        bodyDiv:Add(goal2Example3Section)
        bodyDiv:Add(goal2Activity3Section)
        bodyDiv:Add(goal2Example4Section)
        bodyDiv:Add(goal2Activity4Section)
        bodyDiv:Add(goal3Section)
        bodyDiv:Add(goal3ExampleSection)
        bodyDiv:Add(goal3ActivitySection)
        bodyDiv:Add(goal3Example2Section)
        bodyDiv:Add(goal3Activity2Section)
        bodyDiv:Add(collaborateSection)
        bodyDiv:Add(collaborateSocialSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn to code actions while creating a Frogger-style computer game with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Actions"
    end
    action GetName returns text
        return "Assignment 4.1"
    end
    action GetShortDescription returns text
        return "an introduction to actions."
    end

    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter4/assignment4_1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Actions"
    end
end