use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Assignment4_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Assignment 4.2: Introducing File Saving and Action Overloading")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Assignment 4.2: Files and Overloading", 1)
        headDiv:AddText("Save/load files and overload actions")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Objectives", 2)
        bodyDiv:AddParagraph("The goal of this assignment is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Save number or text in a file (and overloading)")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("Load the saved number or text (and overloading)")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("Load a path")

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)


        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.1, EK 1.2.1A, EK 1.2.1B, EK 1.2.1C, EK 1.2.1E")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.1.1I")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.2, EK 4.1.2A, EK 4.1.2C, EK 4.1.2G, EK4.1.2I")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.2, LO 5.2.1, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.2.1F, EK 5.2.1G, EK 5.2.1H")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.5, LO 5.5.1, EK 5.5.1A, EK 5.5.1B, EK 5.5.1D, EK 5.5.1F, EK 5.5.1G, EK 5.5.1H, EK 5.5.1J")
        bodyDiv:Add(list)

         
        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        
        
        bodyDiv:Add(ccList) 

        bodyDiv:AddHeading("Vocabulary", 2)

        UnorderedList vocabularyList
        vocabularyList:AddListItem("Action")
        vocabularyList:AddListItem("Casting")
        vocabularyList:AddListItem("Class")
        vocabularyList:AddListItem("File")
        vocabularyList:AddListItem("Overload")
        bodyDiv:Add(vocabularyList)


        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this assignment, you will learn how to use the File class in order 
            to open a file and use Read() and Write() actions on it. You will also take advantage of a 
            technique known as action overloading, which allows you to define multiple actions with the 
            same name that differ in their parameters.")

        Paragraph value = bodyDiv:AddParagraph("You will need a ")
        value:AddLink("template","/files/lessons/chapter4/Assignment4_2Template.zip")

        value:AddText(". The template adds on the scene a blue 
            cube and a red cylinder (with buttons on them). The user can choose 
            between one of them, or load a Model that was already chosen in 
            a previous run. When the choice is made, both Models are removed 
            from the scene, and a KeyboardListener is added, so the game can save 
            and load the chosen model. Once the model is loaded, the player can make 
            it move using the directional keys, and save its last positions 
            in a file (using the S key), to load it later (using the L key).")

        bodyDiv:AddHeading("Goal 1: Save text or a number in a file", 2)
        Paragraph example1
        Bold example1B
        CodeBlock fileWriterCode
        CodeBlock fileCode
        CodeBlock actionSaveCode
        fileWriterCode:AddText("FileWriter")
        fileCode:AddText("File")
        actionSaveCode:AddText("action Save")
        example1B:AddText("Example: Write to a file")
        example1:Add(example1B)
        example1:Add(break)
        example1:AddText("First, create an empty file where we will save the data. 
            Create a file called form.txt. In ")
        example1:Add(actionSaveCode)
        example1:AddText(", you will use objects from the ")
        example1:Add(fileCode)
        example1:AddText(", and")
        example1:Add(fileWriterCode)
        example1:AddText(" classes to open form.txt.")
        bodyDiv:Add(example1)

        CodeBlock code5
        code5:AddText(
"action Save(text objectForm)    
    File f
    f:SetPath(" + dq + "File/form.txt" + dq + ")
    FileWriter writer
    writer:OpenForWrite(f)
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code5))
        bodyDiv:AddParagraph("To write in the file, we will use the WriteLine(text yourText) from the FileWriter class.")
        CodeBlock code7
        code7:AddText(
"writer:WriteLine(objectForm)
writer:Close()")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code7))
        bodyDiv:AddParagraph("This retrieves the model the player chose, and writes it to the form.txt file.")

        Paragraph activity1
        Bold activity1B
        CodeBlock actionSave2
        CodeBlock openCode
        openCode:AddText("OpenForWrite")
        actionSave2:AddText("action Save()")
        activity1B:AddText("Activity: Write to the position.txt file.")
        activity1:Add(activity1B)
        activity1:Add(break)
        activity1:AddText("Use the same code from the example above in ")
        activity1:Add(actionSave2)
        activity1:AddText(". Make sure you use the action with no parameters. Also, pass " + dq + "f" + dq + "to the ")
        activity1:Add(openCode)
        activity1:AddText(" action, and replace form.txt with position.txt, to write to the position file.")
        bodyDiv:Add(activity1)
        bodyDiv:AddParagraph("Now, you will try to save the X, Y and Z coordinates of the Model, so that we can load it on its previous place. 
                            Since these coordinates are number, you need to use GetText() action from the number class when you write it on the file. 
                            We will overload the Save() action, since we write in a different file and save more than one line.")

        Paragraph example2
        Bold example2B
        example2B:AddText("Example: Save the X coordinate of the Model")
        example2:Add(example2B)
        example2:Add(break)
        example2:AddText("Write the following line of code in ")
        example2:Add(actionSave2)
        example2:AddText(" after ")
        example2:Add(openCode)
        example2:AddText(".")
        bodyDiv:Add(example2)
        CodeBlock example2Code
        example2Code:AddText("writer:WriteLine(finalChoice:GetX():GetText())")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2Code))

        Paragraph activity2
        Bold activity2B
        CodeBlock sayCode
        CodeBlock talkCode
        sayCode:AddText("Say")
        talkCode:AddText("talk")
        activity2B:AddText("Activity: Add code to save the Y and Z coordinates, and to tell players the posiiton was saved.")
        activity2:Add(activity2B)
        activity2:Add(break)
        activity2:AddText("Use the example to add code to save the Y and Z coordinates. Use a ")
        activity2:Add(sayCode)
        activity2:AddText(" action on the ")
        activity2:Add(talkCode)
        activity2:AddText(" object to tell the player the position was saved.")
        bodyDiv:Add(activity2)

        bodyDiv:AddHeading("Goal 2 : Load a number or a text from a file.", 2)
        Paragraph goal2
        CodeBlock loadCode
        CodeBlock fileReaderCode
        fileReaderCode:AddText("FileReader")
        loadCode:AddText("Load()")
        goal2:AddText("The action ")
        goal2:Add(loadCode)
        goal2:AddText(" is called when the player presses the L key after choosing one of the two Models.
            You now have to write what it should do. Like the Save action, you need a object from the ")
        goal2:Add(fileCode)
        goal2:AddText( "class. Instead of the ")
        goal2:Add(fileWriterCode)
        goal2:AddText(" object, we will use the ")
        goal2:Add(fileReaderCode)
        goal2:AddText(". The following code is already in your template.")
        bodyDiv:Add(goal2)
        CodeBlock code11
        code11:AddText(
"File file
file:SetPath(" + dq + "File/form.txt" + dq + ")
FileReader reader
reader:OpenForRead(file)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code11))
        bodyDiv:AddParagraph("The FileReader class works the same as the FileWriter one, you can read a file line per line using the ReadLine() action.")
        CodeBlock code13
        code13:AddText(
"finalChoice = table:GetValue(reader:ReadLine())
finalChoice:SetPosition(9, -2, 5)
Add(finalChoice)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code5))
        bodyDiv:AddParagraph("The table is a HashTable field we used to stock the two Models, and the keys are " + dq + "cube" + dq + 
            " and " + dq + "cylinder" + dq + " which are on the buttons. We saved one of them in a file with the previous activity. 
            So if the user clicked on cube, this code will take the Model which is associated to the keyword " + dq + "cube" + dq + 
            " in the HashTable. We choose to set its position. Finally, we have to add on the scene the chosen Model.")
        bodyDiv:AddHeading("Activity: Add a conditional to handle choices", 3)
        bodyDiv:AddParagraph("The example above is called when a Model is not load yet. Add the conditional to handle this.")
        CodeBlock code15
        code15:AddText(
"action Load()
    File file
    file:SetPath(" + dq + "File/form.txt" + dq + ")
    FileReader reader
    reader:OpenForRead(file)
    if not isLoaded
        finalChoice = table:GetValue(reader:ReadLine())
        finalChoice:SetPosition(9, -2, 5)
        Add(finalChoice)
        isLoaded = true
    else
        // TO DO
    end
    reader:Close()
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code5))
        bodyDiv:Add(break)

        Paragraph example3
        Bold example3B
        CodeBlock example3Code
        Span s3
        Span s4
        Span s5
        CodeBlock parseCode
        parseCode:AddText("ParseNumber()")
        example3:AddText("If there is already a model, 
            then we want to load the last position we saved in position.txt. You will write the code that allows you 
            to get the three coordinates of the Model. Since the values get the text type, we have to cast them into 
            number using the ")
        example3:Add(parseCode)
        example3:AddText(" action from the text class.")
        example3:Add(break)
        example3:Add(break)
        example3B:AddText("Example: Use ")
        example3B:Add(parseCode)
        example3B:AddText(" action to load a position.")
        example3:Add(example3B)
        example3:Add(break)
        example3:AddText("Add this code after the else to start reading the saved position.")
        bodyDiv:Add(example3)
        s3:AddText("//These two lines set the path for the FileReader to read the postion.txt file.")
        s3:SetClassAttribute("comment")
        example3Code:Add(s3)
        example3Code:Add(break)
        example3Code:AddText("file:SetPath(" + dq + "File/position.txt" + dq + ")" + cr +
            "reader:OpenForRead(file)")
        example3Code:Add(break)
        s4:AddText("//This line will set a variable for the X coordinate.")
        s4:SetClassAttribute("comment")
        example3Code:Add(s4)
        example3Code:Add(break)
        example3Code:AddText("number positionX = reader:ReadLine():ParseNumber()")
        example3Code:Add(break)
        s5:AddText("//These set the position, and add a Say statement to let the user know the position was loaded.")
        s5:SetClassAttribute("comment")
        example3Code:Add(s5)
        example3Code:Add(break)
        example3Code:AddText("finalChoice:SetPosition(positionX, positionY, positionZ)" + cr +
            "talk:Say(" + dq + "Last position loaded" + dq + ")")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example3Code))

        Paragraph activity3
        Bold activity3B
        activity3B:AddText("Activity: Add code to read the Y and Z coordinates.")
        activity3:Add(activity3B)
        activity3:Add(break)
        activity3:AddText("Use the example above to add code for the Y and Z coordinates.")
        bodyDiv:Add(activity3)

        
        bodyDiv:AddParagraph("There is the case where the user chooses to load a previous model. 
            In this case, the Load action will have to be a bit different, since we will look into both txt files without conditions. 
            To do that, you will overload the Load action. Find this action:")
        CodeBlock code17
        code17:AddText(
"action Load(text fileName1, text fileName2)
    // TO DO
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code17))

        Paragraph example4
        Bold example4B
        example4B:AddText("Example: Overlaod the ")
        example4B:Add(loadCode)
        example4B:AddText(" action to read two files.")
        example4:Add(example4B)
        example4:Add(break)
        example4:AddText("Add this code to the new ")
        example4:Add(loadCode)
        example4:AddText(" action.")
        bodyDiv:Add(example4)
        
        CodeBlock example4Code
        example4Code:AddText("File f1" + cr +
        "File f2" + cr +
        "f1:SetPath(" + dq + "File/" + dq + "+fileName1)" + cr +
        "f2:SetPath(" + dq + "File/" + dq + "+fileName2)" + cr +
        "FileReader reader" + cr +
        "reader:OpenForRead(f1)" + cr +
        "finalChoice = table:GetValue(reader:ReadLine())" + cr +
        "Add(finalChoice)" + cr +
        "isLoaded = true" + cr +
        "reader:OpenForRead(f2)" + cr +
        "number positionX = reader:ReadLine():ParseNumber()" + cr + cr +
        "reader:Close()")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example4Code))

        Paragraph activity4
        Bold activity4B
        activity4B:AddText("Actvitiy: Add code for the Y and Z coordinates, as well as to set the position.")
        activity4:Add(activity4B)
        activity4:Add(break)
        activity4:AddText("Use what you know to complete the action.")
        bodyDiv:Add(activity4)

        bodyDiv:AddHeading("Goal 3: Load a path for the Model.", 2)
        bodyDiv:AddParagraph("Now we will load a path which is defined in a file called path.txt. We call this action LoadPath(). 
            First of all, we add these fields in the program above the Main action.")
        CodeBlock code19
        code19:AddText(
"integer indexOfTab = 0
integer tabSize = 56 // number of line in path.txt")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code19))
        bodyDiv:AddParagraph("Then, in the Update action, add the following lines :")
        CodeBlock code21
        code21:AddText(
"if isLoaded
    if not pIsPressed
        finalChoice:Move(positionX*seconds, positionY*seconds, positionZ*seconds)
    else
        if indexOfTab < tabSize // 56 = number of line in path.txt
            LoadPath(indexOfTab)
            indexOfTab = indexOfTab + 1
        end
    end
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code21))
        bodyDiv:AddParagraph("The LoadPath action will read the same file line by line each time it is called, 
            and will set the position of the Model using the coordinates got from the indexOfTab-th line. 
            Use this method because it would be too fast in a loop in the LoadPath action, and you wouldn't see the Model moving.")
        CodeBlock code23
        code23:AddText(
"action LoadPath(integer index)
    File file
    file:SetPath(" + dq + "File/path.txt" + dq + ")
    FileReader reader
    reader:OpenForRead(file)
    // TO DO
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(code23))

        Paragraph activity5
        Bold activity5B
        activity5B:AddText("Activity: Finish the action.")
        activity5:Add(activity5B)
        activity5:Add(break)
        activity5:AddText("Add the following code to finish the action.")
        activity5:Add(break)
        bodyDiv:Add(activity5)
        
        CodeBlock activity5Code
        Span s6
        activity5Code:AddText("Array<text> tab")
        activity5Code:Add(break)
        s6:AddText("// 56 is the number of line in the path_copy.txt file")
        s6:SetClassAttribute("comment")
        activity5Code:Add(s6)
        activity5Code:Add(break)
        activity5Code:AddText("repeat 56 times" + cr + 
            "     tab:Add(reader:ReadLine())" + cr +   
        "end" + cr +
        "integer waitCounter = 0" + cr +
        "Array<text> position = tab:Get(index):Split(" + dq + " " + dq + ")" + cr +
        "finalChoice:SetPosition(position:Get(0):ParseNumber(), position:Get(1):ParseNumber(), position:Get(2):ParseNumber())" + cr +
        "if index = 55" + cr +
        "    pIsPressed = false"+ cr +
        "    talk:Say(" + dq + "Path loading finished" + dq + ")" + cr +
        "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(activity5Code))
        

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how to code programs that save files using action overloading with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing File Saving and Action Overloading"
    end
    action GetName returns text
        return "Assignment 4.2"
    end
    action GetShortDescription returns text
        return "an introduction to file saving and action overloading."
    end
    action GetLocation returns text
        return "lessons/chapter4/assignment4_2.html"
    end
end