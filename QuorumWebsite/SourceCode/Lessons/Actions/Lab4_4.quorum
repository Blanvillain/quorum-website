use Libraries.Web.Page.all
use Libraries.Containers.Array

class Lab4_4 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Save the Citizens! - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        AddHeading(headDiv, "Actions: Ride to Victory!", 1)
        headDiv:AddText("Actions Using Parameters and Return Types")
        bodyDiv:Add(headDiv)

        Section section_goals
        AddHeading(section_goals, "Goals", 2)
        section_goals:AddParagraph("The goal of this lab is to learn the following:")
        UnorderedList unorderedList0
        unorderedList0:AddClassAttribute("list-disc list-outside pl-8")
        section_goals:Add(unorderedList0)
        ListItem listItem1
       
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create actions with parameters.")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to create actions with return types.")
        ListItem listItem4
       ListItem listItem5
        unorderedList0:Add(listItem5)
        listItem5:AddText("How to call actions with parameters")
        ListItem listItem6
        unorderedList0:Add(listItem6)
        listItem6:AddText("How to utilize returned values from actions")


        Section section_csp_curriculum
        section_csp_curriculum:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_csp_curriculum, "Computer Science Principles Curriculum", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, 
        EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        section_csp_curriculum:Add(list)

        Section section_standards
        AddHeading(section_standards, "Common Core Standards ", 2)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, 
        CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, 
        CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, 
        CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        section_standards:Add(ccList) 

        Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("In this lesson, you will practice creating and calling actions using parameters 
                and return types. Make sure you have finished Lab 4.1 first. There we have a basic introduction 
                to actions. We will create a text game where you will create a great warrior and save 
                vulnerable citizens! To do so, we will need input from the user. Our code will function by 
                calling different actions. The actions will gather information and then output it in our game.")

        Section section_task1
        section_task1:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_task1, "Task 1: Getting started", 2)

        section_task1:AddParagraph("You can either use the IDE here, or use Quorum Studio. 
                If using Quorum, create a new project using 'Main.'")

        AddIDE(section_task1, "lab4_4IDE", "Activity:", "//You can use this IDE for all your coding in this lesson instead of using Quorum Studio:", true)

        section_task1:AddParagraph("You will be typing your code in two different locations--between action Main and the first end, and 
            between class Main and the second end.")
        CodeBlock code8
        code8:AddText(
"class Main
    action Main

    //write your program instructions here and define your variables 

    end

    //write your actions here...the program will refer to these actions when executing your code 
    //    in action Main. 

end"
)
    section_task1:Add(preformatter:GeneratePreformattedCode(code8))

        Section section_task2
        section_task2:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_task2, "Task 2: Action Keywords", 2)

        CodeBlock code10
        code10:AddText(
"action GetName
    output " + dq + "You're the mighty + name +" + dq + "
end")
        section_task2:Add(preformatter:GeneratePreformattedCode(code10))
        
        section_task2:AddParagraph("Let's review the following: when you want to create an action, you must first use 
            the action keyword. This keyword lets Quorum know that you preparing to declare a new action. 
            Following the action keyword is the name of your action. Actions obey the same naming rules as 
            variables--any valid variable name is a valid action name. Action names are usually capitalized. 
            Also, don't forget to use camelcase if your name is more than one word!  After you state the name 
            of the action, you place the code you want inside the action between the action and the end line. 
            This is similar to the way the control structures you studied in Chapter 3 work.")
        section_task2:AddParagraph("As you can see we've set up an action, named GetName, and we given it a parameter...
            (text, name). If we left things like that our character would be called name, which would be a 
            weird name. 
        Instead, when we define the variable at the top let's create an input statement where we get the 
        name from the user. See if you can remember how to do that and ask for help
        if you're having problems. By creating an Action with a text parameter, we are able to put in any 
        name we want, including one from the user. This will help personalize the game and make it more fun! The 
        more involved our user is, the more she can get out of it!")

        CodeBlock code12
        code12:AddText(
"GetName(name)")
        section_task2:Add(preformatter:GeneratePreformattedCode(code12))
       
       
        
        
       
        section_task2:AddParagraph("In your action Main you should now have a defined text variable called name that 
            takes an input statement. Have the input question be
            'What is your warrior name!?' After that you should have written the GetName(name) action written. ")
        
        section_task2:AddParagraph("Next, define a text variable called 'weapon' and have the input question be 'What
                type of weapon will you use?' Now, below action Main you need to create the action. Create
                an action called 'action GetWeapon' and give it a text parameter called weapon. Output the
                statement 'You will use a ' + weapon + ' to defeat your enemies!' Now to create some actions with 
                return types. Review Lab 4.1 if needed. Let's create an action called 
                action GetNumberOfParty. It will look like this: 

                action GetNumberOfParty returns integer
                text in = input('How many will ride with you to victory!')
                integer amount = cast(integer, in) 
                return amount  

                The return type here is an integer. We're using an input statement to get the number of people 
                in your party. The input statement, or question that will be asked of your user, only takes
                text, though. We'll need to cast that from text to a new integer variable, because remember 
                our action's return type is an integer! In our action Main, we need to have the following:

                 integer amount = GetNumberOfParty() 
                 output amount + ' brave warriors will ride with you to victory!'

                 This defines the variable amount, an integer, and uses our GetNumberofParty action 
                 to find out how many people are in our party, converting the text input we get into 
                 an integer. 

                 Finally, following what you just did with action GetNumberOfParty, create and action
                 called action GetCitizens. The integer variable shoul be called 
                 'integer citint.' It should have a return type of integer. The input question
                 should be 'How many citizens will you save?!' Your output statement in action Main should be:
                 output 'You and your party will save ' + citint + ' citizens! Wow!' 
                 output 'You are very brave!' 

                 
                
      ")
        CodeBlock code20
        code20:AddText(
        
    " //only look at the following code if you get stuck! 

class Main
    action Main
        
        text name = input("+dq+"What is your warrior name?!"+dq+")        
        text weapon = input("+dq+"What type of weapon will you use?"+dq+")
        GetName(name)
        GetWeapon(weapon)
        integer amount = GetNumberOfParty() 
        output amount + "+dq+" brave warriors will ride with you to victory!"+dq+"
        integer citint = GetCitizens()
        output "+dq+"You and your party will save "+dq+" + citint + "+dq+" citizens! Wow!"+dq+"
        output "+dq+"You are very brave!"+dq+"
        
        
    end

    action GetName(text name)
        output "+dq+"You're are the mighty "+dq+" + name + "+dq+"!"+dq+" 
    end
    
    action GetWeapon(text weapon)
        output "+dq+"You will use a "+dq+" + weapon + "+dq+" to defeat your enemies!"+dq+"
    end

    action GetNumberOfParty returns integer
        text in = input("+dq+"How many will ride with you to victory!"+dq+")
        integer amount = cast(integer, in) 
        return amount  
    end 

    action GetCitizens returns integer
        text cit = input("+dq+"How many citizens will you save?!"+dq+")
        integer citint = cast(integer, cit)
        return citint
    end

end")
        
    section_task2:Add(preformatter:GeneratePreformattedCode(code20))

    bodyDiv:Add(section_goals)
    bodyDiv:Add(section_csp_curriculum)
    bodyDiv:Add(section_standards)
    bodyDiv:Add(section_overview)
    bodyDiv:Add(section_task1)
    bodyDiv:Add(section_task2)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end
    
    action GetMetaDescription returns text
        return "Save the endangered citizens while learning about actions with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Actions: Using Parameters and Return Types"
    end
    action GetName returns text
        return "Actions Lesson"
    end
    action GetShortDescription returns text
        return "more on actions."
    end
    action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter4/lab4_4.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Basics"
    end
end
