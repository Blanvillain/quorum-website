use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab4_2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 4.2: Rock, Paper, Scissors with Actions")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 4.2: Rock, Paper, Scissors with Actions", 1)
        headDiv:AddText("An introduction to parameters")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goals of this lab are to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to implement actions without parameters and return types")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to read and understand requirements to write basic actions")

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EK 4.1.1A, EK 4.1.1B, EK 4.1.1C, EK 4.1.1D, EK 4.1.1E, EK 4.1.1F, EK 4.1.1G, EK 4.1.1H, EK 4.2.1A, EK 4.2.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EK 5.1.2A, EK 5.1.2B, EK 5.2.1A, EK 5.2.1B, EK 5.2.1C, EK 5.2.1D, EK 5.2.1E, EK 5.5.1A, EK 5.5.1D")
        bodyDiv:Add(list)

        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5, CCSS.ELA-Literacy.RST.11-12.10")
        AddListItemWithBoldAtFront(ccList, "Mathematics Content: High School Functions » Building Functions: ", "CCSS.Math.Content.HSF.BF.1A")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will be writing a Rock Paper Scissors game. In this game a human player will be competing with the computer. The human player will choose rock, paper, or scissors and then the computer will randomly select one of the options. Then your program will tell the player who won the round. The use of actions will allow you to organize the game and make the program look organized.")
        
        SideBySideIDE usersComputerIDE
        usersComputerIDE:SetUniqueIdentifier("lab4_2IDE")
        usersComputerIDE:Setup()
        usersComputerIDE:GetIDETitle():AddText("Activity:")
        usersComputerIDE:GetIDESubtitle():AddText("You can use this IDE (Integrated Development Environment) for all your coding in this lesson instead of using Sodbeans:")
        bodyDiv:Add(usersComputerIDE)


        bodyDiv:AddHeading("Task 1: Getting Started", 2)
        bodyDiv:AddParagraph("Start Sodbeans. Create a new " + dq + "Quorum Application" + dq + " project, and name it RockPaperScissors. As in the previous labs, this will leave you with a skeleton Main.quorum file, containing a Main class and Main action. After your project is created, you can use the following code skeleton(replace the code in your project with the following code):")
        PreformattedText pre3
        bodyDiv:Add(pre3)
        pre3:AddAttribute("class", "code")
        CodeBlock code4
        code4:AddText(
"use Libraries.Compute.Random
class Main
    /* Action Main has no parameters or return value.
       This is where the program begins executing. Within this method you should
       give the instructions to the user and then play the game.
    */
    action Main
    end

    /* Action GiveInstructions has no parameters or return value.
        It handles giving all game rules and instructions to the user before
        the game begins.
    */
    action GiveInstructions
    end

    /* Action PlayGame has no parameters or return value.
       It handles anything involving playing the game. This includes asking the player
       for their choice, generating the computer's choice, determining the winner,
       and determining if the player wishes to quit the game or continue playing.
    */
    action PlayGame
    end

    /* Action PlayersTurn has no parameters and returns an integer value.
       This action handles asking the user for their choice of rock, paper, or
       scissors. It also checks the input for errors. Then it returns the valid
       user choice.
    */
    action PlayersTurn returns integer
       integer choice = 1
       //your code goes here
       return choice
    end

    /* Action ComputersTurn has no parameters and returns an integer value.
       This action handles randomly generating the computer's choice. Then it
       returns that value.
    */
    action ComputersTurn returns integer
       integer choice = 1
       //your code goes here
       return choice
    end

    /* Action DetermineWinner has two parameters and no return value. The first
       parameter is the player's choice and the second is the computer's choice.
       This action handles determining the winner of a round in the game. It
       also says who won the round
    */
    action DetermineWinner(integer playerChoice, integer computerChoice)
    end
end")
        pre3:Add(code4)
        bodyDiv:AddParagraph("Pay close attention to the comments in the given code. They give you a good idea of how your program will be controlled. You will start by writing the GiveInstructions action. In this action you should say or output the rules and instructions for the rock, paper, scissors game. That message might be something like the following:")
        PreformattedText pre5
        bodyDiv:Add(pre5)
        pre5:AddAttribute("class", "code")
        CodeBlock code6
        code6:AddText(
"Welcome to the Rock Paper Scissors game!
Here are the rules:
The player and the computer will pick rock, paper, or scissors.
Paper beats rock.
Rock beats scissors.
Scissors beat paper.
Enter a 1 for rock, a 2 for paper, or a 3 for scissors.")
        pre5:Add(code6)
        bodyDiv:AddParagraph("Once the GiveInstructions action is written, call the action in the Main action. Remember Main is where your program begins executing or running and the end following the Main action is where it ends. Run the program and it should give the instructions you wrote in the GiveInstructions action.")
        bodyDiv:AddHeading("Task 2: Create A Game with Actions", 2)
        bodyDiv:AddParagraph("You are going to create a game with actions. You will separate each action so that they serve their own purpose. The first of these actions will be the PlayersTurn action. This action should ask the user to choose rock, paper, or scissors and it should continue to ask the user this until a valid input is given.")
        bodyDiv:AddParagraph("Go to the PlayersTurn action. Within that action start writing code at the comment that says " + dq + "your code goes here" + dq + ". You will need your code to do the following:")
        UnorderedList unorderedList7
        bodyDiv:Add(unorderedList7)
        ListItem listItem8
        unorderedList7:Add(listItem8)
        listItem8:AddText("Declare a boolean and initialize it to false to track valid input.")
        ListItem listItem9
        unorderedList7:Add(listItem9)
        listItem9:AddText("Create a loop that loops until the input is valid.")
        ListItem listItem10
        unorderedList7:Add(listItem10)
        listItem10:AddText("Within that loop, ask the user to choose rock, paper, or scissors.")
        ListItem listItem11
        unorderedList7:Add(listItem11)
        listItem11:AddText("Cast the input from the user to an integer and store it in the choice variable(has already been declared in this action).")
        ListItem listItem12
        unorderedList7:Add(listItem12)
        listItem12:AddText("Check if the input is valid; if it is valid the loop should stop.")
        bodyDiv:AddParagraph("The existing code then returns the user's choice from the action, return choice, is already written into the action. Don't worry about calling and testing this action right now. You will come back to this when you write the PlayGame action. Instead move onto writing the ComputersTurn action.")
        bodyDiv:AddParagraph("Go to the ComputersTurn action. Within that action start writing code at the comment that says " + dq + "your code goes here" + dq + ". You will need your code to do the following:")
        UnorderedList unorderedList13
        bodyDiv:Add(unorderedList13)
        ListItem listItem14
        unorderedList13:Add(listItem14)
        listItem14:AddText("Declare a Random object. e.g. Random random.")
        ListItem listItem15
        unorderedList13:Add(listItem15)
        listItem15:AddText("Generate a random integer between 1 and 3, including 1 and 3.")
        ListItem listItem16
        unorderedList13:Add(listItem16)
        listItem16:AddText("Assign the random integer to the choice variable.")
        bodyDiv:AddParagraph("The computers choice is then returned(the code for this is already included).")
        bodyDiv:AddParagraph("The next action you are going to write is the DetermineWinner action. This action has two parameters: playerChoice and computerChoice. For this to be a general solution you won't worry about the value of each parameter; those are determined when you call the DetermineWinner action. In this action you want to use conditional statements to determine if there is a tie, if the computer won, or if the player won.")
        bodyDiv:AddParagraph("To start writing this action you can use the following code:")
        PreformattedText pre17
        bodyDiv:Add(pre17)
        pre17:AddAttribute("class", "code")
        CodeBlock code18
        code18:AddText(
"if playerChoice = computerChoice then
   say " + dq + "It's a tie!" + dq + "
end")
        pre17:Add(code18)
        bodyDiv:AddParagraph("Add onto this conditional so that, if:")
        UnorderedList unorderedList19
        bodyDiv:Add(unorderedList19)
        ListItem listItem20
        unorderedList19:Add(listItem20)
        listItem20:AddText("Player chooses rock and computer chooses paper the output is, " + dq + "Paper beats rock - the computer wins!" + dq + "")
        ListItem listItem21
        unorderedList19:Add(listItem21)
        listItem21:AddText("Player chooses rock and computer chooses scissors the output is, " + dq + "Rock beats scissors - you win!" + dq + "")
        ListItem listItem22
        unorderedList19:Add(listItem22)
        listItem22:AddText("Player chooses paper and computer chooses rock the output is, " + dq + "Paper beats rock - you win!" + dq + "")
        ListItem listItem23
        unorderedList19:Add(listItem23)
        listItem23:AddText("Player chooses paper and computer chooses scissors the output is, " + dq + "Scissors beats paper - the computer wins!" + dq + "")
        ListItem listItem24
        unorderedList19:Add(listItem24)
        listItem24:AddText("Player chooses scissors and computer chooses paper the output is, " + dq + "Scissors beats paper - you win!" + dq + "")
        ListItem listItem25
        unorderedList19:Add(listItem25)
        listItem25:AddText("Player chooses scissors and computer chooses rock the output is, " + dq + "Rock beat scissors - the computer wins!" + dq + "")
        bodyDiv:AddParagraph("The next action you will write is the PlayGame action. This action handles all of the game play, including getting the player's choice, randomly generating the computer's choice, determining a winner of the round, and asking the player if they want to continue playing or stop the game.")
        bodyDiv:AddParagraph("In this action, start by defining a text variable called playAgain and initialize it to " + dq + "Y" + dq + ". Create a loop that will continue to loop when playAgain is equal to " + dq + "Y" + dq + " or " + dq + "y" + dq + ". Inside this loop you need to call the PlayersTurn action and store the returned value in a variable named player with a type of integer. Then do the same with the ComputersTurn action. Store the returned value in a variable named computer with a type of integer. Call DetermineWinner passing the arguments player and computer. Finally, ask the user, " + dq + "Would you like to play again (Y/N)?" + dq + ", and assign the result to the playAgain variable.")
        bodyDiv:AddParagraph("When you are done the PlayGame action should look like the following code:")
        PreformattedText pre26
        bodyDiv:Add(pre26)
        pre26:AddAttribute("class", "code")
        CodeBlock code27
        code27:AddText(
"action PlayGame
    text playAgain = " + dq + "Y" + dq + "
    repeat while playAgain = " + dq + "Y" + dq + " or playAgain = " + dq + "y" + dq + "
        integer player = PlayersTurn()
        integer computer = ComputersTurn()
        DetermineWinner(player, computer)
        playAgain = input(" + dq + "Would you like to play again (Y/N)?" + dq + ")
    end
end")
        pre26:Add(code27)
        bodyDiv:AddParagraph("The final step is to finish writing the Main action. The Main action should give the instructions, play the game, and say " + dq + "Game over" + dq + " when the game is done.")
        bodyDiv:AddHeading("Sample Output", 2)
        bodyDiv:AddParagraph("The following is sample output from the game:")
        PreformattedText pre28
        bodyDiv:Add(pre28)
        pre28:AddAttribute("class", "code")
        CodeBlock code29
        code29:AddText(
"Welcome to the Rock Paper Scissors game!
Here are the rules:
The player and the computer will pick rock, paper, or scissors.
Paper beats rock.
Rock beats scissors.
Scissors beat paper.
Enter a 1 for rock, a 2 for paper, or a 3 for scissors.
Rock (1), Paper (2), or Scissors (3)? 
4
Error: The value needs to be between 1 and 3. Please try again. You entered 4
Rock (1), Paper (2), or Scissors (3)? 
1
Rock beats scissors - you win!
Would you like to play again (Y/N)? 
Y
Rock (1), Paper (2), or Scissors (3)? 
1
Paper beats rock - the computer wins!
Would you like to play again (Y/N)? 
y
Rock (1), Paper (2), or Scissors (3)? 
3
It's a tie!
Would you like to play again (Y/N)? 
N
Game over")
        pre28:Add(code29)
        bodyDiv:AddParagraph("Debug your program and fix any compiler errors there might be. Now would be a great time to use the debugger to test your program. When an action is called use 'step into' to see what happens when a particular action is called. Did your program run correctly? If not, fix any problems. Show the work to the instructor.")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about actions while coding a rock, paper, scissors game using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Rock, Paper, Scissors with Actions"
    end
    action GetName returns text
        return "Lab 4.2"
    end
    action GetShortDescription returns text
        return "an introduction to parameters."
    end
    action GetLocation returns text
        return "lessons/chapter4/lab4_2.html"
    end
end