use Libraries.Web.Page.all
use Libraries.System.File
use Libraries.Containers.Array

class Challenge4_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Challenge 4.1: Line Following")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
         Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
         Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Challenge 4.1: Line Following", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Challenge 4.1: Line Following")
        headDiv:AddText("Using Actions with Robots")
        AddToHeadingArray(h_heading)

        bodyDiv:Add(headDiv)
        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Line Following", 2)
        

        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("In this challenge you will practice the following computer science concepts in a team or small group environment:")
        

        UnorderedList unorderedList0
        unorderedList0:AddClassAttribute("list-disc list-outside pl-8")
        section_intro:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("Creating Objects")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("Using multiple conditional statements and looping statements")
        ListItem listItem3
        unorderedList0:Add(listItem3)

        AddHeading(section_intro, "Computer Science Principles Curriculum", 3)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.3, EK 1.2.3A, EU 1.3, LO 1.3.1, EK 1.3.1A")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, EK 4.1.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", "EU 5.1, LO 5.1.1, EK 5.1.1B, EU 5.2, LO 5.2.1, EK 5.2.1C, EK 5.2.1D")
        section_intro:Add(list)

       AddHeading(section_intro, "Common Core Standards", 3)
        UnorderedList ccList
        ccList:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards » Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.9-10.1, CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.8, CCSS.ELA-Literacy.RST.9-10.9")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8, CCSS.Math.Content.HSF.IF.A.1  ")
        section_intro:Add(ccList)

        listItem3:AddText("Creating and Using variables")
        AddHeading(section_intro, "Vocabulary", 3)
        UnorderedList unorderedList4
        unorderedList4:AddClassAttribute("list-disc list-outside pl-8")
        section_intro:Add(unorderedList4)
        ListItem listItem5
        unorderedList4:Add(listItem5)
        listItem5:AddText("Variables")
        ListItem listItem6
        unorderedList4:Add(listItem6)
        listItem6:AddText("Control Structures")
        ListItem listItem7
        unorderedList4:Add(listItem7)
        listItem7:AddText("Conditional Statements")
        ListItem listItem8
        unorderedList4:Add(listItem8)
        listItem8:AddText("If Statement")
        ListItem listItem9
        unorderedList4:Add(listItem9)
        listItem9:AddText("Loops")
        ListItem listItem10
        unorderedList4:Add(listItem10)
        listItem10:AddText("Color Sensor")

        


                Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_overview)
        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("This challenge will use several libraries such as the Motor, ColorSensor, Utility, Screen and Sound library. You will use different conditions with the Color Sensor for the purpose of following the line. There are multiple ways to approach this task, so feel free to try some other ways once you finish this lab!")
        Paragraph value = section_overview:AddParagraph("This project requires you to download this")
        Link link = value:AddLink(" program template", "/files/lessons/chapter4/Challenge4_1Template.zip")
        link:SetClassAttribute("underline text-quorum-blue-150")
        value:AddText(", which will be completed in this assignment.")

        AddHeading(section_overview, "Goal 1: Creating objects", 3)

        section_overview:AddParagraph("First you will need to unzip your template and open the project in Sodbeans. Open the main.quorum file. In the top of the file you should have the appropriate code for using the Quorum ColorSensor and the Motor libraries inside the Lego library.")
        
         AddHeading(section_overview, "Activity : Instantiate the Motor and the ColorSensor objects", 3)
        
        section_overview:AddParagraph("Call the Motor object motor and the ColorSensor object colorSensor.")
        section_overview:AddParagraph("Now you must set the port to work with. This will be the port that the Color Sensor is connected to on the robot. You will do that using the SetPort statement.")
         AddHeading(section_overview, "Example : Tell the port your Color Sensor is connected", 4)
        
        PreformattedText pre11
        section_overview:Add(pre11)
        pre11:AddAttribute("class", "code")
        CodeBlock code12
        code12:AddText(
"//This line of code will set the port to work with in parenthesis
colorSensor:SetPort(1)")
        pre11:Add(code12)
        section_overview:AddParagraph("You can change the port at any time. If you add other sensors you may want to rearrange to get the best fit.")
        section_overview:AddParagraph("Just remember to double check that the ports you are connected to are the ones you have set in your code!")
        //section_overview:AddParagraph("Suggestion: You can put screen:OutputCenter(" + dq + "white " + dq + ", 0) to check if you enter good in a loop. In this way you can understand better.")
        
         AddHeading(section_overview, "Goal 2: Using conditional and looping statements", 3)
    
        section_overview:AddParagraph("Your code should work like this: the robot will go forward if the color sensor detects the colored line. If the sensor does not detect the colored line, it will first turn to the right in search of that color. If it does not detect that color after turning a certain number of degrees to the right, it will turn to the left. You will have to consider how much the robot turned to the right, so when it turns back left it will check far enough in that direction.")
        section_overview:AddParagraph("Let’s start with the conditions now. In order to get the color of the line, you will use the GetColor() command. You may have to experiment to find the setting that the color sensor will respond to best.")
        
        AddHeading(section_overview, "Activity : Write the proper code to set the condition of the motors A and D to move forward", 3)
        
        PreformattedText pre13
        section_overview:Add(pre13)
        pre13:AddAttribute("class", "code")
        CodeBlock code14
        code14:AddText(
"//This line is the looping condition; once the condition doesn’t match anymore the program stops
repeat until")
        pre13:Add(code14)
        section_overview:AddParagraph("Try experimenting with the Color Sensor. Let's move the Lego Robot forward when it finds the color blue (we suggest using blue tape). Then, if the Lego Robot finds another color (it goes off the tape), it will stop immediatly.")
        section_overview:AddParagraph("Don't forget to set the speed of the motors. Look back at earlier robot lessons if you don't remember how to do this.")
        AddHeading(section_overview, "Example : Conditions in case the color line isn’t forward", 4)

        PreformattedText pre15
        section_overview:Add(pre15)
        pre15:AddAttribute("class", "code")
        CodeBlock code16
        code16:AddText(
"//Before the conditions, to make it easier, let's call 'color' the values the sensor will get
color = colorSensor:GetColor() 

 if //the color is equal to anything besides blue
    //The Lego Robot will turn to the right in search of blue
    if 
        //The right wheel will rotate a certain number of degrees backward
        //The left wheel will rotate the same number of degrees forward (creating a turn)
    //After the time you decided, the Lego Robot will change direction and turn to the left side
    elseif    
        //The Lego Robot will turn to the left to find the color line 
    end
 end")
        pre15:Add(code16)
        section_overview:AddParagraph("If the robot finds the blue line again, you will want it to go back to moving forward, starting the whole process again. A condition should move your program back to the beginning again in this case.")
       
        AddHeading(section_overview, "Activity : Creating and changing variables in many loops", 3)
     
        section_overview:AddParagraph("To achieve this, you will have four loops. The robot will take each step in an effort to find the blue line and then start moving forward again.")
        section_overview:AddParagraph("You will need to add one more loop between the two in the previoius example. You will also need one before the end.")
        
        AddHeading(section_overview, "Example : Conditions in case the color line isn’t forward", 4)
     
        PreformattedText pre17
        section_overview:Add(pre17)
        pre17:AddAttribute("class", "code")
        CodeBlock code18
        code18:AddText(
"//The car will try to find the line to the RIGHT 
if condition = condition1 //turn to the right
   condition = condition2

//After a certain amount of time, the car will change its direction to the LEFT
elseif condition = condition2 
   condition = condition3

//The car will then try to find the line to the LEFT
elseif condition = condition3 
   condition = condition4

//After a certain amount of time, the car changes its direction back to the RIGHT
elseif condition = condition4 
   condition = condition1
end")
        pre17:Add(code18)
        section_overview:AddParagraph("Don't forget to write the conditions after the objects have been created.")
         AddHeading(section_overview, "Activity : Call the actions", 3)
     
        section_overview:AddParagraph("Your program should work just fine now, but to make it better let’s add this line after the end in order to tell the program to wait 250 milliseconds before it stops.")
        PreformattedText pre19
        section_overview:Add(pre19)
        pre19:AddAttribute("class", "code")
        CodeBlock code20
        code20:AddText("utility:DelayMilliseconds(250)")
        pre19:Add(code20)



     Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to write a line following algorithm for LEGO Mindstorms robots using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Line Following"
    end
    action GetName returns text
        return "Challenge 4.1"
    end
    action GetShortDescription returns text
        return "an introduction to line following with robots."
    end

     action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "lessons/chapter4/challenge4_1.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Actions"
    end
end