use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab4_1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Lab 4.1:  Practicing Actions")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Lab 4.1: Practicing Actions", 1)
        headDiv:AddText("An introduction to writing actions")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("How to create actions with no parameters or return types")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("How to create actions with parameters.")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("How to create actions with return types.")
        ListItem listItem4
        unorderedList0:Add(listItem4)
        listItem4:AddText("How to call actions without parameters")
        ListItem listItem5
        unorderedList0:Add(listItem5)
        listItem5:AddText("How to call actions with parameters")
        ListItem listItem6
        unorderedList0:Add(listItem6)
        listItem6:AddText("How to utilize returned values from actions")

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Programming: ", " EK 5.1.2B, EK 5.1.2E, EK 5.2.1F, EK 5.1.2J, EK 5.2.1C, EK 5.3.1D, EK 5.3.1I, EK 5.4.1")
        bodyDiv:Add(list)
        bodyDiv:AddHeading("Common Core Standards ", 2)
        UnorderedList ccList
        
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.6, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lab, you will focus solely on how to create and call actions. You will start out by creating the simplest possible action, one with no parameters or return values. Then you will work your way up to the creation of actions that have both parameters and return values. The goal of this tutorial is to master the creation and usage of actions, and to learn good programming practices for actions.")
        bodyDiv:AddHeading("Task 1: Getting started", 2)

        bodyDiv:AddParagraph("First, start Sodbeans. You will create a new project; however, you will not be creating a blank application this time. Instead, in the New Project dialog, select " + dq + "Quorum Application." + dq + " You must select this option when using actions due to the way Quorum understands your programs. (We will discuss this point later in Chapter 5). Name the project FunWithActions. You can also write your code in the built in IDE below. ")
        
        SideBySideIDE usersComputerIDE
        usersComputerIDE:SetUniqueIdentifier("lab4_1IDE")
        usersComputerIDE:Setup()
        usersComputerIDE:GetIDETitle():AddText("Activity:")
        usersComputerIDE:GetIDESubtitle():AddText("You can use this IDE for all your coding in this lesson instead of using Sodbeans:")
        bodyDiv:Add(usersComputerIDE)

        bodyDiv:AddParagraph("When your project opens in Sodbeans, main.quorum will contain the code listed below. You will be typing your code in two different locations--between action Main and the first end, and between class Main and the second end.")
        PreformattedText pre7
        bodyDiv:Add(pre7)
        pre7:AddAttribute("class", "code")
        CodeBlock code8
        code8:AddText(
"class Main
    action Main
    end
end"
)
        pre7:Add(code8)
        bodyDiv:AddHeading("Task 2: Creating Basic Actions", 2)
        bodyDiv:AddParagraph("First, you will focus on the creation of actions that have no parameters or return value. These type of actions can help break up a program into logical sections. For example, let's say you want to greet the user, and then ask them for the balance in their bank account, and then exit. In theory, these operations don't require a lot of code, but over time, as you want to add more to these operations, it may become confusing to read the code. Let's demonstrate the use of actions for these two operations. First, you will create a method called GreetUser like so:")
        PreformattedText pre9
        bodyDiv:Add(pre9)
        pre9:AddAttribute("class", "code")
        CodeBlock code10
        code10:AddText(
"action GreetUser
    output " + dq + "Hello there!" + dq + "
end")
        pre9:Add(code10)
        bodyDiv:AddParagraph("When you want to create an action, you must first use the action keyword. This keyword lets Quorum know that you preparing to declare a new action. Following the action keyword is the name of your action. Actions obey the same naming rules as variables--any valid variable name is a valid action name. Action names are usually capitalized. Also, don't forget to use camelcase if your name is more than one word!  After you state the name of the action, you place the code you want inside the action between the action GreetUser line and the end line. This is similar to the way the control structures you studied in Chapter 3 work.")
        bodyDiv:AddParagraph("Inside the Main action, let's add code to call this action. When you " + dq + "call" + dq + " an action, Quorum executes all of the code in that action (the code between the action GreetUser and end lines, in this case), and then comes back to the place in the code where you called from. To demonstrate how this works, enter the code below into the Main action.")
        PreformattedText pre11
        bodyDiv:Add(pre11)
        pre11:AddAttribute("class", "code")
        CodeBlock code12
        code12:AddText(
"GreetUser()
output " + dq + "Back from GreetUser()." + dq + "")
        pre11:Add(code12)
        bodyDiv:AddParagraph("Your code in the Sodbeans editor should now look like the following:")
        PreformattedText pre13
        bodyDiv:Add(pre13)
        pre13:AddAttribute("class", "code")
        CodeBlock code14
        code14:AddText(
"class Main
    action Main
        GreetUser()
        output " + dq + "Back from GreetUser()." + dq + "
    end
    action GreetUser
        output " + dq + "Hello there!" + dq + "
    end
end")
        pre13:Add(code14)
        bodyDiv:AddParagraph("Run the program. In the Sodbeans Output Window, you will now see the following:")
        PreformattedText pre15
        bodyDiv:Add(pre15)
        pre15:AddAttribute("class", "code")
        CodeBlock code16
        code16:AddText(
"Hello there!
Back from GreetUser().")
        pre15:Add(code16)
        bodyDiv:AddParagraph("What happened here is that Quorum recognized you were calling an action by the syntax of the GreetUser() line. When you specify a name followed by an opened and closed parentheses, Quorum assumes you wish to execute the code in that action. In this example, Quorum executed the code inside the GreetUser action, and then came back to execute the next line, output " + dq + "Back from GreetUser()." + dq + " Make sure you understand the flow of the program and how it's jumping from line to line. To go more in depth, run the debugger now and step through the code to get an idea of how this program executes. Try stepping into the GreetUser() line of code.")
        bodyDiv:AddParagraph("Let's create one more action, called GetUserBalance, that asks the user to enter a dollar amount for a bank account. This action will then output the value the user entered to the screen. The code for this action is shown below.")
        PreformattedText pre17
        bodyDiv:Add(pre17)
        pre17:AddAttribute("class", "code")
        CodeBlock code18
        code18:AddText(
"action GetUserBalance
    text in = input(" + dq + "How much money is in your savings account?" + dq + ")
    output " + dq + "You have $" + dq + " + in + " + dq + " in your savings account." + dq + "
end")
        pre17:Add(code18)
        bodyDiv:AddParagraph("You will also need to add code to your Main method to call this action. Your main.quorum file now looks like so:")
        PreformattedText pre19
        bodyDiv:Add(pre19)
        pre19:AddAttribute("class", "code")
        CodeBlock code20
        code20:AddText(
"class Main
    action Main
        GreetUser()
        output " + dq + "Back from GreetUser()." + dq + "
        GetUserBalance()
        output " + dq + "Thank you!" + dq + "
    end
    action GreetUser
        output " + dq + "Hello there." + dq + "
    end
    action GetUserBalance
        text in = input(" + dq + "How much money is in your savings account?" + dq + ")
        output " + dq + "You have $" + dq + " + in + " + dq + " in your savings account." + dq + "
    end
end")
        pre19:Add(code20)
        bodyDiv:AddParagraph("Notice that you called GetUserBalance in the exact same way you called GreetUser previously.")
        bodyDiv:AddParagraph("Run the program. Your program will prompt You to enter a dollar amount. After you do, you will see something similar to the output below in the Sodbeans Output Window.")
        PreformattedText pre21
        bodyDiv:Add(pre21)
        pre21:AddAttribute("class", "code")
        CodeBlock code22
        code22:AddText(
"Hello there.
Back from GreetUser().
You have $1.00 in your bank account.
Thank you!")
        pre21:Add(code22)
        bodyDiv:AddParagraph("You will now tackle an extremely powerful feature of actions, called parameters.")
        bodyDiv:AddHeading("Task 3: Using Parameters", 2)
        bodyDiv:AddParagraph("An extremely useful feature of actions is that they allow you to pass in what are called parameters. In other words, you can make the program behave certain ways when certain information is passed into those variables. Parameters are variables, much like the variables you discussed in chapter 2, that are available inside the scope of the function, but who's values are not explicitly stated in the action. So far, all of your actions have simply executed the code inside of them and returned. Parameters allow you to make this behavior much more interesting by making the behavior change based on the input to the action.")
        bodyDiv:AddParagraph("That sounds a bit complicated, so let's create an example to demonstrate. Earlier, you created a GreetUser action, that printed the message " + dq + "Hello there!" + dq + " to the screen. You could make this action slightly more friendly by passing it a parameter telling you the name of the user. You define such an action below.")
        PreformattedText pre23
        bodyDiv:Add(pre23)
        pre23:AddAttribute("class", "code")
        CodeBlock code24
        code24:AddText(
"action GreetUser(text name)
    output " + dq + "Hello there, " + dq + " + name + " + dq + "!" + dq + "
end")
        pre23:Add(code24)
        bodyDiv:AddParagraph("Notice that the first line of this action is different from the previous GreetUser action. Instead of simply ending the line after the GreetUser name, you use an open parenthesis to tell Quorum you are going to specify parameters. In Quorum, parameters are always specified between a set of parenthesis. Once you have specified your parameter, you close the opened parenthesis. You have added one parameter to this action, called name, of type text. By doing so, you make the variable name available for use in your action. Multiple parameters can also be specified, separated by a comma (covered in section 5). You use it in the output statement on the next line. Notice that you did not initialize the variable name before using it in output. Rather, Quorum took care of this for you , and you can assume it already has some value.")
        bodyDiv:AddParagraph("Place this code into the Sodbeans editor and remove the old GreetUser action. Run the program. Notice that you receive the following compiler error:")
        PreformattedText pre25
        bodyDiv:Add(pre25)
        pre25:AddAttribute("class", "code")
        CodeBlock code26
        code26:AddText("The method 'GreetUser' in class '.Main' has not been defined.")
        pre25:Add(code26)
        bodyDiv:AddParagraph("You receive this error because your previous line for calling GreetUser does not specify a value for the name parameter. To correct this, you can change the line to look as follows:")
        PreformattedText pre27
        bodyDiv:Add(pre27)
        pre27:AddAttribute("class", "code")
        CodeBlock code28
        code28:AddText("GreetUser(" + dq + "Jeff" + dq + ")")
        pre27:Add(code28)
        bodyDiv:AddParagraph("Like before, you are still using an open parenthesis after the action name to indicate that the action will be called. However, you are no longer leaving it empty--instead, you are specifying a text value. Feel free to replace " + dq + "Jeff" + dq + " with your own name. Your full program will now look like this:")
        PreformattedText pre29
        bodyDiv:Add(pre29)
        pre29:AddAttribute("class", "code")
        CodeBlock code30
        code30:AddText(
"class Main
    action Main
        GreetUser(" + dq + "Jeff" + dq + ")
        output " + dq + "Back from GreetUser()." + dq + "
        GetUserBalance()
        output " + dq + "Thank you!" + dq + "
    end
    action GreetUser(text name)
        output " + dq + "Hello there, " + dq + " + name + " + dq + "!" + dq + "
    end
    action GetUserBalance
        text in = input(" + dq + "How much money is in your savings account?" + dq + ")
        output " + dq + "You have $" + dq + " + in + " + dq + " in your savings account." + dq + "
    end
end")
        pre29:Add(code30)
        bodyDiv:AddParagraph("When you run this program, the first line of output now looks like this:")
        PreformattedText pre31
        bodyDiv:Add(pre31)
        pre31:AddAttribute("class", "code")
        CodeBlock code32
        code32:AddText("Hello there, Jeff!")
        pre31:Add(code32)
        bodyDiv:AddParagraph("When Quorum ran your GreetUser action, it printed the value you put into quotations above. Experiment by changing the line GreetUser(" + dq + "Jeff" + dq + ") to have other names in quotations. You are not limited to constant values, either. You could also pass in a variable, like in the code below. The only restriction is that the value you pass in must be of type text, as that is the type you specified when you created the action above.")
        PreformattedText pre33
        bodyDiv:Add(pre33)
        pre33:AddAttribute("class", "code")
        CodeBlock code34
        code34:AddText(
"text myName = " + dq + "Jeff" + dq + "
GreetUser(myName)")
        pre33:Add(code34)
        bodyDiv:AddParagraph("Parameters are an extremely powerful feature of actions that have quite a bit of application in computer science. In the next section, you will cover the final important property of actions: return values.")
        bodyDiv:AddHeading("Task 4: Return Values", 2)
        bodyDiv:AddParagraph("So far, you have covered how to create actions with and without parameters, and how to call these actions. An important feature of actions that you have so far not discussed is the concept of return values. Return values can be thought of as the " + dq + "result" + dq + " of an action. For example, if you created an action that added two numbers, say 3 and 4, the result of this operation is 7. Like parameters, return values are best demonstrated by example.")
        bodyDiv:AddParagraph("One way you might utilize return values in your existing program is to change the GetUserBalance action. Currently, this action asks the user for their balance, and then prints it to the screen. If you wanted to use this value later in the program, say, outside of the GetUserBalance action, you couldn't; it is simply lost when the GetUserBalance action ends. Let's change this action to return an integer containing the dollar amount the user enters. To do this, first remove the old GetUserBalance action, and then add the following code:")
        PreformattedText pre35
        bodyDiv:Add(pre35)
        pre35:AddAttribute("class", "code")
        CodeBlock code36
        code36:AddText(
"action GetUserBalance returns integer
    text in = input(" + dq + "How much money is in your savings account?" + dq + ")
    integer amount = cast(integer, in)
    return amount
end")
        pre35:Add(code36)
        bodyDiv:AddParagraph("This code introduces you to two new keywords. On the first line of this code, you see the keyword returns. This keyword tells Quorum what type your action will return. The second keyword, return (on the third line), actually specifies what you are returning. In this case, your action returns a type of integer, and returns the variable amount, which contains the dollar amount the user entered. Also, notice that you entered text, and we later casted that text to an integer.")
        bodyDiv:AddParagraph("Before you continue, run the program. Your program no longer prints the value that the user entered. However, unlike before, you can now retrieve the value that the user entered and use it outside of the GetUserBalance action. You can utilize its return value by calling the action in a slightly different way. When an action returns a value, the action can be used in any expression that requires that type. Let's define an integer variable amount, and assign it the return value of GetUserBalance:")
        PreformattedText pre37
        bodyDiv:Add(pre37)
        pre37:AddAttribute("class", "code")
        CodeBlock code38
        code38:AddText(
"integer amount = GetUserBalance()
output " + dq + "You entered $" + dq + " + amount")
        pre37:Add(code38)
        bodyDiv:AddParagraph("Notice that, like before, you are calling GetUserBalance using the opened/closed parentheses syntax. However, to the left of this code, you are performing an assignment to the variable amount.")
        bodyDiv:AddParagraph("Your full program now looks like this:")
        PreformattedText pre39
        bodyDiv:Add(pre39)
        pre39:AddAttribute("class", "code")
        CodeBlock code40
        code40:AddText(
"class Main
    action Main
        GreetUser(" + dq + "Jeff" + dq + ")
        output " + dq + "Back from GreetUser()." + dq + "
        integer amount = GetUserBalance()
        output " + dq + "You entered $" + dq + " + amount
        output " + dq + "Thank you!" + dq + "
    end
    action GreetUser(text name)
        output " + dq + "Hello there, " + dq + " + name + " + dq + "!" + dq + "
    end
    action GetUserBalance returns integer
        text in = input(" + dq + "How much money is in your savings account?" + dq + ")
        integer amount = cast(integer, in)
        return amount
    end
end")
        pre39:Add(code40)
        bodyDiv:AddParagraph("When you run this program, your output now looks like so:")
        PreformattedText pre41
        bodyDiv:Add(pre41)
        pre41:AddAttribute("class", "code")
        CodeBlock code42
        code42:AddText(
"Hello there, Jeff!
Back from GreetUser().
You entered $33
Thank you!")
        pre41:Add(code42)
        bodyDiv:AddHeading("Task 5: Putting It All Together", 2)
        bodyDiv:AddParagraph("Now that you have covered the basics of actions, parameters and return values, let's try putting all of this together and create an action with parameters and a return value. Let's create a couple of actions, multiply and divide. You will walk through the creation of the multiply action step-by-step, and leave the divide action up to you , with a word of caution.")
        bodyDiv:AddParagraph("To start out, let's erase all of the code in the Sodbeans editor so that it again looks like it did when you started:")
        PreformattedText pre43
        bodyDiv:Add(pre43)
        pre43:AddAttribute("class", "code")
        CodeBlock code44
        code44:AddText(
"class Main
    action Main
    end
end")
        pre43:Add(code44)
        bodyDiv:AddParagraph("When designing actions, it is important to consider the input of the action and any potential results. In the case of the multiply action, you need to pass it two numbers, a and b, and your result also needs to be a number. Given this, you wind up with the action below:")
        PreformattedText pre45
        bodyDiv:Add(pre45)
        pre45:AddAttribute("class", "code")
        CodeBlock code46
        code46:AddText(
"action Multiply(number a,  number b) returns number
    number result = a * b
    return result
end")
        pre45:Add(code46)
        bodyDiv:AddParagraph("Notice that this action is different than others you have studied so far, as it accepts multiple parameters. When specifying multiple parameters, you separate each parameter with a comma. Let's also add code to call this action from Main, as in below:")
        PreformattedText pre47
        bodyDiv:Add(pre47)
        pre47:AddAttribute("class", "code")
        CodeBlock code48
        code48:AddText("number k = Multiply(2, 4)
        output k")
        pre47:Add(code48)
        bodyDiv:AddParagraph("Now, your code in the editor looks like the following:")
        PreformattedText pre49
        bodyDiv:Add(pre49)
        pre49:AddAttribute("class", "code")
        CodeBlock code50
        code50:AddText(
"class Main
    action Main
        number k = Multiply(2, 4)
        output k
    end
    action Multiply(number a, number b) returns number
        number result = a * b
        return result
    end
end")
        pre49:Add(code50)
        bodyDiv:AddParagraph("When you run this code, the value in the variable k will be 8.")
        bodyDiv:AddParagraph("For the final portion of this lab, write a method, called Divide, that takes two parameters of type number, a and b, and returns the type number. Note that division by zero is not allowed. Write a method that performs division, but returns the number 0.0 when division by zero will occur. Use your knowledge from Chapters 2 and 3. Hint: Make use of the if construct.")
        bodyDiv:AddParagraph("To check your work, here are a few examples of input and the values that will be returned.")
        PreformattedText pre51
        bodyDiv:Add(pre51)
        pre51:AddAttribute("class", "code")
        CodeBlock code52
        code52:AddText("number k = Divide(2, 4)")
        pre51:Add(code52)
        bodyDiv:AddParagraph("The value of k should be 0.5.")
        PreformattedText pre53
        bodyDiv:Add(pre53)
        pre53:AddAttribute("class", "code")
        CodeBlock code54
        code54:AddText("number k = Divide(9, 3)")
        pre53:Add(code54)
        bodyDiv:AddParagraph("The value of k should be 3.0.")
        PreformattedText pre55
        bodyDiv:Add(pre55)
        pre55:AddAttribute("class", "code")
        CodeBlock code56
        code56:AddText("number k = Divide(6, 0)")
        pre55:Add(code56)
        bodyDiv:AddParagraph("The value of k should be 0.0. (division by zero has occurred).")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about how to code actions using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Actions"
    end
    action GetName returns text
        return "Lab 4.1"
    end
    action GetShortDescription returns text
        return "an introduction to actions."
    end
    action GetLocation returns text
        return "lessons/chapter4/lab4_1.html"
    end
end