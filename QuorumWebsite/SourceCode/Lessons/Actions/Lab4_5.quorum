use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Lab4_5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Actions with White Noise Generator - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Actions: White Noise Generator", 1)
        headDiv:AddText("Actions Using Parameters and Return Types")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("The goal of this lab is to learn the following:")

        UnorderedList goalList
        goalList:AddListItem("Write actions with different return types")
        goalList:AddListItem("Use actions with parameters")
        bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Computer Science Principles Curriculum", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.1, LO 1.1.1, EK 1.1.1A, EK 1.1.1B")
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.2, LO 1.2.1, EK 1.2.1A, EK 1.2.1B, EK 1.2.1C, EK 1.2.1D, EK 1.2.1E")
        AddListItemWithBoldAtFront(list, "Big Idea: Creativity: ", "EU 1.3, LO 1.3.1, EK 1.3.1A, EK 1.3.1B, EK 1.3.1E")
        AddListItemWithBoldAtFront(list, "Big Idea: Abstraction: ", "EU 2.1, LO 2.1.2, KE 2.1.2B, EK 2.1.2C, EK 2.1.2E, EK 2.1.2F")
        AddListItemWithBoldAtFront(list, "Big Idea: Abstraction: ", "EU 2.2, LO 2.2.1, KE 2.2.1A, KE 2.2.1B, KE 2.2.1C")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.1, KE 4.1.1A, KE 4.1.1B, KE 4.1.1C, KE 4.1.1D, KE 4.1.1E, KE 4.1.1F, KE 4.1.1H")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 4.1, LO 4.1.2, KE 4.1.2A, KE 4.1.2B, KE 4.1.2C, KE 4.1.2D, KE 4.1.2G, KE 4.1.2I")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.1, LO 5.1.1, KE 5.1.1A, KE 5.1.1B, KE 5.1.1C, KE 5.1.1D, KE 5.1.1E, KE 5.1.1F")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.1, LO 5.1.2, KE 5.1.2A, KE 5.1.2B, KE 5.1.2C, KE 5.1.2D, KE 5.1.2E, KE 5.1.2F")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.2, LO 5.2.1, KE 5.2.1A, KE 5.2.1B, KE 5.2.1C, KE 5.2.1D, KE 5.2.1E, KE 5.2.1F, KE 5.2.1G, KE 5.2.1H")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.3, LO 5.3.1, KE 5.3.1A, KE 5.3.1B, KE 5.3.1C, KE 5.3.1D, KE 5.3.1E, KE 5.3.1F, KE 5.3.1G, KE 5.3.1H, KE 5.3.1I,
                            KE 5.3.1J, KE 5.3.1K, KE 5.3.1L, KE 5.3.1M, KE 5.3.1N, KE 5.3.1O")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.4, LO 5.4.1, EK 5.4.1A, EK 5.4.1B, EK 5.4.1C, EK 5.4.1D")
        AddListItemWithBoldAtFront(list, "Big Idea: Algorithms: ", "EU 5.5, LO 5.5.1, EK 5.5.1A, EK 5.5.1B, EK 5.5.1C, EK 5.5.1D, EK 5.5.1E, EK 5.5.1G")


        bodyDiv:Add(list)
        bodyDiv:AddHeading("Common Core Standards", 2)
        UnorderedList ccList
        AddListItemWithBoldAtFront(ccList, "English Language Arts Standards Â» Science & Technical Subjects: ", "
        CCSS.ELA-Literacy.RST.9-10.2, CCSS.ELA-Literacy.RST.9-10.3, CCSS.ELA-Literacy.RST.9-10.4, CCSS.ELA-Literacy.RST.9-10.5, CCSS.ELA-Literacy.RST.9-10.7, CCSS.ELA-Literacy.RST.9-10.10, CCSS.ELA-Literacy.RST.11-12.2, CCSS.ELA-Literacy.RST.11-12.3, CCSS.ELA-Literacy.RST.11-12.4, CCSS.ELA-Literacy.RST.11-12.5")
        AddListItemWithBoldAtFront(ccList, "Standards For Mathmatical Practice: ", "CCSS.Math.Practice.MP1, CCSS.Math.Practice.MP2, CCSS.Math.Practice.MP4, CCSS.Math.Practice.MP5, CCSS.Math.Practice.MP6, CCSS.Math.Practice.MP7, 
        CCSS.Math.Practice.MP8")
        bodyDiv:Add(ccList) 

        bodyDiv:AddHeading("Vocabulary", 2)
        UnorderedList vocabularyList
        vocabularyList:AddListItem("Actions")
        vocabularyList:AddListItem("Parameters")
        vocabularyList:AddListItem("Return Types")
        bodyDiv:Add(vocabularyList)

        bodyDiv:AddHeading("Overview", 2)
        Paragraph overview
        CodeBlock audioCode
        CodeBlock audioSampCode
        CodeBlock randomCode
        audioCode:AddText("Audio")
        audioSampCode:AddText("AudioSample")
        randomCode:AddText("Random")
        overview:AddText("In this lesson, you will practice creating and calling actions using parameters 
                and return types. You will write a random noise generator. This program will use objects ")
        overview:Add(audioCode)
        overview:AddText(" and ")
        overview:Add(audioSampCode)
        overview:AddText(" libraries. As well as the ")
        overview:Add(randomCode)
        overview:AddText(" library.")
        bodyDiv:Add(overview)

        bodyDiv:AddHeading("Getting Started", 2)
        Paragraph gettingStarted
        CodeBlock actionMainCode
        CodeBlock classMainCode
        actionMainCode:AddText("action Main")
        classMainCode:AddText("class Main")
        gettingStarted:AddText("Either use the IDE that will open in another window, or Quorum Studio to write your program. 
                If using Quorum Studio, create a new project using " + dq + "Blank. " + dq + "Add the three libraries mentioned above
                at the top of your program. You will also need at add ")
        gettingStarted:Add(classMainCode)
        gettingStarted:AddText(" and ")
        gettingStarted:Add(actionMainCode)
        gettingStarted:AddText(". Try to write these yourself, then check the sample code under the online IDE.")
        bodyDiv:Add(gettingStarted)

        AddIDE(bodyDiv, "noiseGenerator", "Write Your Program Here", "You can use this IDE for all your coding in this lesson instead of using Quorum Studio")

        Paragraph sampleStart
        CodeBlock mainQuorum
        mainQuorum:AddText("main.quourm")
        sampleStart:AddText("When your project opens in Sodbeans, ")
        sampleStart:Add(mainQuorum)
        sampleStart:AddText(" will contain the most of code listed below. You need to add the libraries.")
        bodyDiv:Add(sampleStart)
        bodyDiv:Add(break)

        CodeBlock sampleCode
        Span s1
        Span s2
        Span s3
        sampleCode:AddText(   "use Libraries.Sound.Audio" + cr +
                                            "use Libraries.Sound.AudioSamples" + cr +
                                            "use Libraries.Compute.Random" + cr + cr +
                                            "class Main" + cr)
        s1:AddText(                   "//You will declare objects here" + cr)
        s1:AddClassAttribute("comment")
        sampleCode:Add(s1)
        sampleCode:Add(break)
        sampleCode:AddText(    "action Main" + cr )
        s2:AddText(                   "//You will write the majority of the code in this action." + cr)
        s2:AddClassAttribute("comment")
        sampleCode:Add(s2)
        sampleCode:Add(break)
        sampleCode:AddText(    "end" + cr)
        sampleCode:Add(break)
        s3:AddText(                   "//You will add new actions here, between the end of the main action and the main class." + cr)
        s3:AddClassAttribute("comment")
        sampleCode:Add(s3)
        sampleCode:Add(break)
        sampleCode:AddText("end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(sampleCode))

        bodyDiv:AddHeading("Goal 1: Write actions with different return types", 2)
        Paragraph goal1
        CodeBlock noiseCode
        CodeBlock samplesCode
        CodeBlock randomObCode
        CodeBlock actionsCode
        CodeBlock actionCode
        CodeBlock samplesActionCode
        CodeBlock secondsActionCode
        CodeBlock returnsCode
        noiseCode:AddText("noise")
        samplesCode:AddText("samples")
        randomObCode:AddText("random")
        actionsCode:AddText("actions")
        actionCode:AddText("action")
        samplesActionCode:AddText("action SamplesPerSecond()")
        secondsActionCode:AddText("Seconds()")
        returnsCode:AddText("returns")
        goal1:AddText("To start, you need to declare ")
        goal1:Add(audioCode)
        goal1:AddText(", ")
        goal1:Add(audioSampCode)
        goal1:AddText(", and ")
        goal1:Add(randomCode)
        goal1:AddText(" objects. You should use object names that make sense and are easy to remember. This will help
                        you write your code quicker, and help other who may look at it understand it easier. Names used in the
                        examples will be ")
        goal1:Add(noiseCode)
        goal1:AddText(", ")
        goal1:Add(samplesCode)
        goal1:AddText(", and ")
        goal1:Add(randomObCode)
        goal1:AddText(".")
        goal1:Add(break)
        goal1:AddText("Now you will write two ")
        goal1:Add(actionsCode)
        goal1:AddText(" that will choose random integers and numbers for the parameters of the ")
        goal1:Add(audioSampCode)
        goal1:AddText(" actions you will use. The two actions will be called ")
        goal1:Add(samplesActionCode)
        goal1:AddText(", and ")
        goal1:Add(secondsActionCode)
        goal1:AddText(". These actions will return either a number or an integer. To say an action ")
        goal1:Add(returnsCode)
        goal1:AddText(" a value means that the action gives a result to whatever called the action. Actions can also return text, and booleans.")
        bodyDiv:Add(break)

        Paragraph example1
        Bold example1B
        CodeBlock setSampCode
        setSampCode:AddText("SetSamplesPerSecond()")
        example1B:AddText("Example: Create ")
        example1B:Add(samplesActionCode)
        example1B:AddText(".")
        example1:Add(example1B)
        example1:Add(break)
        example1:AddText("The following code creates an action that ")
        example1:Add(returnsCode)
        example1:AddText(" an integer. You will use this action to fill in the parameter of the ")
        example1:Add(setSampCode)
        example1:AddText(" action. This action will be called on the ")
        example1:Add(audioSampCode)
        example1:AddText(" object.")
        bodyDiv:Add(example1)
//        bodyDiv:Add(break)

        CodeBlock example1C
        Span s4
        Span s5
        Span s6
        Span s7
        s4:AddText("//First, you must create the action, then add " + dq + "returns integer" + dq + "." + cr + 
                        "//This will allow the action to pass an integer on to whatever calls it.")
        s4:AddClassAttribute("comment")
        example1C:Add(s4)
        example1C:Add(break)
        example1C:AddText("
action SamplesPerSecond() returns integer
")
        example1C:Add(break)
        s5:AddText("    //This line creates a variable and uses the Random object to create a random integer between 1 and 44100." + cr+
                        "    //This integer will be used to define how many samples will be used in a second. The default is 44100.")
        s5:AddClassAttribute("comment")
        example1C:Add(s5)
        example1C:Add(break)
        example1C:AddText(    "
integer sample = random:RandomIntegerBetween(1, 44100)
")
        example1C:Add(break)
        s6:AddText("    //This line declares what variable will be returned.")
        s6:AddClassAttribute("comment")
        example1C:Add(s6)
        example1C:Add(break)
        example1C:AddText("
    return sample
")
        example1C:Add(break)
        s7:AddText("    //As with control stuctures, remember that all actions have to have an end.")
        s7:AddClassAttribute("comment")
        example1C:Add(s7)
        example1C:Add(break)
        example1C:AddText("
end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example1C))

        Paragraph activity1
        Bold activity1B
        activity1B:AddText("Activity: Create ")
        activity1B:Add(secondsActionCode)
        activity1B:AddText(".")
        activity1:Add(activity1B)
        activity1:Add(break)
        activity1:AddText("The ")
        activity1:Add(secondsActionCode)
        activity1:AddText(" needs to return a number. You will need to declare a variable and instantiate it to a random number. Write your
                action under the ")
        activity1:Add(samplesActionCode)
        activity1:AddText(" action.")
        bodyDiv:Add(activity1)

        bodyDiv:AddHeading("Goal 2: Use actions with parameters", 2)
        Paragraph goal2
        goal2:AddText("You have written two actions to be used a parameters for other actions. What are parameters?
                Parameters are a kind of variable that is part of an action. Parameters go in the (). Some actions do not need
                parameters, others do. You will be using the ")
        goal2:Add(audioSampCode)
        goal2:AddText(" library to create audio samples. These samples can use different channels, gather different numbers of samples,
                and play the for different lengths of time. The actions you have written will be used to randomize the number of samples, and 
                the length of time it plays. The example below will show you several actions with parameters, as well as help set up
                the rest of your program.")
        goal2:Add(break)
        bodyDiv:Add(goal2)

        Paragraph example2
        Bold example2B
        example2B:AddText("Example: Write actions with parameters.")
        example2:Add(example2B)
        example2:Add(break)
        example2:AddText("You will need to add a new variable, and use the ")
        example2:Add(samplesCode)
        example2:AddText(" and ")
        example2:Add(noiseCode)
        example2:AddText(" actions. You will write the rest of your program in ")
        example2:Add(actionMainCode)
        example2:AddText(".")
        example2:Add(break)
        bodyDiv:Add(example2)

        CodeBlock example2C
        Span s8
        Span s9
        Span s10
        Span s11
        Span s12
        Span s13
        s8:AddText("//First, declare a variable to hold the return from the SamplesPerSecond action.")
        s8:AddClassAttribute("comment")
        example2C:Add(s8)
        example2C:Add(break)
        example2C:AddText("
integer sample = SamplesPerSecond()
")
        example2C:Add(break)
        s9:AddText("//Setting the number of channels used take a parameter." + cr +
                        "// The example sets it to 1, but you can experiment, and see how it changes the function.")
        s9:AddClassAttribute("comment")
        example2C:Add(s9)
        example2C:Add(break)
        example2C:AddText("
 samples:SetChannels(1)
")
        example2C:Add(break)
        s10:AddText("//This line uses the variable sample as the parameter for the number of samples gathered per second.")
        s10:AddClassAttribute("comment")
        example2C:Add(s10)
        example2C:Add(break)
        example2C:AddText("
samples:SetSamplesPerSecond(sample)
")
        s11:AddText("//The next line creates a counter, so the number of samples stays within the size set above.")
        s11:AddClassAttribute("comment")
        example2C:Add(s11)
        example2C:Add(break)
        example2C:AddText("
integer counter = 0
")
        example2C:Add(break)
        s12:AddText("//The loop that uses the counter you just made to gather the right number of samples." + cr +
                           "//It then sets the sample, so it can be loaded and played.")
        s12:AddClassAttribute("comment")
        example2C:Add(s12)
        example2C:Add(break)
        example2C:AddText("
repeat while counter < samples:GetSize()" + cr + 
                            "    samples:Set(counter, random:RandomNumber() * 2 - 1, 0)" + cr +
                            "    counter = counter + 1" + cr +
                            "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(example2C))

        Paragraph activity2
        Bold activity2B
        CodeBlock setSizeCode
        CodeBlock loadCode
        CodeBlock playDoneCode
        setSizeCode:AddText("SetSizeInSeconds()")
        loadCode:AddText("Load()")
        playDoneCode:AddText("PlayUntilDone()")
        activity2B:AddText("Activity: Use actions with parameters to finish your prgram.")
        activity2:Add(activity2B)
        activity2:Add(break)
        activity2:AddText("Use the example above to add an number variable that will hold the return from ")
        activity2:Add(secondsActionCode)
        activity2:AddText(". Then call ")
        activity2:Add(setSizeCode)
        activity2:AddText(" on the ")
        activity2:Add(audioSampCode)
        activity2:AddText(" object. You will also have to ")
        activity2:Add(loadCode)
        activity2:AddText(" the samples to the ")
        activity2:Add(audioCode)
        activity2:AddText(" object. To hear the entire sample, you will also need to use ")
        activity2:Add(playDoneCode)
        activity2:AddText(".")
        bodyDiv:Add(activity2)

        bodyDiv:AddHeading("Extension", 2)
        Paragraph extension
        CodeBlock disposeCode
        disposeCode:AddText("Dispose()")
        extension:AddText("After you have created your Random Noise Generator, try adding control structures to load
                    and play multiple noises. To use the same ")
        extension:Add(audioCode)
        extension:AddText(" object, you need to also use the ")
        extension:Add(disposeCode)
        extension:AddText(" action. Have fun!")
        bodyDiv:Add(extension)

    

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Code a White Noise Generator using actions and the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Actions: Using Parameters and Return Types (Audio)"
    end
    action GetName returns text
        return "Actions with Random Noise Generator"
    end
    action GetShortDescription returns text
        return "more on actions"
    end
    action GetLocation returns text
        return "lessons/chapter4/lab4_5.html"
    end
end