use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Link
use Libraries.System.File
use Libraries.System.FileReader

class SVGExporting is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Exporting Charts as SVGs")
        AddDefaultHeaders()

        // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Exporting Charts as SVGs", 1)
        headDiv:AddText("Understanding how to export a chart as an SVG")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Exporting SVGs with Charts", 1)
        bodyDiv:AddParagraph("Descriptive statistics are foundational to the understanding of data science. As a matter of fact, the most commonly taught data science concepts within schools are topics related to central tendency (e.g., mean, median, mode) and dispersion (e.g., variance, standard deviation). For this session, we will review these concepts and practice programming them using a real data set.")

        
        bodyDiv:AddParagraph("Learning Objectives:")
        Array<text> objectives
        objectives:Add("Students will be able to learn about an SVG and why we use them in Quorum")
        objectives:Add("Students will be able to save their charts and access them outside of Quorum Studio")
        objectives:Add("Students will be able to navigate through accessible capabilities using SVGs")
         OrderedList ol = GenerateList(objectives)
        bodyDiv:Add(ol)

        Link link1
        link1:AddText("save the chart onto our computers")
        link1:SetAddress("https://quorumlanguage.com/tutorials/charts/saving.html")
        link1:SetTarget(link1:newTab)

        Link link2
        link2:AddText("accessibility tutorial")
        link2:SetAddress("https://quorumlanguage.com/tutorials/charts/charttextnavigation.html")
        link2:SetTarget(link2:newTab)

        bodyDiv:AddHeading("What are SVGS? (10 Minutes)",2)

        bodyDiv:AddParagraph("Scalable Vector Graphics (SVG) are image files that, as opposed to storing pixels, store structure about an image, which is used to later render pixels. This distinction might sound trivial, perhaps even unimportant, but this provides us two important things. First, because SVG files store structure, we can zoom in as far as we would like without rasterization, meaning they do not look pixelated at any size. Second, because SVG files contain structure, accessibility technologies can have appropriate tags embedded, making the images much more accessible than they would be otherwise. ")

        bodyDiv:AddParagraph("In Quorum, we use SVGs because they can be used for a wide variety of purposes, including professional publications, and they can also be used accessible. What this means is that every bar, dot, or other graphical symbol can be tagged with appropriate information. Further, this structure is embedded automatically by Quorum, meaning we can generate accessible charts and include them on our website. If we set this up in the right way, our images are then accessible automatically without human intervention. We do not write 'alternative descriptions' for such images because they do not work this way. Accessibility is automatic and much more robust than a description could be. ")

        bodyDiv:AddParagraph("Consider why such images would be accessible. A user navigating a boxplot can access the individual boxes, which are tagged by Quorum. Boxes can be navigated. Similarly for bar charts. We can traverse the axes, the chart, the bars, groups, legend, or other components and are not reliant on a single description that tries to represent the image as a whole.")
        
        bodyDiv:AddParagraph("Let us also note that SVGs in Quorum are uniquely programmed to have this accessibility feature and we will demonstrate with an example of a non-accessible SVG and an accessible SVG.")
        

        File f
        FileReader reader

        bodyDiv:AddHeading("This is a non-accessible SVG.", 3)
        Division chart1
        chart1:SetStyle("min-width: 200px; max-width: 600px")
        f:SetPath("html/media/epiq/datascience/probability_density.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        bodyDiv:Add(chart1)
        
    

        File f1
        FileReader reader1

        bodyDiv:AddHeading("This is an accessible SVG.", 3)
        Division chart2
        chart2:SetStyle("min-width: 200px; max-width: 600px")
        f1:SetPath("html/media/epiq/datascience/BoxExample2.svg")
        reader1:OpenForRead(f1)
        chart2:AddText(reader1:Read())
        reader1:Close()
        bodyDiv:Add(chart2)

        bodyDiv:AddHeading("Refresher on Displaying our Charts (5 Minutes)",2)

        bodyDiv:AddParagraph("On every chart we have created, the way we are able to view the charts we have created is with this line of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:Display()"))

        bodyDiv:AddParagraph("What this does is that our chart object, whether it is a bar chart, line chart, etc. calls an action called Display(). This action uses Quorum's game engine and opens up a window via a pop-up box inside of Quorum Studio and will display our created chart. By default, the chart will be created at a default size. We can also adjust the size:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:Display(1080, 720)"))


        bodyDiv:AddParagraph("This actually calls a different action from the original Display() action as it now requires parameters for height and width. Note that it is best to see the different sizes to be changed inside of Quorum Studio versus the web-based development environment. Let us take a few minutes to change the sizes of our charts. Let us note that along with adjusting the size of the display, it will also change the SVG size as well.")

        bodyDiv:AddHeading("Saving Our Charts as an SVG (10 Minutes)",2)

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("Now that we have our chart created and displayed, it may be cumbersome to always have to run the Quorum program in order to view our chart. However, we can actually save the chart as an SVG into our computer using Quorum Studio. We can follow this tutorial on how to ")
        bodyDiv:Add(link1)      
        bodyDiv:AddText(".")

        bodyDiv:AddParagraph("The location of our SVG will be within the main project folder where we have source code of the chart file we created.")

        bodyDiv:AddHeading("Calculating Mode (10 minutes)",2)

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("Although accessibility with our SVGs has been discussed prior throughout these lessons, it is essential to know how to navigate with the SVGS. To know the keyboard hotkeys on our charts, we can follow this ")
        bodyDiv:Add(link2)
        bodyDiv:AddText(". Let us try these hotkeys on different types of charts.
")  

        File f2
        FileReader reader2

        bodyDiv:AddHeading("Bar Chart", 3)
        Division chart3
        chart3:SetStyle("min-width: 200px; max-width: 600px")
        f2:SetPath("html/media/epiq/datascience/barchart4.svg")
        reader2:OpenForRead(f2)
        chart3:AddText(reader2:Read())
        reader2:Close()
        bodyDiv:Add(chart3)

        File f3
        FileReader reader3

        bodyDiv:AddHeading("Line Chart", 3)
        Division chart4
        chart4:SetStyle("min-width: 200px; max-width: 600px")
        f3:SetPath("html/media/epiq/datascience/linechart1.svg")
        reader3:OpenForRead(f3)
        chart4:AddText(reader3:Read())
        reader3:Close()
        bodyDiv:Add(chart4)

        File f4
        FileReader reader4

        bodyDiv:AddHeading("Pie Chart", 3)
        Division chart5
        chart5:SetStyle("min-width: 200px; max-width: 600px")
        f4:SetPath("html/media/epiq/datascience/piechart3.svg")
        reader4:OpenForRead(f4)
        chart5:AddText(reader4:Read())
        reader4:Close()
        bodyDiv:Add(chart5)

        File f5
        FileReader reader5

        bodyDiv:AddHeading("Histogram", 3)
        Division chart6
        chart6:SetStyle("min-width: 200px; max-width: 600px")
        f5:SetPath("html/media/epiq/datascience/histogram3.svg")
        reader5:OpenForRead(f5)
        chart6:AddText(reader5:Read())
        reader5:Close()
        bodyDiv:Add(chart6)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Exporting Charts as SVGs"
    end

    action GetSummaryName returns text
        return "Exporting Charts as SVGs"
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "programming for beginners, data science, 
        programming, anova, t-test, dispersion, centricity, mean, median, mode, variance, standard deviation,
        chart, graph, accessibility, bar chart, histogram, box plot, violin plot, scatter plot,
        computer science, computer languages, Quorum programming language, distribution, accessible programming")
        AddMetaData(keywords)
    end

    action GetName returns text
        return "Exporting Charts as SVGs"
    end

    action GetShortDescription returns text
        return "how to save and reference our charts outside of Quorum Studio by exporting as an SVG."
    end

    action GetLocation returns text
        return "/lessons/DataScience/SVGExport.html"
    end
end