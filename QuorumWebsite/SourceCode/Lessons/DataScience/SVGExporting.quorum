use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Link
use Libraries.System.File
use Libraries.System.FileReader
use Libraries.Web.Page.Section
use Libraries.Web.Page.WebTable

class SVGExportingEPIQ is Lesson
    // text version needs cleaning, then do code version
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Exporting SVGs")
        AddDefaultHeaders()

        // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division leftDiv = divs:Get(0)
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Exporting SVGs", 1)
        headDiv:AddParagraph("Learn how to export and navigate through SVGs")
        bodyDiv:Add(headDiv)

        Section introSection
        introSection:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(introSection, "Learning Objectives", 1)
        introSection:AddParagraph("Quorum has multiple charts and sometimes it can be confusing to keep track of the features each bar can offer to the user. In this tutorial we will list out the list of features that each of the charts that available in Quorum is capable of.")

        
        introSection:AddParagraph("The student will learn:")
        Array<text> objectives
        objectives:Add("Students will be able to learn about an SVG and why we use them in Quorum")
        objectives:Add("Students will be able to save their charts and access them outside of Quorum Studio")
        objectives:Add("Students will be able to navigate through accessible capabilities using SVGs")
        OrderedList ol = GenerateList(objectives)
        introSection:Add(ol)

        Link link1 = GenerateDefaultLink()
        link1:AddText("save the chart onto our computers")
        link1:SetAddress("https://quorumlanguage.com/tutorials/charts/saving.html")
        link1:SetTarget(link1:newTab)

        Link link2 = GenerateDefaultLink()
        link2:AddText("accessibility tutorial")
        link2:SetAddress("https://quorumlanguage.com/tutorials/charts/charttextnavigation.html")
        link2:SetTarget(link2:newTab)

        AddHeading(introSection, "What are SVGS? (10 Minutes)",2)
        introSection:AddParagraph("Scalable Vector Graphics (SVG) are image files that, as opposed to storing pixels, store structure about an image, which is used to later render pixels. This distinction might sound trivial, perhaps even unimportant, but this provides us two important things. First, because SVG files store structure, we can zoom in as far as we would like without rasterization, meaning they do not look pixelated at any size. Second, because SVG files contain structure, accessibility technologies can have appropriate tags embedded, making the images much more accessible than they would be otherwise. ")
        introSection:AddParagraph("In Quorum, we use SVGs because they can be used for a wide variety of purposes, including professional publications, and they can also be used accessible. What this means is that every bar, dot, or other graphical symbol can be tagged with appropriate information. Further, this structure is embedded automatically by Quorum, meaning we can generate accessible charts and include them on our website. If we set this up in the right way, our images are then accessible automatically without human intervention. We do not write 'alternative descriptions' for such images because they do not work this way. Accessibility is automatic and much more robust than a description could be. ")
        introSection:AddParagraph("Consider why such images would be accessible. A user navigating a boxplot can access the individual boxes, which are tagged by Quorum. Boxes can be navigated. Similarly for bar charts. We can traverse the axes, the chart, the bars, groups, legend, or other components and are not reliant on a single description that tries to represent the image as a whole.")
        introSection:AddParagraph("Let us also note that SVGs in Quorum are uniquely programmed to have this accessibility feature and we will demonstrate with an example of a non-accessible SVG and an accessible SVG.")
        

        File f
        FileReader reader

        AddHeading(introSection, "This is a non-accessible SVG.", 3)
        Division chart1
        chart1:SetStyle("min-width: 100px; max-width: 100%;")
        f:SetPath("html/media/epiq/datascience/probability_density.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        introSection:Add(chart1)
        
    

        File f1
        FileReader reader1

        AddHeading(introSection, "This is an accessible SVG.", 3)
        Division chart2
        chart2:SetStyle("min-width: 100px; max-width: 100%;")
        f1:SetPath("html/media/epiq/datascience/BoxExample2.svg")
        reader1:OpenForRead(f1)
        chart2:AddText(reader1:Read())
        reader1:Close()
        introSection:Add(chart2)

        AddHeading(introSection, "Refresher on Displaying our Charts (5 Minutes)",2)

        introSection:AddParagraph("On every chart we have created, the way we are able to view the charts we have created is with this line of code:")
        introSection:Add(preformatter:GeneratePreformattedCode("chart:Display()"))

        introSection:AddParagraph("What this does is that our chart object, whether it is a bar chart, line chart, etc. calls an action called Display(). This action uses Quorum's game engine and opens up a window via a pop-up box inside of Quorum Studio and will display our created chart. By default, the chart will be created at a default size. We can also adjust the size:")

        introSection:Add(preformatter:GeneratePreformattedCode("chart:Display(1080, 720)"))


        introSection:AddParagraph("This actually calls a different action from the original Display() action as it now requires parameters for height and width. Note that it is best to see the different sizes to be changed inside of Quorum Studio versus the web-based development environment. Let us take a few minutes to change the sizes of our charts. Let us note that along with adjusting the size of the display, it will also change the SVG size as well.")

        AddHeading(introSection, "Saving Our Charts as an SVG (10 Minutes)",2)

        Paragraph p1 = introSection:AddParagraph(" ")
        p1:AddText("Now that we have our chart created and displayed, it may be cumbersome to always have to run the Quorum program in order to view our chart. However, we can actually save the chart as an SVG into our computer using Quorum Studio. We can follow this tutorial on how to ")
        p1:Add(link1)      
        p1:AddText(".")

        introSection:AddParagraph("The location of our SVG will be within the main project folder where we have source code of the chart file we created. Please note that when writing our svg file name, we MUST have the correct file extension (fileName.svg) or else it will result in an error.")

        AddHeading(introSection, "Accessibility Features with SVGs (15 Minutes)",2)

        Paragraph p2 = introSection:AddParagraph(" ")
        p2:AddText("Although accessibility with our SVGs has been discussed prior throughout these lessons, it is essential to know how to navigate with the SVGS. To know the keyboard hotkeys on our charts, we can follow this ")
        p2:Add(link2)
        p2:AddText(". Let us try these hotkeys on different types of charts.
")  

        File f2
        FileReader reader2

        AddHeading(introSection, "Bar Chart", 3)
        Division chart3
        chart3:SetStyle("min-width: 100px; max-width: 100%;")
        f2:SetPath("html/media/epiq/datascience/barchart4.svg")
        reader2:OpenForRead(f2)
        chart3:AddText(reader2:Read())
        reader2:Close()
        introSection:Add(chart3)

        File f3
        FileReader reader3

        AddHeading(introSection, "Line Chart", 3)
        Division chart4
        chart4:SetStyle("min-width: 100px; max-width: 100%;")
        f3:SetPath("html/media/epiq/datascience/linechart1.svg")
        reader3:OpenForRead(f3)
        chart4:AddText(reader3:Read())
        reader3:Close()
        introSection:Add(chart4)

        File f4
        FileReader reader4

        AddHeading(introSection, "Pie Chart", 3)
        Division chart5
        chart5:SetStyle("min-width: 100px; max-width: 100%;")
        f4:SetPath("html/media/epiq/datascience/piechart3.svg")
        reader4:OpenForRead(f4)
        chart5:AddText(reader4:Read())
        reader4:Close()
        introSection:Add(chart5)

        File f5
        FileReader reader5

        AddHeading(introSection, "Histogram", 3)
        Division chart6
        chart6:SetStyle("min-width: 100px; max-width: 100%;")
        f5:SetPath("html/media/epiq/datascience/histogram3.svg")
        reader5:OpenForRead(f5)
        chart6:AddText(reader5:Read())
        reader5:Close()
        introSection:Add(chart6)

        Link link3 = GenerateDefaultLink()
        link3:AddText("exporting svg html file")
        link3:SetAddress("https://replit.com/@kristinesllamas/ExportSVGs?v=1#index.html")
        link3:SetTarget(link3:newTab)

        AddHeading(introSection, "Exporting to HTML (10 Minutes)",2)

        introSection:AddParagraph("Sometimes we might want to export an accessible chart to someone who doesn't have Quorum installed. By using the below template, we can send someone an SVG to view in their browser instead.")
        Paragraph p3 = introSection:AddParagraph("")
        p3:AddText("This HTML file is a unique resource because it allows svgs to be used in any setting when we need to show charts. To view and use this file, we have it uploaded onto an online IDE called Repl.it that allows us to host this file without the hassle of downloading a text editor. We can view the ")
        p3:Add(link3) 
        p3:AddText(" and simply play around with it by adding the SVGs we have downloaded. We would want to paste our svg file code onto the designated section within the HTML file. Note, to view the file on the website we will need to click the file button and it will be contained inside the 'index.html' file.")      
        introSection:AddParagraph("Additionally inside of Quorum language, we have another action that allows us to go in deeper with SVGS and translate them into proper HTML. This action is called Share(File file) and we will describe it below.")

        Array<text> rubricText1
        rubricText1:Add("chartObject:Share(File file)")
        rubricText1:Add("This action saves this chart to disk at the position of the current file. To conduct the 
        conversion, the file extension is used. Only Hypertext Markup Language (HTML) is currently
        supported, and Scalable Vector Graphics (SVG) conversion is used. This makes a file that can
        be opened in the browser that imports the Javascript and Cascading Stylesheets necessary
        to navigate the charts accessibly on the web.")
        rubricText1:Add("chart:Share("+dq+"chartName.html"+dq+"")

        
        Array<text> rubricHeader
        rubricHeader:Add("Function")
        rubricHeader:Add("Description")
        rubricHeader:Add("Usage")

        Array<Array<text>> table
        table:Add(rubricHeader)
      
        table:Add(rubricText1)

        WebTable webTable = GetDefaultTable("Description of the Share()", table)
        introSection:Add(webTable)


        bodyDiv:Add(introSection)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Exporting SVGs"
    end

    action GetSummaryName returns text
        return "Exporting SVGs"
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "programming for beginners, data science, 
        programming, anova, chart, graph, accessibility, bar chart, histogram, box plot, violin plot, scatter plot,
        computer science, computer languages, Quorum programming language, distribution, accessible programming")
        AddMetaData(keywords)
    end

    action GetName returns text
        return "Exporting SVGs"
    end

    action GetShortDescription returns text
        return "Learn how to export and navigate through SVGs."
    end

    action GetLocation returns text
        return "lessons/DataScience/SVGExport.html"
    end
    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Data Science"
    end
end
