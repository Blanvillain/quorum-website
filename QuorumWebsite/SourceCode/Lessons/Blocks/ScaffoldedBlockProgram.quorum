use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class ScaffoldedBlocks is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Getting Started with Blocks - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 2: Scaffolded Blocks Programming", 1)

        headDiv:AddText("This lesson is to teach you about the templates of different blocks in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("As you grow, you learn many different kinds of natural languages. Depending on the culture and geographic region you grow up in, this might be English, Spanish, French, or many other languages. Programming languages are in some ways very similar, and in other ways very different, from natural languages. In some ways, they are hard to learn as what they tell computers to do can be esoteric. In others, since the languages are very exact, unlike natural language, they can be predictable.")
        section_overview:AddParagraph("Today, one innovation common when learning to code is the use of Integrated Development Environments (IDEs). Think about an IDE as your friend when programming because they are built for catering towards specific programming languages and can easily run the language through a concept of compiling. The idea is that humans need help when learning, and even experts need help as well, because programming can be messy and pretty complicated. For this hour, you will tinker with the environments and learn to navigate them.")
        
        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn the basic keyboard and mouse operations for using blocks")
        goalList:AddListItem("Learn about blank blocks and block templates")
        goalList:AddListItem("Learn about accessibility devices with block programming")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("Imagine two possible ways of learning English as a second language. In the first, you receive a list of words on a piece of paper, and their definitions in another native language. You then memorize the details and try to freeform link it together. In the second, this list of words is on the computer and can adapt to what is already on the screen as you go. The computer decides what words can be used and when. Traditionally, this is the distinction between text-based and block-based programming. What do you imagine are the pros and cons of both approaches?")
        
        AddHeading(section_warmUp, "Vocabulary", 3)

        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        
        WebTable table = AddWebTable("Scaffolded Blocks Programming Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Block programming")
        rubricText1:Add("Block programming is a style where visual blocks represent pieces of the computer code that can be manipulated through various forms of user input.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Scaffolded Block Programming")
        rubricText2:Add("A style of programming where the programming environment adapts as the user controls and manipulates visual elements on the screen to help the programmer know what to do.") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Block Palette")
        rubricText3:Add("A region in a visual editor that contains information  about the code in the editor") 
     
        tableBody:Add(AddTableBodyRow(rubricText3))

         Array<text> rubricTextBlockEditor
        rubricTextBlockEditor:Add("Block Editor")
        rubricTextBlockEditor:Add("A region in a visual editor that contains all of the lines of code in a users program. The editor can be manipulated with the keyboard, the mouse, or through the block palette.") 
     
        tableBody:Add(AddTableBodyRow(rubricTextBlockEditor))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)

        section_warmUp:AddParagraph("You will be using the following new pieces of code: ")


        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        Array<text> rubricText4
        rubricText4:Add("say")
        rubricText4:Add("say "+dq+"Hello, World"+dq+"")
        rubricText4:Add("A command that talks out loud through the computer's speaker") 
   
        tableBodyCode:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("output")
        rubricText5:Add("output "+dq+"Hello, World"+dq+"")
        rubricText5:Add("A command that sends text to the computer's console") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricText5))

    
        Array<text> rubricTextIf
        rubricTextIf:Add("if")
        rubricTextIf:Add("if true 
        end")
        rubricTextIf:Add("A command that allows the computer to make decisions on its own") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricTextIf))

        tableCode:Add(tableBodyCode)
        section_warmUp:Add(tableCode)
        section_warmUp:AddParagraph("")

        AddHeading(section_warmUp, "CSTA Standards", 3)
         section_warmUp:AddParagraph("This lesson covers the following standards:")
        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("1A-CS-01")
        standards:AddListItem("1BCS-01")
        section_warmUp:Add(standards)
  
        Section section_explore
        section_explore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_explore)
        AddHeading(section_explore, "Explore", 2)

        section_explore:AddParagraph("Visualization and graphics have become a hallmark of how students learn to code. Traditional approaches that make use of graphics vary and include ideas like drag and drop, animated characters, scientific visualization to represent data, 2D or 3D game programming, amongst a sea of other ideas. These ideas can be fun, compelling, and interesting, but have historically had one clear flaw: they were not always accessible to people with disabilities. In this exploration section, you will be exploring and tinkering with an Integrated Development Environment (IDE) designed with a new design philosophy sometimes called Born Accessible. While the term can be interpreted in many ways, in this context there is a simple question "+dq+"How do you keep the graphics and the fun, but be inclusive of everyone?"+dq+" ")
        Link scratchLink 
        scratchLink:AddText("MIT's Scratch")
        scratchLink:SetAddress("https://scratch.mit.edu")
        scratchLink:SetTarget(scratchLink:newTab)

        Paragraph blockEnv
       blockEnv:AddText("Before thinking about how to use such environments, it helps to consider whether block environments should be used at all. After all, professional programmers, near exclusively, use text and only text based environments to code. Beginners, typically in or before high school, tend to use such "+dq+"block"+dq+" environments. Such a common block environment students may have been previously exposed to use would be ")
        blockEnv:Add(scratchLink)
        blockEnv:AddText(". The bottom line in academic research is that block environments do tend to help people learn, but they also tend to be rather short lived [2]. Students typically use them only for a few weeks. Further, if that learning is rather freeform, meaning students just tinker without direction, this may not lead to positive learning outcomes [1]. Put another way, blocks are helpful to learners, but they have limits and are not magically better for all people under all conditions. There are benefits, but limits.
")
        section_explore:Add(blockEnv)

        section_explore:AddParagraph("In this explore section, the next step is to think about how to use blocks. You will explore, optionally, using several possible affordances, including the mouse, the keyboard, and a screen reader. You can either continue to use the project you made last time or make a new one. As a first step, consider what happens if you drag or use the keyboard to put multiple blocks into the environment, including at least one that has a beginning and an end. Here is an example of multiple output statements, say statements, and an if statement (which is for decision making). This might appear as follows: ")

        Image image = section_explore:AddImage("/media/Blocks/Scaffolded Blocks Programming/StartingBlocks.png","This shows the block palette, which has a description for the output block, and an editor with three lines of code. These lines include an output, say, and if statement.")
        image:AddText("This shows the block palette, which has a description for the output block, and an editor with three lines of code. These lines include an output, say, and if statement.")
        image:AddAttribute("data-zoom","")

        AddHeading(section_explore, "The Double Cursor", 3)

        section_explore:AddParagraph("When using blocks, there are multiple ways to interact with the environment and the crucial one to understand is called the double cursor. Typical text editors have only one cursor, which is vertical, but block environments sometimes have two, as shown below:
")

         Image image1 = section_explore:AddImage("/media/Blocks/Scaffolded Blocks Programming/DoubleCursor.png","This shows the double cursor below the text field part of an output block. This would tell the system it is a text field or text box through a screen reader, depending on the kind of block.")
        image1:AddText("This shows the double cursor below the text field part of an output block. This would tell the system it is a text field or text box through a screen reader, depending on the kind of block.")
        image1:AddAttribute("data-zoom","")
      
        section_explore:AddParagraph("The vertical cursor exists inside of individual text fields or text boxes*. The horizontal cursor indicates the broader location of the cursor and indicates the line, or the location inside a line, of code that the user is currently working with. It provides a visual indicator for users, but also maps to accessibility technologies under the hood so they can obtain the same information. Moving up and down in the editor changes not just the cursor, but also provides information on what kind of code can be written and documentation about the line in focus. For example, moving the horizontal cursor down two lines changes the environment as so:")

        section_explore:AddParagraph("*  The difference between a text field and a textbox is that text fields must be only one line. Textboxes can have multiple lines.")

        Image image2 = section_explore:AddImage("/media/Blocks/Scaffolded Block Programming/HorizontalOnIf.png","This example now shows the double cursor on the if statement. Because the line is on the if true line, the screen reader would say the line of code, potentially with extra information at the end relevant for screen reader users.")
        image2:AddText("This example now shows the double cursor on the if statement. Because the line is on the if true line, the screen reader would say the line of code, potentially with extra information at the end relevant for screen reader users.")
        image2:AddAttribute("data-zoom","")

        section_explore:AddParagraph("On the left hand side of the screen, a brief description of the block where the horizontal cursor currently resides. In this case, in a blue region are the words "+dq+"If Block"+dq+" in the palette with a description of the block. For users that understand code through sound, like a screen reader, or through touch, like Braille, this documentation is available by using the hotkey CTRL + 1 on Windows or COMMAND + 1 on Mac. From there, the tab key allows access through documentation, a filter, and a set of available commands.")

        AddHeading(section_explore, "A Quick Lesson on "+dq+"If"+dq+" Statements", 3)
        
        section_explore:AddParagraph("The above block is known as a  "+dq+"if "+dq+" statement, most commonly known as a conditional. Think about conditionals as a cause and effect situation. Say that you are planning to go outside and you want to dress appropriately:")

        UnorderedList ifStatements
        ifStatements:AddClassAttribute("list-disc list-outside pl-8")
        ifStatements:AddListItem("If the weather is sunny, then you may want to wear a shirt and some shorts")
        ifStatements:AddListItem("If the weather is snowy, then you may want to wear a coat and various warm articles")
        ifStatements:AddListItem("If the weather is rainy, then you may want to bring an umbrella and wear a light jacket")
        section_explore:Add(ifStatements)

        Bold ifP
        ifP:AddText("if…then")
        Paragraph ifPara
        ifPara:AddText("Notice how in these statements about the weather, they are structures using the phrase ")
        ifPara:Add(ifP)
        ifPara:AddText(" to indicate decision making. You will go deeper learning with these conditionals in a future lesson, but for now, explore what they do and see how they change some of the "+dq+"logic"+dq+" in your way of programming.
")
        section_explore:Add(ifPara)

        AddHeading(section_explore, "Blank Blocks", 3)
        section_explore:AddParagraph("While the palette is a primary way of adding blocks, especially for young users, evidence in the academic literature suggests novices only use blocks for a short time, generally a few weeks [2]. Past this time, learning benefits drop off, compared to text, although the literature is limited in the sense that longitudinal tracking of students has generally not happened. Given block environments commonly allow only the use of the mouse, this leads to transitional friction. The Quorum programming language is somewhere in between. There are blocks, which map 1 to 1 to the text. There is no need to switch or not switch. You can use the blocks if you like them and not if you do not, for learning or inventing anything you wish. You do not have to transition.
")

        section_explore:AddParagraph("For interacting with the environment, while students can use the mouse, the same or nearly the same operations are available through the keyboard. Blocks can be used forever, for any possible program, through the use of the blank block. You can add a blank block by pressing the Enter key and can think of it as a temporary place where you can write in text for a short time.")

         Image image3 = section_explore:AddImage("/media/Blocks/Scaffolded Block Programming/BlankBlock.png","This example shows what the editor looks like if a blank block has the focus. Notably, in the palette, there is documentation describing the block. ")
        image3:AddText("This example shows what the editor looks like if a blank block has the focus. Notably, in the palette, there is documentation describing the block. ")
        image3:AddAttribute("data-zoom","")

        section_explore:AddParagraph("A blank block is white with a double cursor. On it, the horizontal cursor means that this block has the focus and the documentation states that the blank block converts code you type into blocks and are placeholders for empty lines. From this perspective, novices can use the palette as they see fit, as can professionals. The vertical cursor allows the user to write a raw line of code, from memory, which provides a form of a text mode without losing all of the benefits of a full switch between a text or blocks style mode.")

        AddHeading(section_explore, "Blank Block Templates", 3)
        
        section_explore:AddParagraph("Once in a line of code, you can type normal Quorum code. Beginners may not know how to do so, which means they may favor the palette and this is okay. Professionals may already have the language memorized and thus may find it faster to type and this is also okay. You can also make use of templates, which are pre-programmed partial lines of code that can flesh out your code without needing drag and drop. ")
        section_explore:AddParagraph("In addition to typing out full lines of code into a blank block, you can also use templates. These templates provide yet one more optional mechanism by which you can learn to code. The idea is you can type a short mnemonic and the block system will flesh out an entire line. Almost always, because you are typing code that is not a full line, this will temporarily trigger an error, but the system will know what to do. For example, imagine you typed the word "+dq+"output"+dq+" into a blank block. The system would show like so:")

        Image image4 = section_explore:AddImage("/media/Blocks/Scaffolded Block Programming/BlankBlockOutput.png","This shows a blank block with the word output. The error is technically on the next line because the programming language does not know what output if means. ")
        image4:AddText("This shows a blank block with the word output. The error is technically on the next line because the programming language does not know what output if means. ")
        image4:AddAttribute("data-zoom","")

        section_explore:AddParagraph("Notice that there is an error, colored in red, at the line of code after where you are typing. However, if you press the down arrow, or enter, the system knows that the word output is a common template and will automatically fix the error on your behalf. 
")


        section_explore:AddParagraph("
You can see that after pressing enter or however you use it to complete the template, that block changes color to the correct output block shown in the first line.")


         Image image6 = section_explore:AddImage("/media/Blocks/Scaffolded Block Programming/OutputAfterError.png","The completed template block on Quorum Studio")
        image6:AddText("The completed template block on Quorum Studio")
        image6:AddAttribute("data-zoom","")

        section_explore:AddParagraph("There are many templates that can be used in the system. Feel free to tinker with any of the following templates:")

        AddHeading(section_explore, "Basic Templates", 4)

        section_explore:AddParagraph("These are basic templates that can be used to output to the screen, get input from the user, talk, or define variables.")

         WebTable tableBasics = AddWebTable("Basic Templates in Quorum Blocks")
        TableBody tableBodyBasics = AddTableBody()
        
        Array<text> tableHeaderArrayBasics
        tableHeaderArrayBasics:Add("Template")
        tableHeaderArrayBasics:Add("Code Example") 
        tableHeaderArrayBasics:Add("Purpose")

        TableHeader theadBasics = AddTableHeaderRow(tableHeaderArrayBasics)
        tableBasics:Add(theadBasics)  

        Array<text> rubricText6
        rubricText6:Add("output")
        rubricText6:Add("output "+dq+"words"+dq+"")
        rubricText6:Add("Output to the console") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText6))

        Array<text> rubricText7
        rubricText7:Add("input")
        rubricText7:Add("text string = input()")
        rubricText7:Add("Get information from the console") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText7))

        Array<text> rubricText8
        rubricText8:Add("say")
        rubricText8:Add("say "+dq+"words"+dq+" ")
        rubricText8:Add("Talk to the user through the speaker") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText8))

        Array<text> rubricText9
        rubricText9:Add("integer")
        rubricText9:Add("integer a = 0")
        rubricText9:Add("Define a variable whole number without a decimal point") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText9))

        Array<text> rubricText10
        rubricText10:Add("number")
        rubricText10:Add("number b = 0.0")
        rubricText10:Add("Define a variable with a decimal point") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText10))

         Array<text> rubricText11
        rubricText11:Add("boolean")
        rubricText11:Add("boolean bool = true")
        rubricText11:Add("Define a variable that can only be true or false") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText11))

         Array<text> rubricText12
        rubricText12:Add("text")
        rubricText12:Add("text string = "+dq+"words"+dq+" ")
        rubricText12:Add("Define a variable with characters in it") 
   
        tableBodyBasics:Add(AddTableBodyRow(rubricText12))

        tableBasics:Add(tableBodyBasics)
        section_explore:Add(tableBasics)
        section_explore:AddParagraph("")

        AddHeading(section_explore, "Control templates", 4)

        section_explore:AddParagraph("These templates are different in that they may sometimes have a condition attached. For example, the template repeat (condition) times might be typed as repeat 5 times, which would create a loop that does what the name implies. 
")

         WebTable tableControl = AddWebTable("Basic Templates in Quorum Blocks")
        TableBody tableBodyControl  = AddTableBody()
        
        Array<text> tableHeaderArrayControl 
        tableHeaderArrayControl:Add("Template")
        tableHeaderArrayControl:Add("Purpose")

        TableHeader theadControl = AddTableHeaderRow(tableHeaderArrayControl)
        tableControl:Add(theadControl)  

        Array<text> rubricText13
        rubricText13:Add("if")
        rubricText13:Add("Control the flow of a program by making decisions") 
   
        tableBodyControl:Add(AddTableBodyRow(rubricText13))

        Array<text> rubricText14
        rubricText14:Add("if (condition)")
        rubricText14:Add("Control the flow with an optional condition") 
   
        tableBodyControl:Add(AddTableBodyRow(rubricText14))

        Array<text> rubricText15
        rubricText15:Add("elseif")
        rubricText15:Add("Control a second part of an if statement") 
   
        tableBodyControl:Add(AddTableBodyRow(rubricText15))

        Array<text> rubricText16
        rubricText16:Add("elseif (condition)")
        rubricText16:Add("Control the second part with a condition")
       
        tableBodyControl:Add(AddTableBodyRow(rubricText16))

        Array<text> rubricText17
        rubricText17:Add("else")
        rubricText17:Add("Control a fallback part of an if statement")
   
        tableBodyControl:Add(AddTableBodyRow(rubricText17))


        Array<text> rubricText18
        rubricText18:Add("repeat")
        rubricText18:Add("Cause the computer to do something over and over")
        
   
        tableBodyControl:Add(AddTableBodyRow(rubricText18))


         Array<text> rubricText19
        rubricText19:Add("repeat while")
        rubricText19:Add("Use a particular kind of loop that executes with a condition ")
  
   
        tableBodyControl:Add(AddTableBodyRow(rubricText19))

         Array<text> rubricText20
        rubricText20:Add("repeat while (condition)")
        rubricText20:Add("Same as repeat while, but specifying the condition")
  
   
        tableBodyControl:Add(AddTableBodyRow(rubricText20))

        Array<text> rubricText21
        rubricText21:Add("repeat until")
        rubricText21:Add("Similar to repeat while, except the condition is reversed

")
  
   
        tableBodyControl:Add(AddTableBodyRow(rubricText21))

        Array<text> rubricText22
        rubricText22:Add("repeat until (condition)")
        rubricText22:Add("The same as repeat until, but with the condition specified
")
        tableBodyControl:Add(AddTableBodyRow(rubricText22))

          Array<text> rubricText23
        rubricText23:Add("repeat (integer)")
        rubricText23:Add("Cause the computer to repeat a fixed integer number of times")
        tableBodyControl:Add(AddTableBodyRow(rubricText23))


         Array<text> rubricText25
        rubricText25:Add("repeat (integer) times")
        rubricText25:Add("Same command as before except the word times is used")
        tableBodyControl:Add(AddTableBodyRow(rubricText25))

         Array<text> rubricText26
        rubricText26:Add("check")
        rubricText26:Add("A rarely used command to check for errors")
        tableBodyControl:Add(AddTableBodyRow(rubricText26))

         Array<text> rubricText27
        rubricText27:Add("detect")
        rubricText27:Add("A rarely used command used to detect certain kinds of errors")
        tableBodyControl:Add(AddTableBodyRow(rubricText27))

         Array<text> rubricText28
        rubricText28:Add("always")
        rubricText28:Add("An even more rarely used commands that guarantees some code executes even if there are errors")
        tableBodyControl:Add(AddTableBodyRow(rubricText27))

        tableControl:Add(tableBodyControl)
        section_explore:Add(tableControl)
        section_explore:AddParagraph("")

         Section section_engage
        section_engage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_engage)
        AddHeading(section_engage, "Engage", 2)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to use the template blocks in Quorum"
    end

    action GetSummaryName returns text
        return "Scaffolded Blocks"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Scaffolded Blocks Programming"
    end

    action GetShortDescription returns text
        return "how to use the blocks templates in Quorum"
    end

    action GetLinkName returns text
        return "Scaffolded Blocks Programming"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/scaffoldedBlocks.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
