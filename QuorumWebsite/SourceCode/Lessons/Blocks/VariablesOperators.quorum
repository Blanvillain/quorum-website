use Libraries.Web.Page.all
use Libraries.Web.Page.Italic
use Libraries.Containers.Array
use Libraries.Web.Page.Image
use Libraries.Web.Page.Bold

class VariablesAndOperators is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Getting Started with Blocks - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour 3: Variables and Operators", 1)

        headDiv:AddText("This lesson is to teach you about variables and operators.")
        bodyDiv:Add(headDiv)

        Section section_overview
        section_overview:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_overview, "Overview", 2)
        section_overview:AddParagraph("When writing programs, you give the computer a set of instructions to perform. As part of these instructions, you can give it specific data, called variables, at each step. When you hear the term variables, you might relate this topic to saving information. Your computer might save items you download, data you are keeping track of, or information about how you login to a website. In this lesson, you will learn about how to store information in a program using variables. You will also learn how to use operators, like math symbols, to change and combine this stored information.")

        AddHeading(section_overview, "Goals", 3)
        section_overview:AddParagraph("You have the following goals for this lesson:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Learn how to store information with variables")
        goalList:AddListItem("Use the four "+dq+"primitive"+dq+" variable types in Quorum")
        goalList:AddListItem("Use operators to modify variables")
        section_overview:Add(goalList)

        bodyDiv:Add(section_overview)

        Section section_warmUp
        section_warmUp:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_warmUp)
        AddHeading(section_warmUp, "Warm up", 2)
        
        section_warmUp:AddParagraph("Consider a few examples of technology in your life. For each of the examples below, what kinds of data do you think are being stored or changed?")
        UnorderedList techList
        techList:AddClassAttribute("list-disc list-outside pl-8")
        techList:AddListItem("Calculator")
        techList:AddListItem("Car speedometer")
        techList:AddListItem("Digital light switch")
        techList:AddListItem("e-Book")
        techList:AddListItem("Microwave")
        section_warmUp:Add(techList)

        section_warmUp:AddParagraph("Can you think of other examples of technology that needs to store and change data?")

        AddHeading(section_warmUp, "Vocabulary", 3)

        section_warmUp:AddParagraph("You will be learning about the following vocabulary words: ")
        
        WebTable table = AddWebTable("Variable and Operators Vocabulary")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Term")
        tableHeaderArray:Add("Definition") 
   

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Variable")
        rubricText1:Add("A variable is a storage container. It has a name, a data type, and a value.") 
   
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("integer")
        rubricText2:Add("Integers are whole numbers. They can never have a decimal point.") 
  
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("number")
        rubricText3:Add("A number is a numerical value with a decimal point.") 
     
        tableBody:Add(AddTableBodyRow(rubricText3))

         Array<text> rubrictxt
        rubrictxt:Add("text")
        rubrictxt:Add("Text is any combination of written symbols, like letters or numbers.") 
     
        tableBody:Add(AddTableBodyRow(rubrictxt))

        Array<text> rubricbool
        rubricbool:Add("boolean")
        rubricbool:Add("A boolean variable can be only true or false.") 
     
        tableBody:Add(AddTableBodyRow(rubricbool))

        Array<text> rubricPV
        rubricPV:Add("Primitive Variable")
        rubricPV:Add("A primitive variable is a variable that stores one of the four basic types of information: integers, numbers, booleans, or text.") 
     
        tableBody:Add(AddTableBodyRow(rubricPV))


        Array<text> rubricOP
        rubricOP:Add("Operator")
        rubricOP:Add("An operator is a symbol that changes or combines pieces of data. The most common operators are math symbols like +, -, *, or /.") 
     
        tableBody:Add(AddTableBodyRow(rubricOP))
    
        table:Add(tableBody)
        section_warmUp:Add(table)

        section_warmUp:AddParagraph("")
        AddHeading(section_warmUp, "Code", 3)

        section_warmUp:AddParagraph("You will be using the following new pieces of code: ")


        WebTable tableCode = AddWebTable("New Code to Learn")
        TableBody tableBodyCode = AddTableBody()
        
        Array<text> tableHeaderArrayCode
        tableHeaderArrayCode:Add("Quorum Code")
        tableHeaderArrayCode:Add("Code Example") 
        tableHeaderArrayCode:Add("Explanation")

        TableHeader theadCode = AddTableHeaderRow(tableHeaderArrayCode)
        tableCode:Add(theadCode)  

        Array<text> rubricText4
        rubricText4:Add("integer NAME = VALUE")
        rubricText4:Add("integer a = 0")
        rubricText4:Add("Creates a new variable called NAME that can store integers, and puts VALUE in the container.") 
   
        tableBodyCode:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("number NAME = VALUE")
        rubricText5:Add("number b = 1.8")
        rubricText5:Add("Creates a new variable called NAME that can store numbers, and puts VALUE in the container.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricText5))

    
        Array<text> rubricTextString
        rubricTextString:Add("text NAME = VALUE")
        rubricTextString:Add("text string = "+dq+"McDonald’s"+dq+"")
        rubricTextString:Add("Creates a new variable called NAME that can store text, and puts VALUE in the container.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricTextString))

        Array<text> rubricTextBool
        rubricTextBool:Add("boolean NAME = VALUE")
        rubricTextBool:Add("boolean bool = true")
        rubricTextBool:Add("Creates a new variable called NAME that can store booleans, and puts VALUE in the container.") 
  
        tableBodyCode:Add(AddTableBodyRow(rubricTextBool))

        tableCode:Add(tableBodyCode)
        section_warmUp:Add(tableCode)
        section_warmUp:AddParagraph("")

        AddHeading(section_warmUp, "CSTA Standards", 3)
         section_warmUp:AddParagraph("This lesson covers the following standards:")
        UnorderedList standards
        standards:AddClassAttribute("list-disc list-outside pl-8")
        standards:AddListItem("2-AP-11")
        standards:AddListItem("3A-DA-09")
        standards:AddListItem("3A-DA-10")
        section_warmUp:Add(standards)
  
        Section section_explore
        section_explore:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_explore)
        AddHeading(section_explore, "Explore", 2)

        section_explore:AddParagraph("Before you begin, you will need to make a new project to work on. As a reminder, you can make a new project by going to the File Menu and selecting the New Project button. For the project type, select "+dq+"Console."+dq+" A console project really means that it is a blank canvas and you can then have it create whatever you like. Once you have made your project, open the "+dq+"Main.quorum"+dq+" file in the project tree on the left. Then, open the “Blocks” tab in the left pane. For this lesson, open the "+dq+"Basic"+dq+" tab. Your project should look like the picture below.")
        
        Image image = section_explore:AddImage("/media/Blocks/Variables And Operators/HelloWorld.png","A picture of Quorum Studio in dark mode. The left pane shows the Blocks tab with the Basic options selected. The right side has a hello world style output statement.")
        image:AddText("A picture of Quorum Studio in dark mode. The left pane shows the Blocks tab with the Basic options selected. The right side has a hello world style output statement.")
        image:AddAttribute("data-zoom","")

        section_explore:AddParagraph("In previous lessons, when you have given instructions to the computer, like "+dq+"output"+dq+" or "+dq+"say"+dq+", you have given it specific words or other data to use on that line of code. You can tell an output or say statement to interact with a constant, like the integer 5, but you can also use variables.")
        section_explore:AddParagraph("A variable is a container for information. You can think of it like a box. The box has a label on it that describes what kind of stuff can go inside. The box also has a name written on it, so you can tell different boxes apart. ")
        section_explore:AddParagraph("There are several blocks on the left side for variables. To start, think about one: ")

        Image image1 = section_explore:AddImage("/media/Blocks/Variables And Operators/HelloWorld.png","A block that reads: integer a = 0")
        image1:AddText("A block that reads: integer a = 0")
        image1:AddAttribute("data-zoom","")

        section_explore:AddParagraph("First, while the representation above is visual, computer programming often distinguishes between code and such visuals, like blocks. In the Quorum programming language, this distinction does not exist. The above is exactly, mathematically, identical to the line of code:")

        section_explore:Add(preformatter:GeneratePreformattedCode("integer a = 0"))

        section_explore:AddParagraph("Point being, throughout this lesson and the rest, just consider that while the language allows a block or text mode, what they both do is identical. It is purely personal preference which you or your students use. Both are accessible and any program can be written with either. In fact, when Quorum sends a block to be processed for creating the program you are writing, it is not using blocks at all. It just uses the text, but happens to have a visual representation that looks like a block and has extra information embedded for accessibility devices like screen readers. If the word block is referenced, thus, in this material, it is interchangeable with text.
")        
        Bold boldA
        boldA:AddText(""+dq+"a"+dq+"")

        Paragraph createVar
        createVar:AddText("This block creates a variable, and it has four parts. The first box reads “integer”, which describes the type of information that can be stored in the variable. The second box reads ")
        createVar:Add(boldA)
        createVar:AddText(", which is the variable's name. After the second box is an equal sign, which indicates assignment (which is just a fancy term for putting something in the variable box). The last box reads "+dq+"0"+dq+", which is the value of the variable, or in other words, the data being put in the box. For screen reader users, note that this type, name, value terminology is embedded into the screen reader cues, but varies slightly depending on platform and which screen reader is used.
")
        section_explore:Add(createVar)

        AddHeading(section_explore, "An Introduction to Variables", 3)
        section_explore:AddParagraph("Now consider how to make primitive variables, which in this context means one of the four basic types: integer, number, boolean, or text. To start, place the "+dq+"integer a = 0"+dq+" block at the top of your program. Then, place a "+dq+"say"+dq+" or "+dq+"output"+dq+" block after it. ")

         Section section_engage
        section_engage:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_engage)
        AddHeading(section_engage, "Engage", 2)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to use the template blocks in Quorum"
    end

    action GetSummaryName returns text
        return "Scaffolded Blocks"
    end

    action GetImageLocation returns text
        return "/media/gettingStarted.png"
    end

    action GetName returns text
        return "Scaffolded Blocks Programming"
    end

    action GetShortDescription returns text
        return "how to use the blocks templates in Quorum"
    end

    action GetLinkName returns text
        return "Variables and Operators"
    end

    action GetLocation returns text
        if GetNewLocation() not= ""
          return GetNewLocation()
        end
        return "tutorials/blocks/VariablesAndOperators.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Blocks"
    end
end
