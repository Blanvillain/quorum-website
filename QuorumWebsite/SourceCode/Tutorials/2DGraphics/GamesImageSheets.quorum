use Libraries.Web.Page.all
use Libraries.Containers.Array

class GamesImageSheets is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Image Sheets - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)
        
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Using Image Sheets in Quorum", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Using Image Sheets in Quorum")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to create and draw image sheets.")
        bodyDiv:Add(headDiv)


        Section section_image_sheets
        section_image_sheets:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_image_sheets)
        AddHeading(section_image_sheets, "Image Sheets", 2)
        
        Paragraph para
        para:AddText(             "In computer graphics, the computer can sometimes render (put on the screen) images faster by using what are often called ")
        Link link = para:AddLink("Texture atlases", "https://en.wikipedia.org/wiki/Texture_atlas")
        link:SetClassAttribute("underline quorum-blue-150")
        para:AddText(        ". We call them ImageSheets in Quorum. "
                            +   "ImageSheets allow OpenGL to reduce the amount of loading that it has to do "
                            +   "(which can be a very expensive process that must be done on each frame). In this tutorial, we will not get into the details of when to use, "
                            +   "or not use ImageSheets, as this is a complicated discussion related to graphics hardware. "
                            +   "We will say, however, for the types of 2D games Quorum's engine currently supports, using ImageSheets can often speed up a program. "
                            +   "Many aspects of Quorum use image sheets behind the scenes (e.g., fonts). "
                            + "This tutorial require Quorum Studio.")
        section_image_sheets:Add(para)
        section_image_sheets:AddParagraph(   "To make an ImageSheet, let's first add a second image to our game application in Quorum Studio. This one is also creative commons and works for this example:")

        Image image = section_image_sheets:AddImage("/media/UsingLibraries.png", "This is an image of the libraries logo")
        image:AddAttribute("data-zoom", "")
        section_image_sheets:AddParagraph(   "To make an ImageSheet, we need to open the properties for our application, which can be done by opening the context menu "
                            +   "(right click on the project or navigate to the projects window (CTRL+1), select the project, hit the context menu button), "
                            +   "then select " + dq + "properties" + dq + ". From there, we navigate using the keyboard or mouse to the Games window on the left pane, "
                            +   "which looks like this:")
        Image image1 = bodyDiv:AddImage("/media/games/ImageSheetDialog.png", "This is an image of the image sheet dialog")
        image1:AddAttribute("data-zoom", "")

        section_image_sheets:AddParagraph(   "On the left pane of this window, there are two categories of options, Project Information and Games. "
                            +   "If Games is selected, the right hand side contains information that tells Quorum to automatically generate ImageSheets. "
                            +   "There are several options, which are listed below:")

        UnorderedList list
        AddListItemWithBoldAtFront(list, "Enable ImageSheet Support", ": If this option is disabled, Quorum will not store any settings related to ImageSheets.")
        AddListItemWithBoldAtFront(list, "Rebuild on Compile", ": If this option is selected, Quorum will rebuild ImageSheets whenever a program is compiled. This is not necessary, "
                        +   "but can be handy if the images are being changed regularly by artists.")
        AddListItemWithBoldAtFront(list, "Build Path", ": This option lets us change where the ImageSheets will be generated.")
        AddListItemWithBoldAtFront(list, "Image Sheets", ": This is a list we create of what ImageSheets should be generated by the system.")
        AddListItemWithBoldAtFront(list, "Images", ": This is a list of images that will be put inside of a particular ImageSheet.")
        section_image_sheets:Add(list)

        section_image_sheets:AddParagraph(   "For our example, we will fill out our ImageSheet to include both the books image and the hour of code image. "
                            +   "Our window will have a build path of " + dq + "assets" + dq + " (although it can be anything we want), with one ImageSheet, "
                            +   "which we will call " + dq + "MyImageSheet" + dq + ", and two files in that sheet. Our window appears like this:")
        Image image2 = section_image_sheets:AddImage("/media/games/ImageSheetDialogFull.png", "This is an image of the image sheet dialog full")
        image2:AddAttribute("data-zoom", "")
        section_image_sheets:AddParagraph(   "Once the ImageSheet generator is enabled, Quorum will create them on each build (each time we hit Run) if that option was selected. When this is done, Quorum creates two files, "
                            +   "MyImageSheet.png and MyImageSheet.atlas. First, MyImageSheet.png combines both images onto one "
                            +   "(or several if they will not fit on one) image that looks like this:")
        Image image3 = section_image_sheets:AddImage("/media/UsingLibraries.png", "This is an image of the libraries logo")
        image3:AddAttribute("data-zoom", "")
        Image image4 = section_image_sheets:AddImage("/media/games/hourofcode.png", "This is an image of the Hour of code Quorum logo")
        image4:AddAttribute("data-zoom", "")

        Paragraph para1
        para1:AddText(         "Besides the image, a second file is also generated, called an atlas file. This file is generated by the excellent tool ")
        Link link3 = para1:AddLink("LibGDX", "https://github.com/libgdx/libgdx")
        link3:SetClassAttribute("underline quorum-blue-150")
        para1:AddText(         ". Normally, we do not need to interact with this file directly, but the engine needs to know about it. "
                        +   "In other words, barring a user has specialized needs for a particular application, we can ignore the contents of this file. "
                        +   "The file is needed in order to let Quorum know where each sub-image is in the larger ImageSheet. "
                        +   "For reference, here is what the file looks like in this example:")
        section_image_sheets:Add(para1)

        section_image_sheets:Add(preformatter:GeneratePreformattedCode(  "MyImageSheet.png" + cr 
                                                        +   "size: 512,256" + cr
                                                        +   "format: RGBA8888" + cr
                                                        +   "filter: Nearest,Nearest" + cr
                                                        +   "repeat: none" + cr
                                                        +   "books" + cr
                                                        +   "  rotate: false" + cr
                                                        +   "  xy: 2, 32" + cr
                                                        +   "  size: 200, 130" + cr
                                                        +   "  orig: 200, 130" + cr
                                                        +   "  offset: 0, 0" + cr
                                                        +   "  index: -1" + cr
                                                        +   "hourofcode" + cr
                                                        +   "  rotate: false" + cr
                                                        +   "  xy: 204, 2" + cr
                                                        +   "  size: 160, 160" + cr
                                                        +   "  orig: 160, 160" + cr
                                                        +   "  offset: 0, 0" + cr
                                                        +   "  index: -1"))
        section_image_sheets:AddParagraph(   "Once our ImageSheets are generated, we can then use them in a program, similarly to how we used Drawable's before. "
                            +   "First, we add a use statement for ImageSheets:")
       section_image_sheets:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.ImageSheet"))
        section_image_sheets:AddParagraph(   "Next, where we create our Drawables (books and bunny), we also create an ImageSheet from which we will extract the Drawables.")
        section_image_sheets:Add(preformatter:GeneratePreformattedCode(  "class Main is Game" + cr
                                                        +   "    Drawable books" + cr
                                                        +   "    Drawable bunny" + cr
                                                        +   "    ImageSheet sheet"))
        section_image_sheets:AddParagraph(   "Then in the CreateGame action, we load the files from the ImageSheet into the Drawables and Add them to the game:")
        section_image_sheets:Add(preformatter:GeneratePreformattedCode(  "action CreateGame" + cr
                                                        +   "    sheet:Load(" + dq + "assets/MyImageSheet.atlas" + dq + ")" + cr
                                                        +   "    books = sheet:GetDrawable(" + dq + "books" + dq + ")" + cr
                                                        +   "    bunny = sheet:GetDrawable(" + dq + "hourofcode" + dq + ")" + cr
                                                        +   "    Add(books)" + cr
                                                        +   "    Add(bunny)" + cr
                                                        +   "end"))
        section_image_sheets:AddParagraph(   "In this example, these images will draw over each other because we have not changed their position, "
                            +   "but you can see how we can now load multiple Drawable objects onto the screen. We explain how to position objects in the next tutorial." + cr )
        section_image_sheets:AddParagraph(   "Here's what our final code looks like for loading two images from an ImageSheet and displaying them on the screen:")


        CodeBlock cb2
        Span s3
        Span s4
        Span s5
        Span s6
        Span s7
        cb2:AddText("use Libraries.Game.Game" + cr
                +   "use Libraries.Game.Graphics.Drawable" + cr
                +   "use Libraries.Game.Graphics.ImageSheet" + cr + cr
                +   "class Main is Game" + cr)
        s3:AddText( "    //store a placeholder in memory for books and the bunny" + cr
                +   "    //by saying these are undefined, we are telling Quorum not to make the objects" + cr
                +   "    //the reason we do that is because the ImageSheet will make the objects for us" + cr)
        s3:SetClassAttribute("comment")
        cb2:Add(s3)
        cb2:AddText("    Drawable books = undefined" + cr
                +   "    Drawable bunny = undefined" + cr + cr)
        s4:AddText( "    //create an ImageSheet object we can use in our create game action." + cr)
        s4:SetClassAttribute("comment")
        cb2:Add(s4)
        cb2:AddText("    ImageSheet sheet" + cr + cr
                +   "    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr)
        s5:AddText( "        //this loads the atlas file into the ImageSheet. Importantly, we load" + cr
                +   "        //the .atlas, not the .png. The reason is because our atlas generator may " + cr
                +   "        //generate multiple images, which means the system should load them all." + cr)
        s5:SetClassAttribute("comment")
        cb2:Add(s5)
        cb2:AddText("        sheet:Load(" + dq + "assets/MyImageSheet.atlas" + dq + ")" + cr + cr)
        s6:AddText( "        //load the two Drawables from the ImageSheet." + cr)
        s6:SetClassAttribute("comment")
        cb2:Add(s6)
        cb2:AddText("        books = sheet:GetDrawable(" + dq + "books" + dq + ")" + cr
                +   "        bunny = sheet:GetDrawable(" + dq + "hourofcode" + dq + ")" + cr + cr)
        s7:AddText( "        //add the Drawables to the game." + cr)
        s7:SetClassAttribute("comment")
        cb2:Add(s7)
        cb2:AddText("        Add(books)" + cr
                +   "        Add(bunny)" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr
                +   "    end" + cr
                +   "end")
        section_image_sheets:Add(preformatter:GeneratePreformattedCode(cb2))


        section_image_sheets:AddParagraph(   "Here's what this code will render:")
        Image image5 = section_image_sheets:AddImage("/media/games/ImageSheetResult.png", "This is an image of the Image Sheet Result")
        image5:AddAttribute("data-zoom", "")

         Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about using Image Sheets in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Image Sheets"
    end

    action GetImageLocation returns text
        return "/media/games/Drawing2D.png"
    end

    action GetName returns text
        return "Using Image Sheets in Quorum Studio"
    end

    action GetShortDescription returns text
        return "how to use Image Sheets in Quorum Studio"
    end

    action GetLocation returns text
        return "tutorials/games/drawing2DImageSheets.html"
    end
        

    action GetLinkName returns text
        return "Image Sheets"
    end

    action GetSectionName returns text
        return "2D Graphics"
    end
end