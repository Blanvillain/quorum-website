use Libraries.Web.Page.all
use Libraries.Containers.Array

class GamesStartedTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Getting Started with Games - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Getting Started with Games", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Getting Started with Games")
        AddToHeadingArray(h_heading)

        headDiv:AddText("Understanding and making your first Quorum game")
        bodyDiv:Add(headDiv)

        Section section_game
        section_game:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_game)
        
        Heading h2_game = section_game:AddHeading("How a Game Works", 2)
        h2_game:AddAttribute("data-text", "How a Game Works")
        
        h2_game:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_game)


        section_game:AddParagraph(   "Before we can get started making games, we need to understand two basic concepts for the Quorum Game Engine.")

        
        //the section on frames
        Section section_frame
        section_frame:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_frame)
        
        Heading h3_frame = section_frame:AddHeading("Understanding Frames", 3)
        h3_frame:AddAttribute("data-text", "Understanding Frames")
        
        h3_frame:AddClassAttribute("text-xl font-bold")
        AddToHeadingArray(h3_frame)
       
        section_frame:AddParagraph(   "In films or videos, a frame is a single still image, and the film or video is made of many frames, "
                            +   "where the still images are shown one after another very quickly to produce the appearance of motion. "
                            +   "Games work under a similar concept except that a game generates it's frames " + dq + "on the fly" + dq 
                            +   " based on what actions the player takes or the game rules dictate instead of a director generating them ahead of time. In a game, "
                            +   "at any given point in time the engine must display the current frame to the player based on the state of objects in the game at that moment." )
        section_frame:AddParagraph(   "The game engine displays its frames at a certain rate based on the capabilities of the machine it is running on and the activities of the game. "
                            +   "Frames are important for timing purposes and updates to objects can be made at each frame by calculating the time that elapses between them.")
        
        //the section on the main loop
         Section section_understanding
        section_understanding:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_understanding)
        
        Heading h3_understanding = section_understanding:AddHeading("Understanding the Main Loop", 3)
        h3_understanding:AddAttribute("data-text", "Understanding the Main Loop")
        
        h3_understanding:AddClassAttribute("text-xl font-bold")
        AddToHeadingArray(h3_understanding)

        section_understanding:AddParagraph(   "In a movie, every frame that the viewer sees has been made in advance, "
                            +   "so playing back a movie is simply a matter of displaying images at a pre-set frame rate. "
                            +   "Since games must create a frame before it is shown to the player, the game engine must provide a capability for a programmer "
                            +   "to write code to update all of the objects in the game before each frame update. The game program then loops over and over again until the game ends, "
                            +   "calling this update function on each frame before it displays the objects in the game. "
                            +   "This loop is called the Main Loop and the function that the game engine calls on each frame is called Update. "
                            +   "In the Update function, a programmer will update things like the position of displayable objects, monitor events or input, "
                            +   "check for collisions between objects play sounds or music, enforce game rules, check the status of certain conditions, or many other things." )
        section_understanding:AddParagraph(   "When the Update code block has finished execution on a particular frame, the game draws the game objects on the screen, "
                            +   "and control goes back to the beginning of the main loop and calls Update again to repeat the process. "
                            +   "All of the game's logic is therefore contained in or called from the Update code in the main loop.")

        
        //the section on the game class

         Section section_anatomy
        section_anatomy:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_anatomy)
        
        Heading h3_anatomy = section_anatomy:AddHeading("Anatomy of a Game Class", 3)
        h3_anatomy:AddAttribute("data-text", "Anatomy of a Game Class")
        
        h3_anatomy:AddClassAttribute("text-xl font-bold")
        AddToHeadingArray(h3_anatomy)
       

        Paragraph para
        para:AddText(             "Now that we understand these basic concepts, we can create the skeleton of a new game. In NetBeans, "
                            +   "we will make a new Quorum project with a " + dq + "Game Application" + dq + " template. You can find complete steps for making a new Quorum project at the ")
        para:AddLink("Getting Started with Quorum", "/tutorials/language/gettingStarted.html")
        para:AddText(        " tutorial. When the project is made, we have a template game ready to work on. Letâ€™s look at what each key part of the template code does.")
        section_anatomy:Add(para)

        CodeForIDE code1
        code1:AddFileUrl("Main.quorum", "examples/Games/GettingStarted/Main.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Running a blank game")
        section_anatomy:Add(ide)

         Section section_breakdown
        section_breakdown:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_breakdown)
        
        Heading h2_breakdown = section_breakdown:AddHeading("Breakdown", 2)
        h2_breakdown:AddAttribute("data-text", "Breakdown")
        
        h2_breakdown:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_breakdown)

        //the section on breakdown
        section_breakdown:AddParagraph(   "Following is a line by line breakdown of the template code:")
        section_breakdown:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Game
    class Main is Game"))


        Paragraph para1
        para1:AddText(             "This line instructs the compiler to use the Game functionality built into the Quorum Standard Library. "
                            +   "For more information on how loading libraries works, see ")
        Link link = para1:AddLink("Finding and using Libraries with Quorum", "/tutorials/language/usingLibraries.html")
        link:SetClassAttribute("underlined text-quorum-blue-150")
        para1:AddText(        ".")

        para1:AddText(             "In large projects, we have multiple code files. When a Quorum program is run, it will start in the file that has the " + dq + "Main" + dq + " class. "
                            +   "The second part of this line, " + dq + "is Game" + dq + ", makes this class a child of the Game class and allows it to use code from "
                            +   "the Game file in the Quorum standard library. For more details on how this concept (called inheritance) works, see ")
        para1:AddLink("Inheritance in Quorum", "/tutorials/language/inheritance.html")
        para1:AddText(        ".")
        section_breakdown:Add(para1)

        section_breakdown:Add(preformatter:GeneratePreformattedCode(  "action Main" + cr
                                                        +   "    StartGame()" + cr
                                                        +   "end"))
        section_breakdown:AddParagraph(   "The Main action in the template code is very simple, it just calls the StartGame method, which is the command to initiate the Main Loop. "
                            +   "By starting the Main Loop the engine will begin its process of drawing the objects in the game to the screen (currently there are none) "
                            +   "and then calling the Update method (currently empty) on each frame. Other things that are commonly done in this method are things "
                            +   "like setting the screen size or its position or other configuration items.")
        section_breakdown:Add(preformatter:GeneratePreformattedCode(  "action CreateGame" + cr
                                                        +   "end"))
        section_breakdown:AddParagraph(   "This CreateGame method is called by the engine immediately after the StartGame command is issued. "
                            +   "The code statements inside this action block will be executed one time at the startup of the game. "
                            +   "It is often used to initialize variables or load objects or other things that must be done to get the game ready to play.")
        section_breakdown:Add(preformatter:GeneratePreformattedCode(  "action Update(number seconds)" + cr
                                                        +   "end"))
        section_breakdown:AddParagraph(   "This is the Update method that the engine calls and is executed on each frame. The parameter of the method (" + dq + "seconds" + dq + ") "
                            +   "is provided by the engine and contains the number of seconds that have passed since the last execution of the loop. "
                            +   "The time between frames will vary from frame to frame depending on the amount of processing or drawing or other things "
                            +   "that the computer may be doing simultaneously, so this parameter is important for the game logic to decide what to do next "
                            +   "(such as how far to move an object or to check if it is time to flip the frame of an animation). "
                            +   "The parameter " + dq + "seconds" + dq + " will generally be a small fraction of a second. "
                            +   "For example, it may contain a number such as 0.021238734715 which is roughly 2/100th's of a second).")

        //the section on running the program
         Section section_run
        section_run:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_run)
        
        Heading h2_run = section_run:AddHeading("Run the Program", 2)
        h2_run:AddAttribute("data-text", "Run the Program")
        
        h2_run:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_run)

        
        section_run:AddParagraph(        "If we run this default template program (F6), the Quorum game engine will put up a blank screen that looks something like this:")
        Image image = section_run:AddImage("/media/games/blank.png","This is an image of the begin to create game.")
        image:AddAttribute("data-zoom","")
        
         Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to get started coding games using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Games Started"
    end

    action GetImageLocation returns text
        return "/media/games/gamesStarted.png"
    end

    action GetName returns text
        return "Getting Started"
    end

    action GetShortDescription returns text
        return "how to start to code a game"
    end

    action GetLocation returns text
        return "tutorials/games/gamesStarted.html"
    end

     action GetLinkName returns text
        return "Getting Started"
    end

    action GetSectionName returns text
        return "2D Graphics"
    end
end