use Libraries.Web.Page.all
use Libraries.Containers.Array

class GamesDrawing2DImages is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Drawing Images in 2D - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Drawing Images", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Drawing Images")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to draw images on the screen in 2 dimensions with Quorum")
        bodyDiv:Add(headDiv)

        Section section_drawing
        section_drawing:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_drawing)
        
        Heading h2_drawing = section_drawing:AddHeading("2D Image Drawing", 2)
        h2_drawing:AddAttribute("data-text", "2D Image Drawing")
        
        h2_drawing:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_drawing)

        Paragraph para

        para:AddText(             "In addition to shapes, we can also display pre-made images on the screen. This is useful if we want to use external programs like ")
        Link link = para:AddLink("Photoshop", "http://www.photoshop.com")
        link:AddClassAttribute("underline quorum-blue-150")
        para:AddText(             " or ")
        Link link1 = para:AddLink("Gimp", "http://www.gimp.org")
        link1:AddClassAttribute("underline quorum-blue-150")
        para:AddText(             " (a free alternative) to make images ahead of time or if we want to use digital photos we've taken. "
                            +   "Similarly, there is a large amount of free art on the Internet that can be used for commercial or non-commercial purposes "
                            +   "(under the creative commons license, for example)." )
        section_drawing:Add(para)

        section_drawing:AddParagraph(   "Quorum can load such images in two ways, by using: 1) a Drawable directly, or 2) an ImageSheet (a set of combined images). "
                            +   "First let us discuss using a Drawable to load images." )
        section_drawing:AddParagraph(   "To load an image we take the same approach we used before by creating a drawable object first:")


        section_drawing:Add(preformatter:GeneratePreformattedCode(  "Drawable logo"))
        section_drawing:AddParagraph(   "Then we can load an image file stored on our hard drive by calling the Load method of the Drawable class. "
                            +   "For this example, we will load the logo for the Quorum Hour of Code:")
        Image image = section_drawing:AddImage("/media/games/hourofcode.png", "This is an image of the Hour of code Quorum logo")
        image:AddAttribute("data-zoom", "")
        section_drawing:AddParagraph(   "This image is licensed under Creative Commons, so please feel free to download and use it for your own purposes. "
                            +   "To load this image, we first need to make a copy of it and place it in the directory of our project. It does not matter where in our project we place it,"
                            +   " but for this example we made a new folder named " + dq + "assets" + dq + " in the main project directory:")
        Image image1 = bodyDiv:AddImage("/media/games/assets.jpg", "This is an image of the assets in the main project directory")
        image1:AddAttribute("data-zoom","")
        section_drawing:AddParagraph(   "To load the image into our " + dq + "logo" + dq + " drawable object, in our CreateGame action we simply call the Load method of the Drawable class "
                            +   "with the path and filename of the file in our project and then call the Add action. "
                            +   "(Notice that the path of the file is relative to the root of our main project directory.):")
        section_drawing:Add(preformatter:GeneratePreformattedCode(  "logo:Load(" + dq + "assets\hourofcode.png" + dq + ")" + cr
                                                        +   "Add(logo)"))
        section_drawing:AddParagraph(   "So the whole game code looks like this:")
       section_drawing:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Game" + cr
            +   "use Libraries.Game.Graphics.Drawable" + cr + cr
            +   "class Main is Game" + cr
            +   "    Drawable logo" + cr + cr
            +   "    action Main" + cr
            +   "        StartGame()" + cr
            +   "    end" + cr + cr
            +   "    action CreateGame" + cr
            +   "        logo:Load(" + dq + "assets\hourofcode.png" + dq + ")" + cr
            +   "        Add(logo)" + cr
            +   "    end" + cr + cr
            +   "    action Update(number seconds)" + cr
            +   "    end" + cr
            +   "end"))
        section_drawing:AddParagraph(   "...and when we Run the program (F6) we get a game window that looks something like this:")
        Image image3 = section_drawing:AddImage("/media/games/displayImage.png", "This is an image of the display image when you run")
        image3:AddAttribute("data-zoom","")

        section_drawing:AddParagraph(   "Alternatively, we could use a file class to load the image file into the Drawable. In that case, our code would look like this:")
        section_drawing:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Game" + cr
            +   "use Libraries.Game.Graphics.Drawable" + cr
            +   "use Libraries.System.File" + cr + cr
            +   "class Main is Game" + cr
            +   "    Drawable logo" + cr + cr
            +   "    action Main" + cr
            +   "        StartGame()" + cr
            +   "    end" + cr + cr
            +   "    action CreateGame" + cr
            +   "        File file" + cr
            +   "        file:SetPath(" + dq + "assets\hourofcode.png" + dq + ")" + cr
            +   "        logo:Load(file)" + cr
            +   "        Add(logo)" + cr
            +   "    end" + cr + cr
            +   "    action Update(number seconds)" + cr
            +   "    end" + cr
            +   "end"))

        Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("Main.quorum", "examples/Games/Drawing2DImages/Main.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Draw an image")
    section_try_yourself:Add(ide3)
                                                    
        
         Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to draw to the screen in 2D using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Drawing 2D Images"
    end

    action GetImageLocation returns text
        return "/media/games/Drawing2D.png"
    end

    action GetName returns text
        return "Drawing 2D images"
    end

    action GetShortDescription returns text
        return "how to draw 2D images"
    end

    action GetLocation returns text
        return "tutorials/games/drawing2DImages.html"
    end

    action GetLinkName returns text
        return "Drawing Images in 2D"
    end

    action GetSectionName returns text
        return "2D Graphics"
    end
end