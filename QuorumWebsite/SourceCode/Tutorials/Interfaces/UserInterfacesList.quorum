use Libraries.Web.Page.all
use Libraries.Containers.Array

class UserInterfacesList is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("List Tutorial - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(headDiv,"Tutorial: List", 1)

        headDiv:AddText("This tutorial tells you how to use Lists in Quorum")
        bodyDiv:Add(headDiv)
        
        Section section_intro_to_lists
        section_intro_to_lists:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_intro_to_lists, "Introduction to Lists in Quorum", 2)
        AddHeading(section_intro_to_lists, "What is a List?", 3)

        section_intro_to_lists:AddParagraph("In this tutorial, we will learn how to use lists in the Quorum Game Engine. A list is simple interface tool that gives the user a group of items where they can select one. A behavior can be set to run when one of list items is activated.")
        section_intro_to_lists:AddParagraph("In Quorum, an item in a List is a string of text. Although, internally an entry in the list is represented as a ListItem, for this tutorial we only cover a simple use case of the List class and using ListItems is not necessary. ")
        section_intro_to_lists:AddParagraph("For this tutorial we make a simple List with four items and we will set a behavior to run when any of the entries are clicked. To start, create a new Game Application project. ")

        Section section_making_a_list
        section_making_a_list:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_making_a_list, "Making a List", 2)
        section_making_a_list:AddParagraph("In order to use a List, we need to include the List library. Note that there is another Quorum class with the same name but that List is part of the Containers library. Be sure to use the Interface List with the following use statement:")
        section_making_a_list:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.List"))
        section_making_a_list:AddParagraph("We want our list be usable as the game begins so we will create and populate the List in the CreateGame action. First we declare the List and then we add our entries with the Add action. Only ListItems can be added to Lists so Add will only accept ListItems or it will convert a text entry into a ListItem for you. For our project we will use text as our parameter.")
        section_making_a_list:AddParagraph("We will also position our List with the SetPosition action and after we add our entries to the List we will simply set the <b>Focus</b> to our List it is <b>accessible</b> and we  can interact with it with the keyboard. Then we add the List to the Game. The CreateGame action so far will be as follows:")
        section_making_a_list:Add(preformatter:GeneratePreformattedCode(
                                            "action CreateGame" + cr
                                            +"    List shoppingList" + cr
                                            +"    shoppingList:SetPosition(300, 200)" + cr + cr
                                            +"    shoppingList:Add("+dq+"Milk"+dq+")" + cr
                                            +"    shoppingList:Add("+dq+"Eggs"+dq+")" + cr
                                            +"    shoppingList:Add("+dq+"Ham"+dq+")" + cr
                                            +"    shoppingList:Add("+dq+"Cheese"+dq+")" + cr + cr
                                            +"    SetFocus(shoppingList)" + cr
                                            +"    Add(shoppingList)" + cr
                                            +"end"))
        AddHeading(section_making_a_list, "Setting an Entry Icon", 4)
        section_making_a_list:AddParagraph("Lists have another customization feature where you can Add an Icon to go along with an entry. To add the icon you must include the Icon along with the text for the entry in the Add call. An example of this is shown below:")
        section_making_a_list:Add(preformatter:GeneratePreformattedCode("Icon listIcon" + cr
                                            +"listIcon:LoadFilledCircle(50)" + cr
                                            +"shoppingList:Add("+dq+"Apples"+dq+", listIcon)"))
        AddHeading(section_making_a_list, "Setting Item Activation Behavior", 3)
        section_making_a_list:AddParagraph("If you run the program now you will be able to either double-click on an item in the List or navigate to it with the arrow keys and press the Spacebar to select it and activate it. But, the List does nothing other than change font colors. We will change this by setting an Item Activation Behavior that will run when a ListItem is activated. ")
        section_making_a_list:AddParagraph("ListItems can have their own Activation Behavior set to run when activated, but by default they do not have one. When a ListItem does not have its own Activation Behavior it will try torun the Item Activation Behavior provided by the parent List. For our example we will make a behavior and set it to the Item Activation Behavior our List so that it will run when any of the ListItems are activated. ")
        section_making_a_list:AddParagraph("To start we will make a new Quorum class in our project and we will name it "+dq+"ListBehavior.quorum." + dq)
        section_making_a_list:AddParagraph("The class will inherit from the Behavior class and we will need the Speech and ListItem libraries. All we will have the Behavior do is get the text associated with the ListItem that called the behavior, where will need to use casting, and then we will say and output a simple phrase with that text. One thing to note here is to retrieve the text of a ListItem you will need the GetText action. The full ListBehavior class is in the following code block:")
        section_making_a_list:Add(preformatter:GeneratePreformattedCode(
                                            "use Libraries.Interface.Behaviors.Behavior" + cr
                                            +"use Libraries.Interface.Events.BehaviorEvent"+ cr
                                            +"use Libraries.Sound.Speech" + cr
                                            +"use Libraries.Interface.Controls.ListItem" + cr + cr
                                            +"class ListBehavior is Behavior" + cr
                                            +"    action Run(BehaviorEvent event)" + cr
                                            +"        ListItem item = cast(ListItem, event:GetItem())" + cr
                                            +"        Speech speech" + cr
                                            +"        speech:Say("+dq+"I need to get "+dq+" + item:GetText())" + cr
                                            +"        output "+dq+"I need to get "+dq+" + item:GetText() + "+dq+"!" + dq + cr
                                            +"    end" + cr
                                            +"end"))
        section_making_a_list:AddParagraph("Now we go back to our main class and add to our CreateGame action the following two lines of code to set our behavior as the Item Activation Behavior:")
        section_making_a_list:Add(preformatter:GeneratePreformattedCode("ListBehavior behavior" + cr
                                                        +"shoppingList:SetItemActivationBehavior(behavior)"))
        section_making_a_list:AddParagraph("Now we can run our project and we can activate ListItems either with either clicks or the Spacebar and the program will say and output the text associated with the ListItem we activated, giving us a simple and functional List.")

        Section section_run_the_program
        AddHeading(section_run_the_program, "Try making a User Interface", 2)

        CodeForIDE code1
        code1:AddFileUrl("List.quorum", "/examples/UserInterface/List/Main.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Activity: List")
        section_run_the_program:Add(ide)

        bodyDiv:Add(section_intro_to_lists)
        bodyDiv:Add(section_making_a_list)
        bodyDiv:Add(section_run_the_program)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Lists in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Lists"
    end

    action GetName returns text
        return "Lists"
    end

    action GetShortDescription returns text
        return "how to use Lists"
    end

    action GetLocation returns text
        return "tutorials/ui/list.html"
    end
    action GetLinkName returns text
        return "List"
    end

    action GetSectionName returns text
        return "User Interfaces"
    end
end
