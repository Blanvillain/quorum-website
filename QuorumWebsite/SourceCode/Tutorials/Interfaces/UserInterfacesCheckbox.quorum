use Libraries.Web.Page.all
use Libraries.Containers.Array

class UserInterfacesCheckbox is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Checkbox Tutorial - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Checkbox", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Checkbox")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to use Checkboxes in Quorum")
        bodyDiv:Add(headDiv)
        
        Section section_intro_checkboxes
        section_intro_checkboxes:SetClassAttribute("flex flex-col gap-y-2")

        bodyDiv:AddHeading("Introduction to Checkboxes in Quorum", 2)
        bodyDiv:AddHeading("What is a Checkbox?", 3)
        bodyDiv:AddParagraph("In a previous tutorial, we learned how to use Buttons. A Button is simple interface tool that allows Behaviors to run when it is activated. Standard Buttons have many uses, but there is a special class of Buttons that expand functionality beyond a simple press to activate. This special class of Buttons are known as " + dq + "Toggle Buttons," + dq + " and they switch between different states. The Checkbox is one type of toggle Button, where activating the box once toggles it " + dq + "on" + dq + " and then activating it again toggles it " + dq + "off." + dq)
        
        Paragraph chkBoxBehavior
        chkBoxBehavior:AddText("Having two toggle states differentiates Checkboxes from standard Buttons because now you can have the box behave differently when activated, depending on the current toggle state of the Checkbox. In Quorum, this is accomplished by calling the activation Behavior's Run action when toggled on and the Behavior's Dispose action when toggled off. For more information on these two actions, refer back to the ")
        chkBoxBehavior:AddLink("Behavior", "/tutorials/ui/behavior.html")
        chkBoxBehavior:AddText(" tutorial.")
        bodyDiv:Add(chkBoxBehavior)

        bodyDiv:AddParagraph("For this tutorial, we will add a Checkbox to our game and set a Behavior for it to use as we start to activate it. To start, create a new Game application.")

        bodyDiv:AddHeading("Making a Checkbox", 2)
        bodyDiv:AddParagraph("In order to use Checkboxes, we must use the Checkbox Library with the following use statement:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.Checkbox"))

        bodyDiv:AddParagraph("Since we want the Checkbox to be usable as soon as the game begins, most of our code will be in the CreateGame action. To make the Checkbox, we simply declare it, give it a name, and position it. The name for a Checkbox is similar to the name of a Button, in that the text displayed by the Checkbox will be the same as the name. We will also change the font size to make the Button bigger, since the box will scale with the font size. Don't forget to add the box to the game, and we will also put focus on the Checkbox so that it is <b>accessible</b> and we can use the Space Key to activate it.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                    "Checkbox box" + cr
                                    +"box:SetName("+dq+"My Checkbox"+dq+")" + cr
                                    +"box:SetPosition(200, 350)" + cr
                                    +"box:SetFontSize(30)" + cr
                                    +"SetFocus(box)" + cr
                                    +"Add(box)"))

        bodyDiv:AddParagraph("So far, the main class is as follows:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                    "use Libraries.Game.Game" + cr +
                                    "use Libraries.Interface.Controls.Checkbox" + cr + cr +
                                    "class Main is Game" + cr +
                                    "    action Main" + cr +
                                    "        StartGame()" + cr +
                                    "    end" + cr + cr +
                                    "    action CreateGame" + cr +
                                    "        Checkbox box" + cr +
                                    "        box:SetPosition(200, 350)" + cr +
                                    "        box:SetName("+dq+"My Checkbox"+dq+")" + cr +
                                    "        box:SetFontSize(30)" + cr +
                                    "        SetFocus(box)" + cr +
                                    "        Add(box)" + cr +
                                    "    end" + cr +
                                    "end"))

        bodyDiv:AddParagraph("Now when you run the program, the Checkbox should be in the window and clicking the box or pressing the Spacebar will cause it to change toggle states. By default, when toggled on the Checkbox icon will change colors and a checkmark will appear inside the box. When toggled off the Checkbox icon will simply be gray and the checkmark will not be visible.")
        
        bodyDiv:AddHeading("Checkmark Color", 4)
        bodyDiv:AddParagraph("The Checkbox also has one little extra customization feature where you can change the color of the checkmark inside the box. This is purely for appearance but if you wish to change that you can accomplish it with these lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("Color c" + cr + "box:SetCheckColor(c:White())"))

        bodyDiv:AddHeading("Setting a Behavior", 2)
        bodyDiv:AddParagraph("Like a standard Button we can set a Behavior to run when the Checkbox is activated, but a Checkbox has two states so two different actions that will be called when toggled on or off. Internally, what will happen is that when toggled on the <b>Run</b> action will be called and when toggled off the <b>Dispose</b> action is called.")
        bodyDiv:AddParagraph("To show this, we will create a new Quorum class for our Behavior and we name it "+dq+"CheckBehavior.quorum."+dq+" Our class will inherit from the Behavior class and we will override the Run and Dispose actions.")
        bodyDiv:AddParagraph("All we will the Behaviors actions do is say and output whether they we checked or unchecked. Run will output that the box was checked while Dispose will output that the box was unchecked. The full Behavior is shown in the following code block:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                    "use Libraries.Interface.Behaviors.Behavior" + cr
                                    +"use Libraries.Interface.Events.BehaviorEvent" + cr
                                    +"use Libraries.Sound.Speech" + cr
                                    +"use Libraries.Interface.Item" + cr + cr

                                    +"class CheckBehavior is Behavior" + cr
                                    +"    Item item = undefined" + cr
                                    +"    Speech speech" + cr + cr

                                    +"    action Run(BehaviorEvent event)" + cr
                                    +"        item = event:GetItem()" + cr
                                    +"        speech:Say(item:GetName() + "+dq+" is now checked"+dq+")" + cr
                                    +"        output item:GetName() + "+dq+" is now checked" + dq + cr
                                    +"    end" + cr + cr

                                    +"    action Dispose()" + cr
                                    +"        speech:Say(item:GetName() + "+dq+" is now unchecked"+dq+")" + cr
                                    +"        output item:GetName() + "+dq+" is now unchecked"+dq + cr
                                    +"    end" + cr
                                    +"end"))
        bodyDiv:AddParagraph("Now we simply need to go back to the main class and set a CheckBehavior to our Checkbox. This is done with the following lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("CheckBehavior behavior"+ cr + "box:SetBehavior(behavior)"))
        bodyDiv:AddParagraph("Now, when you run the program, activating the Checkbox will make the program say and output that the box was checked. Toggling the Checkbox off will make the program say and output that the box was unchecked.")
        bodyDiv:AddImage("/media/userInterface/Checkbox.png","This image shows the final expected game window with the Checkbox toggled on")

        bodyDiv:AddHeading("Run the Program", 2)
        AddIDE(bodyDiv, "checkboxTutorial","Activity: Checkbox", "Try making a User Interface", "examples/UserInterface/Checkbox/Main.quorum")

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Checkboxes in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Checkboxes"
    end

    action GetName returns text
        return "Checkboxes"
    end

    action GetShortDescription returns text
        return "how to use Checkboxes"
    end

    action GetLocation returns text
        return "tutorials/ui/checkbox.html"
    end
    action GetLinkName returns text
        return "Checkbox"
    end

    action GetSectionName returns text
        return "User Interfaces"
    end
end
