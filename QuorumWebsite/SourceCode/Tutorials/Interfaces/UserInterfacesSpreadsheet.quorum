use Libraries.Web.Page.all
use Libraries.Containers.Array

class UserInterfacesSpreadsheet is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Spreadsheet Tutorial - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Spreadsheet", 1)

        headDiv:AddText("This tutorial tells you how to use Spreadsheets in Quorum")
        bodyDiv:Add(headDiv)
        
        Section section_intro_spreadsheet
        section_intro_spreadsheet:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_intro_spreadsheet, "Introduction to Spreadsheets in Quorum", 2)
        section_intro_spreadsheet:AddParagraph("In Quorum, a Spreadsheet is an interface component that allows for organizing and displaying interactive data in the form of a Table. Although the Spreadsheet does not actually hold the data, like a Tree or MenuBar, the Spreadsheet class is simply a view of the data. The data of a Spreadsheet is stored in Cells which are stored in Columns and Spreadsheets display Columns.")
        AddHeading(section_intro_spreadsheet, "Cells and Columns", 4)
        section_intro_spreadsheet:AddParagraph("The data found in a Spreadsheet is stored in a Cell. A Cell is an interface component that holds Text and can have its own behavior for when the Cell is activated. Cells are what the user can see and interact with in the Game. A Column is another interface tool that is used to organize Cells. When a Cell is added to a Column then that new Cell will be displayed below the previous cell in that column and new will continue to run down vertically. Columns can then be added to a Spreadsheet. Columns run horizontally so a new Column will be to the right of the next one. With Columns added a Spreadsheet can now display data.")
        section_intro_spreadsheet:AddParagraph("We will be making a small four cell spreadsheet in this tutorial. To start, create a new Game Application project.")


        Section section_small_spreadsheet
        section_small_spreadsheet:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_small_spreadsheet, "Making a Small Spreadsheet", 2)
        section_small_spreadsheet:AddParagraph("To use Spreadsheets you will need to include three different use statements. There are three because other than the Spreadsheet library, you will need the Column and Cell Libraries. The three use statements are shown below:")
        section_small_spreadsheet:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.Spreadsheet" + cr
                                        +"use Libraries.Interface.Controls.Column" + cr
                                        +"use Libraries.Interface.Controls.Cell"))
        section_small_spreadsheet:AddParagraph("We will start by making a spreadsheet that only has one Cell. In most cases a Spreadsheet will have more than one Cell but if you know how to add one Cell correctly than you can add as many as you want using the same method.")
        section_small_spreadsheet:AddParagraph("First, you need to declare a Spreadsheet, a Column, and a Cell. Next, we will set the text of the Cell and the position of the Spreadsheet. Lastly, we will Add the Cell to the Column, Add the Column to the Spreadsheet, and then Add the Spreadsheet to the Game. We will also SetFocus to the Spreadsheet to make our application <b>accessible</b>. The following code block shows how to do all of this and the code will be in the CreateGame action:")
        section_small_spreadsheet:Add(preformatter:GeneratePreformattedCode("Spreadsheet sheets" + cr
                                        +"Column colA" + cr
                                        +"Cell cellA_1" + cr + cr
                                        +"cellA_1:SetText("+dq+"A1"+dq+")" + cr
                                        +"sheets:SetPosition(200, 300)" + cr + cr
                                        +"colA:Add(cellA_1)" + cr
                                        +"sheets:Add(colA)" + cr
                                        +"SetFocus(sheets)" + cr
                                        +"Add(sheets)"))
        section_small_spreadsheet:AddParagraph("Now if you run the program there will be a single cell on the screen and the text for the Cell will be  "+dq+"A1"+dq+" Interacting with it you will also notice how Cells can be selected and they can also be activated and run a Behavior which we will do so in the next section. To show Cell behaviors in action we will add 3 more cells and and a Column so the Spreadsheet becomes a 4 by 4 grid. The full main class with the 4 cells is provided in the code block below:")
        CodeBlock mainClass
        Span mainComment1
        Span mainComment2
        Span mainComment3
        Span mainComment4
        mainComment1:SetClassAttribute("comment")
        mainComment2:SetClassAttribute("comment")
        mainComment3:SetClassAttribute("comment")
        mainComment4:SetClassAttribute("comment")
        mainComment1:AddText("    //declarations")
        mainComment2:AddText("    //setting up cells")
        mainComment3:AddText("    //position spreadsheet")
        mainComment4:AddText("    //Add children where needed")
        mainClass:AddText("use Libraries.Game.Game" + cr
                        +"use Libraries.Interface.Controls.Spreadsheet" + cr
                        +"use Libraries.Interface.Controls.Column" + cr
                        +"use Libraries.Interface.Controls.Cell" + cr + cr

                        +"class Main is Game" + cr + cr

                        +"    action Main" + cr
                        +"        StartGame()" + cr
                        +"    end" + cr + cr

                        +"    action CreateGame" + cr)
        mainClass:Add(mainComment1)
        mainClass:AddText(cr +"        Spreadsheet sheets" + cr
                        +"        Column colA" + cr
                        +"        Column colB" + cr
                        +"        Cell cellA1" + cr
                        +"        Cell cellA2" + cr
                        +"        Cell cellB1" + cr
                        +"        Cell cellB2" + cr + cr)
        mainClass:Add(mainComment2)
        mainClass:AddText(cr +"        cellA1:SetText(A1)" + cr
+"        cellA2:SetText("+dq+"A2"+dq+")" + cr
+"        cellB1:SetText("+dq+"B1"+dq+")" + cr
+"        cellB2:SetText("+dq+"B2"+dq+")" + cr + cr)
        mainClass:Add(mainComment3)
        mainClass:AddText(cr +"        sheets:SetPosition(200, 300)" + cr + cr)
        mainClass:Add(mainComment4)
        mainClass:AddText( cr +
                        "        colA:Add(cellA1)" + cr
                        +"        colA:Add(cellA2)" + cr

                        +"        colB:Add(cellB1)" + cr
                        +"        colB:Add(cellB2)" + cr

                        +"        sheets:Add(colA)" + cr
                        +"        sheets:Add(colB)" + cr
                        +"        SetFocus(sheets)" + cr
                        +"        Add(sheets)" + cr
                        +"    end" + cr + cr

                        +"    action Update(number seconds)" + cr
                        +"    end" + cr
                        +"end")
        section_small_spreadsheet:Add(preformatter:GeneratePreformattedCode(mainClass))
                        
        Section section_cell_behavior
        section_cell_behavior:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_cell_behavior, "Cell Behavior", 2)
        Paragraph p_lists
        p_lists:AddText("Spreadsheets also allow to give Cells an activation behavior. This behavior will run when a Cell is double-clicked or with the Spacebar when in focus. Like with ")
        Link link1 = p_lists:AddLink("Lists", "/tutorials/ui/list.html") 
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p_lists:AddText(", Cells can have their own behavior specific to that Cell but the Spreadsheet also has a default Cell Activation Behavior that will Run if the specific Cell being activated does not have its own Behavior. ")
        section_cell_behavior:Add(p_lists)
        section_cell_behavior:AddParagraph("We will make a default Cell Activation Behavior for the Spreadsheet so to start, make a new Quorum class and we will name it "+dq+"OutputBehavior.quorum." + dq)
        section_cell_behavior:AddParagraph("OutputBehavior will need the Cell and Speech Libraries and will override the Run action. In the Run action all that we need is a call to event’s GetItem which we will cast to a Cell object. Then we will then output and then use a speech object to say the Text of the Cell using the Cell’s GetText action. The full behavior is shown in the code block below:")
        section_cell_behavior:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Behaviors.Behavior" + cr
                                            +"use Libraries.Interface.Events.BehaviorEvent" + cr
                                            +"use Libraries.Interface.Controls.Cell" + cr
                                            +"use Libraries.Sound.Speech" + cr + cr

                                            +"class OutputBehavior is Behavior" + cr
                                            +"    action Run(BehaviorEvent event)" + cr
                                            +"        Cell item = cast(Cell, event:GetItem())" + cr
                                            +"        output item:GetText()" + cr
                                            +"        Speech speech" + cr
                                            +"        speech:Say(item:GetText())" + cr
                                            +"    end" + cr
                                            +"end"))
        section_cell_behavior:AddParagraph("With the completed Behavior we can return to the Main class and append to the CreateGame action the declaration for the behavior and then setting the Behavior to the Spreadsheet. This is done with the following lines of code:")
        section_cell_behavior:Add(preformatter:GeneratePreformattedCode("OutputBehavior behavior" + cr+
        "sheets:SetCellActivationBehavior(behavior)"))

        section_cell_behavior:AddParagraph("Now when you run the program, activating a Cell will cause the game to say and output the text of that Cell.")

//        bodyDiv:AddImage("/media/userInterface/Spreadsheet.png","This is an image of the spreadsheet in the game windows with Cell A2 selected.")
        Section section_spreadsheet_and_layouts
        section_spreadsheet_and_layouts:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_spreadsheet_and_layouts, "Spreadsheets and Layouts", 2)
        
        section_spreadsheet_and_layouts:AddParagraph("Spreadsheets are Controls so they have their own LayoutProperties, but if you want to resize or change how the table looks you would do that through the Columns and Cells. By default the Cells are sized to fit the width of the Column and the height of the Font. Columns have a default PixelWidth of 100 and are set to fit the height of its contents. To learn more about sizing with LayoutProperties it is covered in the Layout tutorial, but some example action calls that size the Columns and Cells are given below:")
        section_spreadsheet_and_layouts:Add(preformatter:GeneratePreformattedCode("colA:SetPixelWidth(300)" + cr
                                        +"colB:SetPixelWidth(200)" + cr
                                        +"cellA1:SetPercentageWidth(0.5)" + cr
                                        +"cellB2:SetFontSize(30)"))

        Section section_make_ui
        section_make_ui:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_make_ui, "Try making a User Interface", 2)

        CodeForIDE code1
        code1:AddFileUrl("Spreadsheet.quorum", "/examples/UserInterface/Spreadsheet/Main.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Activity: Spreadsheet")
        section_make_ui:Add(ide)

        bodyDiv:Add(section_intro_spreadsheet)
        bodyDiv:Add(section_small_spreadsheet)
        bodyDiv:Add(section_cell_behavior)
        bodyDiv:Add(section_spreadsheet_and_layouts)
        bodyDiv:Add(section_make_ui)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Spreadsheets in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Spreadsheets"
    end

    action GetName returns text
        return "Spreadsheets"
    end

    action GetShortDescription returns text
        return "how to use Spreadsheets"
    end

    action GetLocation returns text
        return "tutorials/ui/spreadsheet.html"
    end
    action GetLinkName returns text
        return "Spreadsheet"
    end

    action GetSectionName returns text
        return "User Interfaces"
    end
end
