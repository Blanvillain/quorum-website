use Libraries.Web.Page.all
use Libraries.Containers.Array

class UserInterfacesTextBox is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("TextBox Tutorial - Quorum Programming Language")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: TextBox", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: TextBox")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to use TextBoxes in Quorum")
        bodyDiv:Add(headDiv)

        bodyDiv:AddHeading("An Introduction to TextBoxes in Quorum", 2)
        bodyDiv:AddParagraph("In this tutorial, we will learn how to use TextBoxes in the Quorum Game Engine. Textboxes "
                            +"are a simple interface tool that allows users to interact with it by typing text into "
                            +"it. TextBoxes also allow us to manipulate and use the text inside it.")

        bodyDiv:AddParagraph("There is also another interface component that allows the user to input text and that is the
                             <b>TextField</b>. A TextField is similar to a TextBox, but it only allows for input in a single line. 
                             More information on the TextField is provided at the end of this tutorial. ")

        bodyDiv:AddParagraph("For this tutorial, we will create a project with two TextBoxes, and provide "
                            +"Buttons that allow the user to transfer text from one TextBox to the other, "
                            +"a Button to clear the receiving TextBox, and a Button to read aloud from the"
                            +" receiving TextBox. To start, create a new Game Application project.")

        //the section on creating TextBoxes
        bodyDiv:AddHeading("Creating TextBoxes", 2)

        bodyDiv:AddParagraph("For this main class, we will need the TextBox, Button, ManualLayout, and Color libraries."
                            +" We need the ManualLayout library because the game needs a set layout for the textbox"
                            +" to render to the screen, giving us the following use statements:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextBox" + cr
                                                        + "use Libraries.Interface.Controls.Button" + cr
                                                        + "use Libraries.Interface.Layouts.ManualLayout" + cr
                                                        + "use Libraries.Game.Graphics.Color"))

        bodyDiv:AddParagraph("Since we want the TextBoxes and Buttons to be usable as soon as the game begins, all of "
                            + "our additional code in the main class will be in the CreateGame action.")

        bodyDiv:AddParagraph("For this main class, we need to make a Manual Layout variable and set the game's layout to "
                            +"it. We then need a Color variable since we will be using color to differentiate between "
                            +"the two textboxes. This gives us the following lines of code:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("ManualLayout layout" + cr
                                                         +"SetLayout(layout)" + cr
                                                         +"Color color"))
        bodyDiv:AddParagraph("First, we will create a TextBox and add it to the game. We need to set the TextBox's "
                            +"size, background color, text, and position, this is done by using its respective "
                            +"Set functions. Then we add it to the game, giving us the following lines of code:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("TextBox box1" + cr + cr
                                                        +"box1:SetSize(300, 300)" + cr
                                                        +"box1:SetBackgroundColor(color:White())" + cr
                                                        +"box1:SetText("+dq+"Enter text in this TextBox"+dq+")" + cr
                                                        + "box1:SetPosition(100, 280)" + cr
                                                        + "Add(box1)"))

        bodyDiv:AddParagraph("Now, let's create our second TextBox. "
                            + "To distinguish it from the first, we will make this TextBox gray, "
                            + "and will not preset text in it. "
                            + "We will also place it to the right of the first TextBox. This "
                            + "is done with the following lines of code:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("TextBox box2" + cr + cr
                                                        +"box2:SetSize(300, 300)" + cr
                                                        +"box2:SetBackgroundColor(color:Gray())" + cr
                                                        + "box2:SetPosition(400, 280)" + cr
                                                        + "Add(box2)"))
        bodyDiv:AddHeading("Accessibility", 3)
        bodyDiv:AddParagraph("Normally when working with Focus you press Tab and Shift+Tab to move Focus around but a TextBox uses 
                            those keys for indenting text. As our example is now you will not be able to switch Focus from a TextBox. 
                            To change this you could either add another keybinding that will switch focus, or you set the TextBox to 
                            no longer use Tab for indenting. For our example we will do the latter and use Tab for Focus switching 
                            only. We will also change the TextBoxesâ€™ names and make a small focus cycle so you can switch between 
                            both TextBoxes with only the keyboard. This can be done with the following lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                                        "box1:SetName("+dq+"Left Textbox"+dq+")" + cr
                                                        +"box2:SetName("+dq+"Right Textbox"+dq+")" + cr + cr

                                                        +"box1:SetMoveFocusOnTab(true)" + cr
                                                        +"box2:SetMoveFocusOnTab(true)" + cr + cr

                                                        +"box1:SetNextFocus(box2)" + cr
                                                        +"box1:SetPreviousFocus(box2)" + cr
                                                        +"box2:SetNextFocus(box1)" + cr
                                                        +"box2:SetPreviousFocus(box1)"))
        bodyDiv:AddParagraph("We will be adding Buttons to this project so they will be included in the focus cycle as they are added.
                            The final focus cycle will be given later in this tutorial.")

        bodyDiv:AddParagraph("If we build and run the project, we have the two TextBoxes and can type into either. "
                            +"By default, a TextBox can perform certain edit actions, such as copy and paste, with the"
                            +" default keys for your machine. You can copy, paste, select all, undo, and redo.")

        bodyDiv:AddImage("/media/userInterface/TextBoxBegin.png", "This image shows the two TextBoxes in their expected locations.")

        bodyDiv:AddHeading("Adding More Functionality", 2)

        bodyDiv:AddParagraph("Now that we have our TextBoxes, we can add more functionality to them by creating Buttons"
                            +" to clear and read the text in the second box. The TextBox has actions for adding, appending,"
                            +" and inserting text, to name a few, but for this tutorial we will focus on emptying, "
                            +"setting, and getting the text of a TextBox. ")
        bodyDiv:AddParagraph("First, we will create a Behavior for each Button"
                            + ", creating a new Quorum class for each. We will name these "
                             + dq + "ClearBehavior.quorum," + dq + " " + " and " + dq + "SayBehavior.quorum." + dq)

        bodyDiv:AddParagraph("The ClearBehavior class is a Behavior that uses one TextBox, so we will "
                            +"need the libraries for TextBox, Behavior, and BehaviorEvent. We will"
                            +" create a TextBox class variable, which is undefined. Thus, we "
                            +"have an action to set the TextBox to the one in our main class. "
                            +"This class will use the Empty action, which clears the TextBox of any "
                            +"pre-existing text. The class is as follows:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextBox" + cr
                                                        + "use Libraries.Interface.Behaviors.Behavior" + cr
                                                        + "use Libraries.Interface.Events.BehaviorEvent" + cr + cr
                                                        + "class ClearBehavior is Behavior" + cr + cr
                                                        + "    TextBox box = undefined" + cr + cr
                                                        + "    action SetTextBoxes(TextBox sourceBox)" + cr
                                                        + "        box = sourceBox" + cr
                                                        + "    end" + cr + cr
                                                        + "    action Run(BehaviorEvent behavior)" + cr
                                                        + "        if box not= undefined" + cr
                                                        + "            box:Empty()" + cr
                                                        + "        end" + cr
                                                        + "    end" + cr
                                                        + "end"))

        bodyDiv:AddParagraph("The SayBehavior class similarly needs the TextBox, Behavior, and BehaviorEvent libraries,"
                            + " as well as the Speech library. The SetTextBoxes action is identical to the same action in the ClearBehavior class. "
                            + "In its Run action, we will create a Speech object and call the Say action. For the text "
                            + "parameter, we will use the TextBox's GetText action. The complete SayBehavior class is as follows:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextBox" + cr
                                                        + "use Libraries.Interface.Behaviors.Behavior" + cr
                                                        + "use Libraries.Sound.Speech" + cr
                                                        + "use Libraries.Interface.Events.BehaviorEvent" + cr + cr
                                                        + "class SayBehavior is Behavior" + cr + cr
                                                        + "    TextBox box = undefined" + cr + cr
                                                        + "    action SetTextBoxes(TextBox sourceBox)" + cr
                                                        + "        box = sourceBox" + cr
                                                        + "    end" + cr + cr
                                                        + "    action Run(BehaviorEvent behavior)" + cr
                                                        + "        if box not= undefined" + cr
                                                        + "            Speech speech" + cr
                                                        + "            speech:Say(box:GetText(), false)" + cr
                                                        + "            output box:GetText()" + cr
                                                        + "        end" + cr
                                                        + "    end" + cr
                                                        + "end"))

        bodyDiv:AddParagraph("Now that our Behavior classes are completed, we can return to the main class and create "
                            + "the Behavior objects for each, as well as set our TextBoxes for each. Our Behavior declarations are as follows:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("ClearBehavior clearBehavior" + cr
                                                        + "clearBehavior:SetTextBoxes(box2)" + cr
                                                        + "SayBehavior sayBehavior" + cr
                                                        + "sayBehavior:SetTextBoxes(box2)"))
        
        bodyDiv:AddParagraph("Next, we need to create our Buttons, set their respective Behaviors, and add them to the game. This is done 
                                through the following lines of code:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("Button clearButton" + cr
                                                        + "clearButton:SetName("+dq+"Clear Text"+dq+")" + cr
                                                        + "clearButton:SetPosition(475, 200)" + cr
                                                        + "clearButton:SetBehavior(clearBehavior)" + cr
                                                        + "Add(clearButton)" + cr + cr
                                                        + "Button readButton" + cr
                                                        + "readButton:SetName("+dq+"Read Text"+dq+")" + cr
                                                        + "readButton:SetPosition(475, 160)" + cr
                                                        + "readButton:SetBehavior(sayBehavior)" + cr
                                                        + "Add(readButton)"))


        bodyDiv:AddParagraph("Now, when the program is run, we can "
                            + "clear the right box, or read the "
                            + "right box's text aloud.")

//        bodyDiv:AddImage("/media/userInterface/textBoxMiddle.png", "This image shows the TextBoxes with the first four buttons.")

        bodyDiv:AddHeading("The TextBoxSelection Class", 2)

        bodyDiv:AddParagraph("For the final additions to our program, we will use the TextBoxSelection class. "
                            + "The TextBoxSelection's main purpose is holding the start and end indices for the selection. For "
                            + "example, if the full TextBox holds " + dq + "Hello world!" + dq + " and the selection is " + dq
                            + "world" + dq + " then the start index is 6 and the end index is 11.")

        bodyDiv:AddParagraph("Before we create a Button for transferring the selected text, let's create the "
                            + "Behavior class for it. We will name it "
                            + dq + "TransferSelectionBehavior.quorum." + dq)

        bodyDiv:AddParagraph("The TransferSelectionBehavior class will need the libraries for TextBox, Behavior, BehaviorEvent, "
                            + "and TextBoxSelection, giving the following use statements:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextBox" + cr
                                                        + "use Libraries.Interface.Behaviors.Behavior" + cr
                                                        + "use Libraries.Interface.Events.BehaviorEvent" + cr
                                                        + "use Libraries.Interface.Selections.TextBoxSelection"))

        bodyDiv:AddParagraph("The class itself will inherit the Behavior class. We will also need two TextBox class "
                            + "variables, an action to set those TextBoxes, and we will override the Run action.")

        bodyDiv:AddParagraph("This Run action will check if box1 and box2 are defined, and then we need to create a TextBoxSelection "
                            +"variable and set it equal to box1's internal selection, using the TextBox's GetSelection action. "
                            +"Then we will get the selection's start and end indices to get the text from box1 in between those indices. "
                            +"To do this, we will use the TextBoxSelection's GetStartIndex and GetEndIndex actions.") 
        bodyDiv:AddParagraph("Here is the full TransferSelectionBehavior class:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextBox" + cr
                                                        + "use Libraries.Interface.Behaviors.Behavior" + cr
                                                        + "use Libraries.Interface.Events.BehaviorEvent" + cr
                                                        + "use Libraries.Interface.Selections.TextBoxSelection" + cr + cr
                                                        + "class TransferSelectionBehavior is Behavior" + cr + cr
                                                        + "    TextBox box1 = undefined" + cr
                                                        + "    TextBox box2 = undefined" + cr + cr
                                                        + "    action SetTextBoxes(TextBox sourceBox, TextBox receiveBox)" + cr
                                                        + "        box1 = sourceBox" + cr
                                                        + "        box2 = receiveBox" + cr
                                                        + "    end" + cr + cr
                                                        + "    action Run(BehaviorEvent behavior)" + cr
                                                        + "        if box1 not= undefined and box2 not= undefined" + cr
                                                        + "            TextBoxSelection selection = box1:GetSelection()" + cr
                                                        + "            text subtext = box1:GetText(selection:GetStartIndex(), selection:GetEndIndex())" + cr
                                                        + "            box2:SetText(subtext)" + cr
                                                        + "        end" + cr
                                                        + "    end" + cr
                                                        + "end"))

        bodyDiv:AddParagraph("With our Behavior classes completed, we can now return to the main class. Adding to our "
                            + "CreateGame action, we merely need to create a new Button and give it our new "
                            + "Behavior. This adds the following code to the CreateGame action:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("TransferSelectionBehavior transferSelectionBehavior" + cr
                                                        + "transferSelectionBehavior:SetTextBoxes(box1, box2)" + cr + cr
                                                        + "Button transferSelection" + cr
                                                        + "transferSelection:SetName("+ dq + "Transfer Selection" + dq + ")" + cr
                                                        + "transferSelection:SetPosition(475, 110)" + cr
                                                        + "transferSelection:SetBehavior(transferSelectionBehavior)" + cr
                                                        + "Add(transferSelection)"))


        bodyDiv:AddParagraph("Now if you were to run the program, you can select text from the left TextBox, either with your mouse or by holding"
                            +" shift and using the arrow keys, and transfer that text to the right TextBox.")

        bodyDiv:AddHeading("Additonal Features", 2)
        bodyDiv:AddHeading("Gutters", 3)
        bodyDiv:AddParagraph("TextBoxes in Quorum also support Gutters. A Gutter is an additional margin of space added to the layout of a TextBox"
                            +" that runs along the left side of the text. One of the most common Gutters you will see is a Line Number Gutter, which"
                            +" you find in almost every IDE. A Line Number Gutter runs along the left side of text and on every line, there is a number"
                            +" that represents the row the text is on. Quorum has a default Line Number Gutter class that we can easily add to our "
                            +"TextBox, so we'll start by adding the following library to our main class:")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.LineNumberGutter"))

        bodyDiv:AddParagraph("Now all we have to do is go to our CreateGame action and make the Gutter object and add it our box. This is done with"
                            +" the following lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("LineNumberGutter gutter" + cr
                                                        + "box1:Add(gutter)"))

        bodyDiv:AddParagraph("Now, when we run the program, you will notice that on the first box, next to every line of text there"
                            +" is a number that indicates what line the text is in.")

        bodyDiv:AddParagraph("LineNumberGutters are not the only type of gutters that exist; you can also create custom gutters. Gutters also support "
                            +"having an action occur when you click on them. In an IDE, for example, you might click on the line number gutter to put a breakpoint "
                            +"on that line for debugging purposes. Making a custom Gutter with custom Behaviors is beyond the scope of this tutorial, "
                            +"but it is useful the know the customizability allowed by Quorum's TextBox Gutters.")
        
        bodyDiv:AddHeading("TextStyles", 3)

        bodyDiv:AddParagraph("TextBoxes in Quorum also support TextStyles, which allow you stylize and add character to the text in a TextBox. To show "
                            +"how you can add a TextStyle to a TextBox, we will make a Behavior, which we will associate with a Button, that will take "
                            +"what is being selected in a text box and turn that text Red and Underline it. To start, we will make a new class called "
                            + dq +"StyleBehavior.quorum." + dq)

        bodyDiv:AddParagraph("This Behavior will use the same libraries as our TransferSelctionBehavior, but with the TextStyle, TextUnderline, and Color "
                            +"libraries added on. Like our previous Behaviors, we also need a SetTextBoxes action to get the TextBox from our main, giving "
                            +"us the following template:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                                         "use Libraries.Interface.Controls.TextBox" + cr
                                                        +"use Libraries.Interface.Behaviors.Behavior" + cr
                                                        +"use Libraries.Interface.Events.BehaviorEvent" + cr
                                                        +"use Libraries.Interface.Selections.TextBoxSelection" + cr
                                                        +"use Libraries.Interface.Controls.TextStyles.TextStyle" + cr
                                                        +"use Libraries.Interface.Controls.TextStyles.TextUnderline" + cr
                                                        +"use Libraries.Game.Graphics.Color" + cr + cr
                                                        +"class StyleBehavior is Behavior" + cr
                                                        +"    TextBox box = undefined" + cr + cr
                                                        +"    action SetTextBoxes(TextBox Box)" + cr
                                                        +"        box = Box" + cr
                                                        +"    end" + cr + cr
                                                        +"    action Run(BehaviorEvent behavior)" + cr
                                                        +"        if box not= undefined" + cr
                                                        +"        end" + cr
                                                        +"    end" + cr
                                                        +"end"
                                                        ))

        bodyDiv:AddParagraph("To start, the Run action will get the selection from the TextBox so we know what text to stylize. We also need to "
                            +"create our TextStyle, TextUnderline, and Color objects. After those objects are created, we can start customizing our "
                            +"TextStyle. TextStyles have actions for setting the color of text, two for text that is selected and while not selected, and "
                            +"for setting a highlight. The highlight we will use for our style is the TextUnderline Highlight. Highlights are objects that "
                            +"are drawn with the text. While Quorum also has the ColoredHighlight class "
                            +"and allows you to make your own, a custom highlight is beyond the scope of this tutorial.")

        bodyDiv:AddParagraph("With the style made, now we need to set where the TextStyle will go into effect. To accomplish this, we will use the TextBoxSelection"
                            +" to get where the selection starts and set the style to start at that index. A TextStyle also has a size which signifies how "
                            +"many characters the style has effect over. To find the size, we will simply subtract the StartIndex of the selection from the EndIndex.")

        bodyDiv:AddParagraph("Now that the style is done, we can now add it to the TextBox using the AddTextStyle action, which also needs a name for the style, which "
                            +"we will call "+dq+"under."+dq+" We will also call the Resize action to update the TextBox so you can immediately see the style"
                            +" change when activating the Button. The code in the run class will look like this:")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                                        "TextBoxSelection selection = box:GetSelection()" + cr
                                                       +"TextStyle style" + cr
                                                       +"TextUnderline highlight" + cr
                                                       +"Color color" + cr + cr
                                                       +"style:SetColor(color:Red())" + cr
                                                       +"style:SetSelectionColor(color:Red())" + cr
                                                       +"style:SetHighlight(highlight)" + cr + cr
                                                       +"style:SetIndex(selection:GetStartIndex())" + cr
                                                       +"style:SetSize(selection:GetEndIndex() - selection:GetStartIndex())" + cr
                                                       +"box:AddTextStyle("+dq+"under"+dq+", style)" + cr
                                                       +"box:Resize()" + cr
                                                       ))

        bodyDiv:AddParagraph("Now, we will go back to the main class and create a Button with the Behavior we just made. "
                            +"The code for this is as follows:")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                                        "Button styleSelect" + cr
                                                       +"styleSelect:SetName("+dq+"Style Selection"+dq+")" + cr
                                                       +"styleSelect:SetPosition(475, 80)" + cr
                                                       +"styleSelect:SetBehavior(styleBehavior)" + cr
                                                       +"Add(styleSelect)" + cr
                                                       ))
        bodyDiv:AddParagraph("Now that we have all of our Buttons we can add our finished Focus Cycle that includes all of the Buttons. The Focus cycle is giving in the
                            following lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                                        "box1:SetNextFocus(box2)" + cr
                                                        +"box1:SetPreviousFocus(styleSelect)" + cr
                                                        +"box2:SetNextFocus(clearButton)" + cr
                                                        +"box2:SetPreviousFocus(box1)" + cr
                                                        +"clearButton:SetNextFocus(readButton)" + cr
                                                        +"clearButton:SetPreviousFocus(box2)" + cr
                                                        +"readButton:SetNextFocus(transferSelection)" + cr
                                                        +"readButton:SetPreviousFocus(clearButton)" + cr
                                                        +"transferSelection:SetNextFocus(styleSelect)" + cr
                                                        +"transferSelection:SetPreviousFocus(readButton)" + cr
                                                        +"styleSelect:SetNextFocus(box1)"+ cr
                                                        +"styleSelect:SetPreviousFocus(transferSelection)"))
        bodyDiv:AddParagraph("Now, when we run the program, we can select text in the first TextBox and click our Style Button, and the text"
                            +" turns red and becomes underlined. Also note that if you type inside the styled text zone, the new text will retain that style. ")
        bodyDiv:AddImage("/media/userInterface/TextBoxFinal.png", "This image shows the final expected game window with the word Enter stylized in the left TextBox.")

        bodyDiv:AddHeading("TextFields", 2)
        bodyDiv:AddParagraph("Quorum has an interface element similar to a TextBox except it is made for single line 
                            input only known as a TextField. TextFields can be helpful if your GUI needs a short text input. 
                            All the additional features that TextBoxes provide, like multiple lines, gutters, and styles can become 
                            unnecessary if the user needs to input a simple line of text like a File name. 
                            The TextField will function just like the TextBox,
                            but the additional features in TextBoxes are not present in the TextField class.")
        bodyDiv:AddParagraph("To use a TextField you will need to include the following use statement:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Interface.Controls.TextField"))
        bodyDiv:AddParagraph("To add one to your game you can do so with the following lines of code:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
                                        "ManualLayout layout" + cr
                                        +"SetLayout(layout)" + cr + cr
                                        +"TextField textField" + cr
                                        +"textField:SetSize(250, 20)" + cr
                                        +"textField:SetPosition(100, 200)" + cr
                                        +"Add(textField)"))
        bodyDiv:AddParagraph("Notice that a TextField can be sized and positioned like a TextBox, but remember that the input 
                            will only ever be one line in height so take that into account when adjusting the height of the TextField. 
                            Also note that there was ManualLayout set. Like a TextBox, a TextField needs its container to have 
                            ManualLayout set for it to work and render to the screen. ")
        bodyDiv:AddParagraph("The TextField also has its own selection class and actions for setting and getting text. 
                            Getting and setting text in a TextField is the same as in TextBox, to learn how to use those actions you 
                            can refer to where we do that in this tutorial with TextBoxes and Buttons, the only difference being that 
                            the object calling the action becomes a TextField instead of a TextBox.")
        

        bodyDiv:AddHeading("Run the Program", 2)
        AddIDE(bodyDiv, "textBoxTutorial","Activity: TextBox", "Try making a User Interface", "examples/UserInterface/TextBox/Main.quorum")

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about TextBoxes in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "TextBoxes"
    end

    action GetName returns text
        return "TextBoxes"
    end

    action GetShortDescription returns text
        return "how to use TextBoxes"
    end

    action GetLocation returns text
        return "tutorials/ui/textBox.html"
    end
    action GetLinkName returns text
        return "TextBox"
    end

    action GetSectionName returns text
        return "User Interfaces"
    end
end
