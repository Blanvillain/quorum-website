use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class Physics2DForceAndVelocityTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Physics Force and Velocity In 2D - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Physics Force and Velocity In 2D", 1)
        headDiv:AddText("Understanding force and velocity in a 2D physics enabled Quorum game")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //the section on general information
        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph( "")
        bodyDiv:AddText     ("In this tutorial, we will discover new physics concepts by making a platformer game. "
                            +   "Our goal is to propel a character represented by a ball forward through a series of platforms. "
                            +   "We will do this using the concept of ")
        bodyDiv:AddLink(    "force", "https://en.wikipedia.org/wiki/Force")
        bodyDiv:AddText(    " which we can control in various ways. "
                            +   "We will also need linear ")
        bodyDiv:AddLink(    "velocity", "https://en.wikipedia.org/wiki/Velocity")
        bodyDiv:AddText(    ". "
                            +   "Linear velocity propels our character forward and forces can be used for jumping. "
                            +   "To make platforms, we will use a concept that we call NonResponsiveness, which was mentioned in the ")
        bodyDiv:AddLink(    "gravity tutorial", "/tutorials/physics/gravity2D.html")
        bodyDiv:AddText(    ". To use these ideas, we need a special concept from math: ")
        bodyDiv:AddLink("vectors", "https://en.wikipedia.org/wiki/Euclidean_vector")
        bodyDiv:AddText(". ")

        //the section on Vectors
        bodyDiv:AddHeading("Vectors", 2)
        bodyDiv:AddParagraph("In math, a vector is like a line starting at a point and continuing out in one direction. "
                            +   "It has a magnitude (length) and a direction. "
                            +   "When we are using these for forces, we can look at the direction as being the direction we want the force to push towards and the magnitude as how strong the force is. "
                            +   "When we are using these for linear velocity, we can look at the direction as being the direction the object will move in and the magnitude as how fast it will move. "
                            +   "In Quorum for 2-dimensional games, we handle all of the details of vectors for you using a special class called Vector2. "
                            +   "First we need to add a use statement to the top of the program: ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Compute.Vector2"))                    
        bodyDiv:AddParagraph(   "We can then set a Vector2 object like this: ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "number X = 0" + cr
                                                            + "number Y = -10" + cr
                                                            + "myVector:Set(X , Y)"))
        bodyDiv:AddParagraph(   "This might look familiar to how we set gravity. In fact, gravity is represented in the system using a Vector2. "
                            +   "The X value represents the direction and amount of force applied horizontally per second. "
                            +   "The Y is the same for vertical force. An example of how to think about this is gravity. "
                            +   "Gravity pushes objects down, so we set the Y value to be a negative number. "
                            +   "It does not push objects horizontally, so the X was set to 0. Gravity can be set using a Vector2 object as well: ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Vector2 gravity" + cr + "gravity:Set(0 , -10)" + cr + "SetGravity2D(gravity)"))
        
        //the section on linear velocity
        bodyDiv:AddHeading("Linear Velocity", 2)

        bodyDiv:AddParagraph("To give the character a continuous push forward, we need to set their linear velocity, and to do this, we need to create and set a Vector2 object. "
                            +   "In the example code here, we want the character to move horizontally across the screen from left to right, so the X is set to a positive number. "
                            +   "We don’t want them to have vertical movement unless it’s from the force of a jump or gravity. "
                            +   "The Y is set to 0. "
                            +   "Once we have the Vector2 setup, we can set the linear velocity of the character: ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Vector2 linearVelocity" + cr
                                                            +   "number X = 5" + cr
                                                            +   "number Y = 0" + cr
                                                            +   "linearVelocity:Set(X, Y)" + cr
                                                            +   "character:SetLinearVelocity(linearVelocity)" + cr))
        bodyDiv:AddParagraph(   "Now the linear velocity will be applied to the character. "
                            +   "We can think of this as how much the character will move each second. "
                            +   "Note that the linear velocity is affected by forces, friction, gravity, and other physics properties. ")
        
        //the section on angular velocity
        bodyDiv:AddHeading("Angular Velocity", 2)

        bodyDiv:AddParagraph( "")
        bodyDiv:AddText(    "If we want an item to rotate, we can do this with ")
        bodyDiv:AddLink(    "angular velocity", "https://en.wikipedia.org/wiki/Angular_velocity")
        bodyDiv:AddText(    ". We can set it using:")
        bodyDiv:AddParagraph("")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "number angularVelocity = 20" + cr
                                                            +   "character:SetAngularVelocity(angularVelocity)"))
        bodyDiv:AddParagraph(   "angularVelocity is a number representing the amount of rotation per second. "
                            +   "Like linear velocity, it is applied to the character continuously, but can be affected by torque, friction, and other physics properties. "
                            +   "If angularVelocity is a positive number, the spin will be counterclockwise, and if it is a negative number, the spin will be clockwise. "
                            +   "Note that the rotations are about the item’s center. ")

        //the section on Force
        bodyDiv:AddHeading("Force", 2)

        bodyDiv:AddParagraph( "We used force previously when we added gravity, but forces can be used for much more than gravity. "
                            +   "Forces can be made to push responsive objects in any direction with varying degrees of strength by setting the Vector2 appropriately. "
                            +   "After we have a Vector2 object created and set, we can apply force in two ways. "
                            +   "The first way to apply a force to an object is using the ApplyForceToCenter action. "
                            +   "This action applies all of the force to the center of the object. ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Vector2 force" + cr
                                                            +   "force:Set(200, 5100)" + cr
                                                            +   "itemName:ApplyForceToCenter(force)"))
        bodyDiv:AddParagraph(   "The second way is to use the ApplyForce action which takes two Vector2 objects instead of one. "
                            +   "The first is the force vector, and the second is the point the force will be applied to (represented by a Vector2 object.) "
                            +   "The point should be a position on the screen that we want to apply the force from. "
                            +   "For example, if we want to use this action to apply force to the center of the object we need to set the x and y variables of the point to be the same as the position of the center of the object. "
                            +   "Note that this is different in 3D physics where the point represents displacement from the center of the object.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Vector2 point" + cr
                                                            + "point:Set(0, 0)" + cr
                                                            + "itemName:ApplyForce(force, point)"))
        bodyDiv:AddParagraph("This action is useful when the force needs to hit the object at a particular spot. "
                            +   "Additionally, if a force is not applied to the center of the object, a torque will be introduced, causing the object to rotate. ")
        
         //the section on Force
        bodyDiv:AddHeading("Torque", 2)

        bodyDiv:AddParagraph( "") 
        bodyDiv:AddLink(    "Torque", "https://en.wikipedia.org/wiki/Torque")
        bodyDiv:AddText(    " is the angular component of a force, which means applying it will make the item spin. "
                            +   "We can apply torque manually using: ")
        bodyDiv:AddParagraph("")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "number torque = 2000" + cr
                                                            + "itemName:ApplyTorque(torque)"))
        bodyDiv:AddParagraph(   "torque is a number representing how much spin we want to apply to an item. "
                            +   "The difference between torque and angular velocity is the same as the difference between force and linear velocity. "
                            +   "Force is a one time push, while linear velocity is the current speed. "
                            +   "Applying torque is like giving the item a one time push to start it spinning, while angular velocity is the current amount of rotations per second applied continuously. "
                            +   "If torque is a positive number, the item will spin counterclockwise, and if torque is a negative number, the item will spin clockwise. ")
 
        //the section on other method of movement
        bodyDiv:AddHeading("Movement Outside of Physics", 2)

        bodyDiv:AddParagraph( "")
        bodyDiv:AddText("If we want to move an item without using physics, and without affecting the physics system, we can use Move(), SetRotation(), or SetPosition(). "
                            +   "These actions are described in more detail in the ") 
        bodyDiv:AddLink(    "Animation in 2D", "/tutorials/games/animation2D.html")
        bodyDiv:AddText(    " tutorial. "
                            +   "Using these will leave velocities and forces intact upon arrival at the designated spot, but will also bypass the collision detection system and forces like gravity on the way.")
        bodyDiv:AddParagraph("")
                            
         //the section on Orthographic Camera
        bodyDiv:AddHeading("Orthographic Camera", 2)

        bodyDiv:AddParagraph("")
        bodyDiv:AddText("The orthographic camera is a 2D camera that may be helpful with physics. "
                            +   "In 3D, this camera would take a 3D space and convert it to 2D, but it is not necessary to worry about this aspect in 2D. "
                            +   "So far we have done everything using pixels to determine distance. "
                            +   "With the orthographic camera, we can zoom the screen into however many pixels we want, with these pixels spread over the size of the game window. "
                            +   "It might be helpful to go over the ")
        bodyDiv:AddLink(    "Camera Tutorial", "/tutorials/games/cameras.html")
        bodyDiv:AddText(    " before trying this. "
                            +   "First, we need to add a use statement for the proper library. ")
        bodyDiv:AddParagraph("")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.OrthographicCamera"))
        bodyDiv:AddParagraph(   "Now in the CreateGame() action, we need to: create an OrthographicCamera object, set the camera to put the screen in X and Y number of pixels, then use SetCamera2D to set the camera to the one we made. ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "OrthographicCamera camera" + cr 
                                                            + "number X = 30" + cr
                                                            + "number Y = 30" + cr
                                                            + "camera:SetToOrthographic(X , Y)" + cr 
                                                            + "SetCamera2D(camera)"))
        bodyDiv:AddParagraph(   "Since the orthographic camera works by zooming in the screen to the number of pixels (X and Y) that we set, this will affect our vectors and shapes, because they will be zoomed in. "
                            +   "Notably, circles will need to be scaled down from a larger size to a size that makes sense on the screen to maintain the same resolution or picture quality. ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "character:LoadFilledCircle(30, color:Blue())" + cr + "character:Scale(1.5/30)"))
        bodyDiv:AddParagraph(   "Using the orthographic camera can help make the numbers a little more intuitive. "
                                +   "For example with a 30 by 30 pixel orthographic camera, we can think of these 30 pixels (expanded to fit the typical game screen) as each representing one meter. "
                                +   "The point of this is to make the numbers we set for things like shapes and force a little easier to think about. ")                   

        //the section containing the platformer game code
        bodyDiv:AddHeading("Code", 2)

        bodyDiv:AddParagraph("")
        bodyDiv:AddText(    "Here is a ")
        bodyDiv:AddLink(    "zip file" , "/files/games/Force2D.zip" )
        bodyDiv:AddText(    " with a Quorum project using this code. "
                            +   "Read through, then use the following code to discover forces and linear velocity. ")
        bodyDiv:AddParagraph("")

        CodeBlock cb1
        Span s1 
        Span s2 
        Span s3 
        Span s4 
        Span s5 
        Span s6 
        Span s7
        Span s8
        Span s9
        Span s10
        Span s11
        cb1:AddText("use Libraries.Game.Game" + cr 
                    +   "use Libraries.Game.Graphics.Drawable"+ cr 
                    +   "use Libraries.Compute.Vector2" + cr 
                    +   "use Libraries.Game.Graphics.Color" + cr 
                    +   "use Libraries.Interface.Events.KeyboardListener" + cr 
                    +   "use Libraries.Interface.Events.KeyboardEvent" + cr
                    +   "use Libraries.Game.Graphics.OrthographicCamera" + cr
                    +   "use Libraries.Interface.Events.CollisionListener2D" + cr
                    +   "use Libraries.Interface.Events.CollisionEvent2D" + cr
                    +   "use Libraries.Sound.Audio" + cr + cr)
        cb1:AddText("class Main is Game, KeyboardListener, CollisionListener2D" + cr + cr
                    +   "   boolean platformMovesUp = false" + cr
                    +   "   number totalSeconds = 0.0" + cr + cr
                    +   "   Drawable platformRight" + cr
                    +   "   Drawable platformLeft" + cr
                    +   "   Drawable character" + cr
                    +   "   Vector2 gravity" + cr 
                    +   "   Vector2 linearVelocity" + cr 
                    +   "   Vector2 jump" + cr
                    +   "   Color color" + cr + cr 
                    +   "   Audio jumpSound" + cr
                    +   "   Audio impactSound"  + cr
                    +   "   Audio platformSound" + cr + cr
                    +   "   action Main" + cr 
                    +   "       StartGame()" + cr 
                    +   "   end" + cr + cr
                    +   "   action CreateGame" + cr)
        s8:AddText("    // We want to think of the screen as a 30 by 30 meter area." + cr)
        s8:AddClassAttribute("comment")
        cb1:Add(s8)
        cb1:AddText("       OrthographicCamera camera" + cr
                    +   "       camera:SetToOrthographic(30, 30)" + cr
                    +   "       SetCamera2D(camera)" + cr + cr
                    +   "       AddCollisionListener(me)" + cr
                    +   "       AddKeyboardListener(me)" + cr
                    +   "       EnablePhysics2D(true)" + cr + cr
                    +   "       platformLeft:SetName(" + dq + "platformLeft" + dq +")" + cr
                    +   "       platformLeft:LoadFilledRectangle(13, 2, color:Green())" + cr
                    +   "       platformLeft:SetPosition(0, 9)" + cr
                    +   "       Add(platformLeft)" + cr
                    +   "       platformLeft:EnablePhysics(true)" + cr
                    +   "       platformLeft:SetNonResponsive()" + cr + cr
                    +   "       platformRight:SetName(" + dq + "platformRight" + dq + ")" + cr
                    +   "       platformRight:LoadFilledRectangle(13, 2, color:Green())" + cr
                    +   "       platformRight:SetPosition(17, 10)" + cr
                    +   "       Add(platformRight)" + cr
                    +   "       platformRight:EnablePhysics(true)" + cr
                    +   "       platformRight:SetNonResponsive()" + cr + cr
                    +   "       character:SetName(" + dq + "character" + dq + ")" + cr
                    +   "       character:LoadFilledCircle(30, color:Blue())" + cr
                    +   "       character:Scale(1.5/30)" + cr
                    +   "       character:SetPosition(0, 11)" + cr
                    +   "       Add(character)" + cr
                    +   "       character:EnablePhysics(true)" + cr
                    +   "       character:SetResponsive()" + cr + cr
                    +   "       linearVelocity:Set(5, 0)" + cr
                    +   "       character:SetLinearVelocity(linearVelocity)" + cr + cr
                    +   "       jump:Set(50, 800)" + cr
                    +   "       gravity:Set(0, -9)" + cr
                    +   "       SetGravity2D(gravity)" + cr + cr
                    +   "       jumpSound:Load(" + dq + "media/Fwip.ogg" + dq + ")" + cr
                    +   "       impactSound:Load(" + dq + "media/Boing.ogg" + dq + ")" + cr
                    +   "       platformSound:Load(" + dq + "media/Bing.ogg" + dq + ")" + cr + cr
                    +   "       jumpSound:SetVolume(0.5)" + cr
                    +   "       impactSound:SetVolume(0.4)" + cr
                    +   "   end" + cr + cr
                    +   "   action Update(number seconds)" + cr
                    +   "       totalSeconds = totalSeconds + seconds" + cr)
        s1:AddText( "   // These if statements make a threshold of how far up and down the platform can travel" + cr)
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("       if platformRight:GetY() > 24" + cr
                    +   "           platformMovesUp = false" + cr
                    +   "       end" + cr
                    +   "       if platformRight:GetY() <= 3" + cr
                    +   "           platformMovesUp = true" + cr
                    +   "       end" + cr )
        s2:AddText( "   // The platform moves either up or down" + cr)
        s2:SetClassAttribute("comment")
        cb1:Add(s2)
        cb1:AddText("       if totalSeconds  >= 0.01" + cr
                    +   "           if platformMovesUp" + cr
                    +   "               platformRight:MoveY(0.08)" + cr
                    +   "           else" + cr
                    +   "               platformRight:MoveY(-0.08)" + cr
                    +   "           end" + cr
                    +   "           totalSeconds = 0" + cr
                    +   "       end" + cr)
        s3:AddText("   /*" + cr
                    +   "       To make the game endless, we move our character back to the left side " + cr
                    +   "       of the screen after he goes off the right side. " + cr
                    +   "   */" + cr)
        s3:SetClassAttribute("comment")
        cb1:Add(s3)
        cb1:AddText("       if (character:GetX() >= 30)" + cr
                    +   "           character:SetPosition(-1, character:GetY())" + cr)
        s4:AddText("   /*" + cr
                    +   "       We set the height of the left platform to be the right platform's height so that it " + cr
                    +   "       seems like our character is continuing on the same platform as the one they were on" + cr
                    +   "       when they went off the right side. " + cr
                    +   "   */" + cr)
        s4:SetClassAttribute("comment")
        cb1:Add(s4)
        cb1:AddText("           platformLeft:SetY(platformRight:GetY())" + cr)
        s5:AddText("    //  This math causes the height of the right platform to cycle through some different options." + cr)
        s5:SetClassAttribute("comment")
        cb1:Add(s5)
        cb1:AddText("           platformRight:SetY((platformRight:GetY()mod 19) + 11)" + cr
                    +   "           totalSeconds = 0" + cr)
        s6:AddText("    // The platform switches directions when we go to a new screen. " + cr)
        s6:SetClassAttribute("comment")
        cb1:Add(s6)
        cb1:AddText("           platformMovesUp = true not= platformMovesUp" + cr 
                    +   "       end" + cr)
        s9:AddText("    // The platform sound changes depending on how close the two platforms are to each other. " + cr)
        s9:SetClassAttribute("comment")
        cb1:Add(s9)
        cb1:AddText("       platformSound:SetY(platformRight:GetY() - platformLeft:GetY())" + cr
                    +   "       platformSound:Play()" + cr
                    +   "   end" + cr + cr
                    +   "   action PressedKey(KeyboardEvent event)" + cr)
        s7:AddText("        // When space is pressed, the circle jumps!" + cr)
        s7:AddClassAttribute("comment")
        cb1:Add(s7)
        cb1:AddText("       if event:keyCode = event:SPACE" + cr
                    +   "           character:ApplyForceToCenter(jump)" + cr
                    +   "           jumpSound:Play()" + cr
                    +   "       end" + cr)
        s10:AddText("       // The ball will spin counterclockwise when the left arrow key is pressed." + cr)
        s10:AddClassAttribute("comment")
        cb1:Add(s10)
        cb1:AddText("       if event:keyCode = event:LEFT" + cr
                    +   "           character:ApplyTorque(2000)" + cr
                    +   "       end" + cr)
        s11:AddText("   /*" + cr
                    +   "       The ball will spin clockwise when the right arrow key is pressed. If the ball was already " + cr
                    +   "       spinning counterclockwise, then pressing the right arrow key will cause it to slow its spinning." + cr
                    +   "   */" + cr)
        s11:AddClassAttribute("comment")
        cb1:Add(s11)
        cb1:AddText("       if event:keyCode = event:RIGHT" + cr
                    +   "           character:ApplyTorque(-2000)" + cr
                    +   "       end" + cr
                    +   "   end" + cr + cr 
                    +   "   action BeginCollision(CollisionEvent2D event)" + cr
                    +   "       impactSound:Play()" + cr
                    +   "   end" + cr
                    +   "end" + cr + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))

        //the section on running the program
        bodyDiv:AddHeading("Run the Program", 2)
        bodyDiv:AddParagraph(   "If we run this game, we should have a ball on a platform on the left side of the screen with a moving platform on the right. "
                                +   "The ball will be moving towards the right side of the screen at a constant pace. "
                                +   "The space bar can be used to jump to make sure the ball makes it to the right platform. ")
        AddIDE(bodyDiv, "forceVelocity2D","Activity: Force and Velocity 2D", "Try the above code block", "examples/Games/Physics/ForceVelocity2D.quorum")        
//        SideBySideIDE addStatementIDE
//        addStatementIDE:SetUniqueIdentifier("physics2DForce")
//        addStatementIDE:GetIDETitle():AddText("Force and Velocity In 2D")
//        addStatementIDE:SetGameEnvironment(true)
//        addStatementIDE:Setup()
//        bodyDiv:Add(addStatementIDE)
//        bodyDiv:Add(addStatementIDE:GetGameCanvas())

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how to add physics effects like force and velocity to games written in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Forces and Velocity In 2D"
    end

    action GetImageLocation returns text
        return "media/physics/Man_Jumping_Cliff.png"
    end

    action GetName returns text
        return "Force and Velocity"
    end

    action GetShortDescription returns text
        return "how to add forces and velocity to a 2D game"
    end

    action GetLocation returns text
        return "tutorials/physics/forceandvelocity2D.html"
    end
end
