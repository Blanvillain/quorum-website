use Libraries.Web.Page.all
use Libraries.Containers.Array

class Physics2DMassAndFrictionTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Physics Mass, Friction and More In 2D - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Physics Mass, Friction and More In 2D", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Physics Mass, Friction and More In 2D")
        AddToHeadingArray(h_heading)

        headDiv:AddText("Understanding mass, friction, and more in a 2D physics enabled Quorum game")
        bodyDiv:Add(headDiv)


        //the section on general information
        Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_overview)
        AddHeading(section_overview, "Overview", 2)


        Paragraph para1
        para1:AddText(    "In this tutorial, we will create a game where a Quorum bunny crashes into a tower of boxes with its deadly hops. "
                            +   "Along the way, we will learn about new physics properties and concepts. "
                            +   "The first concepts necessary for the bunny to knock over the boxes are ")
        Link link1 = para1:AddLink(    "mass", "https://en.wikipedia.org/wiki/Mass")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        para1:AddText(    " and ")
        Link link2 = para1:AddLink(    "density", "https://en.wikipedia.org/wiki/Density")
        link2:AddClassAttribute("underline text-quorum-blue-150")
        para1:AddText(    ". ")
        section_overview:Add(para1)

        //the section on Mass and Density
        Section section_mass
        section_mass:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_mass)
        AddHeading(section_mass, "Mass and Density", 2)
        section_mass:AddParagraph(   "Up until now, all physics objects’ masses have been determined using a default mass of 1 kilogram. "
                            +   "We can change this by setting either mass or density. "
                            +   "Mass is how much stuff something is made of. "
                            +   "It is related to weight. "
                            +   "As mass increases, so does weight. "
                            +   "Weight also relies on gravity (think of astronauts on the moon and how they weigh less there even though they have not changed themselves.) "
                            +   "We can think of mass as how much our objects weigh as long as we remember that changing gravity will also affect their weight. "
                            +   "Mass is set per item using this action: ")
        section_mass:Add(preformatter:GeneratePreformattedCode(  "number mass = 5" + cr
                                                            + "itemName:SetMass(mass)"))
        Paragraph para2
        para2:AddText(    "Here mass is a number representing how many kilograms an item is. "
                            +   "To help us understand the units of mass better, consider a few examples. "
                            +   "The mass of a typical person is about 70 kg. "
                            +   "The mass of a car might be between 1000 to 2000 kg, and the mass of a commercial airliner might be between about 40,000 kg and 75,000 kg. "
                            +   "When mass is set this way, density is automatically calculated. "
                            +   "Density is another way to think about mass. "
                            +   "It is how much mass an item has per units squared, where a unit is determined by the camera. "
                            +   "Normally a unit would be a pixel, but this might be different if we use the ")
        Link link3 = para2:AddLink(    "orthographic camera", "/tutorials/physics/forceandlinearvelocity.html") 
        link3:SetClassAttribute("underline text-quorum-blue-150")
        para2:AddText(    ", for example. "
                            +   "In that case, a unit is one, whatever that means to the camera. "
                            +   "By units squared, we mean a one unit by one unit square. "
                            +   "We can set density for an item using: ")
        section_mass:Add(para2)

        section_mass:Add(preformatter:GeneratePreformattedCode(  "number density = 5" + cr
                                                            + "itemName:SetDensity(density)"))
        section_mass:AddParagraph(    "density is a number representing the number of kilograms per units squared. "
                            +   "If density is set like this, mass will be automatically calculated for the item. ")
        
        //the section on friction
        Section section_friction
        section_friction:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_friction)
        AddHeading(section_friction, "Friction", 2)

        Paragraph para3
        para3:AddText(    "In the previous tutorial on ")
        Link link4 = para3:AddLink(    "force and velocity", "/tutorials/physics/forceandvelocity2D.html")
        link4:AddClassAttribute("underline text-quorum-blue-150")
        para3:AddText(    ", the character was able to move across the platforms without slowing down. "
                            +   "The physics property that provides resistance to movement across something is called ")
        Link link5 = para3:AddLink("friction", "https://en.wikipedia.org/wiki/Friction")
        link5:AddClassAttribute("underline text-quorum-blue-150")
        para3:AddText(    ". Sliding on ice or a puck moving in air hockey are examples of movement with very little friction. "
                            +   "Pushing furniture on heavy carpet is an example of movement with high friction. "
                            +   "To set an item’s friction we use: ")
        section_friction:Add(para3)    

        section_friction:Add(preformatter:GeneratePreformattedCode(  "number friction = 0.5" + cr
                                                            + "itemName:SetFriction(friction)"))
        section_friction:AddParagraph(   "Here friction is a number between zero and one. "
                            +   "Zero means no friction and one is the highest amount of friction. "
                            +   "If we set friction to be a number higher than one, the system will treat it the same as if we set it to one. ")
        
        //the section on Restitution
        Section section_restitution
        section_restitution:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_restitution)
        AddHeading(section_restitution, "Restitution", 2)

        Paragraph para4
        para4:AddText(    "We want our bunny to be relatively bouncy. "
                            +   "To achieve this, we need a new physics property called ")
        Link link6 = para4:AddLink(    "restitution", "https://en.wikipedia.org/wiki/Coefficient_of_restitution")                    
        link6:AddClassAttribute("underline text-quorum-blue-150")
        para4:AddText(    ". Restitution can be thought of as the bounciness of an item. "
                            +   "Like friction, restitution is set per item using: ")
        section_restitution:Add(para4) 

        section_restitution:Add(preformatter:GeneratePreformattedCode(  "number restitution = 0.4" + cr
                                                            + "itemName:SetRestitution(restitution)"))
        Paragraph para5
        para5:AddText(    "Here restitution is a number representing how much bounce is preserved on impact. "
                            +   "To understand this fully, we need a new concept: ")
        Link link7 = para5:AddLink(    "energy", "https://en.wikipedia.org/wiki/Energy")   
        link7:AddClassAttribute("underline text-quorum-blue-150")                 
        para5:AddText(    ". When an item falls, the movement is a result of gaining ")
        Link link8 = para5:AddLink(    "kinetic energy", "https://en.wikipedia.org/wiki/Kinetic_energy")
        link8:AddClassAttribute("underline text-quorum-blue-150")
        para5:AddText(    ". Kinetic means movement, basically. "
                            +   "When the item is at the height of its fall before starting to move downward, it has no kinetic energy (it is not moving). "
                            +   "Instead it has ")
        Link link9 = para5:AddLink(    "potential energy", "https://en.wikipedia.org/wiki/Potential_energy")
        link9:AddClassAttribute("underline text-quorum-blue-150")
        para5:AddText(    ". During the fall, the item trades its potential energy for kinetic energy. "
                            +   "When the item starts to bounce back up, it is trading its kinetic energy for potential energy. "
                            +   "The restitution value, then, is multiplied by the energy at impact to affect how much kinetic energy the item has when it starts to bounce up. "
                            +   "For example, a restitution of one means that the item retains all of its kinetic energy when it bounces. "
                            +   "A restitution of zero means that the item loses all its kinetic energy, and therefore does not bounce. "
                            +   "Realistic restitution, then, would be somewhere between zero and one, but it is possible to have a restitution greater than one. ")
        section_restitution:Add(para5) 
         
        //the section containing the platformer game code
        Section section_code
        section_code:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_code)
        AddHeading(section_code, "Code", 2)

       section_code:AddParagraph("Read the following code, then use it below to discover mass, friction, and restitution.")


        CodeBlock cb1
        Span s1 
        Span s2 
        Span s3
        Span s4
        Span s5
        cb1:AddText("use Libraries.Game.Game" + cr 
                    +   "use Libraries.Game.Graphics.Drawable"+ cr 
                    +   "use Libraries.Compute.Vector2" + cr 
                    +   "use Libraries.Game.Graphics.Color" + cr 
                    +   "use Libraries.Interface.Events.KeyboardListener" + cr 
                    +   "use Libraries.Interface.Events.KeyboardEvent" + cr
                    +   "use Libraries.Game.Graphics.OrthographicCamera" + cr
                    +   "use Libraries.Interface.Events.CollisionListener2D" + cr
                    +   "use Libraries.Interface.Events.CollisionEvent2D" + cr
                    +   "use Libraries.Sound.Audio" + cr
                    +   "use Libraries.Compute.Math" + cr + cr
                    +   "class Main is Game, KeyboardListener, CollisionListener2D" + cr + cr
                    +   "   Math math" + cr   
                    +   "   Drawable ground" + cr
                    +   "   Drawable bunny" + cr + cr
                    +   "   Vector2 gravity" + cr
                    +   "   Vector2 character" + cr
                    +   "   Color color" + cr + cr
                    +   "   Audio jumpSound" + cr
                    +   "   Audio impactSound" + cr
                    +   "   Audio movingSound" + cr + cr 
                    +   "   action Main" + cr 
                    +   "       StartGame()" + cr 
                    +   "   end" + cr + cr
                    +   "   action CreateGame" + cr
                    +   "       AddCollisionListener(me)" + cr
                    +   "       AddKeyboardListener(me)" + cr
                    +   "       EnablePhysics2D(true)" + cr + cr
                    +   "       OrthographicCamera camera" + cr
                    +   "       camera:SetToOrthographic(20, 20)" + cr
                    +   "       SetCamera2D(camera)" + cr + cr
                    +   "       ground:SetName(" + dq + "ground" + dq +")" + cr
                    +   "       ground:LoadFilledRectangle(20, 1)" + cr
                    +   "       ground:SetPosition(0, 0)" + cr
                    +   "       ground:SetColor(color:Green())" + cr
                    +   "       Add(ground)" + cr
                    +   "       ground:EnablePhysics(true)" + cr
                    +   "       ground:SetUnmovable()" + cr 
                    +   "       ground:SetFriction(1)" + cr + cr
                    +   "       bunny:SetName(" + dq + "bunny" + dq + ")" + cr
                    +   "       bunny:Load(" + dq + "media/HourOfCode.png" + dq +")" + cr
                    +   "       bunny:SetPosition(1, 1)" + cr
                    +   "       bunny:Scale(1.0/80)" + cr
                    +   "       Add(bunny)" + cr
                    +   "       bunny:EnablePhysics(true)" + cr
                    +   "       bunny:SetResponsive()" + cr + cr
                    +   "       bunny:SetFriction(0.2)" + cr
                    +   "       bunny:SetRestitution(0.75)" + cr
                    +   "       bunny:SetMass(10)" + cr + cr
                    +   "       gravity:Set(0, -9.8)" + cr
                    +   "       SetGravity2D(gravity)" + cr + cr)
        s4:AddText("    // We make invisible walls so that everything stays on screen. " + cr)
        s4:AddClassAttribute("comment")
        cb1:Add(s4)
        cb1:AddText(    "       CreateInvisibleWall(-2, 0)" + cr
                    +   "       CreateInvisibleWall(21, 0)" + cr
                    +   "       CreateInvisibleWall(0, 21)" + cr + cr)
        s5:AddText("    // We create a tower of boxes. " + cr)
        s5:AddClassAttribute("comment")
        cb1:Add(s5)
        cb1:AddText(    "       GenerateBox(0.6,1,color:Red())" + cr
                    +   "       GenerateBox(-0.6,1,color:Red())" + cr
                    +   "       GenerateBox(0,2, color:Orange())" + cr
                    +   "       GenerateBox(0.6,3,color:Yellow())" + cr
                    +   "       GenerateBox(-0.6,3,color:Yellow())" + cr
                    +   "       GenerateBox(0,4, color:Green())" + cr
                    +   "       GenerateBox(0.6,5,color:Blue())" + cr
                    +   "       GenerateBox(-0.6,5,color:Blue())" + cr
                    +   "       GenerateBox(0,6, color:Purple())" + cr + cr
                    +   "       jumpSound:Load(" + dq + "media/Fwip.ogg" + dq + ")" + cr
                    +   "       impactSound:Load(" + dq + "media/Boing.ogg" + dq + ")" + cr
                    +   "       movingSound:Load(" + dq + "media/Bing.ogg" + dq + ")" + cr + cr
                    +   "       jumpSound:SetVolume(0.5)" + cr
                    +   "       impactSound:SetVolume(0.3)" + cr
                    +   "   end" + cr + cr
                    +   "   action Update(number seconds)" + cr)
        s3:AddText("    // If the bunny is noticably moving, we play a sound to represent the bunny's position. " + cr)
        s3:AddClassAttribute("comment")
        cb1:Add(s3)
        cb1:AddText(   "       if math:AbsoluteValue(bunny:GetLinearVelocity():GetX()) > 1 or math:AbsoluteValue(bunny:GetLinearVelocity():GetY()) > 1" + cr
                    +   "           movingSound:SetBalance(bunny:GetX())" + cr
                    +   "           movingSound:SetPitch(bunny:GetY())" + cr
                    +   "           movingSound:SetVolume(0.5)" + cr
                    +   "           movingSound:Play()" + cr
                    +   "       end" + cr
                    +   "   end" + cr + cr
                    +   "   action PressedKey(KeyboardEvent event)" + cr
                    +   "       if event:keyCode = event:SPACE" + cr
                    +   "           Vector2 force" + cr
                    +   "           force:Set(12800, 10000)" + cr
                    +   "           bunny:ApplyForceToCenter(force)" + cr
                    +   "           jumpSound:Play()" + cr
                    +   "       end" + cr
                    +   "   end" + cr + cr
                    +   "   action BeginCollision(CollisionEvent2D event)" + cr
                    +   "       impactSound:Play()" + cr
                    +   "   end" + cr + cr)
        s1:AddText( "   /*" + cr
                    +   "   To balance the tower of boxes, we make every other level have longer than tall boxes. " + cr
                    +   "   The displaceFromGround parameter tells us how many levels of boxes up to place a box. " + cr
                    +   "   For example, if it equals 2, then the box is placed two box heights up from the bottom of the screen. " + cr
                    +   "   displaceFromCenter tells us how many box lengths from x = 11.5 we want the box to be placed horizontally. " + cr
                    +   "   For example, if we want two boxes centered ontop of a box at center (x = 11.5) then we can use " + cr
                    +   "   displaceFromCenter = 0.6 for one and -0.6 for the other. This will place them so that the gap between them " + cr
                    +   "   is 0.8 box lengths centered at 11.5. " + cr
                    +   "   */" + cr)
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("   action GenerateBox(number displaceFromCenter, integer displaceFromGround, Color color)" + cr
                    +   "       Drawable box" + cr
                    +   "       integer boxSize = 2" + cr + cr
                    +   "       if displaceFromGround mod 2 = 0" + cr
                    +   "           box:LoadFilledRectangle(boxSize + 1, boxSize)" + cr
                    +   "           box:SetPosition(11.5 + displaceFromCenter*(boxSize), (boxSize)*displaceFromGround)" + cr 
                    +   "       else" + cr
                    +   "           box:LoadFilledRectangle(boxSize, boxSize)" + cr
                    +   "           box:SetPosition(12 + displaceFromCenter*(boxSize), (boxSize)*displaceFromGround)" + cr
                    +   "       end" + cr
                    +   "       box:SetColor(color)"   + cr
                    +   "       Add(box)" + cr
                    +   "       box:EnablePhysics(true)" + cr
                    +   "       box:SetFriction(1)" + cr
                    +   "       box:SetResponsive()" + cr
                    +   "       box:SetMass(5)" + cr
                    +   "   end" + cr + cr
                    +   "   action CreateInvisibleWall(integer x, integer y)" + cr
                    +   "       Drawable invisibleWall" + cr)
        s2:AddText( "   /*" + cr
                    +   "   We need two invisible walls for the sides that are taller than long, and one for the top that is longer than tall. " + cr
                    +   "   The side walls' positions both have y = 0, so that is how we can tell which type is necessary. " + cr
                    +   "   */" + cr)
        s2:SetClassAttribute("comment")
        cb1:Add(s2)
        cb1:AddText("       if y <= 0" + cr
                    +   "           invisibleWall:LoadRectangle(1, 22)" + cr
                    +   "       else" + cr
                    +   "           invisibleWall:LoadRectangle(21, 1)" + cr
                    +   "       end" + cr
                    +   "       invisibleWall:SetPosition(x , y)" + cr
                    +   "       Add(invisibleWall)" + cr
                    +   "       invisibleWall:EnablePhysics(true)" + cr
                    +   "       invisibleWall:SetUnmovable()" + cr
                    +   "   end" + cr
                    +   "end")
        section_code:Add(preformatter:GeneratePreformattedCode(cb1))

        //the section on running the program

              Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("Main.quorum", "examples/Physics/MassFriction/MassFriction2D.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Mass, Friction and More in 2D")
    section_try_yourself:Add(ide3)


section_try_yourself:AddParagraph(   "If we run this game, we should have a Quorum bunny sitting on the left side of the screen on the ground and a stack of boxes on the right side of the screen. "
                                +   "Pressing the spacebar will cause the bunny to jump across the screen, hitting the stack of boxes. "
                                +   "The boxes should be knocked off the stack in response to the collision. ")
  
  
        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())

    end

    action GetMetaDescription returns text
        return "Learn how to add physics effects like mass and friction in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Mass, Friction, and More In 2D"
    end

    action GetImageLocation returns text
        return "media/physics/Mass.png"
    end

    action GetName returns text
        return "Mass, Friction, and More In 2D"
    end

    action GetShortDescription returns text
        return "how to use mass, friction and more in a 2D game"
    end

    action GetLocation returns text
        return "tutorials/physics/massandfriction2D.html"
    end

    action GetLinkName returns text
        return "Mass, Friction, and More in 2D"
    end

    action GetSectionName returns text
        return "Game Physics"
    end
end
