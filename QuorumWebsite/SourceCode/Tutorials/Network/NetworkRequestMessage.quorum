use Libraries.Web.Page.all
use Libraries.Containers.Array

class NetworkRequestMessage is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Setting the Request Message Body")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Setting the Request Message Body", 1)

        headDiv:AddText("Setting the Request Message Body for a Network Request Body using Hypertext Transfer Protocol (HTTP)")
        bodyDiv:Add(headDiv)

        Section section_query_string
        section_query_string:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_query_string, "Query Strings", 2)

        Paragraph p_query_string

        Bold b1
            b1:AddText("Query String")
        p_query_string:AddText("When there is additional user data to be sent to the server it 
        is either added to the Uniform Resource Locator (URL) when using the GET Method, or 
        added in the Request Message Body when using the POST Method. The data being sent 
        is contained in what is referred to as the ")
        p_query_string:Add(b1)
        p_query_string:AddText(", which contains data submitted in name value pairs (fields) 
        with the name and value separated by an equal sign (=) and multiple 
        fields separated by an ampersand (&). (Any whitespace in the value is replaced with a plus sign (+)). 
        For example if we had the following three fields:")

        section_query_string:Add(p_query_string)

        CodeBlock cb
                cb:AddText("name: John Smith" + cr)
                cb:AddText("age: 15" + cr)
                cb:AddText("student: true" + cr)
        section_query_string:Add(preformatter:GeneratePreformattedCode(cb))

        section_query_string:AddParagraph("Then the query string would be formatted as shown below :")

        CodeBlock cb1
                cb1:AddText("name=John+Smith&age=15&student=true")
        section_query_string:Add(preformatter:GeneratePreformattedCode(cb1))

        Section section_request_message_body
        section_request_message_body:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_request_message_body, "Setting the Request Message Body Using Text Data", 2)
        section_request_message_body:AddParagraph("In order to format multiple fields of text data 
        (key name: value pairs) we will use the " + dq + "Libraries.Network.NetworkRequest" + dq +  
        " and " + dq + "Libraries.Containers.HashTable" + dq + " libraries. We will then create multiple 
        text type variables to store the key names and their associated value as shown 
        below:")

        CodeBlock cb2
            cb2:AddText("use Libraries.Network.NetworkRequest" + cr )
            cb2:AddText("use Libraries.Containers.HashTable" + cr + cr)
            cb2:AddText("class Main"+ cr)
            cb2:AddText("   action Main" + cr)
            cb2:AddText("       text key1 = " + dq + "name" + dq + cr)
            cb2:AddText("       text value1 = " + dq + "John Smith" + dq + cr)
            cb2:AddText("       text key2 = " + dq + "age" + dq + cr)
            cb2:AddText("       text value2 = " + dq + "15" + dq + cr)
            cb2:AddText("       text key3 = " + dq + "student" + dq + cr)
            cb2:AddText("       text value3 = " + dq + "true" + dq + cr)
        section_request_message_body:Add(preformatter:GeneratePreformattedCode(cb2))


        section_request_message_body:AddParagraph("Next, we will create a HashTable object " + dq + "data" + dq + " to add the 
        name:value pairs to. Then we will create a NetworkRequest object " + dq + "request" + dq + " which 
        will contain the formatted query string with " + dq + "data’s" + dq + " name:value pairs. ")

        CodeBlock cb3
                Span s1
                Span s2
                s1:AddText("        //creates a HashTable object " + dq + "data" + dq + " and adds the key name:value pairs to" + cr)
                s1:AddText("        //" + dq + "data" + dq + "" + cr)
                s2:AddText("        //creates a NetworkRequest object " + dq + "request" + dq + " and formats data’s name:value" + cr)
                s2:AddText("        //pairs as a query string for the Request Message Body" + cr)
                s1:SetClassAttribute("comment")
                s2:SetClassAttribute("comment")
                cb3:Add(s1)
                cb3:AddText("       HashTable&lt;text, text&gt; data" + cr)
                cb3:AddText("       data:Add(key1, value1)" + cr)
                cb3:AddText("       data:Add(key2, value2)" + cr)
                cb3:AddText("       data:Add(key3, value3)" + cr)
                cb3:Add(s2)
                cb3:AddText("       NetworkRequest request" + cr)
                cb3:AddText("       request:SetParameters(data)")
        section_request_message_body:Add(preformatter:GeneratePreformattedCode(cb3))

        section_request_message_body:AddParagraph("Finally, we will output the formatted query string to the 
        screen. The complete code section looks like this:")

        CodeBlock cb4
            cb4:AddText("use Libraries.Network.NetworkRequest" + cr)
            cb4:AddText("use Libraries.Containers.HashTable"+ cr + cr)
            cb4:AddText("class Main" + cr)
            cb4:AddText("   action Main" + cr)
            cb4:AddText("       text key1 = " + dq + "name" + dq + cr)
            cb4:AddText("       text value1 = " + dq + "John Smith" + dq + cr)
            cb4:AddText("       text key2 = " + dq + "age" + dq + cr)
            cb4:AddText("       text value2 = " + dq + "15" + dq + cr)
            cb4:AddText("       text key3 = " + dq + "student" + dq + cr)
            cb4:AddText("       text value3 = " + dq + "true" + dq + cr)
            cb4:AddText("       HashTable&lt;text, text&gt; data" + cr)
            cb4:AddText("       data:Add(key1, value1)" + cr)
            cb4:AddText("       data:Add(key2, value2)" + cr)
            cb4:AddText("       data:Add(key3, value3)" + cr)
            cb4:AddText("       NetworkRequest request" + cr)
            cb4:AddText("       request:SetParameters(data)" + cr)
            cb4:AddText("       output request:GetBody()" + cr)
            cb4:AddText("   end" + cr)
            cb4:AddText("end" + cr)
        section_request_message_body:Add(preformatter:GeneratePreformattedCode(cb4))

        CodeForIDE code_body
        code_body:AddFileText("Main.quorum", "//This code will output the formatted query string")
        IDE ide_body = AddIDE()
        ide_body:HideDisplay()
        ide_body:SetCodeForIDE(code_body:GetJsonArray())
        ide_body:SetIdeTitle("Activity: Setting the Message Body with Text Data")
        section_request_message_body:Add(ide_body)

        section_request_message_body:AddParagraph("The output should look similar to this, with each key name 
        and value separated by an equal " + dq + "=" + dq + " sign (the order 
        may be different from the example output shown below, which will not matter as the 
        values are accessed by their key name  and not by their order):")
        section_request_message_body:Add(preformatter:GeneratePreformattedCode(cb1))

        Section section_json
        section_json:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_json, "Setting the Request Message Body Using JavaScript Object Notation (JSON) Data", 2)
        Paragraph p_json
        p_json:AddText("In order to format JavaScriptObjectNotation object data 
        ({" + dq + "name" + dq + ":" + dq + "value" + dq + "} pairs) we will need to use the additional " + dq +  
        "Libraries.Data.Formats.JavaScriptObjectNotation" + dq + " library. We will then create a 
        JavaScriptObjectNotation object " + dq + "data" + dq + " which will contain the {" + dq + "name" + dq + ":" + dq + "value" + dq + "} 
        pairs as shown below: (For more information on JavaScriptObjectNotation see the ")
        Link link = p_json:AddLink("Data Tutorials Section", "https://quorumlanguage.com/tutorials/data/overview.html")
        link:SetClassAttribute("underline text-quorum-blue-150")
        p_json:AddText(")" + cr)

        section_json:Add(p_json)

        CodeBlock cb5
            Span s3
            s3:AddText("        //creates a JavaScriptObjectNotation object " + dq + "data" + dq + "which will" + cr)
            s3:AddText("        //hold the (key name:value) pairs" + cr)
            s3:SetClassAttribute("comment")
            cb5:AddText("use Libraries.Network.NetworkRequest" + cr)
            cb5:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation"+ cr + cr)
            cb5:AddText("class Main" + cr)
            cb5:AddText("   action Main" + cr)
            cb5:AddText("       text key1 = " + dq + "name" + dq + cr)
            cb5:AddText("       text value1 = " + dq + "Jane Adams" + dq + cr)
            cb5:AddText("       text key2 = " + dq + "age" + dq + cr)
            cb5:AddText("       integer value2 = 22" + cr)
            cb5:AddText("       text key3 = " + dq + "student" + dq + cr)
            cb5:AddText("       boolean value3 = false" + cr + cr)
            cb5:Add(s3)
            cb5:AddText("       JavaScriptObjectNotation data"+ cr)
            cb5:AddText("       data:Add(key1, value1)" + cr)
            cb5:AddText("       data:Add(key2, value2)" + cr)
            cb5:AddText("       data:Add(key3, value3)" + cr)    
        section_json:Add(preformatter:GeneratePreformattedCode(cb5))

        section_json:AddParagraph("We will then create a NetworkRequest object " + dq + "request" + dq + ", 
        format the JavaScriptObjectNotation object " + dq + "data" + dq + " as a query string, and output 
        the formatted query string to the screen. ")

        CodeBlock cb6
            Span s4
            Span s5
            Span s6
            s4:AddText("        //creates a NetworkRequest object " + dq + "request" + dq + "" + cr)
            s5:AddText("        //formats the JavaScriptObjectNotation object " + dq + "data" + dq + " as a query" + cr)
            s5:AddText("        //string for the Request Message Body" + cr)
            s6:AddText("        //outputs the formatted query string to the screen" + cr)
            s4:SetClassAttribute("comment")
            s5:SetClassAttribute("comment")
            s6:SetClassAttribute("comment")
            cb6:Add(s4)
            cb6:AddText("       NetworkRequest request" + cr)
            cb6:Add(s5)
            cb6:AddText("       request:SetParameters(data)" + cr)
            cb6:Add(s6)
            cb6:AddText("       output request:GetBody()" + cr)
        section_json:Add(preformatter:GeneratePreformattedCode(cb6))

        section_json:AddParagraph("Here is the complete code section to create a formatted 
        query string from a JavaScriptObjectNotation object:")

        CodeBlock cb7
            cb7:AddText("use Libraries.Network.NetworkRequest" + cr)
            cb7:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr + cr)
            cb7:AddText("class Main" + cr)
            cb7:AddText("   action Main" + cr)
            cb7:AddText("       text key1 = " + dq + "name" + dq + cr)
            cb7:AddText("       text value1 = " + dq + "Jane Adams" + dq + cr)
            cb7:AddText("       text key2 = " + dq + "age" + dq + cr)
            cb7:AddText("       integer value2 = 22" + cr)
            cb7:AddText("       text key3 = " + dq + "student" + dq + cr)
            cb7:AddText("       boolean value3 = false" + cr)
            cb7:AddText("       JavaScriptObjectNotation data"+ cr)
            cb7:AddText("       data:Add(key1, value1)" + cr)
            cb7:AddText("       data:Add(key2, value2)" + cr)
            cb7:AddText("       data:Add(key3, value3)" + cr) 
            cb7:AddText("       NetworkRequest request" + cr)
            cb7:AddText("       request:SetParameters(data)" + cr)
            cb7:AddText("       output request:GetBody()" + cr)
            cb7:AddText("   end" + cr)
            cb7:AddText("end" + cr)
        section_json:Add(preformatter:GeneratePreformattedCode(cb7))

            CodeForIDE code_json
            code_json:AddFileText("Main.quorum", "//This code will output the formatted query string")
            IDE ide_json = AddIDE()
            ide_json:HideDisplay()
            ide_json:SetCodeForIDE(code_json:GetJsonArray())
            ide_json:SetIdeTitle("Activity: Setting the Message Body with JSON Data")
            section_json:Add(ide_json)


        section_request_message_body:AddParagraph("The output should look similar to this, with each key name 
        and value separated by an equal " + dq + "=" + dq + " sign (the order 
        may be different from the example output shown below, which will not matter as the 
        values are accessed by their key name  and not by their order):")

        CodeBlock cb8
            cb8:AddText("name=Jane+Adams&age=22&student=false" + cr)
        section_request_message_body:Add(preformatter:GeneratePreformattedCode(cb8))

        bodyDiv:Add(section_query_string)
        bodyDiv:Add(section_request_message_body)
        bodyDiv:Add(section_json)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Setting the Request Message Body using HTTP with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Setting the Request Message Body using the Hypertext Transfer Protocol (HTTP)"
    end
    action GetName returns text
        return "Setting the Request Message Body"
    end
    action GetShortDescription returns text
        return "an introduction to setting the request message body using the Hypertext Transfer Protocol (HTTP)."
    end
    action GetLocation returns text
        return "tutorials/network/requestMessage.html"
    end

    action GetLinkName returns text
        return "Setting the Request Message Body"
    end

    action GetSectionName returns text
        return "Network"
    end
end
