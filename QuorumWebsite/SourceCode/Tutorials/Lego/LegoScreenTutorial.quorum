use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent

class LegoScreenTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("LEGO Screen - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page-specific header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Using the Screen of the LEGO™ Robot", 1)
        headDiv:AddText("This tutorial helps explain how the LCD screen is used in Quorum.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Using the Screen of the LEGO™ Robot", 2)
        bodyDiv:AddParagraph(   "In this tutorial, we will discuss how the Screen class can be used to draw shapes or put text on the robot's screen. Specifically, we will cover:")
        UnorderedList list
        list:AddListItem("Properties of the Screen")
        list:AddListItem("Outputting Text onto the Screen")
        list:AddListItem("Drawing Lines and Shapes on the Screen")     
        list:AddListItem("Scrolling up the screen")
        bodyDiv:Add(list)
                
        //the section on the properties of the screen
        bodyDiv:AddHeading("Properties of the Screen", 2)
        bodyDiv:AddParagraph(   "The screen makes up the top portion of the brick and is used to display text or shapes. "
                            +   "The screen is composed of pixels, which is just a fancy way of saying the screen is made up of tiny squares that can change color, "
                            +   "and in the screen's case they can only be black or blank. The width of the screen has 178 pixels (ranging from 0 to 177) "
                            +   "and these pixels all lie along the x-axis. The height of the screen is 128 pixels tall (ranging from 0 to 127) and these pixels all lie on the y-axis. "
                            +   "Although all screen actions work by drawing or removing color from one or more pixels, it is more the focus when drawing shapes, "
                            +   "so we will go into more detail about the pixels later.")
                
        //the section on outputting text
        bodyDiv:AddHeading("Outputting Text onto the Screen", 2)
        bodyDiv:AddText(   "The Screen class provides actions for three different types of text: ")
        Bold CSPtitle1
        CSPtitle1:AddText("normal")
        bodyDiv:Add(CSPtitle1)
        bodyDiv:AddText(", ")
        Bold CSPtitle2
        CSPtitle2:AddText("large")
        bodyDiv:Add(CSPtitle2)
        bodyDiv:AddText(", and ")
        Bold CSPtitle3
        CSPtitle3:AddText("inverted")
        bodyDiv:Add(CSPtitle3)
        bodyDiv:AddText(". Text is output to one of eight text lines on the screen (referred to as lines 0 through 7, where 0 is the top line) and each line is 16 pixels tall. "
                    +   "For example, the code ")
        CodeBlock cb1
        cb1:AddText("screen:Output(" + dq + "Hello" + dq + ", 3)")
        bodyDiv:Add(cb1)
        bodyDiv:AddText(            " will print the normal text " + dq + "Hello" + dq + " to line 3." + cr + cr
                            +   "Normal text is the basis for all of the other styles, and so the previous code segment does not specify a style in the action name. "
                            +   "By contrast, if we want to print the same message in a large font, we would use the code ")
        CodeBlock cb2
        cb2:AddText("screen:OutputLarge(" + dq + "Hello" + dq + ", 3)")
        bodyDiv:Add(cb2)
        bodyDiv:AddText(            " instead. Large font takes up two lines of text (the line specified and the one below it) and can fit less information on screen, "
                            +   "but it is much easier to see. Inverted text is the same size as normal text, but the difference is that all of the pixels used for the text are inverted, "
                            +   "meaning the blank pixels become black and vice versa, making it look like the text has been cut out from a solid black bar. "
                            +   "To use the previous example again, inverted text actions will look like ")
        CodeBlock cb3
        cb3:AddText("screen:OuputInvertedColor(" + dq + "Hello" + dq + ", 3)")
        bodyDiv:Add(cb3)
        bodyDiv:AddText(            ".")


        //the section on format
        bodyDiv:AddHeading("Format", 3)
        bodyDiv:AddParagraph(   "For the three types of text, Quorum has a few formatting actions to help position our text on the screen:")



        ListItem li2
        ListItem li3
        ListItem li4
        CodeBlock cb4
        CodeBlock cb5
        CodeBlock cb6
        li2:AddText("")
        cb4:AddText("Output(text message, integer line)")
        li2:Add(cb4)
        li3:AddText("")
        cb5:AddText("Output(text message, integer line, integer indent)")
        li3:Add(cb5)
        li4:AddText("")
        cb6:AddText("OutputCenter(text message, integer line)") 
        li4:Add(cb6)

        UnorderedList primitiveList2
        primitiveList2:Add(li2)
        bodyDiv:Add(primitiveList2)
        UnorderedList primitiveList3
        primitiveList3:Add(li3)
        bodyDiv:Add(primitiveList3)
        UnorderedList primitiveList4
        primitiveList4:Add(li4)
        bodyDiv:Add(primitiveList4)



        bodyDiv:AddText(   "We have been using the first action in the previous examples where we would just tell the program the message to display and what line it should be on. "
                            +   "This causes the text to start on the left side of the screen, but what if we want the text indented or centered? "
                            +   "That is where the other actions can be used. One thing that should be pointed out here is that all letters take up the same amount of space, "
                            +   "8 pixels wide with the normal font, and the indentation parameter is specified in terms of these spaces, "
                            +   "meaning an indentation of 1 shifts the text over by one letter's space. Each type of font (normal, inverted, large) "  
                            +   "has this set of actions for formatting text. "
                            +   "For example, to center a large text message on lines 3 and 4, code such as ")
        CodeBlock cb9
        cb9:AddText("screen:OutputCenterLarge(" + dq + "Hello" + dq + ", 3)")
        bodyDiv:Add(cb9)
        bodyDiv:AddText(            " will do the trick.")

        
        //the section on drawing lines and shapes
        bodyDiv:AddHeading("Drawing Lines and Shapes on the Screen", 2)   
        bodyDiv:AddParagraph(   "Through Qurourm, we can draw lines, rectangles, circles, and ellipses on the screen. "
                            +   "Drawing these will require a point along the x-axis (width of the screen) and a point along the y-axis (height of the screen) "
                            +   "to determine the position of the line or shape. For the shapes, there are actions to draw outlines of shapes or full shapes, "
                            +   "and actions to erase outlines of shapes or full shapes.")                                                                                    
                
        //the section on lines
        bodyDiv:AddHeading("Lines", 3)
        bodyDiv:AddText(   "To draw lines, we use the action ")
        CodeBlock cb10
        CodeBlock cb11
        CodeBlock cb12
        CodeBlock cb13
        CodeBlock cb14
        CodeBlock cb15
        cb10:AddText("DrawLine(integer xStart, integer yStart, integer xEnd, integer yEnd)")
        cb11:AddText("xStart")
        cb12:AddText("yStart")
        cb13:AddText("xEnd")
        cb14:AddText("yEnd")
        cb15:AddText("screen:DrawLine(0, 0, 177, 127)")
        bodyDiv:Add(cb10)
        bodyDiv:AddText(            ". The ")
        bodyDiv:Add(cb11)
        bodyDiv:AddText(            " and ")
        bodyDiv:Add(cb12)
        bodyDiv:AddText(            " parameters are used to determine the starting point of the line, while the ")
        bodyDiv:Add(cb13)
        bodyDiv:AddText(            " and ")
        bodyDiv:Add(cb14)
        bodyDiv:AddText(            " parameters determine the ending point of the line. Thus, to make a diagonal line that goes across theentire screen, we could use the code ")
        bodyDiv:Add(cb15)
        bodyDiv:AddText(            ".")


        //the section on rectangles
        bodyDiv:AddHeading("Rectangles", 3)
        bodyDiv:AddParagraph(   "Rectangles have the following actions:")

        ListItem li5
        ListItem li6
        ListItem li7
        ListItem li8
        CodeBlock cb16
        CodeBlock cb17
        CodeBlock cb18
        CodeBlock cb19
        li5:AddText("")
        cb16:AddText("DrawRectangleOutline(integer xBottomLeft, integer yBottomLeft, integer width, integer height)")
        li5:Add(cb16)
        li6:AddText("")
        cb17:AddText("EraseRectangleOutline(integer xStart, integer yStart, integer width, integer height)")
        li6:Add(cb17)
        li7:AddText("")
        cb18:AddText("DrawRectangleFull(integer xStart, integer yStart, integer width, integer height)") 
        li7:Add(cb18)
        li8:AddText("")
        cb19:AddText("EraseRectangleFull(integer xStart, integer yStart, integer width, integer height)") 
        li8:Add(cb19)

        UnorderedList primitiveList5
        primitiveList5:Add(li5)
        bodyDiv:Add(primitiveList5)
        UnorderedList primitiveList6
        primitiveList6:Add(li6)
        bodyDiv:Add(primitiveList6)
        UnorderedList primitiveList7
        primitiveList7:Add(li7)
        bodyDiv:Add(primitiveList7)
        UnorderedList primitiveList8
        primitiveList8:Add(li8)
        bodyDiv:Add(primitiveList8)

        bodyDiv:AddParagraph(   "To draw or erase any rectangle, we need to indicate the starting point for the rectangle, which is the lower-left corner of it, and then specify where it should end, which will be the top-right corner.")





        //the section on circles
        bodyDiv:AddHeading("Circles", 3)

        bodyDiv:AddParagraph(   "Circles have the following actions:")

        ListItem li9
        ListItem li10
        ListItem li11
        ListItem li12
        CodeBlock cb20
        CodeBlock cb21
        CodeBlock cb22
        CodeBlock cb23
        li9:AddText("")
        cb20:AddText("DrawCircleOutline(integer x, integer y, integer radius)")
        li9:Add(cb20)
        li10:AddText("")
        cb21:AddText("EraseCircleOutline(integer x, integer y, integer radius)")
        li10:Add(cb21)
        li11:AddText("")
        cb22:AddText("DrawCircleFull(integer x, integer y, integer radius)") 
        li11:Add(cb22)
        li12:AddText("")
        cb23:AddText("EraseCircleFull(integer x, integer y, integer radius)") 
        li12:Add(cb23)

        UnorderedList primitiveList9
        primitiveList9:Add(li9)
        bodyDiv:Add(primitiveList9)
        UnorderedList primitiveList10
        primitiveList10:Add(li10)
        bodyDiv:Add(primitiveList10)
        UnorderedList primitiveList11
        primitiveList11:Add(li11)
        bodyDiv:Add(primitiveList11)
        UnorderedList primitiveList12
        primitiveList12:Add(li12)
        bodyDiv:Add(primitiveList12)

        bodyDiv:AddParagraph(   "To draw or erase a circle, we need to specify the center pixel of the circle and then tell the program how far out from that point the circle should be in every direction, also known as the radius of the circle.")
                




        //the section on ellipses
        bodyDiv:AddHeading("Ellipses", 3)

        bodyDiv:AddParagraph(   "Ellipses have the following actions:")


        ListItem li13
        ListItem li14
        ListItem li15
        ListItem li16
        CodeBlock cb24
        CodeBlock cb25
        CodeBlock cb26
        CodeBlock cb27
        li13:AddText("")
        cb24:AddText("DrawEllipseOutline(integer x, integer y, integer width, integer height)")
        li13:Add(cb24)
        li14:AddText("")
        cb25:AddText("EraseEllipseOutline(integer x, integer y, integer width, integer height)")
        li14:Add(cb25)
        li15:AddText("")
        cb26:AddText("DrawEllipseFull(integer x, integer y, integer width, integer height)") 
        li15:Add(cb26)
        li16:AddText("")
        cb27:AddText("EraseEllipseFull(integer x, integer y, integer width, integer height)") 
        li16:Add(cb27)

        UnorderedList primitiveList13
        primitiveList13:Add(li13)
        bodyDiv:Add(primitiveList13)
        UnorderedList primitiveList14
        primitiveList14:Add(li14)
        bodyDiv:Add(primitiveList14)
        UnorderedList primitiveList15
        primitiveList15:Add(li15)
        bodyDiv:Add(primitiveList15)
        UnorderedList primitiveList16
        primitiveList16:Add(li16)
        bodyDiv:Add(primitiveList16)

        bodyDiv:AddParagraph(   "Drawing an ellipse, or an oval, is similar to a circle in that we need to specify the center of the ellipse, but then we need to tell the program the maximum width of the ellipse and the maximum height for it as well.")
                


        //the section on scrolling up
        bodyDiv:AddHeading("Scrolling Up the Screen", 2)

        bodyDiv:AddParagraph(   "For times when we are going to be using more than the 8 text lines available, such as updating information constantly, it may be useful to only push the oldest information off screen first. 
                                In this case, we can use the different types of scroll actions to move everything on the screen up. 
                                The scroll actions are as follows:")

        ListItem li17
        ListItem li18
        ListItem li19
        CodeBlock cb28
        CodeBlock cb29
        CodeBlock cb30
        li17:AddText("")
        cb28:AddText("ScrollUp()")
        li17:Add(cb28)
        li18:AddText("")
        cb29:AddText("ScrollUp(text message)")
        li18:Add(cb29)
        li19:AddText("")
        cb30:AddText("ScrollUp(integer lines)") 
        li19:Add(cb30)

        UnorderedList primitiveList17
        primitiveList17:Add(li17)
        bodyDiv:Add(primitiveList17)
        UnorderedList primitiveList18
        primitiveList18:Add(li18)
        bodyDiv:Add(primitiveList18)
        UnorderedList primitiveList19
        primitiveList19:Add(li19)
        bodyDiv:Add(primitiveList19)



        bodyDiv:AddText("The first action, ")
        CodeBlock cb31
        CodeBlock cb32
        CodeBlock cb33
        cb31:AddText("ScrollUp()")
        cb32:AddText("ScrollUp(text message)")
        cb33:AddText("ScrollUp(integer lines)")
        bodyDiv:Add(cb31)
        bodyDiv:AddText(            " moves everything, including text and shapes, on the screen up one text line. "
                            +   "If we already know what we want to put on the new line we just made room for, we can use the ")
        bodyDiv:Add(cb32)
        bodyDiv:AddText(            " action to place our text for us after scrolling up. The last action, ")
        bodyDiv:Add(cb33)
        bodyDiv:AddText(            " is used to scroll up more than just line, which can be particularyly useful if we are using large text, since it displays over two text lines.")


        //the section on additional information
        bodyDiv:AddHeading("Additional Information", 2)

        ListItem li20
        CodeBlock cb34
        li20:AddText("To clear everything on the screen, use the ")
        cb34:AddText("Clear()")
        li20:Add(cb34)
        li20:AddText(" action on a Screen object.")
        UnorderedList primitiveList20
        primitiveList20:Add(li20)
        bodyDiv:Add(primitiveList20)


        UnorderedList docList
        ListItem liInfo
        Paragraph p0
        p0:AddText(     "For documentation on the Screen class, see ")
        p0:AddLink(     "here" ,  "/Libraries/Robots/Lego/Screen.html")
        p0:AddText(     ".")    
        liInfo:Add(p0)
        docList:Add(liInfo)
        bodyDiv:Add(docList)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how code the screen on a LEGO Mindstorms robot with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Screen"
    end

    action GetImageLocation returns text
        return "/media/robots/screen.png"
    end

    action GetName returns text
        return "Screen"
    end

    action GetShortDescription returns text
        return "how to use lego robots screen"
    end

    action GetLocation returns text
        return "tutorials/robots/legoScreen.html"
    end
end
