use Libraries.Web.Page.all
use Libraries.Containers.Array

class LegoScreenTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("LEGO Screen - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Actions", 1)

        headDiv:AddText("How to tell a program to take a behavior.")
        bodyDiv:Add(headDiv)

        Section section_screen
        section_screen:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_screen, "Using the Screen of the LEGOâ„¢ Robot", 2)
        section_screen:AddParagraph(   "In this tutorial, we will discuss how the Screen class can be used to draw shapes or put text on the robot's screen. Specifically, we will cover:")
        UnorderedList list
          list:AddClassAttribute("list-disc list-outside pl-8")
          list:AddListItem("Properties of the Screen")
          list:AddListItem("Outputting Text onto the Screen")
          list:AddListItem("Drawing Lines and Shapes on the Screen")     
          list:AddListItem("Scrolling up the screen")
        section_screen:Add(list)
                
        //the section on the properties of the screen
        Section section_properties
        AddHeading(section_properties, "Properties of the Screen", 2)
        section_properties:AddParagraph(   "The screen makes up the top portion of the brick and is used to display text or shapes. "
                            +   "The screen is composed of pixels, which is just a fancy way of saying the screen is made up of tiny squares that can change color, "
                            +   "and in the screen's case they can only be black or blank. The width of the screen has 178 pixels (ranging from 0 to 177) "
                            +   "and these pixels all lie along the x-axis. The height of the screen is 128 pixels tall (ranging from 0 to 127) and these pixels all lie on the y-axis. "
                            +   "Although all screen actions work by drawing or removing color from one or more pixels, it is more the focus when drawing shapes, "
                            +   "so we will go into more detail about the pixels later.")
                
        //the section on outputting text
        Section section_outputting
        section_outputting:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_outputting, "Outputting Text onto the Screen", 2)
        Paragraph p_outputting
          p_outputting:AddText(   "The Screen class provides actions for three different types of text: ")
          Bold CSPtitle1
          CSPtitle1:AddText("normal")
          p_outputting:Add(CSPtitle1)
          p_outputting:AddText(", ")
          Bold CSPtitle2
          CSPtitle2:AddText("large")
          p_outputting:Add(CSPtitle2)
          p_outputting:AddText(", and ")
          Bold CSPtitle3
          CSPtitle3:AddText("inverted")
          p_outputting:Add(CSPtitle3)
          p_outputting:AddText(". Text is output to one of eight text lines on the screen (referred to as lines 0 through 7, where 0 is the top line) and each line is 16 pixels tall. "
                      +   "For example, the code ")
          CodeBlock cb1
          cb1:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          cb1:AddText("screen:Output(" + dq + "Hello" + dq + ", 3)")
          p_outputting:Add(cb1)
          p_outputting:AddText(            " will print the normal text " + dq + "Hello" + dq + " to line 3." + cr + cr
                              +   "Normal text is the basis for all of the other styles, and so the previous code segment does not specify a style in the action name. "
                              +   "By contrast, if we want to print the same message in a large font, we would use the code ")
          CodeBlock cb2
          cb2:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          cb2:AddText("screen:OutputLarge(" + dq + "Hello" + dq + ", 3)")
          p_outputting:Add(cb2)
          p_outputting:AddText(            " instead. Large font takes up two lines of text (the line specified and the one below it) and can fit less information on screen, "
                              +   "but it is much easier to see. Inverted text is the same size as normal text, but the difference is that all of the pixels used for the text are inverted, "
                              +   "meaning the blank pixels become black and vice versa, making it look like the text has been cut out from a solid black bar. "
                              +   "To use the previous example again, inverted text actions will look like ")
          CodeBlock cb3
          cb3:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          cb3:AddText("screen:OuputInvertedColor(" + dq + "Hello" + dq + ", 3)")
          p_outputting:Add(cb3)
          p_outputting:AddText(            ".")
        section_outputting:Add(p_outputting)


        //the section on format
        AddHeading(section_outputting, "Format", 3)
        section_outputting:AddParagraph(   "For the three types of text, Quorum has a few formatting actions to help position our text on the screen:")



        ListItem li2
        ListItem li3
        ListItem li4
        CodeBlock cb4
        cb4:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb5
        cb5:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb6
        cb6:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")

        cb4:AddText("Output(text message, integer line)")
        li2:Add(cb4)
        cb5:AddText("Output(text message, integer line, integer indent)")
        li3:Add(cb5)
        cb6:AddText("OutputCenter(text message, integer line)") 
        li4:Add(cb6)

        UnorderedList list2
          list2:AddClassAttribute("list-disc list-outside pl-8")
          list2:Add(li2)
          list2:Add(li3)
          list2:Add(li4)
        section_outputting:Add(list2)



        Paragraph p_format
        p_format:AddText(   "We have been using the first action in the previous examples where we would just tell the program the message to display and what line it should be on. "
                            +   "This causes the text to start on the left side of the screen, but what if we want the text indented or centered? "
                            +   "That is where the other actions can be used. One thing that should be pointed out here is that all letters take up the same amount of space, "
                            +   "8 pixels wide with the normal font, and the indentation parameter is specified in terms of these spaces, "
                            +   "meaning an indentation of 1 shifts the text over by one letter's space. Each type of font (normal, inverted, large) "  
                            +   "has this set of actions for formatting text. "
                            +   "For example, to center a large text message on lines 3 and 4, code such as ")
        CodeBlock cb9
        cb9:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb9:AddText("screen:OutputCenterLarge(" + dq + "Hello" + dq + ", 3)")
        p_format:Add(cb9)
        p_format:AddText(            " will do the trick.")
        section_outputting:Add(p_format)

        
        //the section on drawing lines and shapes
        Section section_drawing
        section_drawing:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_drawing, "Drawing Lines and Shapes on the Screen", 2)

        section_drawing:AddParagraph(   "Through Qurourm, we can draw lines, rectangles, circles, and ellipses on the screen. "
                            +   "Drawing these will require a point along the x-axis (width of the screen) and a point along the y-axis (height of the screen) "
                            +   "to determine the position of the line or shape. For the shapes, there are actions to draw outlines of shapes or full shapes, "
                            +   "and actions to erase outlines of shapes or full shapes.")                                                                                    
                
        //the section on lines
        AddHeading(section_drawing, "Lines", 3)
        Paragraph p_lines
        p_lines:AddText(   "To draw lines, we use the action ")
        CodeBlock cb10
        cb10:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb11
        cb11:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb12
          cb12:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb13
          cb13:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb14
          cb14:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb15
          cb15:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb10:AddText("DrawLine(integer xStart, integer yStart, integer xEnd, integer yEnd)")
        cb11:AddText("xStart")
        cb12:AddText("yStart")
        cb13:AddText("xEnd")
        cb14:AddText("yEnd")
        cb15:AddText("screen:DrawLine(0, 0, 177, 127)")
        p_lines:Add(cb10)
        p_lines:AddText(            ". The ")
        p_lines:Add(cb11)
        p_lines:AddText(            " and ")
        p_lines:Add(cb12)
        p_lines:AddText(            " parameters are used to determine the starting point of the line, while the ")
        p_lines:Add(cb13)
        p_lines:AddText(            " and ")
        p_lines:Add(cb14)
        p_lines:AddText(            " parameters determine the ending point of the line. Thus, to make a diagonal line that goes across theentire screen, we could use the code ")
        p_lines:Add(cb15)
        p_lines:AddText(            ".")
        section_drawing:Add(p_lines)


        //the section on rectangles
        bodyDiv:AddHeading("Rectangles", 3)
        bodyDiv:AddParagraph(   "Rectangles have the following actions:")

        ListItem li5
        ListItem li6
        ListItem li7
        ListItem li8
        CodeBlock cb16
          cb16:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb17
          cb17:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb18
          cb18:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb19
          cb19:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb16:AddText("DrawRectangleOutline(integer xBottomLeft, integer yBottomLeft, integer width, integer height)")
        li5:Add(cb16)
        cb17:AddText("EraseRectangleOutline(integer xStart, integer yStart, integer width, integer height)")
        li6:Add(cb17)
        cb18:AddText("DrawRectangleFull(integer xStart, integer yStart, integer width, integer height)") 
        li7:Add(cb18)
        cb19:AddText("EraseRectangleFull(integer xStart, integer yStart, integer width, integer height)") 
        li8:Add(cb19)

        UnorderedList list3
          list3:AddClassAttribute("list-disc list-outside pl-8")
          list3:Add(li5)
          list3:Add(li6)
          list3:Add(li7)
          list3:Add(li8)
        section_drawing:Add(list3)

        section_drawing:AddParagraph(   "To draw or erase any rectangle, we need to indicate the starting point for the rectangle, which is the lower-left corner of it, and then specify where it should end, which will be the top-right corner.")

        //the section on circles
        AddHeading(section_drawing, "Circles", 3)

        section_drawing:AddParagraph(   "Circles have the following actions:")

        ListItem li9
        ListItem li10
        ListItem li11
        ListItem li12
        CodeBlock cb20
          cb20:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb21
          cb21:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb22
          cb22:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb23
          cb23:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb20:AddText("DrawCircleOutline(integer x, integer y, integer radius)")
        li9:Add(cb20)
        cb21:AddText("EraseCircleOutline(integer x, integer y, integer radius)")
        li10:Add(cb21)
        cb22:AddText("DrawCircleFull(integer x, integer y, integer radius)") 
        li11:Add(cb22)
        cb23:AddText("EraseCircleFull(integer x, integer y, integer radius)") 
        li12:Add(cb23)

        UnorderedList list4
          list4:AddClassAttribute("list-disc list-outside pl-8")
          list4:Add(li9)
          list4:Add(li10)
          list4:Add(li11)
          list4:Add(li12)
        section_drawing:Add(list4)

        section_drawing:AddParagraph(   "To draw or erase a circle, we need to specify the center pixel of the circle and then tell the program how far out from that point the circle should be in every direction, also known as the radius of the circle.")
                
        //the section on ellipses
        AddHeading(section_drawing, "Ellipses", 3)

        section_drawing:AddParagraph(   "Ellipses have the following actions:")


        ListItem li13
        ListItem li14
        ListItem li15
        ListItem li16
        CodeBlock cb24
          cb24:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb25
          cb25:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb26
          cb26:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb27
          cb27:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb24:AddText("DrawEllipseOutline(integer x, integer y, integer width, integer height)")
        li13:Add(cb24)
        cb25:AddText("EraseEllipseOutline(integer x, integer y, integer width, integer height)")
        li14:Add(cb25)
        cb26:AddText("DrawEllipseFull(integer x, integer y, integer width, integer height)") 
        li15:Add(cb26)
        cb27:AddText("EraseEllipseFull(integer x, integer y, integer width, integer height)") 
        li16:Add(cb27)

        UnorderedList list5
          list5:AddClassAttribute("list-disc list-outside pl-8")
          list5:Add(li13)
          list5:Add(li14)
          list5:Add(li15)
          list5:Add(li16)
        section_drawing:Add(list5)

        section_drawing:AddParagraph(   "Drawing an ellipse, or an oval, is similar to a circle in that we need to specify the center of the ellipse, but then we need to tell the program the maximum width of the ellipse and the maximum height for it as well.")
                


        //the section on scrolling up
        Section section_scrolling
        section_scrolling:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_scrolling, "Scrolling Up the Screen", 2)

        section_scrolling:AddParagraph(   "For times when we are going to be using more than the 8 text lines available, such as updating information constantly, it may be useful to only push the oldest information off screen first. 
                                In this case, we can use the different types of scroll actions to move everything on the screen up. 
                                The scroll actions are as follows:")

        ListItem li17
        ListItem li18
        ListItem li19
        CodeBlock cb28
          cb28:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb29
          cb29:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock cb30
          cb30:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        cb28:AddText("ScrollUp()")
        li17:Add(cb28)
        cb29:AddText("ScrollUp(text message)")
        li18:Add(cb29)
        cb30:AddText("ScrollUp(integer lines)") 
        li19:Add(cb30)

        UnorderedList list6
          list6:AddClassAttribute("list-disc list-outside pl-8")
          list6:Add(li17)
          list6:Add(li18)
          list6:Add(li19)
        section_scrolling:Add(list6)





        Paragraph p_scrolling
          p_scrolling:AddText("The first action, ")
          CodeBlock cb31
          cb31:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          CodeBlock cb32
          cb32:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          CodeBlock cb33
          cb33:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
          p_scrolling:AddText("ScrollUp()")
          p_scrolling:AddText("ScrollUp(text message)")
          p_scrolling:AddText("ScrollUp(integer lines)")
          p_scrolling:Add(cb31)
          p_scrolling:AddText(            " moves everything, including text and shapes, on the screen up one text line. "
                              +   "If we already know what we want to put on the new line we just made room for, we can use the ")
          p_scrolling:Add(cb32)
          p_scrolling:AddText(            " action to place our text for us after scrolling up. The last action, ")
          p_scrolling:Add(cb33)
          p_scrolling:AddText(            " is used to scroll up more than just line, which can be particularyly useful if we are using large text, since it displays over two text lines.")
        section_scrolling:Add(p_scrolling)


        //the section on additional information
        Section section_additional
        section_additional:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_additional, "Additional Information", 2)

        UnorderedList list7
        list7:AddClassAttribute("list-disc list-outside pl-8")

        Paragraph p_additional
        ListItem li_additional
        CodeBlock cb34
        cb34:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        p_additional:AddText("To clear everything on the screen, use the ")
        p_additional:AddText("Clear()")
        p_additional:Add(cb34)
        p_additional:AddText(" action on a Screen object.")



        Paragraph p_additional2
        ListItem li_additional2

        p_additional2:AddText(     "For documentation on the Screen class, see ")
        Link link1 = p_additional2:AddLink(     "here" ,  "/Libraries/Robots/Lego/Screen.html")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p_additional2:AddText(     ".")    

        li_additional:Add(p_additional)
        li_additional2:Add(p_additional2)

        list7:Add(li_additional)
        list7:Add(li_additional2)
        section_additional:Add(list7)


        bodyDiv:Add(section_screen)
        bodyDiv:Add(section_properties)
        bodyDiv:Add(section_outputting)
        bodyDiv:Add(section_drawing)
        bodyDiv:Add(section_scrolling)
        bodyDiv:Add(section_additional)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how code the screen on a LEGO Mindstorms robot with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Screen"
    end

    action GetImageLocation returns text
        return "/media/robots/screen.png"
    end

    action GetName returns text
        return "Screen"
    end

    action GetShortDescription returns text
        return "how to use lego robots screen"
    end

    action GetLocation returns text
        return "tutorials/robots/legoScreen.html"
    end

    action GetLinkName returns text
        return "Screen"
    end

    action GetSectionName returns text
        return "LEGOâ„¢ Robots"
    end
end
