use Libraries.Web.Page.all
use Libraries.Containers.Array




class LegoSensorsTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("LEGO Sensors - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Using Sensors with LEGOâ„¢ Robots", 1)

        headDiv:AddText("This tutorial helps explain how to use sensors on Robots in Quorum.")
        bodyDiv:Add(headDiv)

        Section section_sensors
        section_sensors:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_sensors, "Using Sensors with Robots in Quorum", 2)
        section_sensors:AddParagraph("In this tutorial, we will become more familiar 
            with the sensors on the robots. We will explain the similarities and differences
            between the different types of sensors and cover these topics:")

        UnorderedList list1
        list1:AddClassAttribute("list-disc list-outside pl-8")
        list1:AddListItem("General sensor information")
        list1:AddListItem("The color sensor")
        list1:AddListItem("The infrared sensor")
        list1:AddListItem("The ultrasonic sensor")
        list1:AddListItem("The touch sensor")
        section_sensors:Add(list1)

        Section section_sensor_info
        section_sensor_info:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_sensor_info, "General Sensor Information", 2)
        section_sensor_info:AddParagraph("Sensors are used to gather information about the environment and relay it to the program. Although they collect different types of information, they are all connected to the brick in the same way. Each sensor needs to be plugged into any one of the four ports on the bottom side of the brick, labeled 1 through 4. Remember the motors are plugged into ports A, B, C and D on the top.")
        section_sensor_info:AddParagraph("Just like the motors, it is important to remember which sensor is connected to which port, because the program needs to know where to send and receive information. In order to use actions with a sensor, the port for that sensor must be specified in the program.")
        
        Section section_color_sensor
        section_color_sensor:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_color_sensor, "Color Sensor", 2)
        section_color_sensor:AddParagraph("The color sensor's primary function is to detect colors, however, it can also detect light levels and measure the reflectivity of objects. The color sensor works by projecting a red, white, or blue light.")
        
        Paragraph p1
        CodeBlock c11
        c11:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c12
        c12:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c13
        c13:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c14
        c14:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c15    
        c15:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c16
        c16:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c17
        c17:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c18
        c18:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        c11:AddText(dq+"red"+dq)
        c12:AddText(dq+"green"+dq)
        c13:AddText(dq+"blue"+dq)
        c14:AddText(dq+"yellow"+dq)
        c15:AddText(dq+"brown"+dq)
        c16:AddText(dq+"white"+dq)
        c17:AddText(dq+"black"+dq)
        c18:AddText(dq+"none"+dq)
        p1:AddText("In order to detect colors, the color sensor projects its white light and measures the red, green, and blue levels. Based on its reading, the sensor can return text to the program representing the color it read. The colors that it can return to the program are ")
        p1:Add(c11)
        p1:AddText(", ")
        p1:Add(c12)
        p1:AddText(", ")
        p1:Add(c13)
        p1:AddText(", ")
        p1:Add(c14)
        p1:AddText(", ")
        p1:Add(c15)
        p1:AddText(", ")
        p1:Add(c16)
        p1:AddText(", and ")
        p1:Add(c17)
        p1:AddText(". If the sensor cannot read a color, it will return the text ")
        p1:Add(c18)
        p1:AddText(" to the program. The range of the color sensor is fairly short, so when measuring colors be sure to have the color to read located within a few centimeters of the sensor.")
        section_color_sensor:Add(p1)

        section_color_sensor:AddText("The actions of the color sensor are:")
        UnorderedList list2
        list2:AddClassAttribute("list-disc list-outside pl-8")
        list2:AddListItem("SetPort")
        list2:AddListItem("GetColor")
        list2:AddListItem("GetRedGreenBlueLevels")
        list2:AddListItem("GetLightLevel")
        list2:AddListItem("GetReflectionLevel")
        list2:AddListItem("IsLightOn")
        list2:AddListItem("SetLightColor")
        list2:AddListItem("GetLightColor")
        section_color_sensor:Add(list2)
        
        section_color_sensor:AddParagraph("The following is an example program that uses the ColorSensor class, playing different tones based on the color it reads:")


        CodeBlock cb0
        Span s1
        Span s2
        Span s3
        Span s4
        Span s5
        cb0:AddText(    "use Libraries.Robots.Lego.ColorSensor" + cr 
                    +   "use Libraries.Robots.Lego.Motor" + cr 
                    +   "use Libraries.Robots.Lego.Utility" + cr 
                    +   "use Libraries.Robots.Lego.Sound" + cr + cr
                    +   "ColorSensor colorSensor" + cr 
                    +   "Motor motor" + cr 
                    +   "Utility utility" + cr 
                    +   "Sound sound" + cr + cr )
        s1:AddText(     "//SetPort is always called first on any sensor object" + cr)
        s1:SetClassAttribute("comment")
        cb0:Add(s1)
        cb0:AddText(    "colorSensor:SetPort(4) " + cr + cr)
        s2:AddText(     "//have the motors connected to ports A and B move the robot" + cr
                    +   "//this command will run the motors until the program terminates or" + cr 
                    +   "//a Stop() action is issued to the motor." + cr )
        s2:SetClassAttribute("comment")
        cb0:Add(s2)
        cb0:AddText(    "motor:RotateForward("+dq+"A"+dq+")" + cr
                   +    "motor:RotateForward("+dq+"B"+dq+")" + cr + cr )
        s3:AddText(     "//"+dq+"text"+dq+" holds the text value returned by the GetColor() action" + cr)
        s3:SetClassAttribute("comment")
        cb0:Add(s3)
        cb0:AddText(    "text color = "+dq+dq+" " + cr
                   +    "repeat 5 times" + cr )
        s4:AddText(     "//attempt to read a color" + cr)
        s4:SetClassAttribute("comment")
        cb0:Add(s4)
        cb0:AddText(    "    color = colorSensor:GetColor() " + cr
                   +    "    if color = "+dq+"none"+dq+"" + cr 
                   +    "        sound:Buzz()" + cr 
                   +    "    elseif color = "+dq+"black"+dq+"" + cr 
                   +    "        sound:PlayTone(20, 250)" + cr 
                   +    "    elseif color = "+dq+"white"+dq+"" + cr 
                   +    "        sound:PlayTone(60, 250)" + cr 
                   +    "    elseif color = "+dq+"brown"+dq+"" + cr 
                   +    "        sound:PlayTone(180, 250)" + cr 
                   +    "    elseif color = "+dq+"red"+dq+"" + cr 
                   +    "        sound:PlayTone(540, 250)" + cr 
                   +    "    elseif color = "+dq+"green"+dq+"" + cr 
                   +    "        sound:PlayTone(1620, 250)" + cr 
                   +    "    elseif color = "+dq+"blue"+dq+"" + cr 
                   +    "        sound:PlayTone(4860, 250)" + cr 
                   +    "    elseif color = "+dq+"yellow"+dq+"" + cr 
                   +    "        sound:PlayTone(14580, 250)" + cr 
                   +    "    end" + cr + cr )
        s5:AddText(     "    //lets the robot move a little before checking the color again" + cr)
        s5:SetClassAttribute("comment")
        cb0:Add(s5)
        cb0:AddText(    "    utility:DelayMilliseconds(500)" + cr
                   +    "end" + cr + cr )
        section_color_sensor:Add(preformatter:GeneratePreformattedCode(cb0))


    Paragraph p_color
    p_color:AddText("For an in-depth look at each action in the ColorSensor class as well as how they can be used, see the ")

    Link link1 = p_color:AddLink("ColorSensor reference page","/libraries/Robots/Lego/ColorSensor.html")
    link1:AddClassAttribute("underline text-quorum-blue-150")

    p_color:AddText(".")
    section_color_sensor:Add(p_color)

    Section section_infrared
    section_infrared:SetClassAttribute("flex flex-col gap-y-2")

    AddHeading(section_infrared, "Infrared Sensor", 2)
    
    section_infrared:AddParagraph("The infrared sensor is used for two things:")

    UnorderedList list3
    list3:AddClassAttribute("list-disc list-outside pl-8")
    list3:AddListItem("measuring the distance of objects")  
    list3:AddListItem("interacting with the remote control")
    section_infrared:Add(list3)
    
    section_infrared:AddParagraph("You can use the infrared sensor to find the distance between the robot and an object to prevent the robot from running into the object or to change the robot's behavior. 
                        While certain factors can affect the sensor's measurement range, the maximum reliable range to measure distance is around 40 to 50 centimeters. 
                        When the sensor returns the distance to the program, it returns an integer approximating the number of centimeters between the sensor and the object.")
    section_infrared:AddParagraph("The remote control, also called a beacon, can be used with the infrared sensor to remotely issue commands to the robot. 
                        The infrared sensor is also capable of tracking relative distance and position of the remote control. 
                        All remote communication takes place over one of four channels, which are assigned in the program and changed on the remote. 
                        The center of the remote control has a red vertical slider that can be used to change the remote's channel. 
                        Above the slider is a circular hole that shows the channel number based on the slider's position. 
                        When the slider is at the top-most position, the remote is using channel 1, and when the slider is at the bottom-most position, the remote is using channel 4. 
                        When calling an action that uses remote interaction in a program, it will always require that we pass the channel we want to use as a parameter.")
    section_infrared:AddParagraph("When tracking a remote with the infrared sensor, the reliable range is roughly 100 centimeters between the two points of connection. 
                        When the sensor is tracking the distance or direction of a remote, it is important that the remote sends out its signals. 
                        The large button on the top of the remote toggles the remote's signal on and off, while the smaller buttons on the left and right side of the remote only send out a signal while they are pressed. 
                        If the sensor is able to detect a remote, it will return the distance in centimeters (up to 100) as well as the angle (in degrees), of the remote with respect to the sensor. 
                        The angle will range from -180 to 180, where negative values represent that the remote is on the left side of the sensor, positive values are on the right side of the sensor, and a value of 0 means the remote is straight ahead. 
                        When using the GetRemoteDirection() action, be sure to keep in mind that the sensor's margin of error is around 7 degrees.")
    section_infrared:AddParagraph("When retrieving commands from the remote, the sensor can read the following button combinations, listed by their corresponding integer return value:")



        WebTable table = AddWebTable("Remote Control Button Mappings: Sensor Return Values and Corresponding Button Combinations")
        TableBody tableBody = AddTableBody()

        Array<text> tableHeaderArray
        tableHeaderArray:Add("Return Value")
        tableHeaderArray:Add("Button")
        TableHeader tableHeader = AddTableHeaderRow(tableHeaderArray)
        table:Add(tableHeader)
        
        Array<text> tableRowArray
        tableRowArray:Add("1")
        tableRowArray:Add("TOP-LEFT")
        tableBody:Add(AddTableBodyRow(tableRowArray))

        Array<text> tableRowArray2
        tableRowArray2:Add("2")
        tableRowArray2:Add("BOTTOM-LEFT")
        tableBody:Add(AddTableBodyRow(tableRowArray2))

        Array<text> tableRowArray3
        tableRowArray3:Add("3")
        tableRowArray3:Add("TOP-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray3))
 
        Array<text> tableRowArray4
        tableRowArray4:Add("4")
        tableRowArray4:Add("BOTTOM-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray4))
  
        Array<text> tableRowArray5
        tableRowArray5:Add("5")
        tableRowArray5:Add("TOP-LEFT+TOP-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray5))
   
        Array<text> tableRowArray6
        tableRowArray6:Add("6")
        tableRowArray6:Add("TOP-LEFT+BOTTOM-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray6))
    
        Array<text> tableRowArray7
        tableRowArray7:Add("7")
        tableRowArray7:Add("BOTTOM-LEFT+TOP-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray7))
     
        Array<text> tableRowArray8
        tableRowArray8:Add("8")
        tableRowArray8:Add("BOTTOM-LEFT+BOTTOM-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray8))
      
        Array<text> tableRowArray9
        tableRowArray9:Add("9")
        tableRowArray9:Add("TOP CENTER")
        tableBody:Add(AddTableBodyRow(tableRowArray9))
       
        Array<text> tableRowArray10
        tableRowArray10:Add("10")
        tableRowArray10:Add("BOTTOM-LEFT + TOP-LEFT")
        tableBody:Add(AddTableBodyRow(tableRowArray10))
        
        Array<text> tableRowArray11
        tableRowArray11:Add("11")
        tableRowArray11:Add("TOP-RIGHT + BOTTOM-RIGHT")
        tableBody:Add(AddTableBodyRow(tableRowArray11))

        table:Add(tableBody)
        section_infrared:Add(table)


    section_infrared:AddParagraph("There are five actions for the infrared sensor:")
    UnorderedList list4
    list4:AddClassAttribute("list-disc list-outside pl-8")
    list4:AddListItem("SetPort")   
    list4:AddListItem("GetDistance")
    list4:AddListItem("GetRemoteDistance")
    list4:AddListItem("GetRemoteDirection")
    list4:AddListItem("GetRemoteCommand")
    section_infrared:Add(list4)
    
    section_infrared:AddParagraph("Following is an example program that uses the infrared sensor to control the movement of a robot as long as it isn't about to run into anything:")


        CodeBlock cb1
        Span s6
        Span s7
        Span s8
        Span s9
        Span s10
        Span s11
        Span s12
        cb1:AddText(    "use Libraries.Robots.Lego.InfraredSensor" + cr 
                    +   "use Libraries.Robots.Lego.Motor" + cr 
                    +   "use Libraries.Robots.Lego.Utility" + cr 
                    +   "use Libraries.Robots.Lego.Screen" + cr + cr
                    +   "InfraredSensor infraredSensor" + cr 
                    +   "Motor motor" + cr 
                    +   "Utility utility" + cr 
                    +   "Screen screen" + cr + cr                    
                    +   "integer command = 0" + cr )
        s6:AddText(     "//register the infrared sensor connected to port 4 of the robot" + cr)
        s6:SetClassAttribute("comment")
        cb1:Add(s6)
        cb1:AddText(    "infraredSensor:SetPort(4)" + cr )
        s7:AddText(     "//IMPORTANT: this loop will continue until the program is stopped manually by pressing the center+down" + cr
                    +   "//buttons on the brick simultaneously" + cr )
        s7:SetClassAttribute("comment")
        cb1:Add(s7)
        cb1:AddText(    "repeat while true" + cr
                   +    "    if infraredSensor:GetDistance() < 25" + cr 
                   +    "        screen:Output("+dq+"Object nearby."+dq+", 0)" + cr 
                   +    "        sound:Buzz()" + cr 
                   +    "    else" + cr 
                   +    "        screen:Clear()" + cr )
        s8:AddText(     "        //determines what button was pressed on the remote using channel 1" + cr)
        s8:SetClassAttribute("comment")
        cb1:Add(s8)
        cb1:AddText(    "        command = infraredSensor:GetRemoteCommand(1)" + cr
                   +    "        if command = 1" + cr )
        s9:AddText(     "           //top-left button pressed, move forward" + cr)
        s9:SetClassAttribute("comment")
        cb1:Add(s9)
        cb1:AddText(    "            motor:SetSpeed("+dq+"B"+dq+", 480)" + cr
                   +    "            motor:SetSpeed("+dq+"C"+dq+", 480)" + cr 
                   +    "            motor:RotateForward("+dq+"B"+dq+")" + cr 
                   +    "            motor:RotateForward("+dq+"C"+dq+")" + cr 
                   +    "        elseif command = 2" + cr)
        s10:AddText(     "            //bottom-left button pressed, move backward" + cr)
        s10:SetClassAttribute("comment")
        cb1:Add(s10)
        cb1:AddText(    "            motor:SetSpeed("+dq+"B"+dq+", 480)" + cr
                   +    "            motor:SetSpeed("+dq+"C"+dq+", 480)" + cr 
                   +    "            motor:RotateBackward("+dq+"B"+dq+")" + cr 
                   +    "            motor:RotateBackward("+dq+"C"+dq+")" + cr 
                   +    "        elseif command = 3" + cr )
        s11:AddText(     "            //top-right button pressed, move right" + cr)
        s11:SetClassAttribute("comment")
        cb1:Add(s11)
        cb1:AddText(    "            motor:SetSpeed("+dq+"B"+dq+", 480)" + cr
                   +    "            motor:SetSpeed("+dq+"C"+dq+", 480)" + cr 
                   +    "            motor:Stop("+dq+"B"+dq+")" + cr 
                   +    "            motor:RotateForward("+dq+"C"+dq+")" + cr 
                   +    "        elseif command = 4" + cr )
        s12:AddText(     "            //bottom-right button pressed, move left" + cr)
        s12:SetClassAttribute("comment")
        cb1:Add(s12)
        cb1:AddText(    "            motor:SetSpeed("+dq+"B"+dq+", 480)" + cr
                   +    "            motor:SetSpeed("+dq+"C"+dq+", 480)" + cr 
                   +    "            motor:Stop("+dq+"C"+dq+")" + cr 
                   +    "            motor:RotateForward("+dq+"B"+dq+")" + cr 
                   +    "        else" + cr 
                   +    "            motor:Stop("+dq+"B"+dq+")" + cr 
                   +    "            motor:Stop("+dq+"C"+dq+")" + cr 
                   +    "        end" + cr 
                   +    "    end" + cr 
                   +    "end" + cr )
        section_infrared:Add(preformatter:GeneratePreformattedCode(cb1))


    Paragraph p0
    p0:AddText("For an in-depth look at each action in the InfraredSensor class as well as how they can be used, see the ")
    Link link2 = p0:AddLink("InfraredSensor reference page.","/libraries/Robots/Lego/InfraredSensor.html")
    link2:AddClassAttribute("underline text-quorum-blue-150")
    p0:AddText(".")
    section_infrared:Add(p0)

    Section section_ultrasonic
    section_ultrasonic:SetClassAttribute("flex flex-col gap-y-2")

    AddHeading(section_ultrasonic, "Ultrasonic Sensor", 2)
    section_ultrasonic:AddParagraph("The ultrasonic sensor is used solely to measure the distance of objects. It has a much further range for measuring distances than the infrared sensor, nearly three times as much, and is reliable up to around 1.5 meters. When measuring distances, the sensor will return a number to the program indicating how many meters away an object is.") 
    section_ultrasonic:AddParagraph("The UltrasonicSensor class consists of two actions:")
    UnorderedList list5
    list5:AddClassAttribute("list-disc list-outside pl-8")
    list5:AddListItem("SetPort")
    list5:AddListItem("GetDistance")
    section_ultrasonic:Add(list5)
    section_ultrasonic:AddParagraph("The following is an example of how the ultrasonic sensor can be used by a moving robot to avoid a collision with an object:")
    

        CodeBlock cb2
        Span s13
        Span s14
        Span s15
        Span s16
        cb2:AddText(    "use Libraries.Robots.Lego.UltrasonicSensor" + cr 
                    +   "use Libraries.Robots.Lego.Motor" + cr 
                    +   "use Libraries.Robots.Lego.Utility" + cr + cr
                    +   "UltrasonicSensor ultrasonicSensor" + cr 
                    +   "Motor motorController" + cr 
                    +   "Utility delayController" + cr + cr )
        s13:AddText(     "//tell the robot which port the sensor is plugged into" + cr)
        s13:SetClassAttribute("comment")
        cb2:Add(s13)
        cb2:AddText(    "ultrasonicSensor:SetPort(1)" + cr + cr 
                   +    "motor:RotateForward("+dq+"B"+dq+")" + cr 
                   +    "repeat 5 times" + cr 
                   +    "    motor:RotateForward("+dq+"C"+dq+")" + cr )
        s14:AddText(     "    //allow the robot to continue going forward while no object within 1.25 meters exists in its path" + cr )
        s14:SetClassAttribute("comment")
        cb2:Add(s14)
        cb2:AddText(    "    repeat while ultrasonicSensor:GetDistance() > 1.25" + cr)
        s15:AddText(     "        //check the sensor every 20 milliseconds" + cr)
        s15:SetClassAttribute("comment")
        cb2:Add(s15)
        cb2:AddText(    "        delayController:DelayMilliseconds(20)" + cr
                   +    "    end" + cr )
        s16:AddText(     "    //have the robot turn by stopping just one of its motors for a second" + cr)
        s16:SetClassAttribute("comment")
        cb2:Add(s16)
        cb2:AddText(    "    motor:Stop("+dq+"C"+dq+")" + cr
                   +    "    delayController:DelayMilliseconds(1000)" + cr 
                   +    "end" + cr)
        section_ultrasonic:Add(preformatter:GeneratePreformattedCode(cb2))




    Paragraph p_ultrasonic
      p_ultrasonic:AddText("For an in-depth look at the actions in the UltrasonicSensor class as well as how they can be used, see the ")                                                
      Link link3 = p_ultrasonic:AddLink("UltrasonicSensor reference page.","/libraries/Robots/Lego/UltrasonicSensor.html")
      link3:AddClassAttribute("underline text-quorum-blue-150")
      p_ultrasonic:AddText(".")
    section_ultrasonic:Add(p_ultrasonic)



    Section section_touch
    section_touch:SetClassAttribute("flex flex-col gap-y-2")

    AddHeading(section_touch, "Touch Sensor", 2)

    section_touch:AddParagraph("The touch sensor is much less complex than most of the other sensors and only used to determine whether its protruding button is pressed in or not. This button is most commonly used by a person to change what the robot is doing.")
    section_touch:AddParagraph("The TouchSensor class consists of two actions:")
    UnorderedList list6
    list6:AddClassAttribute("list-disc list-outside pl-8")
    list6:AddListItem("SetPort")
    list6:AddListItem("IsPressed")
    section_touch:Add(list6)
    section_touch:AddParagraph("The following is an example of how the touch sensor can be used to change a robot's behavior when it is pressed:")


        CodeBlock cb3
        Span s17
        Span s18
        Span s19
        cb3:AddText(    "use Libraries.Robots.Lego.TouchSensor" + cr 
                    +   "use Libraries.Robots.Lego.Motor" + cr 
                    +   "use Libraries.Robots.Lego.Sound" + cr 
                    +   "use Libraries.Robots.Lego.Utility" + cr + cr
                    +   "TouchSensor touchSensor" + cr 
                    +   "Motor motor" + cr 
                    +   "Sound sound" + cr 
                    +   "Utility utility" + cr + cr )
        s17:AddText(     "//tell the program that the touch sensor connected to port 3 of the robot" + cr)
        s17:SetClassAttribute("comment")
        cb3:Add(s17)
        cb3:AddText(    "touchSensor:SetPort(3)" + cr + cr  )
        s18:AddText(     "//two motors used to move the robot, connected to ports B and C" + cr )
        s18:SetClassAttribute("comment")
        cb3:Add(s18)
        cb3:AddText(    "motor:SetSpeed(motor:MOTOR_B, 720)" + cr
                    +   "motor:SetSpeed(motor:MOTOR_C, 720) " + cr 
                    +   "repeat 10 times" + cr 
                    +   "    if touchSensor:IsPressed()" + cr 
                    +   "        sound:Beep()" + cr 
                    +   "        motor:RotateForward(motor:MOTOR_B)" + cr 
                    +   "        motor:RotateBackward(motor:MOTOR_C)" + cr 
                    +   "    else" + cr 
                    +   "        sound:Buzz()" + cr 
                    +   "        motor:RotateBackward(motor:MOTOR_B)" + cr 
                    +   "        motor:RotateForward(motor:MOTOR_C)" + cr 
                    +   "    end" + cr )
        s19:AddText(     "    //wait one second to start the loop and check the button status again." + cr)
        s19:SetClassAttribute("comment")
        cb3:Add(s19)
        cb3:AddText(    "    motor:Stop("+dq+"C"+dq+")" + cr
                    +    "    delayController:DelayMilliseconds(1000)" + cr                    
                    +    "end" + cr )
        section_touch:Add(preformatter:GeneratePreformattedCode(cb3))



    Paragraph p_touch
      p_touch:AddText("For an in-depth look at the TouchSensor class as well as how they can be used, see the ")                                                
      Link link4 = p_touch:AddLink("TouchSensor reference page.","/libraries/Robots/Lego/TouchSensor.html")                                                
      link4:AddClassAttribute("underline text-quorum-blue-150")
      p_touch:AddText(".")
    section_touch:Add(p_touch)





    Section section_gyro
    section_gyro:SetClassAttribute("flex flex-col gap-y-2")
    AddHeading(section_gyro, "Gyro Sensor", 2)
    section_gyro:AddParagraph("The gyro sensor is used to measure the orientation of the robot and the rate at which its orientation is changing. For best results, the gyro sensor should be secured firmly to the robot while in use.")
    section_gyro:AddParagraph("The gyro sensor class consists of four actions:")
    UnorderedList list7
    list7:AddClassAttribute("list-disc list-outside pl-8")
    list7:AddListItem("SetPort")
    list7:AddListItem("GetRotation")
    list7:AddListItem("GetRotationSpeed")
    list7:AddListItem("Reset")
    section_gyro:Add(list7)
    section_gyro:AddParagraph("The following is an example of how the gyro sensor can be used to keep the robot moving in a straight line:")


        CodeBlock cb4
        Span s20
        Span s21
        Span s22
        Span s23
        Span s24
        cb4:AddText(    "use Libraries.Robots.Lego.Motor" + cr 
                    +   "use Libraries.Robots.Lego.GyroSensor" + cr 
                    +   "use Libraries.Robots.Lego.Utility" + cr + cr
                    +   "class Main" + cr 
                    +   "    action Main" + cr 
                    +   "        Motor motor" + cr 
                    +   "        GyroSensor gyro" + cr 
                    +   "        Utility utility" + cr + cr 
                    +   "        gyro:SetPort(2)" + cr + cr 
                    +   "        motor:SetSpeed(motor:MOTOR_B, 50)" + cr
                    +   "        motor:SetSpeed(motor:MOTOR_C, 50)" + cr + cr )
        s20:AddText(    "        // the motor on the right" + cr)
        s20:SetClassAttribute("comment")
        cb4:Add(s20)
        cb4:AddText(    "        motor:RotateForward(motor:MOTOR_B)" + cr )
        s21:AddText(     "        // the motor on the left" + cr )
        s21:SetClassAttribute("comment")
        cb4:Add(s21)
        cb4:AddText(    "        motor:RotateForward(motor:MOTOR_C)" + cr + cr 
                    +    "        repeat while true" + cr)
        s22:AddText(     "            // if robot is moving too far to the right, adjust speed of motor" + cr
                    +    "            // C (the left motor) to keep the robot moving in a straight line" + cr)
        s22:SetClassAttribute("comment")
        cb4:Add(s22)
        cb4:AddText(    "            if gyro:GetRotation() < -1.0" + cr
                    +    "                motor:Stop(motor:MOTOR_C)" + cr                    
                    +    "                motor:SetSpeed(motor:MOTOR_C, motor:GetSpeed(motor:MOTOR_C) + 5)" + cr
                    +    "                motor:RotateForward(motor:MOTOR_C)" + cr )
        s23:AddText(     "            // if robot is moving too far to the left, adjust speed of motor" + cr
                    +    "            // B (the right motor) to keep the robot moving in a straight line" + cr)
        s23:SetClassAttribute("comment")
        cb4:Add(s23)
        cb4:AddText(    "            elseif gyro:GetRotation() > 1.0" + cr
                    +    "                motor:Stop(motor:MOTOR_B)" + cr                    
                    +    "                motor:SetSpeed(motor:MOTOR_B, motor:GetSpeed(motor:MOTOR_B) + 5)" + cr
                    +    "                motor:RotateForward(motor:MOTOR_B)" + cr 
                    +    "            end" + cr )
        s24:AddText(     "            // wait a second before sampling the angle again" + cr)
        s24:SetClassAttribute("comment")
        cb4:Add(s24)
        cb4:AddText(    "            utility:DelayMilliseconds(1000)" + cr
                    +    "        end" + cr                    
                    +    "    end" + cr
                    +    "end" + cr )
        section_gyro:Add(preformatter:GeneratePreformattedCode(cb4))



        Paragraph p_gyro
          p_gyro:AddText("For an in-depth look at the GyroSensor class as well as how they can be used, see the ")                                                
          Link link5 = p_gyro:AddLink("GyroSensor reference page.","/libraries/Robots/Lego/GyroSensor.html")                                               
          link5:AddClassAttribute("underline text-quorum-blue-150")
          p_gyro:AddText(".")
        section_gyro:Add(p_gyro)


        Section section_additional
        section_additional:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_additional, "Additional Information", 2)

        UnorderedList infoList
        infoList:AddClassAttribute("list-disc list-outside pl-8")


        ListItem li
        Paragraph p5
        Bold firstTitle
        firstTitle:AddText("A common cause of program crashes is forgetting to set the port of a sensor before using it.")
        p5:Add(firstTitle) 
        li:Add(p5)
        infoList:Add(li)

        ListItem li1
        li1:AddText("Class constants can be used to refer to sensors, specifically when passing them to an action.")
        infoList:Add(li1)

        ListItem li2
        Paragraph p6
        p6:AddText(     "For documentation on the Color Sensor class, see ")
        Link link6 = p6:AddLink(     "here" ,  "/libraries/Robots/Lego/ColorSensor.html")
        link6:AddClassAttribute("underline text-quorum-blue-150")
        p6:AddText(     ".") 
        li2:Add(p6)
        infoList:Add(li2)

        ListItem li3
        Paragraph p7
        p7:AddText(     "For documentation on the Infrared Sensor class, see ")
        Link link7 = p7:AddLink(     "here", "/libraries/Robots/Lego/InfraredSensor.html")
        link7:AddClassAttribute("underline text-quorum-blue-150")
        p7:AddText(     ". ")
        li3:Add(p7)
        infoList:Add(li3)

        ListItem li4
        Paragraph p8
        p8:AddText(     "For documentation on the Touch Sensor class, see ")
        Link link8 = p8:AddLink(     "here", "/Libraries/Robots/Lego/TouchSensor.html")
        link8:AddClassAttribute("underline text-quorum-blue-150")
        p8:AddText(     ". ")
        li4:Add(p8)
        infoList:Add(li4)

        section_additional:Add(infoList)

        bodyDiv:Add(section_sensors)
        bodyDiv:Add(section_sensor_info)
        bodyDiv:Add(section_color_sensor)
        bodyDiv:Add(section_infrared)
        bodyDiv:Add(section_ultrasonic)
        bodyDiv:Add(section_touch)
        bodyDiv:Add(section_gyro)
        bodyDiv:Add(section_additional)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    private action CreateRow(text left, text right) returns TableRow
        TableRow row
        TableData leftCell
        leftCell:AddText(left)
        TableData rightCell
        rightCell:AddText(right)
        row:Add(leftCell)
        row:Add(rightCell)
        return row
    end

    action GetMetaDescription returns text
        return "Learn how code the sensors on a LEGO Mindstorms robot with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Sensors"
    end

    action GetImageLocation returns text
        return "/media/robots/sensors.gif"
    end

    action GetName returns text
        return "Sensors"
    end

    action GetShortDescription returns text
        return "how to use lego sensors"
    end

    action GetLocation returns text
        return "tutorials/robots/legoSensors.html"
    end

    action GetLinkName returns text
        return "Sensors"
    end

    action GetSectionName returns text
        return "LEGOâ„¢ Robots"
    end
end
