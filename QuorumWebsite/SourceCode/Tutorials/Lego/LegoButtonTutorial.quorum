use Libraries.Web.Page.all
use Libraries.Containers.Array

class LegoButtonTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("LEGOâ„¢ Buttons - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Actions", 1)

        headDiv:AddText("How to tell a program to take a behavior.")
        bodyDiv:Add(headDiv)

        Section section_using_buttons
        section_using_buttons:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_using_buttons, "Using the Buttons of the Brick in Quorum", 2)
        section_using_buttons:AddParagraph(   "In this tutorial, we will discuss the buttons located on the brick and how they can be used in a program. Recall that the brick is the main component of every robot, where everything connects to. In addition, we will also go over the light emitting diode (LED) surrounding the buttons and its uses. Specifically, we will cover:")
        UnorderedList list1 
        list1:AddClassAttribute("list-disc list-outside pl-8")
        list1:AddListItem("The buttons of the brick")
        list1:AddListItem("The LED surrounding the buttons")
        section_using_buttons:Add(list1)


        Section section_button_types
        section_button_types:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_button_types, "The Buttons of the Brick", 2 )
        section_button_types:AddParagraph("In total, there are six buttons located below the screen. For the purposes of this tutorial, all buttons are referred to from the perspective of a person looking at the brick; for example, the right button refers to the right-most button when we are facing the brick's buttons. Five of the buttons are grouped in the center of the brick, referred to as the up, down, left, right, and center buttons. The outlying button is above and to the left of the rest, and referred to as the escape button, due to its behavior of going back when in menus.")
        section_button_types:AddParagraph("As mentioned in the Getting Started tutorial, a program can be stopped at any time by pressing the center and down buttons simultaneously. However, all of the buttons can be used in a program as well. By checking if a button is pressed in, we can have the robot respond to our presses and change what it is currently doing.")
        Paragraph p_types = section_button_types:AddParagraph("Another feature of the Button class is that we can have a program wait, meaning the program will stay on a certain line of code and not move to the next line, until one of the buttons is pressed. This means that if the robot is in a situation where it needs a person to tell it what to do next, based on a button press, the program can sit and wait for our input. Just remember that if something is already in progress that does not stop without the program telling it to, like the motor's RotateForward action, such behavior will continue.")
        p_types:AddClassAttribute("mb-4")
        section_button_types:AddParagraph("The six buttons have the following actions associated with them:")
        UnorderedList list2
        list2:AddClassAttribute("list-disc list-outside pl-8")
        list2:AddListItem("IsButtonPressed")
        list2:AddListItem("WaitForButtonPress")
        section_button_types:Add(list2)

        Paragraph p_types2
        p_types2:AddText("There are also the following class constants that can be used to refer to a specific button:")
        p_types2:AddClassAttribute("my-2")
        section_button_types:Add(p_types2)

        UnorderedList list3
        list3:AddClassAttribute("list-disc list-outside pl-8 mb-4")
        list3:AddListItem("UP_BUTTON")
        list3:AddListItem("DOWN_BUTTON")
        list3:AddListItem("LEFT_BUTTON")
        list3:AddListItem("RIGHT_BUTTON")
        list3:AddListItem("CENTER_BUTTON")
        list3:AddListItem("ESCAPE_BUTTON")
        section_button_types:Add(list3)

        section_button_types:AddParagraph("Below is an example of how the button actions and constants can be used in a program:")

        CodeBlock buttoncode1
        Span comment1
        Span comment2
        Span comment3
        buttoncode1:AddText(    "use Libraries.Robots.Lego.Button" + cr 
                            +    "use Libraries.Robots.Lego.Sound" + cr + cr 
                            +    "Button button" + cr 
                            +    "Sound sound" + cr + cr 
                            +    "repeat until button:IsButtonPressed(button:ESCAPE_BUTTON)" )
        comment1:AddText(     "   //the loop ends if the escape key is pressed in" + cr)
        comment1:SetClassAttribute("comment")
        buttoncode1:Add(comment1)
        buttoncode1:AddText(    "    button:WaitForButtonPress()" )
        comment2:AddText(     "                             //waits until a button is pressed" + cr)
        comment2:SetClassAttribute("comment")
        buttoncode1:Add(comment2)
        buttoncode1:AddText(    "    if button:IsButtonPressed(button:UP_BUTTON)" )
        comment3:AddText(     "             //play a sound based on the button pressed" + cr)
        comment3:SetClassAttribute("comment")
        buttoncode1:Add(comment3)
        buttoncode1:AddText(     "        sound:BeepSequenceUp()" + cr 
                            +    "    elseif button:IsButtonPressed(button:DOWN_BUTTON)" + cr
                            +    "        sound:BeepSequenceDown()" + cr 
                            +    "    elseif button:IsButtonPressed(button:LEFT_BUTTON)" + cr
                            +    "        sound:Beep()" + cr
                            +    "    elseif button:IsButtonPressed(button:RIGHT_BUTTON)" + cr
                            +    "        sound:BeepTwice()" + cr
                            +    "    elseif button:IsButtonPressed(button:CENTER_BUTTON)" + cr
                            +    "        sound:Buzz()" + cr
                            +    "    end" + cr
                            +    "end" + cr)        
        section_button_types:Add(preformatter:GeneratePreformattedCode(buttoncode1))



        Section section_led
        section_led:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_led, "The LED Surrounding the Buttons", 2)                                                
        section_led:AddParagraph("Surrounding the buttons is a thin transparent border that allows the LED inside of the brick to shine through. The LED can display three different colors: green, red, and orange. Using these colors, it also has three display modes, also called display patterns. The first pattern is a solid light, which is a constant output of color. The second pattern is a flashing pattern, in which the light quickly blinks in short intervals. The last pattern is the pulsing pattern, which is similar to a flashing pattern, but blinks twice on each interval, similar to that of a heartbeat.")
        section_led:AddParagraph("The LED has only one function: to display light. As such, there is one action in the Button class to use with it:")

        UnorderedList list4
        list4:AddClassAttribute("list-disc list-outside pl-8")
        list4:AddListItem("SetLightPattern")
        section_led:Add(list4)

        Paragraph p_led
        p_led:AddText("There are class constants to represent each of the patterns that the LED is capable of displaying:")
        section_led:Add(p_led)

        UnorderedList list5
        list5:AddClassAttribute("list-disc list-outside pl-8 mb-4")
        list5:AddListItem("NO_LIGHT = 0")
        list5:AddListItem("SOLID_GREEN_LIGHT = 1")
        list5:AddListItem("SOLID_RED_LIGHT = 2")
        list5:AddListItem("SOLID_ORANGE_LIGHT = 3")
        list5:AddListItem("FLASHING_GREEN_LIGHT = 4")   
        list5:AddListItem("FLASHING_RED_LIGHT = 5")
        list5:AddListItem("FLASHING_ORANGE_LIGHT = 6")
        list5:AddListItem("PULSING_GREEN_LIGHT = 7")
        list5:AddListItem("PULSING_RED_LIGHT = 8")
        list5:AddListItem("PULSING_ORANGE_LIGHT = 9")
        section_led:Add(list5)

        Paragraph p_led2
        p_led2:AddText("Below is the previous example program with the addition of the SetLightPattern action:")
        section_led:Add(p_led2)

        CodeBlock ledbuttoncode
        Span ledcomment1
        Span ledcomment2
        Span ledcomment3
        ledbuttoncode:AddText(    "use Libraries.Robots.Lego.Button" + cr 
                            +    "use Libraries.Robots.Lego.Sound" + cr + cr 
                            +    "Button button" + cr 
                            +    "Sound sound" + cr + cr 
                            +    "repeat until button:IsButtonPressed(button:ESCAPE_BUTTON)" )
        ledcomment1:AddText(     "   //the loop ends if the escape key is pressed in" + cr)
        ledcomment1:SetClassAttribute("comment")
        ledbuttoncode:Add(ledcomment1)
        ledbuttoncode:AddText(    "    button:WaitForButtonPress()" )
        ledcomment2:AddText(     "                             //waits until a button is pressed" + cr)
        ledcomment2:SetClassAttribute("comment")
        ledbuttoncode:Add(ledcomment2)
        ledbuttoncode:AddText(    "    if button:IsButtonPressed(button:UP_BUTTON)" )
        ledcomment3:AddText(     "             //play a sound and display a light pattern based on the button pressed" + cr)
        ledcomment3:SetClassAttribute("comment")
        ledbuttoncode:Add(ledcomment3)
        ledbuttoncode:AddText(   "        button:SetLightPattern(button:SOLID_GREEN_LIGHT)" + cr 
                            +    "        sound:BeepSequenceUp()" + cr
                            +    "    elseif button:IsButtonPressed(button:DOWN_BUTTON)" + cr
                            +    "        button:SetLightPattern(button:FLASHING_GREEN_LIGHT)" + cr 
                            +    "        sound:BeepSequenceDown()" + cr 
                            +    "    elseif button:IsButtonPressed(button:LEFT_BUTTON)" + cr
                            +    "        button:SetLightPattern(button:FLASHING_ORANGE_LIGHT)" + cr
                            +    "        sound:Beep()" + cr
                            +    "    elseif button:IsButtonPressed(button:RIGHT_BUTTON)" + cr
                            +    "        button:SetLightPattern(button:PULSING_ORANGE_LIGHT)" + cr
                            +    "        sound:BeepTwice()" + cr
                            +    "    elseif button:IsButtonPressed(button:CENTER_BUTTON)" + cr
                            +    "        button:SetLightPattern(button:SOLID_RED_LIGHT)" + cr
                            +    "        sound:Buzz()" + cr
                            +    "    end" + cr
                            +    "end" + cr)        
        section_led:Add(preformatter:GeneratePreformattedCode(ledbuttoncode))

                                                        
        Section section_additional
        section_additional:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_additional, "Additional Information", 2)

        Paragraph p_additional
        CodeBlock c1
        c1:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c2
        c2:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")
        CodeBlock c3
        c3:AddClassAttribute("text-text-light-red bg-neutral-white py-0.5 px-1")

        p_additional:AddText("We use class constants in this tutorial, however they are not manditory. For example, if we have a Button object called ")
        c1:AddText("button")    
        p_additional:Add(c1)
        p_additional:AddText(", then the code ")
        c2:AddText("button:IsButtonPressed(button:ESCAPE_BUTTON)")
        p_additional:Add(c2)
        p_additional:AddText(" is the same thing as ")
        c3:AddText("button:IsButtonPressed("+dq+"escape"+dq+")")
        p_additional:Add(c3)
        p_additional:AddText(". Refer to the ")
        Link link1 = p_additional:AddLink("Button class documentation","/Libraries/Robots/Lego/Button.html")
        link1:AddClassAttribute("underline text-quorum-blue-150")
        p_additional:AddText(" for alternatives to the class constants.")

        section_additional:Add(p_additional)

        bodyDiv:Add(section_using_buttons)
        bodyDiv:Add(section_button_types)
        bodyDiv:Add(section_led)
        bodyDiv:Add(section_additional)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn how to program the buttons on a LEGO Mindstorms robot using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Buttons"
    end

    action GetImageLocation returns text
        return "/media/robots/buttons.png"
    end

    action GetName returns text
        return "Buttons"
    end

    action GetShortDescription returns text
        return "how to use lego buttons"
    end

    action GetLocation returns text
        return "tutorials/robots/legoButtons.html"
    end

    action GetLinkName returns text
        return "Buttons"
    end

    action GetSectionName returns text
        return "LEGOâ„¢ Robots"
    end
end
