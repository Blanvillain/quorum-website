use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class GamesAnimation2DTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Animation in 2D - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Moving and Animating in 2D with Quorum", 1)
        headDiv:AddText("This tutorial tells you how to move and animate items on a screen in 2 dimensions")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Moving and Animating Items", 2)

        bodyDiv:AddText(             "This tutorial will discuss how to make items move, rotate, and scale in your game as well as how to do animation. "
                            +   "To assist with this tutorial, you can download this ")
        bodyDiv:AddLink("zip file", "/files/games/GameApplication.zip")
        bodyDiv:AddText(             " which contains a project with an ImageSheet and all the images used in this tutorial.")


        //the section on moving items
        bodyDiv:AddHeading("Moving Items", 2)
        Paragraph p2
        p2:AddText(         "Before we can learn how to move an item around the screen, we must first create a Drawable object. Refer to the ")
        p2:AddLink("Drawing", "/tutorials/games/drawing2D.html")
        p2:AddText(         " tutorial for a refresher on how Drawables and drawing to the screen works. Remember to perform the following steps:")
        bodyDiv:Add(p2)
        UnorderedList list
        list:AddListItem("include your use statement for the Drawable library")
        list:AddListItem("instantiate a Drawable (call it " + dq + "spaceship" + dq + " for this example)")
        list:AddListItem("load an image into the Drawable (use " + dq + "assets/alien.png" + dq + " for this example)")
        list:AddListItem("add the Drawable to the game")
        bodyDiv:Add(list)
        bodyDiv:AddParagraph("Your code should look like this:")

        CodeBlock cb1
        Span s1
        Span s2
        Span s3
        Span s4
        cb1:AddText("use Libraries.Game.Game" + cr)
        s1:AddText( "//this line includes the Drawable library" + cr)
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("class Main is Game" + cr)
        s2:AddText( "    // this line declares our drawable object" + cr)
        s2:SetClassAttribute("comment")
        cb1:Add(s2)
        cb1:AddText("    Drawable spaceship" + cr + cr
                +   "    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr)
        s3:AddText( "        // this line loads the image file to our Drawable" + cr)
        s3:SetClassAttribute("comment")
        cb1:Add(s3)
        cb1:AddText("        spaceship:Load(" + dq + "assets/alien.png" + dq +")" + cr + cr)
        s4:AddText( "        // this line adds the drawable to the game" + cr)
        s4:SetClassAttribute("comment")
        cb1:Add(s4)
        cb1:AddText("        Add(spaceship)" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr
                +   "    end" + cr
                +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))
        AddIDE(bodyDiv, "gamesAnimating2DIDE1", "Activity: Draw an Alien", 
            "Try the above code block.", "examples/Games/Animating2D/Main.quorum")

        bodyDiv:AddParagraph(   "In order to move the object we need to set its new position on the game screen. Every Drawable has a set of properties attached to it. "
                            +   "Two of those properties are its x and y position on the game screen. By default, Drawables are located at position (0, 0), "
                            +   "which is the bottom left of the screen. Since we haven't previously set new coordinates, "
                            +   "all the objects we've drawn so far have been positioned at the default (0,0) position. If we want to position an item in a different location, "
                            +   "we can use the SetX and SetY actions that are part of the Drawable class. "
                            +   "These actions both take a number parameter that represents the new x or y coordinate of the Drawable. "
                            +   "The modifications to the code below set the x and y coordinates of our spaceship to a new location:")

        CodeBlock cb2
        Span s5
        Span s6
        cb2:AddText("use Libraries.Game.Game" + cr
                +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                +   "class Main is Game" + cr
                +   "    Drawable spaceship" + cr + cr
                +   "    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr
                +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                +   "        Add(spaceship)" + cr + cr)
        s5:AddText( "        // this line changes the x position of our spaceship drawable to be at 100." + cr )
        s5:SetClassAttribute("comment")
        cb2:Add(s5)
        cb2:AddText("        spaceship:SetX(100)" + cr + cr)
        s6:AddText( "        // this line changes the y-position of our spaceship drawable to be at 50." + cr)
        s6:SetClassAttribute("comment")
        cb2:Add(s6)
        cb2:AddText("        spaceship:SetY(50)" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr
                +   "    end" + cr
                +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))
        AddIDE(bodyDiv, "gamesAnimating2DIDE2", "Activity: Draw a Positioned Alien", 
            "Try the above code block.", "examples/Games/Animating2D/Main2.quorum")

        bodyDiv:AddParagraph(   "The result of this code is shown in the screenshot below.")
        bodyDiv:AddImage("/media/games/alienPosition.png", "This is an image of the alien Position")
        bodyDiv:AddParagraph(   "The code above places the image to the position specified as it's initial position on the game screen." )
        bodyDiv:AddParagraph(   "To achieve smooth movement across a number of frames, we must move the image incrementally over a period of time. "
                            +   "To do this, we can take advantage of our Update action, which you may remember is called by the engine on each frame while game's main loop is active." )

        Paragraph p21
        p21:AddText(   "If we want to insert movement code in the update action, navigate to the ")

        CodeBlock cb3
        cb3:AddText("Update(number seconds)")
        p21:Add(cb3)
        p21:AddText(            " action. This is where we write our code to move the Drawable across the screen on each frame. "
                            +   "To do this, we need two number parameters that represent the new x position and the new y position calculated during the game's main loop. " 
                            +   "We can calculate the new x and y positions by getting the current x and y positions plus some speed value multiplied by the seconds parameter. "
                            +   "(Remember that the seconds parameter is the amount of time elapsed since the last time the Update action was called by the engine. "
                            +   "The speed value represents how many pixels to move across the screen in a second. So, if the number chosen is small, the movement will be slow, "
                            +   "maybe even too slow to see! Likewise, if the number chosen is too large, the movement will not appear smooth; instead, "
                            +   "the Drawable will appear to jump across the screen. Play around with different speed values to see their effect." )
        bodyDiv:Add(p21)

        bodyDiv:AddParagraph(   "An example of code that moves a Drawable across the screen is below.")


        CodeBlock cb31
        Span s7
        Span s8
        cb31:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr)
        s7:AddText(     "        // these two statements calculate the new x and y positions by getting the current x and y" + cr
                    +   "        // positions of the Drawable and adding a " + dq + "speed" + dq + " factor multiplied by seconds" + cr)
        s7:SetClassAttribute("comment")
        cb31:Add(s7)
        cb31:AddText(   "        number newX = spaceship:GetX() + 100 * seconds" + cr
                    +   "        number newY = spaceship:GetY() + 50 * seconds" + cr + cr)
        s8:AddText(     "        // this statement sets the new x and y positions of the drawable to the values just" + cr
                    +   "        // calculated.  Note we can use SetPosition to set both X and Y at the same time." + cr)
        s8:SetClassAttribute("comment")
        cb31:Add(s8)
        cb31:AddText(   "        spaceship:SetPosition(newX, newY)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb31))


        bodyDiv:AddParagraph(   "If we run our program now (F6), we will see our spaceship glide across the screen in the upwards diagonal direction until it eventually leaves the screen.")

        AddIDE(bodyDiv, "gamesAnimating2DIDE3", "Activity: Draw a Moving Alien", 
            "Try the above code block.", "examples/Games/Animating2D/Main3.quorum")

        //the section on rotating and scaling images
        bodyDiv:AddHeading("Rotating and Scaling Images", 2)
        bodyDiv:AddParagraph(   "In addition to moving across the screen, Drawables can also be rotated, flipped, and scaled using the Quorum Games Library. "
                            +   "This section will cover how to rotate, flip, and scale your Drawable during your game." + cr + cr
                            +   "Drawables can be rotated, flipped about an axis, or scaled during a game. Internally, "
                            +   "Drawables store information relating to their orientation about a 2D axis, including the degree of rotation and whether the Drawable "
                            +   "has been flipped across the x or y axis, and whether the Drawable has been scaled.")

        //the section on rotation
        bodyDiv:AddHeading("Rotation", 3)
        bodyDiv:AddParagraph(   "Let's start with rotation. Drawables have actions that allow us to change their rotation in our game. "
                            +   "The SetRotation action takes a number that represents the rotation angle in degrees. So, "
                            +   "passing a value of 90 to this action will rotate our Drawable 90 degrees in the clockwise rotation. "
                            +   "Negative values can be passed to this function as well, having the effect of changing the direction of rotation. "
                            +   "For example, passing a value of -90 to the SetRotation action will rotate the Drawable 90 degrees in the counter-clockwise direction. "
                            +   "An example use of the SetRotation action is below.")

        CodeBlock cb32
        Span s9
        cb32:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100, 100)" + cr + cr)
        s9:AddText(     "        // this line causes the spaceship to be rotated 45 degrees in " + cr
                    +   "        // the counterclockwise direction" + cr)
        s9:SetClassAttribute("comment")
        cb32:Add(s9)
        cb32:AddText(   "        spaceship:SetRotation(-45)" + cr + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr 
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb32))

        bodyDiv:AddParagraph(   "These lines of code produce the following effect on our spaceship:" )

        bodyDiv:AddImage("/media/games/spaceship_rotate_45_degrees.png", "This is an image of the spaceship rotate 45 degrees")

        bodyDiv:AddParagraph(   "Another option we have to rotate our Drawable is to use the Rotate action. Like the SetRotate action, Rotate takes a number parameter that represents a number in degrees that we want to rotate our Drawable. An example use of this action is below." )
        CodeBlock cb33
        Span s10
        s10:AddText(    "//these lines tell Quorum what libraries we will be using" + cr)
        s10:SetClassAttribute("comment")
        cb33:Add(s10)
        cb33:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100, 100)" + cr + cr)
        cb33:Add(s9)
        cb33:AddText(   "        spaceship:Rotation(-45)" + cr + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr 
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb33))

        bodyDiv:AddParagraph(   "This code produces the same effect on our drawable as above." )
        bodyDiv:AddParagraph(   "So, " + dq + "What's the difference between SetRotation and Rotate?" + dq + " you may ask. "
                            +   "SetRotation sets the Drawable to rotate to the degree specified by the number parameter. "
                            +   "If our Drawable is already rotated 30 degrees when we make a call to SetRotation with 60 degrees, "
                            +   "our Drawable will rotate 30 degrees and end up at degree 60. But if our Drawable is already rotated to 30 degrees and we call Rotate with 60 degrees, "
                            +   "our Drawable will rotate 60 degrees from that point and end up at degree 90. A demonstration of the differences in these actions is below.")

        CodeBlock cb34
        Span s11
        Span s12
        cb34:Add(s10)
        cb34:AddText(   "use Libraries.Game.Game" + cr    
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100, 100)" + cr + cr)
        s11:AddText(     "        // this line sets the initial rotation of our spaceship to be at 30 degrees" + cr)
        s11:SetClassAttribute("comment")
        cb34:Add(s11)
        cb34:AddText(   "        spaceship:SetRotation(30)" + cr + cr)
        s12:AddText(     "        // this line tells our spaceship to rotate to degree 60" + cr)
        s12:SetClassAttribute("comment")
        cb34:Add(s12)
        cb34:AddText(   "        spaceship:SetRotation(60)" + cr + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb34))


        bodyDiv:AddParagraph(   "The code above produces the following result:")
        bodyDiv:AddImage("/media/games/spaceship_SetRotate_example.png", "This is an image of the spaceship SetRotate example")

        CodeBlock cb35
        Span s13
        cb35:Add(s10)
        cb35:AddText(   "use Libraries.Game.Game" + cr    
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100, 100)" + cr + cr)
        cb35:Add(s11)
        cb35:AddText(   "        spaceship:SetRotation(30)" + cr + cr)
        s13:AddText(     "        // this line tells our spaceship to rotate to degree 60 clockwise" + cr)
        s13:SetClassAttribute("comment")
        cb35:Add(s13)
        cb35:AddText(   "        spaceship:Rotation(60)" + cr + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb35))



        bodyDiv:AddParagraph(   "The code above produces the following result:")
        bodyDiv:AddImage("/media/games/spaceship_Rotate_example.png", "This is an image of the spaceship Rotate example")

        Paragraph p22
        p22:AddText(    "Rotation can also be performed in the Update loop of our game to have the Drawable rotate throughout the game. "
                    +   "Simply place the call to rotate the Drawable in the ")
        p22:Add(cb3)
        p22:AddText(    " action instead of the " )
        CodeBlock cb4
        cb4:AddText("CreateGame")
        p22:Add(cb4)
        p22:AddText(    " action. An example of this is shown below." )
        bodyDiv:Add(p22)

        CodeBlock cb5
        Span s14
        cb5:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100,100)" + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr)
        s14:AddText(    "        // this line causes our spaceship to rotate 1 degree every frame" + cr)
        s14:SetClassAttribute("comment")
        cb5:Add(s14)
        cb5:AddText(    "        spaceship:Rotate(1)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb5))

        
        bodyDiv:AddParagraph(   "The code above produces the effect of our spaceship rotating clockwise while the game window is open.")
        AddIDE(bodyDiv, "gamesAnimating2DRotationIDE", "Activity: Draw a Rotating Alien",
            "Try the above code block.", "examples/Games/Animating2D/Rotation.quorum")


        //the section on flipping images
        bodyDiv:AddHeading("Flipping Images", 2)
        bodyDiv:AddParagraph(   "In addition to rotation, Drawables in Quorum can be flipped horizontally and/or vertically. A horizontal flip is a flip about the x-axis. "
                            +   "To flip a Drawable horizontally, we call the FlipX action on the Drawable. A vertical flip is a flip about the y-axis. "
                            +   "To flip a Drawable vertically, we call the FlipY action on the Drawable. Example uses of these two actions are shown below. "
                            +   "Triangle shapes are used instead of our spaceship image because, in order to demonstrate the results of flipping vertically or horizontally, "
                            +   "we needed an image that was not symmetrical.")


        CodeBlock cb51
        Span s15
        Span s16
        Span s17
        Span s18
        cb51:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr
                    +   "use Libraries.Game.Graphics.Color" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr)
        s15:AddText(    "        // create a Color object to change color of our triangles" + cr)
        s15:SetClassAttribute("comment")
        cb51:Add(s15)
        cb51:AddText(   "        Color color" + cr + cr)
        s16:AddText(    "        // create our original triangle and set its position" + cr)
        s16:SetClassAttribute("comment")
        cb51:Add(s16)
        cb51:AddText(   "        Drawable original" + cr
                    +   "        original:LoadFilledTriangle(0, 0, 100, 0, 80, 50, color:Red())" + cr
                    +   "        original:SetPosition(150, 200)" + cr
                    +   "        Add(original)" + cr + cr)
        s17:AddText(    "        // create a triangle we will flip horizontally with the same vertices" + cr
                    +   "        // as the original triangle and set its position" + cr)
        s17:SetClassAttribute("comment")
        cb51:Add(s17)
        cb51:AddText(   "        Drawable flippedX" + cr
                    +   "        flippedX:LoadFilledTriangle(0, 0, 100, 0, 80, 50, color:Green())" + cr
                    +   "        flippedX:SetPosition(350, 200)" + cr
                    +   "        flippedX:FlipX()" + cr
                    +   "        Add(flippedX)" + cr + cr)
        s18:AddText(    "        // create our triangle we will flip vertically with the same vertices" + cr
                    +   "        // as the original triangle and set its position" + cr)
        s18:SetClassAttribute("comment")
        cb51:Add(s18)
        cb51:AddText(   "        Drawable flippedY" + cr
                    +   "        flippedY:LoadFilledTriangle(0, 0, 100, 0, 80, 50, color:Blue())" + cr
                    +   "        flippedY:SetPosition(550, 200)" + cr
                    +   "        flippedY:FlipY()" + cr
                    +   "        Add(flippedY)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb51))


        bodyDiv:AddParagraph(   "Notice how the vertices of all of our triangles are the same. They differ only in color and position before we flip them. "
                            +   "Running the above code produces three triangles on our screen. The red triangle represents the original triangle. "
                            +   "The green triangle represents the triangle we flipped horizontally, and the blue triangle represents the triangle we flipped vertically.")
        bodyDiv:AddImage("/media/games/triangle_example.png", "This is an image of the 3 triangles example")

        AddIDE(bodyDiv, "gamesAnimating2DFlipIDE", "Activity: Flip it!",
            "Try the above code block.", "examples/Games/Animating2D/Flip.quorum")

        //the section on scaling
        bodyDiv:AddHeading("Scaling", 2)
        bodyDiv:AddParagraph(   "In some applications, you may want to make your image appear larger or smaller on the screen. In Quorum (and many other applications), "
                            +   "this is known as scaling. To scale a Drawable in Quorum, we can call the Scale action. This action takes a number parameter that represents the factor "
                            +   "the image will be scaled by. For example, a number of 2 will increase the image's size by 2, doubling it. "
                            +   "A number of 0.5 will decrease the image's size by a factor of 0.5, halving it. An example program that makes use of scaling is below.")

        CodeBlock cb52
        Span s19
        cb52:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Drawable spaceship" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        spaceship:Load(" + dq + "assets/alien.png" + dq + ")" + cr
                    +   "        spaceship:SetPosition(100, 100)" + cr + cr)
        s19:AddText(    "        // this line sets the scale of the drawable to be 0.25. The drawable will" + cr
                    +   "        // now be 1/4 of its normal size" + cr)
        s19:SetClassAttribute("comment")
        cb52:Add(s19)
        cb52:AddText(   "        spaceship:Scale(0.25)" + cr + cr
                    +   "        Add(spaceship)" + cr
                    +   "    end  " + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb52))


        bodyDiv:AddParagraph(   "The image below shows the result of the above code.")
        bodyDiv:AddImage("/media/games/spaceship_scale_small.png", "This is an image of the spaceship scale small")

        AddIDE(bodyDiv, "gamesAnimating2DScaleIDE", "Activity: Scale it!",
            "Try the above code block.", "examples/Games/Animating2D/Scaling.quorum")

        //the section on animation
        bodyDiv:AddHeading("Animation (Quorum Studio only)", 2)
        bodyDiv:AddParagraph(   "In this part of the tutorial, we will be using the ImageSheet already included in the project. If you have your own images you want to include, "
                            +   "see the previous tutorial on Drawing for a refresher on how to create ImageSheets.")
        bodyDiv:AddImage("/media/games/assets_animation.png", "This is an image of the assets animation")
        bodyDiv:Add(break)

        bodyDiv:AddText(             "Animations in 2D games works in much the same way as ")
        bodyDiv:AddLink("Flip Book Animation", "https://en.wikipedia.org/wiki/Flip_book")
        bodyDiv:AddText(              ". To achieve animation in Quorum, we simply change the image shown by our Drawable after a specified amount of time. "
                            +   "It is helpful when doing animations to use a ")
        bodyDiv:AddLink("Texture Atlas", "https://en.wikipedia.org/wiki/Texture_atlas")
        bodyDiv:AddText(     " (called ImageSheets in Quorum). The ImageSheet ensures that we do not waste time loading images over and over again. "
                    +   "Each image is loaded once and able to be used again and again.")


        Paragraph p4
        p4:AddText( "Under the line that begins with ")

        CodeBlock cb6
        cb6:AddText("class Main is Game")
        p4:Add(cb6)
        p4:AddText( " we need to add a statement that instantiates an ImageSheet object. For this tutorial, we have called this object " + dq + "sheet" + dq + ". "
                +   "We also need declare our Drawable here which we will call " + dq + "girl" + dq + " in this case." )
        bodyDiv:Add(p4)

        bodyDiv:AddParagraph(   "In order to perform our animation, we need a couple of variable to track some information:" + cr )

        bodyDiv:Add(break)
        UnorderedList list4
        AddListItemWithBoldAtFront(list4, "fps", ": an integer variable to keep track of how many times to change frames each second")
        AddListItemWithBoldAtFront(list4, "elapsedTime", ": a number variable to keep track of how long it has been since the last frame change")
        AddListItemWithBoldAtFront(list4, "frame", ": an integer variable to keep track of which frame we are on in the animation")
        bodyDiv:Add(list4)
        bodyDiv:Add(break)

        bodyDiv:AddParagraph(   "In this example, we are going to chage frames 4 times per second and start at frame 1. The initial elapsed time will be set to 0." )

        Paragraph p5
        CodeBlock cb7
        p5:AddText(     "Before we can begin writing our code to change the frames, we need to set up our ImageSheet and Drawable. In the ")
        cb7:AddText("CreateGame")
        p5:Add(cb7)
        p5:AddText(    " action, we need to load our ImageSheet, set an initial image for our drawable, and add it to our game." )
        bodyDiv:Add(p5)

        Paragraph p6
        CodeBlock cb8
        CodeBlock cb9
        CodeBlock cb10
        CodeBlock cb11
        p6:AddText(    "In order to have our drawable animate, we need to repeatedly change which image the drawable is displaying each time the ")
        cb8:AddText("elapsedTime")
        p6:Add(cb8)
        p6:AddText(    " exceeds the interval determined by the frame rate. We can do this by taking advantage of our game's main loop and write code in the ")
        cb9:AddText("Update(number seconds)")
        p6:Add(cb9)
        p6:AddText(    " action to load different images to our drawable each time the interval has elapsed. Recall from the ")
        p6:AddLink("Getting Started","/tutorials/games/gamesStarted.html")
        p6:AddText(    " tutorial, the ")
        cb10:AddText("seconds")
        p6:Add(cb10)
        p6:AddText( " parameter of the ")
        cb11:AddText("Update")
        p6:Add(cb11)
        p6:AddText( " action is the number of seconds that elapsed between game frames. We will use this parameter and our ")
        p6:Add(cb8)
        p6:AddText(    " variable to decide when to change frames. If the ")
        p6:Add(cb8)
        p6:AddText(    " variable is greater than or equal to 1/fps, we know to update the frame displayed by our Drawable. If we update our frame, we need to reset the ")
        p6:Add(cb8)
        p6:AddText(    " timer so that we can begin counting again for the next frame change. On each frame, first we add ")
        p6:Add(cb10)
        p6:AddText(    " to our counter ")
        p6:Add(cb8)
        p6:AddText(    " so that it is updated with the cumulative seconds since the last update, then we test to see if it's exceeded our interval.")
        bodyDiv:Add(p6)




        bodyDiv:AddText( "Additionally, we need to keep track of what frame we are showing. If we change frames, we need to increment our frame counter. "
                +   "Since we only have three frames, if our frame counter is greater than three, we should reset it to 1. "
                +   "Because our images in our ImageSheet are named in the following format: " + dq + "Girl frame #" + dq
                +   "we can use our frame counter with string ") 
        bodyDiv:AddLink("concatenation", "/tutorials/language/operators.html")
        bodyDiv:AddText( " to access the correct drawable frame." )


        bodyDiv:AddParagraph( "The code that accomplishes this animation is shown below.")


        CodeBlock cb12
        Span s20
        Span s21
        Span s22
        Span s23
        Span s24
        Span s25
        Span s26
        Span s27
        Span s28
        Span s29
        cb12:AddText(   "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Drawable" + cr
                    +   "use Libraries.Game.Graphics.ImageSheet" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    ImageSheet sheet" + cr
                    +   "    Drawable girl" + cr + cr)
        s20:AddText(    "    //this line declares a number variable representing the frame rate for the animation" + cr)
        s20:SetClassAttribute("comment")
        cb12:Add(s20)
        cb12:AddText(   "    number fps = 4" + cr)
        s21:AddText(    "    //this line creates a number variable to track the time since the last frame change" + cr)
        s21:SetClassAttribute("comment")
        cb12:Add(s21)
        cb12:AddText(   "    number elapsedTime = 0" + cr)
        s22:AddText(    "    //this line creates an integer variable to track which frame we are displaying" + cr)
        s22:SetClassAttribute("comment")
        cb12:Add(s22)
        cb12:AddText(   "    integer frame = 1" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr)
        s23:AddText(    "        //these line load the ImageSheet and initial frame into a drawable and add it to the game" + cr)
        s23:SetClassAttribute("comment")
        cb12:Add(s23)
        cb12:AddText(   "        sheet:Load(" + dq + "resources/girl.atlas" + dq + ")" + cr
                    +   "        girl:Load(sheet:GetDrawable(" + dq + "Girl frame 1" + dq + "))" + cr
                    +   "        Add(girl)" + cr
                    +   "    end  " + cr + cr
                    +   "    action Update(number seconds)" + cr)
        s24:AddText(    "        //this line adds the seconds since the last frame to our timer variables" + cr)
        s24:SetClassAttribute("comment")
        cb12:Add(s24)
        cb12:AddText(   "        elapsedTime = elapsedTime + seconds" + cr)
        s25:AddText(    "        //this line checks if the elapsed time is greater than our interval for changing frames" + cr)
        s25:SetClassAttribute("comment")
        cb12:Add(s25)
        cb12:AddText(   "        if elapsedTime >= 1/fps" + cr)
        s26:AddText(    "            //if yes, increment the frame" + cr)
        s26:SetClassAttribute("comment")
        cb12:Add(s26)
        cb12:AddText(   "            frame = frame + 1" + cr + cr)
        s27:AddText(    "            //if frame is greater than 3, reset it to one" + cr)
        s27:SetClassAttribute("comment")
        cb12:Add(s27)
        cb12:AddText(   "            if frame > 3" + cr 
                    +   "                frame = 1" + cr
                    +   "            end" + cr + cr)
        s28:AddText(    "            //now that you know the next frame, set the Drawable to the next image by " + cr
                    +   "            //loading the image from the ImageSheet" + cr)
        s28:SetClassAttribute("comment")
        cb12:Add(s28)
        cb12:AddText(   "            girl:Load(sheet:GetDrawable(" + dq + "Girl frame " + dq + " + frame))" + cr + cr)
        s29:AddText(    "            //once we have updated our drawable, we need to reset the timer.  Instead of" + cr
                    +   "            //reseting to 0, we subtract the length of time between frames to prevent any " + cr
                    +   "            //extra time from building up over time, slowing our animation" + cr)
        s29:SetClassAttribute("comment")
        cb12:Add(s29)
        cb12:AddText(   "            elapsedTime = elapsedTime - 1/fps" + cr
                    +   "        end" + cr
                    +   "    end" + cr
                    +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb12))



        bodyDiv:AddParagraph(   "Every time you want to have animations in a game, you will have an animation loop similar to this one.")




        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about how to code 2D animations in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Animation 2D"
    end

    action GetImageLocation returns text
        return "/media/games/Animation2D.png"
    end

    action GetName returns text
        return "Animation in 2D"
    end

    action GetShortDescription returns text
        return "how to use animation in 2D"
    end

    action GetLocation returns text
        return "tutorials/games/animation2D.html"
    end
end