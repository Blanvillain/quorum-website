use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class GamesDrawing2DTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Drawing in 2D - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Drawing in 2D with Quorum", 1)
        headDiv:AddText("This tutorial tells you how to draw items on the screen in 2 dimensions with Quorum")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("An Introduction to Drawing in Quorum", 2)
        bodyDiv:AddParagraph(   "In this tutorial, we describe how to draw objects on the game screen in Quorum. This tutorial will cover primary topics: "
                            +   "1) drawing shapes, 2) drawing images, and 3) ImageSheets. The purpose of these topics is to give the reader a primer on how the drawing system works, "
                            +   "so that he/she can draw shapes and images in the game correctly and efficiently.")


        //the section on drawing shapes
        bodyDiv:AddHeading("Drawing Shapes", 2)

        bodyDiv:AddText(             "We start this tutorial with the templated Game Application from the New Project window, as described in the ")
        bodyDiv:AddLink("Getting Started", "/tutorials/games/gamesStarted.html")
        bodyDiv:AddText(             " tutorial. Our basic game code (with comments omitted) looks like this:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Game" + cr + cr
                                                        +   "class Main is Game" + cr
                                                        +   "    action Main" + cr
                                                        +   "        StartGame()" + cr
                                                        +   "    end" + cr + cr
                                                        +   "    action CreateGame" + cr
                                                        +   "    end" + cr + cr
                                                        +   "    action Update(number seconds)" + cr
                                                        +   "    end" + cr
                                                        +   "end"))

        bodyDiv:AddText(             "This template creates the architecture that tells Quorum to create a new game and begin execution of the Main Loop. Behind the scenes, "
                            +   "this connects to a very powerful utility called ")
        bodyDiv:AddLink("OpenGL", "https://www.opengl.org")
        bodyDiv:AddText(             ". OpenGL is an industry standard graphics library specifically designed for drawing graphics. While OpenGL is very powerful, "
                            +   "it is not particularly easy to use. In order to understand its details one must have an understanding of a mathematical theory called ")
        bodyDiv:AddLink("Linear Algebra", "https://www.khanacademy.org/math/linear-algebra")
        bodyDiv:AddText(             ", which is an advanced topic that is typically taught at universities. "
                            +   "The Quorum Game Engine handles all this complexity for us though so we just need to learn how to call the methods of the built in libraries "
                            +   "to generate drawable images and shapes.")


        bodyDiv:AddText(             "To draw shapes to our empty game program, we need to add a use statement to our program to tell the compiler where to find the commands "
                            +   "for a class in the standard library named ")
        bodyDiv:AddLink("Drawable", "/libraries/Game/Graphics/Drawable.html")
        bodyDiv:AddText(             ". The code for the library reference is:")


        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.Drawable"))
        bodyDiv:AddParagraph(   "This line of code tells Quorum that we want to use the Drawable class in our application. "
                            +   "In other words, it tells the compiler that we want to be able to add items to the screen that will be drawable in the frame drawing portion "
                            +   "of the Main Loop. Once we have access to the Drawable class, we need to create and name a drawable object "
                            +   "(another word for this is " + dq + "instantiate" + dq + "). "
                            +   "We can do this by adding another line of code just below the " + dq + "class Main is Game" + dq + " line, such as:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.Drawable" + cr + cr
                                                        +   "class Main is Game" + cr
                                                        +   "    Drawable rectangle"))
        bodyDiv:AddParagraph(   "While this code creates a drawable object, it does not draw anything on the screen or load an image to associate to the object. "
                            +   "In order to do that, we need to insert code into the CreateGame action:")

        CodeBlock cb1
        Span s1
        Span s2
        cb1:AddText("action CreateGame" + cr + cr)
        s1:AddText( "   //This line of code draws a rectangle with a width and height of 50." + cr
                +   "   //By default, the coordinates of this object are 0,0, which is the bottom left corner of our window." + cr + cr )
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("   rectangle:LoadFilledRectangle(50, 50)" + cr + cr)
        s2:AddText( "   //This line of code tells Quorum to add our drawable object to our game, " + cr
                +   "   //so that the game engine puts it in the list of items that it draws on each frame." + cr 
                +   "   //If we forget it, Quorum will have no way to know we want to draw this object." + cr + cr )
        s2:SetClassAttribute("comment")
        cb1:Add(s2)
        cb1:AddText("   Add(rectangle)" + cr 
                +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))

        bodyDiv:AddParagraph(   "Once we have these lines of code in our program we can Run our game (F6) which will now look similar to this:")
        bodyDiv:AddImage("/media/games/square.png", "This is an image of a black square on game")

        bodyDiv:AddParagraph("")
        bodyDiv:AddText(     "There are many kinds of additional shapes that can be drawn by default. We can use these shapes in combination to create complex pictures. "
                    +   "The full list of shapes is in the ")
        bodyDiv:AddLink(    "Drawable", "/Libraries/Game/Graphics/Drawable.html")
        bodyDiv:AddText(    " documentation. The list includes: 1) circles, 2) triangles, 3) rectangles, and 4) lines. "
                    +   "In the case of of circles, triangles, and rectangles, the shapes can either be filled or not and a color can also be specified "
                    +   "(if none, the default color is black).")


        AddIDE(bodyDiv, "gamesDrawing2DRectanglesIDE", "Activity: Draw a Black Square", 
            "Try the above code block.", "examples/Games/Drawing2D/Main.quorum")


        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about how to draw to the screen in 2D using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Drawing 2D"
    end

    action GetImageLocation returns text
        return "/media/games/Drawing2D.png"
    end

    action GetName returns text
        return "Drawing in 2D"
    end

    action GetShortDescription returns text
        return "how to draw in 2D"
    end

    action GetLocation returns text
        return "tutorials/games/drawing2D.html"
    end
end