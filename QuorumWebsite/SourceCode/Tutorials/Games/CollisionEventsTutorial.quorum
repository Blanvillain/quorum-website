use Libraries.Web.Page.all
use Libraries.Containers.Array

class CollisionEventsTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Collision Events - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Collision Events", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Collision Events")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows how to use collision events in Quorum.")
        bodyDiv:Add(headDiv)
        

        Section section_collison
        section_collison:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_collison)
        
        Heading h2_collison = section_collison:AddHeading("Detecting Collisions with Events", 2)
        h2_collison:AddAttribute("data-text", "Detecting Collisions with Events")
        
        h2_collison:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_collison)


        section_collison:AddParagraph(   "In this tutorial, we will learn about collision events.")


        Paragraph paraA
        
        paraA:AddText(            "In addition to testing for input using events, we can also use events to detect when two Items have collided in our game. " 
                            +   "In this last sample program, a black rectangle will be at the center of the screen. "
                            +   "A white circle will be on the left side of the screen, which will pass over the rectangle as it moves off the right edge of the screen, and reappears on the left side. "
                            +   "Every time the circle and the rectangle begin overlapping, a sound will play, the rectangle will turn blue, and the circle will turn red. "
                            +   "Every time the circle and the rectangle begin overlapping, a sound will play, the rectangle will turn blue, and the circle will turn red. "
                            +   "The complete sample, including audio, can be downloaded by clicking ")
        paraA:AddLink( "here" , "/files/games/CollisionEventProject.zip" ):SetClassAttribute("underlined quorum-blue-150")
        paraA:AddText(" .")
        section_collison:Add(paraA)

        section_collison:AddParagraph(   "Our code is in a single file." )


        section_collison:Add(preformatter:GeneratePreformattedCode(
            "use Libraries.Game.Game" + cr  
        +   "use Libraries.Game.Graphics.Drawable" + cr 
        +   "use Libraries.Game.Graphics.Color" + cr 
        +   "use Libraries.Interface.Events.CollisionListener2D" + cr 
        +   "use Libraries.Sound.Audio" + cr 
        +   "use Libraries.Interface.Events.CollisionEvent2D" + cr 
        +   "use Libraries.Interface.Item2D" + cr + cr 
        +   "class Main is Game, CollisionListener2D" + cr + cr
        +   "   Drawable block" + cr 
        +   "   Drawable circle" + cr + cr 
        +   "   Audio beginSound" + cr 
        +   "   Audio finishSound" + cr 
        +   "   action Main" + cr 
        +   "       StartGame()" + cr 
        +   "   end" + cr + cr 
        +   "   action CreateGame" + cr 
        +   "       // These two lines load our sound files" + cr 
        +   "       beginSound:Load(" + dq + "AudioFiles/lightSound.wav" + dq + ")" + cr 
        +   "       finishSound:Load(" + dq + "AudioFiles/heavySound.wav" + dq + ")" + cr + cr 
        +   "       // These lines are used to load and draw the circle and square." + cr 
        +   "       block:LoadFilledRectangle(300, 200)" + cr 
        +   "       Color white" + cr 
        +   "       white = white:White()" + cr 
        +   "       circle:LoadFilledCircle(60, white)" + cr 
        +   "       block:SetPosition(250, 200)" + cr 
        +   "       circle:SetPosition(0, 240)" + cr 
        +   "       Add(block)" + cr 
        +   "       Add(circle)" + cr + cr
        +   "       // These two lines give our Drawables a name so that we can identify" + cr 
        +   "       // each object and do things to them when they begin or finish colliding" + cr 
        +   "       block:SetName(" + dq + "block" + dq + ")" + cr 
        +   "       circle:SetName(" + dq + "circle" + dq + ")" + cr + cr
        +   "       // These two lines are used to make the two items detect collisions." + cr 
        +   "       block:SetCollidable(true)" + cr 
        +   "       circle:SetCollidable(true)" + cr + cr 
        +   "       // This line is used to make our Game class listen for and handle collisions" + cr 
        +   "       AddCollisionListener(me)" + cr 
        +   "   end" + cr + cr 
        +   "   action Update(number seconds)" + cr 
        +   "       // The Update action is used in this program to make the circle move." + cr 
        +   "       circle:SetX(circle:GetX() + 200 * seconds)" + cr 
        +   "       if circle:GetX() > GetScreenWidth()" + cr 
        +   "           circle:SetX(0 - circle:GetWidth())" + cr 
        +   "       end" + cr 
        +   "   end" + cr + cr 
        +   "   /*" + cr 
        +   "   This is the action that gets called automatically by the game engine when" + cr 
        +   "   a collision begins between two collidable items. We are passed an item" + cr
        +   "   that represents the event of the collision. From that item we can get the" + cr
        +   "   items that are colliding." + cr
        +   "   */" + cr
        +   "   action BeginCollision(CollisionEvent2D event)" + cr
        +   "       // First things first, play the begin collision sound" + cr
        +   "       beginSound:Play()" + cr + cr
        +   "       // Next, we want to get our items out of the collision event" + cr
        +   "       Drawable itemA = cast(Drawable, event:GetItemA())" + cr
        +   "       Drawable itemB = cast(Drawable, event:GetItemB())" + cr + cr
        +   "       // the block will turn blue when they start colliding" + cr
        +   "       Color blue" + cr
        +   "       blue = blue:Blue()" + cr + cr
        +   "       // the circle will turn red when they start colliding" + cr
        +   "       Color red" + cr
        +   "       red = red:Red()" + cr
        +   "       if itemA:GetName() = " + dq + "block" + dq + cr
        +   "           // if itemA is the block, then itemA gets the color blue and itemB" + cr
        +   "           // bets the color red." + cr
        +   "           itemA:SetColor(blue)" + cr
        +   "           itemB:SetColor(red)" + cr
        +   "       else" + cr
        +   "           // otherwise, the reverse is true" + cr
        +   "           itemA:SetColor(red)" + cr
        +   "           itemB:SetColor(blue)" + cr
        +   "       end" + cr
        +   "   end" + cr + cr
        +   "   /*" + cr
        +   "   This is the action that gets called automatically by the game engine when" + cr
        +   "   a collision finishes between two collidable items. We are passed an item" + cr
        +   "   that represents the event of the collision. From that item we can get the" + cr
        +   "   items that are colliding." + cr
        +   "   */" + cr
        +   "   action FinishCollision(CollisionEvent2D event)" + cr
        +   "       // First things first, play the finish collision sound" + cr
        +   "       finishSound:Play()" + cr + cr
        +   "       // Next, we want to get our items out of the collision event" + cr
        +   "       Drawable itemA = cast(Drawable, event:GetItemA())" + cr
        +   "       Drawable itemB = cast(Drawable, event:GetItemB())" + cr + cr
        +   "       // the block will turn black when they finish colliding" + cr
        +   "       Color black" + cr
        +   "       black = black:Black()" + cr + cr
        +   "       // the circle will turn white when they finish colliding" + cr
        +   "       Color white" + cr
        +   "       white = white:White()" + cr + cr
        +   "       if itemA:GetName() = " + dq + "block" + dq + cr
        +   "           // if itemA is the block, then itemA gets the color black and itemB" + cr
        +   "           // bets the color white." + cr
        +   "           itemA:SetColor(black)" + cr
        +   "           itemB:SetColor(white)" + cr
        +   "       else" + cr
        +   "           // otherwise, the reverse is true" + cr
        +   "           itemA:SetColor(white)" + cr
        +   "           itemB:SetColor(black)" + cr
        +   "       end" + cr
        +   "   end" + cr
        +   "end"))

        Paragraph p18
        CodeBlock cb33
        cb33:AddText(   " class Main is Game, CollisionListener2D ")
        p18:AddText(    "Just like other events, we can declare one or more of our game objects as a listener for that event. "
                    +   "In this case, our Main class also listens for collisions between two 2D items via the line ")
        p18:Add(cb33)
        p18:AddText(    ". Similarly to other events, the game engine automatically passes an object representing the event to our actions for handling that event; in this case, we are passed a CollisionEvent2D object representing a collision between two 2D items in our BeginCollision and FinishCollision actions.")
        section_collison:Add(p18)


        Paragraph p19
        CodeBlock cb34
        cb34:AddText(   " true ")
        p19:AddText(    "If we want the game engine to tell us when two items are colliding, we need to tell the game engine that those items are collidable. "
                    +   "We do this by calling the SetCollidable action on the items with the parameter ")
        p19:Add(cb34)
        p19:AddText(    ". A handy place to do this is in our CreateGame action.")
        section_collison:Add(p19)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(
            "// These two lines are used to make the two items detect collisions." + cr  
        +   "block:SetCollidable(true)" + cr 
        +   "circle:SetCollidable(true)" + cr ))

        section_collison:AddParagraph(   "It is important to note that collidable items can only collide with other items that have been declared collidable. " 
                            +   "So, if two items are overlapping in our game, but one of them has not been set to be collidable, we will not receive a collision event for those two items. "
                            +   "On the other hand, if two items are overlapping and both of them have been declared collidable, we will receive a collision event for these two items.")

        bodyDiv:AddParagraph(   "Additionally, if we want to be notified about collision events, we need to tell our game about our collision listener object. " 
                            +   "We do so by calling the AddCollisionListener action and passing it the object that should be listening for collisions. "
                            +   "Again, a great place to do this is in our CreateGame action.")

        section_collison:Add(preformatter:GeneratePreformattedCode(
            "// This line is used to make our Game class listen for and handle collisions" + cr  
        +   "AddCollisionListener(me)" + cr))

        section_collison:AddParagraph(   "All objects declared as collision listeners should implement an action for handling when items start to collide, called BeginCollision. " 
                            +   "This action is passed a CollisionEvent2D or CollisionEvent3D object (depending on whether the listener is listening for 2D or 3D collisions) that represents the collision.")

        section_collison:Add(preformatter:GeneratePreformattedCode(
            "action BeginCollision(CollisionEvent2D event)" + cr  + cr  
        +   "end" + cr))

       section_collison:AddParagraph(   "Similarly, objects declared as collision listeners should implement an action called FinishCollision for handling when two items stop colliding. " 
                            +   "This action also takes as a parameter an event object representing either the 2D or 3D collision event.")

        section_collison:Add(preformatter:GeneratePreformattedCode(
            "action FinishCollision(CollisionEvent2D event)" + cr  + cr  
        +   "end" + cr))

        Paragraph p20
        CodeBlock cb35
        CodeBlock cb36
        cb35:AddText(   " GetItemA()")
        cb36:AddText(   " GetItemB()")
        p20:AddText(    "In the above mentioned BeginCollision and FinishCollision actions, we should perform the actions that we want to occur when items either begin or finish colliding. "
                    +   "Both of the items that are colliding are in the event object passed to the BeginCollision and FinishCollision actions. "
                    +   "We can get the colliding items from the event object by calling the ")
        p20:Add(cb35)
        p20:AddText(    " and ")
        p20:Add(cb36)
        p20:AddText(    " actions on the event object. "
                    +   "From there, we can do the things that we want to happen when items are overlapping such as playing a sound or changing the color of the items.")
        section_collison:Add(p20)

        section_collison:Add(preformatter:GeneratePreformattedCode(
            "action BeginCollision(CollisionEvent2D event)" + cr  
        +   "   // First things first, play the begin collision sound" + cr 
        +   "   beginSound:Play()" + cr + cr 
        +   "   // Next, we want to get our items out of the collision event" + cr 
        +   "   Drawable itemA = cast(Drawable, event:GetItemA())" + cr 
        +   "   Drawable itemB = cast(Drawable, event:GetItemB())" + cr + cr 
        +   "   // the block will turn blue when they start colliding" + cr  
        +   "   Color blue" + cr 
        +   "   blue = blue:Blue()" + cr + cr 
        +   "   // the circle will turn red when they start colliding" + cr  
        +   "   Color red" + cr 
        +   "   red = red:Red()" + cr + cr
        +   "   if itemA:GetName() = " + dq + "block" + cr 
        +   "       // if itemA is the block, then itemA gets the color blue and itemB" + cr 
        +   "       // bets the color red." + cr 
        +   "       itemA:SetColor(blue)" + cr 
        +   "       itemB:SetColor(red)" + cr 
        +   "   else" + cr 
        +   "       // otherwise, the reverse is true" + cr 
        +   "       itemA:SetColor(red)" + cr 
        +   "       itemB:SetColor(blue)" + cr 
        +   "   end" + cr 
        +   "end" + cr ))

        section_collison:AddParagraph(   "With our Main class filled, our program is ready. " 
                            +   "The Game should consist of a circle moving from left to right, making a sound when it begins overlapping the rectangle and changing its color to red and the rectangle's color to white. "
                            +   "When it stops overlapping with the rectangle, a different sound is played, it changes color to white, and the rectangle changes color to black.")

        section_collison:AddParagraph(   "The Image on the left is when the red circle make a sound that it has collided with the blue rectangle and the picture on the right is when the white circle leaves the black rectangle making a sound.")

        Image image = section_collison:AddImage("/media/games/Circle_Enters_Rectangle_2.png", "This is an image of a red circle enter in a blue rectangle ")
        image:AddAttribute("data-zoom","")
    
        Image image1 = section_collison:AddImage("/media/games/Circle_Leaves_Rectangle.png", "This is an image of a white circle leave in a black rectangle ")
        image1:AddAttribute("data-zoom","")

         Section section_resources
        section_resources:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_resources)
        
        Heading h2_resources = section_resources:AddHeading("Resources", 2)
        h2_resources:AddAttribute("data-text", "Resources")
        
        h2_resources:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_resources)
        
        
        Paragraph paraB
        paraB:AddText(       "The" + dq + "lightSound.wav" + dq + "sound file is used under the Creative Commons Attribution 3.0 license: ")
        paraB:AddLink("Sword Swing",  "http://soundbible.com/1176-Sword-Swing.html" ):SetClassAttribute("underlined quorum-blue-150") 
        paraB:AddText(". ")
        section_resources:Add(paraB)

        Paragraph paraC
        paraC:AddText(       "The" + dq + "heavySound.wav" + dq + "sound file is used under the Creative Commons Attribution 3.0 license: ")
        paraC:AddLink("Battle Axe Sound" , "http://soundbible.com/1163-Battle-Axe-Swing.html"  ):SetClassAttribute("underlined quorum-blue-150")  
        section_resources:Add(paraC)

        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to manage collisions using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Collision Events"
    end

    action GetImageLocation returns text
        return "/media/games/Events.png"
    end

    action GetName returns text
        return "Collision Events in Quorum"
    end

    action GetShortDescription returns text
        return "How to use collision events events in our games."
    end

    action GetLocation returns text
        return "tutorials/games/collisionEvents.html"
    end

    action GetLinkName returns text
        return "Collison Events"
    end

    action GetSectionName returns text
        return "User Interaction and Events"
    end
end
