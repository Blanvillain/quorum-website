use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesCommittingData is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Committing Data - Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows us how to manually commit data onto a database")
        bodyDiv:Add(headDiv)
        
        Section section_commiting
        section_commiting:SetClassAttribute("flex flex-col gap-y-2")

        Heading h_commiting = section_commiting:AddHeading("Commiting New Data on the Database", 2)
        h_commiting:AddClassAttribute("text-2xl font-bold")
        h_commiting:AddAttribute("data-text", "Commiting New Data on the Database")
        AddToHeadingArray(h_commiting)

        section_commiting:AddParagraph("By default, Quorum automatically commits new data added onto our database. What this means is that everytime we use a Database action such as Insert() or CreateTable(), the database we contained inside mySQL also changes in real time. Most of the time, auto-commiting is handy so databases can get updated with any modification quickly. However, sometimes as a database administrator, we may want to review such data such as if there are mistakes or redundancy, therefore it is always a good practice to check out data before adding it onto the database. 
")
        
        section_commiting:AddParagraph("We will want to connect our database once again and primarily use actions from our Database object such as SetAutoCommit(boolean trueOrfalseValue), GetAutoCommit(), Rollback() andCommit(). We will also be using the Update object to add change some data in our table and to reference Update, we can view this link.")
        //TODO: unsure what link to put here

        WebTable table = AddWebTable("Committing Data Actions")
        TableBody tableBody = AddTableBody()

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Action", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))
        TableHeader tableHeader = AddTableHeaderRow(rubricHeader1)
        table:Add(tableHeader)

        Array<text> rubricText1
        rubricText1:Add("databaseObject:SetAutoCommit(boolean)")
        rubricText1:Add("This action sets the auto-commit behavior of the database. Auto-commit can be thought of as an autosave feature for documents but for databases. Auto-commit is where transactions on the database are automatically saved on the database. This can be compared to having a document automatically save every change made so the user does not have to press the save button. If this is set to false in order to save changes to the database the Commit() action needs to be used.") 
        rubricText1:Add("db:SetAutoCommit(false)") 
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("databaseObject:GetAutoCommit()")
        rubricText2:Add("This action returns whether or not the database will automatically commit with every transaction on the database. An example of a "+dq+"transaction"+dq+" would be an Insert or Update. If the database has auto commit set to true then an insert will immediately take effect after being sent to the database. Auto-commit can be thought of as an autosave feature for documents but for databases.") 
        rubricText2:Add("db:GetAutoCommit()") 
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("databaseObject:Rollback()")
        rubricText3:Add("This action will remove any nonpermanent changes currently on the database and revert the database to a previous state. This action will only work if auto-commit is set to false. If auto-commit is not enabled a query such as an Update can be undone before a Commit() is called.") 
        rubricText3:Add("db:Rollback()") 
        tableBody:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("databaseObject:Commit()")
        rubricText4:Add("Any changes made through Inserts, Updates, or Deletes that occur when auto-commit is disabled will not be saved unless Commit() is used. A commit is like saving changes on a document. If auto commit is set to true this action does not need to be used.") 
        rubricText4:Add("db:Commit()") 
        tableBody:Add(AddTableBodyRow(rubricText4))

        table:Add(tableBody)
        section_commiting:Add(table)

        section_commiting:Add(preformatter:GeneratePreformattedCode("use Libraries.Data.Database.Database
use Libraries.Data.Database.Update

Database database
database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

database:SetAutoCommit(false)
output "+dq+"Status of Auto-Commit:"+dq+" + database:GetAutoCommit()
"))

        section_commiting:AddParagraph("
Now, what we will want to do is modify our table normally. We can use Inserts, Deletes, and Updates using our objects to change our table and we can reference these tutorials within earlier sections: Insert tutorial, Delete tutorial, Update tutorial. For now, we can use this sample Update code to make changes. What this snippet of code is doing is selecting our "+dq+"grocerylist"+dq+" table and filtering the entries so that we are selecting a specific row. Then, we will want to update the selected row then update it onto our database. One thing we want to note is that database:Update(updateObject) returns a value of how many rows have changed, therefore we will want to keep track of that number, so let's save that into a variable called "+dq+"rows:"+dq+"
")

        section_commiting:Add(preformatter:GeneratePreformattedCode(" Update update
 update:SetTable("+dq+"grocerylist"+dq+")
 update:Filter("+dq+"FoodQuantity = 7"+dq+")
 update:Add("+dq+"FoodQuantity"+dq+", 1)

integer rows = database:Update(update)
"))

        section_commiting:AddParagraph("Now, let's set up an if statement checking on how many updates we have made. We want to make sure that in our update, we are only changing one row at a time. Why this matters is that if our filtering does not narrow down specific data, we may end up modifying records we never have meant to touch which in some cases, data cannot be replicated. Let's use our "+dq+"rows"+dq+" variable to test out how many rows that have been changed; if it is greater than 1, we will call the action Rollback() which is essentially an undo state, else we know that only one row has been updated so we can commit this change onto the database.")
        section_commiting:AddParagraph("Lastly, we want to make sure that we go back to have auto-commits inside of Quorum Studio for the rest of the tutorials. Again, let's call SetAutoCommit() on our database object and pass in true as the parameter value. This action will turn back the feature where new or updated records / tables will be automatically reflected on mySQL.")

        section_commiting:Add(preformatter:GeneratePreformattedCode(" if rows > 1
        database:Rollback()
    else
        database:Commit()
    end

database:SetAutoCommit(true)
output "+dq+"Status of Auto-Commit:"+dq+" + database:GetAutoCommit()
"))

        section_commiting:AddParagraph("Congrats! We finally know how to manually commit data onto our database. To view the entire code, it will be displayed below.")

        
        AddCodeSample(section_commiting,"examples/Databases/DBCommit.quorum")

        bodyDiv:Add(section_commiting)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about commiting our data onto a database."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "commiting data on a database"
    end

    action GetName returns text
        return "commiting data"
    end

    action GetShortDescription returns text
        return "how to manually commit data onto a database"
    end

    action GetLocation returns text
        return "tutorials/databases/commitingDataDatabases.html"
    end

    action GetLinkName returns text
        return "Committing Data in a Database Table"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
