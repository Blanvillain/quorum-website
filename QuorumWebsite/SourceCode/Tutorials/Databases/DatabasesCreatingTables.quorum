use Libraries.Web.Page.all
use Libraries.Containers.Array

class CreateDatabaseTable is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Creating a Database Table - Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows us how to create our first database table using Quorum")
        bodyDiv:Add(headDiv)
        
        bodyDiv:AddHeading("Database Data Types", 2)
        
        bodyDiv:AddParagraph("Now that we have a database created, we will want to populate it with data. To do this, we first have to create a table. Recall that in a relational database, the structure is very similar to a spreadsheet such as ones we would see on Google Sheets or Microsoft Excel: a table with rows and columns that contain relevant information.")
        
        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("In SQL, there are three main data types:strings, numerics, and date/time. We need to know about these data types in order to create a valid table in our database. To view the entire list of data types, we can ")
        
        Link link1
        link1:AddText("reference this table for more specific data types")
        link1:SetAddress("https://www.w3schools.com/sql/sql_datatypes.asp")
        link1:SetTarget(link1:newTab)
        bodyDiv:Add(link1)
        bodyDiv:AddText(".")

        Array<text> rubricText1
        rubricText1:Add("String")
        rubricText1:Add("CHAR(size)") 
        rubricText1:Add("A FIXED length string (can contain letters, numbers, and special characters). The size parameter specifies the column length in characters - can be from 0 to 255. Default is 1") 

        Array<text> rubricText2
        rubricText2:Add("String")
        rubricText2:Add("VARCHAR(size)") 
        rubricText2:Add("A VARIABLE length string (can contain letters, numbers, and special characters). The size parameter specifies the maximum column length in characters - can be from 0 to 65535") 

        Array<text> rubricText3
        rubricText3:Add("Numeric")
        rubricText3:Add("INT(size)") 
        rubricText3:Add("A medium integer. Signed range is from -2147483648 to 2147483647. Unsigned range is from 0 to 4294967295. The size parameter specifies the maximum display width (which is 255)") 


        Array<text> rubricText4
        rubricText4:Add("Numeric")
        rubricText4:Add("FLOAT(p)") 
        rubricText4:Add("A floating point number. MySQL uses the p value to determine whether to use FLOAT or DOUBLE for the resulting data type. If p is from 0 to 24, the data type becomes FLOAT(). If p is from 25 to 53, the data type becomes DOUBLE()") 

        Array<text> rubricText5
        rubricText5:Add("Date/Time")
        rubricText5:Add("DATE") 
        rubricText5:Add("A date. Format: YYYY-MM-DD. The supported range is from '1000-01-01' to '9999-12-31'") 

        Array<text> rubricText6
        rubricText6:Add("Date/Time")
        rubricText6:Add("DATETIME(fsp)") 
        rubricText6:Add("A date and time combination. Format: YYYY-MM-DD hh:mm:ss. The supported range is from '1000-01-01 00:00:00' to '9999-12-31 23:59:59'. Adding DEFAULT and ON UPDATE in the column definition to get automatic initialization and updating to the current date and time") 

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Data Type Category", " "))
        rubricHeader1:Add(AddTextBoldFront("Data Type", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))
        
        rubricRows1:Add(AddTableDataTag(rubricText1))
        rubricRows1:Add(AddTableDataTag(rubricText2))
        rubricRows1:Add(AddTableDataTag(rubricText3))
        rubricRows1:Add(AddTableDataTag(rubricText4))
        rubricRows1:Add(AddTableDataTag(rubricText5))
        rubricRows1:Add(AddTableDataTag(rubricText6))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "SQL Data Types"))

        bodyDiv:AddParagraph("The next step in the process of working with databases is to tell them the kind of information we want them to contain. This can be a very complicated topic, involving entire sub-branches of mathematics (e.g., relational algebra). Learning about these areas of math can help us send and receive information quickly. Fortunately, modern database systems manage a great deal of this complicated math for us and we only need to provide the structure of our tables. In this section, we are going to discuss how to create these tables.")

        bodyDiv:AddParagraph("In Quorum, we can create a table by first connecting to our database. This makes sure a user authorized to securely make changes has access. Typically, users need administrative access to a database to create or destroy tables, which is a good thing because they can be destructive to existing data.  We make a table with the CreateTable class. The CreateTable class allows us to create an object that has actions in Quorum to set up a table such as adding columns and data types to populate the table.")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode("CreateTable newTable"))

        bodyDiv:AddParagraph("The data types we can add onto our table are integers, strings, and date/time. Let us start off with creating our CreateTable object where we name it NewTable. We now have access to actions such as SetTable(text tableName), AddIntegerColumn(text columnName), and CreateTable(CreateTable objectName). Let's start off with naming our new table and adding an integer column. In addition to our grocery list, we also need to create a list of art supplies, therefore, let's call the action SetTable() and inside the parameters we are going to call our table "+dq+"GroceryList"+dq+" Now, we need to have IDs to track each item to purchase with an integer column. We will now be calling the action AddIntegerColum() and inside the parameters we are going to label this column "+dq+"FoodID."+dq+"")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode("newTable:SetTable("+dq+"GroceryList"+dq+")
    newTable:AddIntegerColumn("+dq+"FoodID"+dq+")
"))
        bodyDiv:AddParagraph("We will also be adding a string column and a number column to this table. Below is a reference to the actions in creating a table.")

        Array<text> rubricText7
        rubricText7:Add("CreateTable tableObject")
        rubricText7:Add("The CreateTable class is a query to make a new table on a database. To create a table you need to give it a name using SetTable and then the table needs at least one column.
") 
        rubricText7:Add("CreateTable newTable") 

        Array<text> rubricText8
        rubricText8:Add("tableObject:SetTable(text tableName)")
        rubricText8:Add("This action sets the table of the query.") 
        rubricText8:Add("newTable:SetTable("+dq+"GroceryList"+dq+")") 

        Array<text> rubricText9
        rubricText9:Add("tableObject:AddIntegerColumn(text label)")
        rubricText9:Add("This action adds a 32 bit integer column to the table.") 
        rubricText9:Add("newTable:AddIntegerColumn("+dq+"FoodID"+dq+")") 

        Array<text> rubricText10
        rubricText10:Add("tableObject:AddNumberColumn(text label)")
        rubricText10:Add("This action adds a 64 bit double column to the table.") 
        rubricText10:Add("newTable:AddNumberColumn("+dq+"FoodPrice"+dq+")") 

        Array<text> rubricText11
        rubricText11:Add("tableObject:AddDateTimeColumn(text label)")
        rubricText11:Add("This action adds a current date / timestamp column to the table.") 
        rubricText11:Add("newTable:AddDateTimeColumn("+dq+"TimeOfPurchase"+dq+")") 

        Array<text> rubricText12
        rubricText12:Add("tableObject:AddTextColumn(text label, integer size)")
        rubricText12:Add("This action adds a text column to the table.") 
        rubricText12:Add("newTable:AddTextColumn("+dq+"SupplyName"+dq+", 10)") 

        Array<text> rubricText13
        rubricText13:Add("databaseObject:CreateTable(Create TabletableObject)")
        rubricText13:Add("This action takes a CreateTable query and sends it to the database. If successful the metadata will be updated to include the new table. The CreateTable query adds new tables to the database. For more information on creating tables there is documentation in the CreateTable class.") 
        rubricText13:Add("database:CreateTable(newTable)") 


        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("Action / Object", " "))
        rubricHeader2:Add(AddTextBoldFront("Description", " "))
        rubricHeader2:Add(AddTextBoldFront("Usage", " "))



        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))
        
        rubricRows2:Add(AddTableDataTag(rubricText7))
        rubricRows2:Add(AddTableDataTag(rubricText8))
        rubricRows2:Add(AddTableDataTag(rubricText9))
        rubricRows2:Add(AddTableDataTag(rubricText10))
        rubricRows2:Add(AddTableDataTag(rubricText11))
        rubricRows2:Add(AddTableDataTag(rubricText12))
        rubricRows2:Add(AddTableDataTag(rubricText13))


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Helper Actions on Database Table Creation with Quorum"))
        
        bodyDiv:AddParagraph("Below is the full code on our table creation. For most of the following tutorials, we will be building upon this 'GroceryList' table we have made.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Data.Database.Database
    use Libraries.Data.Database.CreateTable


    Database database
    database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

    CreateTable newTable
    newTable:SetTable("+dq+"GroceryList"+dq+")
    newTable:AddIntegerColumn("+dq+"FoodID"+dq+")
    newTable:AddTextColumn("+dq+"FoodName"+dq+", 100)
    newTable:AddNumberColumn("+dq+"FoodCost"+dq+")
    newTable:AddIntegerColumn("+dq+"FoodCalories"+dq+")
    newTable:AddIntegerColumn("+dq+"FoodQuantity"+dq+")

    database:CreateTable(newTable)
"))

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Creating a Database Table"
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "creating a database table"
    end

    action GetName returns text
        return "database table"
    end

    action GetShortDescription returns text
        return "how to set up database table in Quorum"
    end

    action GetLocation returns text
        return "tutorials/databases/databaseTable.html"
    end

    action GetLinkName returns text
        return "Creating a Table"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
