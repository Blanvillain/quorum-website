use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesFindingSingle is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Finding a Single Column - Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows us how to find data from single column in a database table")
        bodyDiv:Add(headDiv)
        
        Section section_find_single_column
        section_find_single_column:SetClassAttribute("flex flex-col gap-y-2")

        Heading h_find_single_column = section_find_single_column:AddHeading("Finding a Single Column", 2)
        h_find_single_column:AddClassAttribute("text-2xl font-bold")
        h_find_single_column:AddAttribute("data-text", "Finding a Single Column")
        AddToHeadingArray(h_find_single_column)

        section_find_single_column:AddParagraph("In mySQL, the similar command of finding columns is simply the SELECT command. Given a table of around 1 million records, a find option would be useful to filter out rows and observe a single column of data. As an example, say that we have a data table regarding furniture brought monthly at Ikea and we want to find what the most popular furniture consumers buy; using a find will single out a column so we can observe all the furniture people end up buying per month. Now, data analysts and manufacturers are able to see what pieces need to get shipped out more and ones that are not as popular can be shipped out less frequently.")

        section_find_single_column:AddParagraph("For this tutorial, we will be learning about how to find a single column in two different ways: a method using a filter and a method without using a filter. Both methods will be almost identical, but we can demonstrate how to get a more defined search inside of Quorum Studio.")
        
        Paragraph p_find_single_column
        p_find_single_column:AddText("We will want to connect our database once again as well as create a QueryResult object. To do this, we would create a new object called QueryResult, that allows us to use ")
        Link link2
        link2:AddClassAttribute("underline text-quorum-blue-150")
        link2:AddText("helper actions")
        link2:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/QueryResult.html")
        link2:SetTarget(link2:newTab)
        p_find_single_column:Add(link2)
        p_find_single_column:AddText(" to hold our search result from our Find() action. Let's call this QueryResult object "+dq+"result."+dq+"")
        section_find_single_column:Add(p_find_single_column)

        section_find_single_column:Add(preformatter:GeneratePreformattedCode("use Libraries.Data.Database.Database
use Libraries.Data.Database.Find
use Libraries.Data.Database.QueryResult
use Libraries.Data.Database.QueryMetaData

Database database
database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

QueryResult result
"))

        section_find_single_column:AddParagraph("With our Database object, we will be using the actions Find(text table) / Find(text table, text filter). With our ResultQuery object, we will be using the Next(), HasNext(), and GetText(text columnName).")

        WebTable table = AddWebTable("Finding Action")
        TableBody tableBody = AddTableBody()

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Action / Object", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))
        TableHeader tableHeader = AddTableHeaderRow(rubricHeader1)
        table:Add(tableHeader)

        Array<text> rubricText1
        rubricText1:Add("QueryResult objectName")
        rubricText1:Add("The QueryResult class allows the user to iterate through a result given back from a database query. The result set that is returned from a query can be huge depending on the amount of data on the database so the default method of going through a result is iterate through it row by row rather than return all data at once.") 
        rubricText1:Add("QueryResult result") 
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("databaseObject:Find(text table, text filter)")
        rubricText2:Add("This action runs a find based on the given parameters and returns the QueryResult. This action will return all columns and rows from a database table where the filter expression is true.") 
        rubricText2:Add("database:Find("+dq+"festival_list"+dq+","+dq+"ticket_prices < 300"+dq+")") 
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("databaseObject:Find(text table)")
        rubricText3:Add("This action runs a find based on the given parameters and returns the QueryResult. This action will return all columns and rows from a database table.") 
        rubricText3:Add("database:Find("+dq+"festival_list"+dq+")") 
        tableBody:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("queryResultObj:HasNext()")
        rubricText4:Add("This action returns true if there is another row in the query result to iterate to.") 
        rubricText4:Add("result:HasNext()") 
        tableBody:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("queryResultObj:Next()")
        rubricText5:Add("This action moves the QueryResult to the next row.") 
        rubricText5:Add("result:Next()") 
        tableBody:Add(AddTableBodyRow(rubricText5))

        Array<text> rubricText6
        rubricText6:Add("queryResultObj:GetText(text/number  column)")
        rubricText6:Add("This action returns a column from the current row as text.") 
        rubricText6:Add("result:GetText("+dq+"festtivalName"+dq+")") 
        tableBody:Add(AddTableBodyRow(rubricText6))

        Array<text> rubricText7
        rubricText7:Add("queryResult:GetInteger(text/number column)")
        rubricText7:Add("This action returns a column from the current row as an integer.") 
        rubricText7:Add("result:GetInteger("+dq+"ticket_prices"+dq+")") 
        tableBody:Add(AddTableBodyRow(rubricText7))

        table:Add(tableBody)
        section_find_single_column:Add(table)

        
        Section section_no_filter
        section_no_filter:SetClassAttribute("flex flex-col gap-y-2")

        Heading h_no_filter = section_no_filter:AddHeading("Using no filter", 2)
        h_no_filter:AddClassAttribute("text-2xl font-bold")
        h_no_filter:AddAttribute("data-text", "Using no filter")
        AddToHeadingArray(h_no_filter)

        section_no_filter:AddParagraph("When we call Find() using our database object, it essentially returns the results of the query, and in this case, our entire table. To actually have our query saved, we would assign the result using our QueryResult object we have made earlier. Let's call Find() using our database object and inside the parameter, let's pass in our "+dq+"grocerylist"+dq+" table and save it onto our 'result' object.")
        
        section_no_filter:Add(preformatter:GeneratePreformattedCode("QueryResult result = database:Find("+dq+"grocerylist"+dq+")"))

        Section section_filter
        section_filter:SetClassAttribute("flex flex-col gap-y-2")

        Heading h_filter = section_filter:AddHeading("Using a filter", 2)
        h_filter:AddClassAttribute("text-2xl font-bold")
        h_filter:AddAttribute("data-text", "Using a filter")
        AddToHeadingArray(h_filter)

        section_filter:AddParagraph("When we call Find() using our database object, it essentially returns the results of the query, and in this case, all the rows that are included in our filter. To actually have our query saved, we would assign the result using our QueryResult object we have made earlier. Let's call Find() using our database object and inside the parameters, let's pass in our "+dq+"grocerylist"+dq+" table as our first parameter and the expression "+dq+"foodID  = 1"+dq+" in the second parameter and save it onto our 'result' object. What this is doing is filtering our entire table so it only saves a select amount of records into the query.
")
        section_filter:Add(preformatter:GeneratePreformattedCode("QueryResult result = database:Find("+dq+"grocerylist"+dq+", "+dq+"FoodID = 1"+dq+")"))
        section_filter:AddParagraph("Our query is loaded onto our object, but now, we want to iterate through the list and output its contents. To do this, we would use a loop as well as our QueryResult actions. In Quorum Studio, loops are controlled by a repeat; we will we using a repeat-while loop where the syntax is:")
        section_filter:Add(preformatter:GeneratePreformattedCode("repeat while CONDITION
// stuff
end
"))

        section_filter:AddParagraph("In this case, our condition will be the result:HasNext() which tests if there is any content left inside our query; it returns true when there are items to be iterated through and false when there is no more content inside our query. Inside our repeat-while loop, we will call result:Next() which actually iterates through the query and then we will output the "+dq+"FoodName"+dq+" column using result:GetText(text columnName) and pass in "+dq+"FoodName"+dq+" as the parameter.")

        section_filter:Add(preformatter:GeneratePreformattedCode("repeat while result:HasNext()
     result:Next()
     output result:GetText("+dq+"FoodName"+dq+")
end
"))


        section_filter:AddParagraph("Congrats! We finally know how to find data within a single column. To view the entire code, it will be displayed below.")
        AddCodeSample(section_filter,"examples/Databases/DBFindSingle.quorum")

        bodyDiv:Add(section_find_single_column)
        bodyDiv:Add(section_no_filter)
        bodyDiv:Add(section_filter)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about finding a single column of data in Quorum."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "Finding a Single Column of Data"
    end

    action GetName returns text
        return "FindingSingle"
    end

    action GetShortDescription returns text
        return "how to find a single column of data in a data table"
    end

    action GetLocation returns text
        return "tutorials/databases/databasesFindingSingle.html"
    end

    action GetLinkName returns text
        return "Finding a Single Column"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
