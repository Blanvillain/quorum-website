use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList
use Libraries.Containers.Array
use Libraries.Web.Page.Link

class DatabaseInsertingData is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Populating Our Table With Data - Quorum Programming Lanugage")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Databases", 1)
        headDiv:AddText("This tutorial shows us how insert data onto our database")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        
        bodyDiv:AddHeading("Inserting New Records in Our Table", 2)

        bodyDiv:AddParagraph("At this point, we have tables set up to add onto our database. Being able to insert data is one of the most important aspects about databases because a database is meant to hold massive amounts of unique information. To add a new record is similar to adding a new piece of data on a spreadsheet; we want to make sure our data is correctly contained in the correct data column. Here we have a table for student grades and GPA as follows:")
        
        Array<text> rubricText1
        rubricText1:Add("1")
        rubricText1:Add("Damian") 
        rubricText1:Add("Desmond") 
        rubricText1:Add("A") 
        rubricText1:Add("4.0") 

        Array<text> rubricText2
        rubricText2:Add("2")
        rubricText2:Add("Anya") 
        rubricText2:Add("Forger") 
        rubricText2:Add("A") 
        rubricText2:Add("3.8") 

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("StudentID", " "))
        rubricHeader1:Add(AddTextBoldFront("FirstName", " "))
        rubricHeader1:Add(AddTextBoldFront("LastName", " "))
        rubricHeader1:Add(AddTextBoldFront("Grade", " "))
        rubricHeader1:Add(AddTextBoldFront("GPA", " "))

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))

        rubricRows1:Add(AddTableDataTag(rubricText1))
        rubricRows1:Add(AddTableDataTag(rubricText2))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "GPA Example"))

        bodyDiv:AddParagraph("We want to make sure data types are in the right column so GPA would be a decimal column while first name should be a string column and so fourth. For this tutorial, we will be going back into our grocery list, "+dq+"grocerylist"+dq+" table and insert information regarding food. Recall the columns of out table:
")

        Array<text> rubricText3
        rubricText3:Add("DataType: integer")
        rubricText3:Add("DataType: string") 
        rubricText3:Add("DataType: number (double)") 
        rubricText3:Add("DataType: integer") 
        rubricText3:Add("DataType: integer") 

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("FoodID", " "))
        rubricHeader2:Add(AddTextBoldFront("FoodName", " "))
        rubricHeader2:Add(AddTextBoldFront("FoodCost", " "))
        rubricHeader2:Add(AddTextBoldFront("FoodCalories", " "))
        rubricHeader2:Add(AddTextBoldFront("FoodQuantity", " "))

        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))

        rubricRows2:Add(AddTableDataTag(rubricText3))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Data Types for our GroceryList table"))

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("We will want to connect our database once again as well as create an Insert object.  To do this, we would create a new object called Insert, that allows us to use ")        
         Link link1
        link1:AddText("helper actions")
        link1:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/Insert.html")
        link1:SetTarget(link1:newTab)
        bodyDiv:Add(link1)
        bodyDiv:AddText(" to delete the existing table inside of our database. ")

        bodyDiv:AddParagraph("use Libraries.Data.Database.Database
use Libraries.Data.Database.Insert

Database database
database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

Insert insert
")

        Array<text> rubricText4
        rubricText4:Add("Insert objectName")
        rubricText4:Add("The Insert query represents the INSERT INTO command of the SQL (Structured Query Language) language. This query allows for data manipulation by inserting new rows into a table.") 
        rubricText4:Add("Insert insert") 

          Array<text> rubricText5
        rubricText5:Add("iObject:Add(text columnName, dataType value)")
        rubricText5:Add("Add a column target along with the value that will be associated with it.") 
        rubricText5:Add("insert:Add("+dq+"cost"+dq+", 4.50)
insert:Add("+dq+"firstName"+dq+", "+dq+"Daniel"+dq+")
insert:Add("+dq+"daysOff"+dq+", 14)
")

          Array<text> rubricText6
        rubricText6:Add("iObject:SetTable(text tableName)")
        rubricText6:Add("This action sets the table of the query.") 
        rubricText6:Add("insert:SetTable("+dq+"superCoolTable"+dq+")")

          Array<text> rubricText7
        rubricText7:Add("iObject:Empty()")
        rubricText7:Add("Removes all columns and values associated with them from the query") 
        rubricText7:Add("insert:Empty()")

          Array<text> rubricText8
        rubricText8:Add("dbObject:Insert:(Insert objectName)")
        rubricText8:Add("This takes an Insert query and sends it to the database and returns the result. An Insert allows for adding more rows to a table and if the insert was successful the database will return the number of rows affected. For more information and how to do an insert look into the documentation of the Insert query class.") 
        rubricText8:Add("database:Insert(insert)")

        Array<text> rubricHeader3
        rubricHeader3:Add(AddTextBoldFront("Action / Object", " "))
        rubricHeader3:Add(AddTextBoldFront("Description", " "))
        rubricHeader3:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows3
        rubricRows3:Add(AddTableHeaderTag(rubricHeader3))

        rubricRows3:Add(AddTableDataTag(rubricText4))
        rubricRows3:Add(AddTableDataTag(rubricText5))
        rubricRows3:Add(AddTableDataTag(rubricText6))
        rubricRows3:Add(AddTableDataTag(rubricText7))
        rubricRows3:Add(AddTableDataTag(rubricText8))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows3), "Inserting Data Actions"))

        bodyDiv:AddParagraph("What we want to do first is select the table we want to insert data using SetTable() and pass in the "+dq+"grocerylist"+dq+" table. Once that is complete, all inserts will go into that table and we'll want to add 5 entries of data per row: FoodID, FoodName, FoodCost, FoodCalories, FoodQuantity.")
       
        bodyDiv:AddParagraph("What we want to do first is use SetTable() on our 'insert' object which allows us to select a specific table inside our database. For example, SetTable() takes in one parameter, the table title and in this case we will be passing in "+dq+"grocerylist"+dq+" into the action. Then, if we want, we can keep a running sum to see how many rows will be affected in total; we can call this integer value "+dq+"rowsAffected"+dq+" and initialize it as 0.")
        
        bodyDiv:AddParagraph("Next, what we will be wanting to do is add in values using Add(); the action add requires two parameters: the column name and the data type value associated with the column. For example, say that we have a column called "+dq+"firstName,"+dq+" we would want to pass "+dq+"firstName"+dq+" in the first parameter and because names are strings, we will insert "+dq+"Bob"+dq+" as the second parameter. In our grocerylist table, let's insert 1 for FoodId, Chicken Breast for FoodName, 2.99 for FoodCost, 120 for FoodCalories, and 2 for FoodQuantity using the Add() action.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("insert:Add("+dq+"FoodID"+dq+", 1)
 insert:Add("+dq+"FoodName"+dq+", "+dq+"Chicken Breast"+dq+")
 insert:Add("+dq+"FoodCost"+dq+", 2.99)
 insert:Add("+dq+"FoodCalories"+dq+", 120)
 insert:Add("+dq+"FoodQuantity"+dq+", 2)
"))

        bodyDiv:AddParagraph(" ")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("database:Insert(insert)
 rowsAffected = rowsAffected + 1
 insert:Empty()
"))

        bodyDiv:AddParagraph("We have our data loaded inside this insert object, but it is not actually in our database yet. Using our database object, like previous actions, we will now call in the Insert() action and pass in 'insert' within the parameter. This will update our table in our database in real time and it is also worth noting that Insert() will return either 0 or 1 where 0 means it did not add the row into the database and 1 meaning it has successfully added the row into the database. Now, we want to increment the counter, rowsAffected and then empty our insert object using the action Empty(). It is necessary that before we add another record, we have to Empty() the object or else we will have compilation errors. ")
        
        bodyDiv:AddParagraph("Congrats! Now, we can finally multiple entries of data into our table! We can view the entire code below.")

        AddCodeSample(bodyDiv,"examples/Databases/DBInsert.quorum")
        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about MySQL setup on Quorum Language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "Inserting Data into Database tables"
    end

    action GetName returns text
        return "InsertingData"
    end

    action GetShortDescription returns text
        return "how to insert data into a database table"
    end

    action GetLocation returns text
        return "tutorials/databases/insertingDataDatabases.html"
    end
end