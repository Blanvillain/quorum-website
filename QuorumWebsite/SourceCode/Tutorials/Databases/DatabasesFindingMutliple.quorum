use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesFindMulti is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Finding Multiple Columns- Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows us how to find data within multiple columns")
        bodyDiv:Add(headDiv)
        
        bodyDiv:AddHeading("Finding Multiple Columns", 2)
        bodyDiv:AddParagraph("While finding a single column is useful to a general trend of data, it would be tedious looking at entries column by column. In Quorum, we can use another method of finding that works just like SQL's SELECT command, and can find multiple columns at the same time. For this tutorial, we will be learning about how to find multiple columns and use our Find object to narrow down a single record.")

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("We will want to connect our database once again as well as create a Find object. To do this, we would create a new object called QueryResult, that allows us to use ")        
         Link link2
        link2:AddText("helper actions")
        link2:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/Find.html")
        link2:SetTarget(link2:newTab)
        bodyDiv:Add(link2)
        bodyDiv:AddText(" to filter out data. Let's call this Find object "+dq+"query."+dq+"")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Data.Database.Database
use Libraries.Data.Database.Find
use Libraries.Data.Database.QueryResult
use Libraries.Data.Database.QueryMetaData

    
    Database database
    database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

    Find query"))

        bodyDiv:AddParagraph("With our Find object, we will be using the actions: SetTable(text tableName), AddColumn(textColumn name), AddColumnFromTable(text columnName, text tableName), AddSum(text columnName), AddCount(text columnName), and AddMaximum(text columnName). With our Database object we will also be calling the Find(Find objectName) to perform the action onto our database.
")

        Array<text> rubricText1
        rubricText1:Add("Find objectName")
        rubricText1:Add("The Find query represents the SELECT command of the SQL (Structured Query Language) language. This query allows for accessing data in the database. This query also allows operations to be performed on the data before returning it, such as Sum, Maximum, or Count.") 
        rubricText1:Add("Find query") 

        Array<text> rubricText2
        rubricText2:Add("findObject:SetTable(text tableName)")
        rubricText2:Add("This action sets the table of the query. Most queries run against a single table and this action is used to set which table the query will affect or search.") 
        rubricText2:Add("query:SetTable("+dq+"VideoGamesList"+dq+")") 

        Array<text> rubricText3
        rubricText3:Add("findObject:AddColumn(text columnName)")
        rubricText3:Add("This action adds a column target. The column targets will be the columns in a database table to fetch data from.") 
        rubricText3:Add("query:AddColumn("+dq+"GameGenre"+dq+")") 

        Array<text> rubricText4
        rubricText4:Add("findObject:AddColumnFromTable(text columnName, text tableName)")
        rubricText4:Add("This action adds a column target. The column targets will be the columns in a database table to fetch data from. The exact table the column is from can be added in the case the name might be ambiguous when using joins.") 
        rubricText4:Add("query:AddColumnFromTable(
"+dq+"GameName"+dq+", "+dq+"videoGames_list"+dq+")") 

        Array<text> rubricText5
        rubricText5:Add("findObject:AddSum(text columnName)")
        rubricText5:Add("Add a column where, instead of displaying it, we sum its values.") 
        rubricText5:Add("query:AddSum("+dq+"GamePopularity"+dq+")") 

        Array<text> rubricText6
        rubricText6:Add("findObject:AddCount(text columnName)")
        rubricText6:Add("Add a column where, instead of displaying it, we count the number of rows that match with the specified criteria.") 
        rubricText6:Add("query:AddCount("+dq+"GameDifficulty"+dq+")") 

        Array<text> rubricText7
        rubricText7:Add("findObject:AddMaximum(text columnName)")
        rubricText7:Add("Add a column where, instead of displaying it, we find the maximum value.") 
        rubricText7:Add("query:AddMaximum("+dq+"GamePrice"+dq+")") 

        Array<text> rubricText8
        rubricText8:Add("databaseObject:Find(Find objectName)")
        rubricText8:Add("This takes a Find query object and builds a query to send to the database. A Find query is used to grab data from the database. When interacting with a database a Find is usually the most common type of query to use.") 
        rubricText8:Add("database:Find(query)") 


        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Action / Object", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))


        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))

        rubricRows1:Add(AddTableDataTag(rubricText1))
        rubricRows1:Add(AddTableDataTag(rubricText2))
        rubricRows1:Add(AddTableDataTag(rubricText3))
        rubricRows1:Add(AddTableDataTag(rubricText4))
        rubricRows1:Add(AddTableDataTag(rubricText5))
        rubricRows1:Add(AddTableDataTag(rubricText6))
        rubricRows1:Add(AddTableDataTag(rubricText7))
        rubricRows1:Add(AddTableDataTag(rubricText8))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "Finding Actions"))

        bodyDiv:AddParagraph("Now, we want to load in the database table we have been working on, "+dq+"grocerylist"+dq+" into the object by passing the string, "+dq+"grocerylist"+dq+" into the SetTable() action. Currently it has connected our database with our object, but we need to add column targets which our Find object will be a container holding our data. We will be wanting to add all our columns into "+dq+"query"+dq+" such as FoodName, FoodID, FoodCalories, FoodQuantity, and FoodCost but we will be using two different actions to add a column. While AddColumn() is our default action to add a column into our object, we also have AddColumnFromTable() that takes in our column name and table name that overall provides more clarity in what table we are grabbing from in the case we will be using joins. We will be discussing more about joins in a later section. Both functions get the job done, therefore it is a matter of preference and context of what we are working on using our database.")
    
        bodyDiv:Add(preformatter:GeneratePreformattedCode("query:SetTable("+dq+"grocerylist"+dq+")
    query:AddColumn("+dq+"FoodName"+dq+")
    query:AddColumn("+dq+"FoodID"+dq+")
    query:AddColumn("+dq+"FoodCalories"+dq+")
    query:AddColumn("+dq+"FoodQuantity"+dq+")
    query:AddColumnFromTable("+dq+"FoodCost"+dq+", "+dq+"grocerylist"+dq+")
"))
        
        bodyDiv:AddParagraph("Within our Find object, we have access to more "+dq+"filtering"+dq+" actions that allow us as programmers to make summaries and various conclusions about our data. What this means is that we'll be able to find entries such as the maximum or minimum of a column, count the total number of entries from a whole column, or even calculate the sum of a column. We'll be grabbing some of these central tendencies from our table and work on the actions: AddSum(), AddCount(), and AddMaximum(). Regarding all of these functions, they take a text parameter which would be the column name and find the value we would be looking for; it is important to note that to use these numerical based actions, we must use columns that contain numbers such as integers, decimals, doubles, etc. and they are not mixed or are string-based columns. ")

        bodyDiv:AddParagraph("Using AddSum(), we want to know exactly how many items we bought in our grocerylist, so let us pass in the column "+dq+"FoodQuantity"+dq+" to sum up all the items. Similar to AddSum() we will also be using AddCount(), we want to know how many unique items we bought in our grocerylist, so let's pass in the column "+dq+"FoodName"+dq+" to count all the items inside our data table. Finally, we want to know how much was the most calorie dense item in our grocerylist, so let's pass in the column "+dq+"FoodCalories"+dq+" into our action, AddMaximum(). Now that we are satisfied with our finds let's actually get these results saved using our QueryResult object.")

        bodyDiv:AddParagraph("First, we will want to create our QueryResult which we can name it "+dq+"results."+dq+" This object can hold our queries from our database similar to how we found data in a single column. We will be calling the Find() using our database object, but instead of inserting a column name as the parameter, we will be passing in our Find object, "+dq+"query"+dq+" which allows us to have more specific query results. We will be saving all of this information into the "+dq+"results"+dq+" object.")

        bodyDiv:AddParagraph("Our query is loaded onto our object, but now, we want to iterate through the list and output its contents. To do this, we would use a loop as well as our QueryResult actions. In Quorum Studio, loops are controlled by a repeat; we'll we using a repeat-while loop where the syntax is:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("repeat while CONDITION
// stuff
end
"))

        bodyDiv:AddParagraph("In this case, our condition will be results:HasNext() which tests if there is any content left inside our query; it returns true when there are items to be iterated through and false when there is no more content inside our query. Inside our repeat-while loop, we will call result:Next() which actually iterates through the query and then we will output the "+dq+"FoodID"+dq+" column using results:GetText(text columnName) and pass in "+dq+"FoodID"+dq+" as the parameter. We will be continuing to add the rest of the columns using our GetText()/GetIntger() actions with "+dq+"results."+dq+" Note: When outputting our columns, we want to make sure we are using the correct actions: GetText() to output text-based columns and GetInteger() to output any numerical columns.")

       AddCodeSample(bodyDiv,"examples/Databases/DBFindMultipleLoop.quorum")

        bodyDiv:AddParagraph("Congrats! We finally know how to find data within multiple columns. To view the entire code, it will be displayed below.
")

        AddCodeSample(bodyDiv,"examples/Databases/DBFindMultiple.quorum")


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about finding multiple columns of data in Quorum."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "finding multiple columns of data"
    end

    action GetName returns text
        return "MultipleColumns"
    end

    action GetShortDescription returns text
        return "how to find and summarize mutliple columns of data"
    end

    action GetLocation returns text
        return "tutorials/databases/multiColumnDatabases.html"
    end

    action GetLinkName returns text
        return "Finding Muliple Columns"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
