use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList
use Libraries.Containers.Array
use Libraries.Web.Page.Link

class DatabasesLeftRightJoins is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Left and Right Joins - Quorum Programming Lanugage")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Databases", 1)
        headDiv:AddText("This tutorial shows us how to create a left and right join")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        
        bodyDiv:AddHeading("Left and Right Joins", 2)
        
        bodyDiv:AddParagraph("Left joins returns all records from the left table (table1), and the matching records from the right table (table2). Likewise, right join returns all records from the right table (table2), and the matching records from the left table (table1). From both joins if there are 0 records from the left side or right side (depending on what join we take), there is no match.")
       
        bodyDiv:AddParagraph("For example, say we have entries for ID's on one table labeled 1-6 and then another table for ID entries 4-10; the entries for 7-10, will not actually have a match if we call for a right join. What it will do is output all matching data with rows 4, 5, and 6 but within rows 7-10, we may see some NULL values because they did not exist in our first table.")

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("In this tutorial we will be finding a left and right join between two tables. We are also creating and inserting data from scratch. In this tutorial, there will be a total of 5 separate programs that all lead into creating our two types of joins: creating our tables, adding data into table 1, adding data into table 2, and creating the left and right join. ")

         Link link1
        link1:AddText("For the table creation, we will be referencing methods on a tutorial on how to create database tables.")
        link1:SetAddress("tutorials/databases/databaseTable.html")
        link1:SetTarget(link1:newTab)
        bodyDiv:Add(link1)
        bodyDiv:AddText(" ")

        Link link2
        link2:AddText("For the data insertion, we will be referring to methods on a tutorial on how to insert data.")
        link2:SetAddress("tutorials/databases/insertingDataDatabases.html")
        link2:SetTarget(link2:newTab)
        bodyDiv:Add(link2)

        bodyDiv:AddText(" Regardless, for each tutorial, we will want to connect our Database into Quorum Studio before we proceed into any work. In the first part of this tutorial we will be creating our tables.")

        bodyDiv:AddParagraph(" ")

        bodyDiv:AddText("We will be wanting to create two tables: one table called "+dq+"likes"+dq+" and the other table called "+dq+"users"+dq+" and we will follow a very similar pattern to ")
        Link link3
        link3:AddText("this website that visualizes left and right joins")
        link3:SetAddress("https://joins.spathon.com")
        link3:SetTarget(link3:newTab)
        bodyDiv:Add(link3)   
        bodyDiv:AddText(". We will first be creating two CreateTable objects: newTable and newTable1. We will first start to build our first table, "+dq+"likes"+dq+" using the actions SetTable(text table name), AddIntegerColum(text columnName), and AddTextColumn(text columnName, int charLimit). The columns and the data types will be as follows:")     

        Array<text> rubricText1
        rubricText1:Add("Data Type: integer")

       rubricText1:Add("Data Type: text / string")

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("ID", " "))
        rubricHeader1:Add(AddTextBoldFront("Likes", " "))

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))

        rubricRows1:Add(AddTableDataTag(rubricText1))
       


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "Data Types of Likes Tables"))

        bodyDiv:AddParagraph("Once we have created all our columns, we will now want to pass in our newTable object into an action called CreateTable(CreateTable objectName) using our database object. ")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// create first table
    CreateTable newTable
    newTable:SetTable("+dq+"likes"+dq+")
    newTable:AddIntegerColumn("+dq+"id"+dq+")
    newTable:AddTextColumn("+dq+"likes"+dq+",500)
    database:CreateTable(newTable)   
"))

        bodyDiv:AddParagraph("We will want to follow this same process for the other table, "+dq+"users"+dq+" where the columns and data types will be as follows:")

        Array<text> rubricText3
        rubricText3:Add("Data Type: integer")
        rubricText3:Add("Data Type: text / string")

        

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("ID", " "))
        rubricHeader2:Add(AddTextBoldFront("CustomerName", " "))

        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))

        rubricRows2:Add(AddTableDataTag(rubricText3))
        


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Data Types of User Tables"))

        bodyDiv:AddParagraph("The full code will be below:")

        AddCodeSample(bodyDiv,"examples/Databases/DBCreateLRJoinsTable.quorum")

        bodyDiv:AddParagraph("Next, we will want to enter data inside our tables. We will have two separate programs to insert data into our "+dq+"likes"+dq+" table and then our "+dq+"users"+dq+" table. Let us go ahead and define our Insert object named "+dq+"insert."+dq+" We will be using this object to access the actions SetTable(), ToText(), Empty() and Add().")
        bodyDiv:AddParagraph("To insert data, we will need to make sure we select our table using SetTable(text tableName); do this with "+dq+"users"+dq+" first and insert this string as our parameter. Then we will want to use the action Add(text columnName, dataType dataValue) with our insert object to enter in appropriate data on the columns. Recall that our columns are: id and customerName. For example, say that we want to add an entry for "+dq+"likes,"+dq+" we will need to call the action Add() with our Insert object and insert "+dq+"likes"+dq+" in the first parameter and an activity or object people enjoy. Below is a code snippet of adding one complete row onto our table:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// add first entry
  insert:Add("+dq+"id"+dq+", 1)
  insert:Add("+dq+"likes"+dq+", "+dq+"ducks"+dq+")
  // will only insert 1 query at a time
  database:Insert(insert)
  rowsAffected = rowsAffected + 1
  output insert:ToText()
"))

        bodyDiv:AddParagraph("It is important that once we add one record, we must immediately call the action Empty() which will clear out our object so we can add multiple records inside of one program. Optionally, to confirm our insert, we can also call the action ToText() that outputs the SQL notation of insertion. Now that we know how to insert a row, we can populate the table for "+dq+"likes"+dq+" as well as "+dq+"users."+dq+" Below are the two sets of code for inserting both tables, likes and users.")
        AddCodeSample(bodyDiv,"examples/Databases/DBLRJoinsInsert.quorum")

            bodyDiv:AddParagraph(" ")
         AddCodeSample(bodyDiv,"examples/Databases/DBLRInsert2.quorum")


        bodyDiv:AddHeading("Left Join",2)
        bodyDiv:AddParagraph("Lastly, we are going to create a left join of our two tables. To do this, we will be calling the action, FindLeftJoin(text tableName, text joinedTable, text jointCondition) and then saving our result into a QueryResult object. For the first two parameters, we will want to insert our two table names, "+dq+"likes"+dq+" and "+dq+"users"+dq+" but for our third parameter, we will need to find a corresponding column that will essentially map the two tables together. ")

        bodyDiv:AddParagraph("As we made our tables in the beginning, notice that both tables contain the column "+dq+"id"+dq+"; we will be using this column in our jointCondition. Our condition is formatted to be table1:column = table2:column. Therefore, our actual joint condition will be: "+dq+"likes:id = users:id"+dq+" inside the 3rd parameter. Let's also go ahead and print the results of our QueryResult item inside a repeat while loop.")
        AddCodeSample(bodyDiv,"examples/Databases/DBLeft.quorum")

        bodyDiv:AddHeading("Right Join",2)
        bodyDiv:AddParagraph("Also, we can create a right join of our two tables. To do this, we will be calling the action, FindRightJoin(text tableName, text joinedTable, text jointCondition) and then saving our result into a QueryResult object. For the first two parameters, we will want to insert our two table names, "+dq+"likes"+dq+" and "+dq+"users"+dq+" but for our third parameter, we will need to find a corresponding column that will essentially map the two tables together. ")
        bodyDiv:AddParagraph("As we made our tables in the beginning, notice that both tables contain the column "+dq+"id"+dq+"; we will be using this column in our jointCondition. Our condition is formatted to be table1:column = table2:column. Therefore, our actual joint condition will be: "+dq+"likes:id = users:id"+dq+" inside the 3rd parameter. Let's also go ahead and print the results of our QueryResult item inside a repeat while loop.")

        AddCodeSample(bodyDiv,"examples/Databases/DBRight.quorum")
        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about left and right joins on a database table on Quorum Language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "left and right joins on a data table"
    end

    action GetName returns text
        return "Left and Right Joins"
    end

    action GetShortDescription returns text
        return "how to create a left and right join on a database table"
    end

    action GetLocation returns text
        return "tutorials/databases/LRJoins.html"
    end
end