use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesViews is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Creating a View - Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces views and how to create them with a database table")
        bodyDiv:Add(headDiv)
        
        Section section_intro_views
        section_intro_views:SetClassAttribute("flex flex-col gap-y-2")

        Heading h_intro_views = section_intro_views:AddHeading("Introduction to Views", 2)
        h_intro_views:AddClassAttribute("text-2xl font-bold")
        h_intro_views:AddAttribute("data-text", "Introduction to Views")
        AddToHeadingArray(h_intro_views)
        
        section_intro_views:AddParagraph("In SQL and in Quorum, views are virtual tables. What this means is that it also contains rows and columns like a real table, but we get to choose the specific rows of certain tables to be in a view. The purpose of using a view versus using the entire table is to provide simplicity to the user. Data tables can get very extensive so fast, therefore if we want to only examine a section of a table, we can simply create a view.")

        Paragraph p_intro_views
        p_intro_views:AddText("For this tutorial, we will be learning how to create a view on our "+dq+"likes"+dq+" table. We will want to connect our database once again as well as create a Find object and a CreateView object. For our Find object, we can reference this tutorial on how we can Find data. Our CreateView object is something completely new where we can use ")
        Link link1
        link1:SetClassAttribute("underline text-quorum-blue-150")
        link1:AddText("helper actions")
        link1:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/CreateView.html")
        link1:SetTarget(link1:newTab)
        p_intro_views:Add(link1)
        p_intro_views:AddText(" to create our view. Let's go ahead and name our Find and CreateView objects simply "+dq+"find"+dq+" and "+dq+"view."+dq+"")
        section_intro_views:Add(p_intro_views)

        section_intro_views:AddParagraph("We will be connecting our table using our Find object first. To get our "+dq+"likes"+dq+" table, we will be using the action SetTable(text tableName) and insert "+dq+"likes"+dq+" as our parameter. Next, we will be adding our column tables so that our Find object can hold them like a container using the action AddColumn(text columnName). We will add our two columns, "+dq+"id"+dq+" and "+dq+"likes"+dq+" since our table is fairly small.")

        section_intro_views:Add(preformatter:GeneratePreformattedCode("Find find
    find:SetTable("+dq+"likes"+dq+")
    find:AddColumn("+dq+"id"+dq+")
    find:AddColumn("+dq+"likes"+dq+")"))

        section_intro_views:AddParagraph("Now that we have a container that holds our table, we can create a view. We will be using two actions from the CreateView object: SetQuery(Find objectName) and SetName(text viewName) that allows us to make a view from our Find object. With our CreateView object, to send it back to the database, we will also be using the action CreateView(CreateView objectName).")

        WebTable table = AddWebTable("Views Helper Actions")
        TableBody tableBody = AddTableBody()

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Object / Action", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))
        table:Add(AddTableHeaderRow(rubricHeader1))

        Array<text> rubricText1
        rubricText1:Add("CreateView objectName")
        rubricText1:Add("The CreateView class is a query that allows creating a table that lives on the database composed of the results of a Find query. Once the view is created it can be accessed as if it was another database table. Although you can not insert, update, or delete from a view.") 
        rubricText1:Add("CreateView view") 
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("viewObjectName:SetQuery(Find findObject)")
        rubricText2:Add("This action is used to set the Find query of the view.") 
        rubricText2:Add("view:SetQuery(find)") 
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("viewObject:SetName(text viewTableName)")
        rubricText3:Add("This action is used to set the name of the view.") 
        rubricText3:Add("view:SetName("+dq+"grocery_view"+dq+")") 
        tableBody:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("databaseObject:CreateView(CreateView objectName)")
        rubricText4:Add("This action takes a CreateView query and sends it to the database.") 
        rubricText4:Add("database:CreateView(view)") 
        tableBody:Add(AddTableBodyRow(rubricText4))

        table:Add(tableBody)
        section_intro_views:Add(table)


        section_intro_views:AddParagraph("Using the action, SetQuery() on our "+dq+"view"+dq+" object, we will pass in the Find object that contains our table. Now, our "+dq+"view"+dq+" is created, but like any table, we must name it which we can do using SetName(). Let's go ahead and name our table "+dq+"likes_query"+dq+" With our view all set up, we will go back to our database object and use the action CreateView() that will send back our table into the database. This action will take in the "+dq+"view"+dq+" object we have just set up.")

        section_intro_views:Add(preformatter:GeneratePreformattedCode("view:SetQuery(find)
    view:SetName("+dq+"likes_query"+dq+")
     database:CreateView(view)
"))

        section_intro_views:AddParagraph("Congratulations! We are able to create a view from any table within our database. The entire program can be viewed below:")

        section_intro_views:Add(preformatter:GeneratePreformattedCode("use Libraries.Data.Database.Database
    use Libraries.Data.Database.Find
use Libraries.Data.Database.CreateView

    Database database
    database:Connect("+dq+"localhost"+dq+", "+dq+"myfirstdatabase"+dq+", "+dq+"root"+dq+", "+dq+"password"+dq+")

    Find find
    find:SetTable("+dq+"likes"+dq+")
    find:AddColumn("+dq+"id"+dq+")
    find:AddColumn("+dq+"likes"+dq+")

    CreateView view
    view:SetQuery(find)
    view:SetName("+dq+"likes_query"+dq+")

    database:CreateView(view)
"))

        bodyDiv:Add(section_intro_views)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about views through database tables on Quorum Language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "creating views from a data table"
    end

    action GetName returns text
        return "Views"
    end

    action GetShortDescription returns text
        return "how to create a view from a database table"
    end

    action GetLocation returns text
        return "tutorials/databases/Views.html"
    end

    action GetLinkName returns text
        return "Views"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
