use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesCharts is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Visualizing Databse Tables- Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial shows us how to display database table data into a chart")
        bodyDiv:Add(headDiv)

        bodyDiv:AddHeading("Visualizing Data in a Database", 2)

        bodyDiv:AddParagraph("Another way we can provide a summary of data is through the use of charts. When data is cleaned and ready to be presented, scientists show their data to others. Again, it is very difficult for someone in the industry to show a data table without any sort of quantitative measure or visual representation. Therefore, we often use charts to represent summaries of the information in our data.")

        bodyDiv:AddParagraph("For this tutorial, we will be creating a bar chart of our "+dq+"grocerylist"+dq+" table inside of our database. We will want to connect our database once again as well as create a DataFrame object. To learn more about how to convert our tables into a DataFrame we can use the following tutorial on converting a data table to a DataFrame.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("DataFrame frame"))

        bodyDiv:AddParagraph("Assuming that our "+dq+"grocerylist"+dq+" table is now a DataFrame, we will be using the "+dq+"frame"+dq+" object for the rest of the tutorial. Taking our frame component, we use the AddSelectedFactors to create the x-axis for the chart. For the y-axis, AddSelectedColumns() will be used as the comparison data to display the different data points taken from the data table. Think of this as the contents of the bars, lines, etc. of the chart. AddSelectedColumns(text column) and AddSelectedFactors(text column) both take in strings as a parameter or the table column number. For the factors, we will be passing in the column "+dq+"foodName"+dq+" and for the chart columns, we will be passing in "+dq+"FoodCost."+dq+"")
    
        bodyDiv:Add(preformatter:GeneratePreformattedCode("frame:AddSelectedFactors("+dq+"FoodName"+dq+")
frame:AddSelectedColumns("+dq+"FoodCost"+dq+")
"))

        bodyDiv:AddParagraph("Now we can create a bar chart object by calling the action, BarChart() on our frame object. Any modifications of the chart itself will be using BarChart such as changing the chart colors and labeling our chart.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// Using the frame, create a BarChart object.
BarChart chart = frame:BarChart()
"))
        bodyDiv:AddParagraph("Let's go ahead and label our chart and change its color to showcase some of the modifications we can make on our bar chart. We will be using the actions SetTitle(text name), SetXAxisTitle(text name), SetYAxisTitle(text name), SetColorPaletteToMagma(), and Display() on our chart object. With our grocery list, we will want to give meaning to our chart and relevant data so let's go and set the title "+dq+"Cost of Grocery Items."+dq+" Next, let's go and change the x and y axis titles; by default, it will label these axises the column names we used, but it is a good habit to label our charts properly. For the x-axis, let's label it "+dq+"Item"+dq+" and for the y-axis, let's label it "+dq+"Cost (in USD $)."+dq+"")


        bodyDiv:Add(preformatter:GeneratePreformattedCode("// Give the chart a descriptive title.
chart:SetTitle("+dq+"Cost of Grocery Items"+dq+")

// Give the x axis a descriptive title.
chart:SetXAxisTitle("+dq+"Item"+dq+")

// Give the y axis a descriptive title.
chart:SetYAxisTitle("+dq+"Cost (in USD $)"+dq+")
"))

        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("We can add further customizations inside our ")
        Link link3
        link3:AddText("BarChart library")
        link3:SetAddress("https://quorumlanguage.com/Libraries/Interface/Controls/Charts/BarChart.html")
        link3:SetTarget(link3:newTab)
        bodyDiv:Add(link3)

        bodyDiv:AddText(", however the last action we will use is changing the color of our chart. ")
        Link link4
        link4:AddText("Quorum allows many different color palettes to customize")
        link4:SetAddress("https://quorumlanguage.com/tutorials/charts/coloraccessibility.html")
        link4:SetTarget(link4:newTab)
        bodyDiv:Add(link4)

        bodyDiv:AddText(" our chart that create a sense of mood or distinguishment between bars. For this example, we will use the action SetColorPaletteToMagma() on our chart object. This color palette contains a lot of bright pinks.
")

        bodyDiv:AddParagraph(" ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:SetColorPaletteToMagma()"))

        bodyDiv:AddParagraph("Finally, we can display our chart using the action Display(). In the charts library, it actually uses Quorum's game interface to output the data chart. What this means is that when we run our program, it opens up a Game window that will have all our information on our "+dq+"grocerylist"+dq+" table represented in a bar chart. Knowing that we can overlap Databases into Data Science, we are able to use database tables to highlight important information regarding our database tables.")

        bodyDiv:AddParagraph("We can view the entire code below.")

        AddCodeSample(bodyDiv,"examples/Databases/DBChart.quorum")


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "turn database tables into charts"
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "how to create a chart from a database table"
    end

    action GetName returns text
        return "Database Chart creations"
    end

    action GetShortDescription returns text
        return "how to create a bar chart from a database table"
    end

    action GetLocation returns text
        return "tutorials/databases/databaseCharts.html"
    end

    action GetLinkName returns text
        return "Creating Charts from a Database Table"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
