use Libraries.Web.Page.all
use Libraries.Containers.Array

class DatabasesJoins is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Introduction to Joins - Quorum Programming Lanugage")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Databases", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Databases")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces the concept of joins in a database")
        bodyDiv:Add(headDiv)
        
        bodyDiv:AddHeading("What are Joins?", 2)
      
        bodyDiv:AddParagraph("Throughout our tutorials, we have briefly mentioned the concept of Joins but have never gone too in-depth on this topic. Joins may be one of the more difficult topics in databases, but they are nonetheless helpful with finding relationships between our database tables. In SQL, a JOIN clause simply combines rows from two or more tables, based on a related column between them. We can do the same thing using Quorum. ")

        bodyDiv:AddParagraph("Let us introduce the concept of joins with two example tables: TicketOrders and Customer.")

        Array<text> rubricText1
        rubricText1:Add("8086")
        rubricText1:Add("24") 
        rubricText1:Add("4") 
        rubricText1:Add("2022-09-17") 

        Array<text> rubricText2
        rubricText2:Add("8087")
        rubricText2:Add("25") 
        rubricText2:Add("1") 
        rubricText2:Add("2022-09-20") 

        Array<text> rubricText3
        rubricText3:Add("8088")
        rubricText3:Add("26") 
        rubricText3:Add("2") 
        rubricText3:Add("2022-09-22") 

        Array<text> rubricText4
        rubricText4:Add("8089")
        rubricText4:Add("27") 
        rubricText4:Add("7") 
        rubricText4:Add("2022-09-22") 

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("TickOrderID", " "))
        rubricHeader1:Add(AddTextBoldFront("CustomerID", " "))
        rubricHeader1:Add(AddTextBoldFront("TicketQuantity", " "))
        rubricHeader1:Add(AddTextBoldFront("TicketOrderDate", " "))    

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))

        rubricRows1:Add(AddTableDataTag(rubricText1))
        rubricRows1:Add(AddTableDataTag(rubricText2))
        rubricRows1:Add(AddTableDataTag(rubricText3))
        rubricRows1:Add(AddTableDataTag(rubricText4))


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "Ticket Transactions"))

        Array<text> rubricText5
        rubricText5:Add("22")
        rubricText5:Add("Harry Styles") 
        rubricText5:Add("Olivia Wilde") 
        rubricText5:Add("UK") 

        Array<text> rubricText6
        rubricText6:Add("23")
        rubricText6:Add("Taylor Swift") 
        rubricText6:Add("Jake Gyllenhaal") 
        rubricText6:Add("US") 
        
        Array<text> rubricText7
        rubricText7:Add("24")
        rubricText7:Add("Kanye West") 
        rubricText7:Add("Kim Kardashian")
        rubricText7:Add("US")  

        Array<text> rubricText8
        rubricText8:Add("25")
        rubricText8:Add("Justin Bieber") 
        rubricText8:Add("Selena Gomez") 
        rubricText8:Add("CA") 

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("CustomerID", " "))
        rubricHeader2:Add(AddTextBoldFront("CustomerName", " "))
        rubricHeader2:Add(AddTextBoldFront("ContactName", " "))
        rubricHeader2:Add(AddTextBoldFront("Country", " "))


        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))

        rubricRows2:Add(AddTableDataTag(rubricText5))
        rubricRows2:Add(AddTableDataTag(rubricText6))
        rubricRows2:Add(AddTableDataTag(rubricText7))
        rubricRows2:Add(AddTableDataTag(rubricText8))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Customer Information"))

        bodyDiv:AddParagraph("We notice that these two tables have a relational column, "+dq+"CustomerID."+dq+" Inside of TicketOrders, the "+dq+"CustomerID"+dq+" refers to the "+dq+"CustomerID"+dq+" inside of Customers. This type of join is considered an inner join and we can actually combine these two tables together using "+dq+"CustomerID"+dq+" as our joining factor. Now, let us say we do combine these two tables with OrderID, CustomerName, and TicketQuantity our table would look like this table below:
")

        Array<text> rubricText9
        rubricText9:Add("8084")
        rubricText9:Add("Harry Styles") 
        rubricText9:Add("2") 

         Array<text> rubricText10
        rubricText10:Add("8085")
        rubricText10:Add("Taylor Swift") 
        rubricText10:Add("3") 

         Array<text> rubricText11
        rubricText11:Add("8086")
        rubricText11:Add("Kanye West") 
        rubricText11:Add("4") 

         Array<text> rubricText12
        rubricText12:Add("8087")
        rubricText12:Add("Justin Bieber") 
        rubricText12:Add("1") 

        Array<text> rubricHeader3
        rubricHeader3:Add(AddTextBoldFront("OrderID", " "))
        rubricHeader3:Add(AddTextBoldFront("CustomerName", " "))
        rubricHeader3:Add(AddTextBoldFront("TicketQuantity", " "))


        Array<text> rubricRows3
        rubricRows3:Add(AddTableHeaderTag(rubricHeader3))

        rubricRows3:Add(AddTableDataTag(rubricText9))
        rubricRows3:Add(AddTableDataTag(rubricText10))
        rubricRows3:Add(AddTableDataTag(rubricText11))
        rubricRows3:Add(AddTableDataTag(rubricText12))


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows3), "Joined Table of Ticket Transactions and Customer Info"))        

        bodyDiv:AddHeading("Types of Joins", 2)

        bodyDiv:AddParagraph("As our main example went over the concept of an inner join, there are a total of five types of joins: INNER, LEFT, RIGHT, FULL, and CROSS JOINS. We will describe all these joins along with its equivalent action using Quorum language using a table below [1].")

        Array<text> rubricText13
        rubricText13:Add("Inner Join")
        rubricText13:Add("The INNER JOIN keyword selects all rows from both the tables as long as the condition is satisfied. This keyword will create the result-set by combining all rows from both the tables where the condition satisfies i.e value of the common field will be the same.") 
       
        Array<text> rubricText14
        rubricText14:Add("Left Join")
        rubricText14:Add("This join returns all the rows of the table on the left side of the join and matches rows for the table on the right side of the join. For the rows for which there is no matching row on the right side, the result-set will contain null. LEFT JOIN is also known as LEFT OUTER JOIN.") 
        
        Array<text> rubricText15
        rubricText15:Add("Right Join")
        rubricText15:Add("RIGHT JOIN is similar to LEFT JOIN. This join returns all the rows of the table on the right side of the join and matching rows for the table on the left side of the join. For the rows for which there is no matching row on the left side, the result-set will contain null. RIGHT JOIN is also known as RIGHT OUTER JOIN.") 

        Array<text> rubricText16
        rubricText16:Add("Cross Join")
        rubricText16:Add("The SQL CROSS JOIN produces a result set which is the number of rows in the first table multiplied by the number of rows in the second table if no WHERE clause is used along with CROSS JOIN.This kind of result is called as Cartesian Product.") 

        Array<text> rubricText17
        rubricText17:Add("Full Join")
        rubricText17:Add("FULL JOIN creates the result-set by combining results of both LEFT JOIN and RIGHT JOIN. The result-set will contain all the rows from both tables. For the rows for which there is no matching, the result-set will contain NULL values.") 

        Array<text> rubricHeader4
        rubricHeader4:Add(AddTextBoldFront("Type pf Join", " "))
        rubricHeader4:Add(AddTextBoldFront("Join Description", " "))


        Array<text> rubricRows4
        rubricRows4:Add(AddTableHeaderTag(rubricHeader4))

        rubricRows4:Add(AddTableDataTag(rubricText13))
         rubricRows4:Add(AddTableDataTag(rubricText14))
         rubricRows4:Add(AddTableDataTag(rubricText15))
         rubricRows4:Add(AddTableDataTag(rubricText16))
         rubricRows4:Add(AddTableDataTag(rubricText17)) 


        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows4), "JOINS in SQL"))

         bodyDiv:AddHeading("Table of Joins in Quorum", 2)
        
        bodyDiv:AddParagraph(" ")
        bodyDiv:AddText("At the moment, Quorum Studio supports 4 out of the 5 types of joins. This table shows variants of the joins including the default joins as well as using a filter with a join. To find more variants of the Inner, Left, Right, and Cross joins we can ")
         Link link2
        link2:AddText("reference the main Database library")
        link2:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/Database.html#EmptyTable:text")
        link2:SetTarget(link2:newTab)
        bodyDiv:Add(link2)
        bodyDiv:AddText(". All joins in Quorum will return a ")

        Link link3
        link3:AddText("QueryResult object")
        link3:SetAddress("https://quorumlanguage.com/Libraries/Data/Database/QueryResult.html")
        link3:SetTarget(link3:newTab)
        bodyDiv:Add(link3)
        bodyDiv:AddText(" which will be our combined table.")

        bodyDiv:AddParagraph(" ")

        Array<text> rubricText18
        rubricText18:Add("databaseObject:FindInnerJoin(text tableName, text joinedTable, text joinCondition)")
        rubricText18:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. An Inner Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables.") 
        rubricText18:Add("QueryResult result = database:FindInnerJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+")") 

        Array<text> rubricText19
        rubricText19:Add("databaseObject:FindInnerJoin(text tableName, text joinedTable, text joinCondition, text filter)")
        rubricText19:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. An Inner Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables. This inner join also uses a filter to narrow down results for the new table.") 
        rubricText19:Add("QueryResult result = database:FindInnerJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+", "+dq+"OrderNumber = 55"+dq+")") 

        Array<text> rubricText20
        rubricText20:Add("databaseObject:FindCrossJoin(text tableName, text joinedTable)")
        rubricText20:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Cross Join is different from the other joins in that there is no join condition. A Cross Join will return the Cartesian product of rows from the two tables. In other words, every row from the first table will be combined with every row from the second table and that will be returned.") 
        rubricText20:Add("QueryResult result = database:FindCrossJoin("+dq+"Products"+dq+", "+dq+"Stores"+dq+")") 

        Array<text> rubricText21
        rubricText21:Add("databaseObject:FindCrossJoin(text tableName, text joinedTable, text filter)")
        rubricText21:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Cross Join is different from the other joins in that there is no join condition. A Cross Join will return the Cartesian product of rows from the two tables. In other words, every row from the first table will be combined with every row from the second table and that will be returned. This cross join also uses a filter to narrow down results for the new table.") 
        rubricText21:Add("QueryResult result = database:FindCrossJoin("+dq+"Products"+dq+", "+dq+"Stores"+dq+", "+dq+"price >= 4.99"+dq+")") 

        Array<text> rubricText22
        rubricText22:Add("databaseObject:FindLeftJoin(text tableName, text joinedTable, text joinCondition)")
        rubricText22:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Left Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables. But if the condition fails then a new row is still added containing all the rows from the first table.") 
        rubricText22:Add("QueryResult result = database:FindLeftJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+")") 

        Array<text> rubricText23
        rubricText23:Add("databaseObject:FindLeftJoin(text tableName, text joinedTable, text joinCondition, text filter)")
        rubricText23:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Left Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables. But if the condition fails then a new row is still added containing all the rows from the first table. This left  join also uses a filter to narrow down results for the new table.") 
        rubricText23:Add("QueryResult result = database:FindLeftJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+", "+dq+"OrderNumber = 55"+dq+")") 

        Array<text> rubricText24
        rubricText24:Add("databaseObject:FindRightJoin(text tableName, text joinedTable, text joinCondition)")
        rubricText24:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Right Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables. But if the condition fails then a new row is still added containing all the rows from the second table.") 
        rubricText24:Add("QueryResult result = database:FindRightJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+")") 

        Array<text> rubricText25
        rubricText25:Add("databaseObject:FindRightJoin(text tableName, text joinedTable, text joinCondition, text filter)")
        rubricText25:Add("This action runs a Find query using a join. A Find query with a join will check the rows of multiple tables and the type of join determines what columns will appear in the final result set. A Right Join compares every row from the first table to every row on the second table. If the values from the rows satisfy the condition then a new row is added containing the combined columns from both tables. But if the condition fails then a new row is still added containing all the rows from the second table. This right join also uses a filter to narrow down results for the new table.") 
        rubricText25:Add("QueryResult result = database:FindRightJoin("+dq+"Orders"+dq+", "+dq+"Customers"+dq+", "+dq+"Orders:CustomerID = Customers:CustomerID"+dq+", "+dq+"OrderNumber = 55"+dq+")") 

        Array<text> rubricHeader5
        rubricHeader5:Add(AddTextBoldFront("Action", " "))
        rubricHeader5:Add(AddTextBoldFront("Description", " "))
        rubricHeader5:Add(AddTextBoldFront("Usage", " "))


        Array<text> rubricRows5
        rubricRows5:Add(AddTableHeaderTag(rubricHeader5))

        rubricRows5:Add(AddTableDataTag(rubricText18))
        rubricRows5:Add(AddTableDataTag(rubricText19))
        rubricRows5:Add(AddTableDataTag(rubricText20))
        rubricRows5:Add(AddTableDataTag(rubricText21))
        rubricRows5:Add(AddTableDataTag(rubricText22))
        rubricRows5:Add(AddTableDataTag(rubricText23))
        rubricRows5:Add(AddTableDataTag(rubricText24))
        rubricRows5:Add(AddTableDataTag(rubricText25))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows5), "JOINS in Quorum"))

        Bold b2
            b2:AddText("References:")
        bodyDiv:Add(b2)
        bodyDiv:AddParagraph(" ")

        Paragraph para1
        para1:AddText("[1]: ")
        para1:AddText("Geeks4Geeks, SQL / Join (Inner, Left, Right and Full Joins) ")
        
        Link link8
        link8:AddText("https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/ ")
        link8:SetAddress("https://www.geeksforgeeks.org/sql-join-set-1-inner-left-right-and-full-joins/ ")
        link8:SetTarget(link8:newTab)
        
        para1:Add(link3)
        para1:AddText(".")
        bodyDiv:Add(para1)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about database JOINS on Quorum Language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "databases, tables, data tables, charts, data science, relational, relational data,
        SQL, mySQL, noSQL, database tutorial for visually impaired")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "database joins"
    end

    action GetName returns text
        return "joins"
    end

    action GetShortDescription returns text
        return "understanding JOINS in a database and the different typess of joins"
    end

    action GetLocation returns text
        return "tutorials/databases/introToJoins.html"
    end

    action GetLinkName returns text
        return "Introduction to Joins"
    end

    action GetSectionName returns text
        return "Databases"
    end
end
