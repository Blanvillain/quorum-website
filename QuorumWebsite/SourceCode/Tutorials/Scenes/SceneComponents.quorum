use Libraries.Web.Page.all
use Libraries.Containers.Array

class SceneComponents is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Components of Scene Editor - Quorum Programming Language")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Components of Scene Editor", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Components of Scene Editor")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial explains the components of the scene editor")
        bodyDiv:Add(headDiv)

        Section section_components
        section_components:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_components)
        AddHeading(section_components, "Anatomy of the Scene Editor", 2)

        section_components:AddParagraph("The scene editor as a whole has many moving parts, designed to make it easier to create visual scenes, place items, and manipulate objects. Notably, Quorum Studio contains 2 tabs, Scene and Palette, which allow manipulation of objects in a scene. We then have a Grid Editor, which allows placing, deleting, and moving objects around. Over time, we suspect these foundations will change as we get user requests and feedback.")  
        
        Section section_palette
        section_palette:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_palette)
        AddHeading(section_palette, "The 2D Scene and Palette Tabs", 2)

        section_palette:AddParagraph("In the first version of Quorum Studio, there was a project tree that represented Quorum source code in a pane. Starting in Quorum Studio 2.0, this tree was replaced with a tabbed pane that had two new items, the scene and palette tab. Navigate between tabs using COMMAND+TAB on Mac or CONTROL+TAB on Windows. In the scene tab, all objects created as part of the grid are located inside a tree. This includes two components, cameras, and items. 
               Notably, the camera contains a reference to the editor camera, which can be manipulated and adjusted through setting properties with the keyboard or mouse. Inside of items is everything added to the scene.")
        section_palette:AddParagraph("The Palette Tab contains images or models that can be placed inside of a scene. There are default (open licensed) art objects that can be used freely in any project as a starting point. This provides a way to add, for 2D games, basic tiles for dirt, water, stone, monsters, and other items for use in a potential game. In each case, the art is appropriately labeled so that users can both see the image, and get written information. 
                All default art is child-appropriate and should be usable in or out of a classroom. Below is an image of the Palette in the current version of Quorum Studio.")
        Image image = section_palette:AddImage("/media/scenes/CreateScene/Palette.png","This is an image of the Palette, which from an accessibility standpoint should feel like a tree, even though it visually appears on screen somewhat different. In practice, each part of the tree is actually an image, but one labeled with accessibility information. To use it, press enter on any tree item, which places us in the Grid Editor with an item of that kind at the cursor's location.")
        image:AddAttribute("data-zoom", "")

        Section section_grid
        section_grid:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_grid)
        AddHeading(section_grid, "The 2D Grid Editor", 2)
        section_grid:AddParagraph("While the Scene and Palette tabs are designed to organize what is in or can be added to, a scene, the grid editor is where these objects are placed, and properties are set. For this tutorial, we will go over only the editor for 2D game creation, although 3D is similar. Notably, the grid provides a way to place items from the palette into pre-defined squares. Technically, the scene is not really a grid. The default shows this to make it easier to understand and use. 
                Because of this, keep in mind that all items are placed in cartesian coordinates (x, y coordinates), not grid locations.")
        section_grid:AddParagraph("For example, in the image below, there are a series of horizontal and vertical lines, effectively a grid. By default, these lines are spaced 32 'units' apart from each other, which for this 2D editor is pixels. This default is set because many open-source art tilesets, images with many items in it, use 32 or 16-pixel squares for map layout. In the 3D editor, these units are actually thought of in meters, and pixels are not thought of in the same way. 
                That is again related to the nature of 3D models.")
        section_grid:AddParagraph("The image below is a large grid, with a dark grey rectangle in the middle. That middle is what the camera can see of the scene. The bottom left of the rectangle is (0,0), or x equals 0, and y equals 0. One square to the right might seem like (1,0), but remember that each square is 32 pixels wide and that this grid size can be adjusted. 
                As such, the next square over is actually at the coordinates (32,0). The camera is 800 x 600 pixels by default and must be changed in code after a game is loaded to change this.")
        Image image2 = section_grid:AddImage("/media/scenes/CreateScene/The2DGrid.png","This is an image of the 2D grid in Quorum Studio. It shows a series of vertical and horizontal lines, each separated by 32 pixels by default. In the center of this grid is the view of the camera, which is shown visually as a darker grey outline.")
        image2:AddAttribute("data-zoom", "")
        section_grid:AddParagraph("The math to find the position of each square on the grid can be a little tricky. Suppose there is a grid cell size of P, where P is 32 pixels. This means that to determine the grid coordinate, we always take the grid cell and multiply by P. 
                For example, a cell at position (10, 10) would be (P*10, P*10), or (320, 320). This is important when setting properties to objects in the scene.")
        

        Section section_palette_3d
        section_palette_3d:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_palette_3d)
        AddHeading(section_palette_3d, "The 3D Scene and Palette Tabs", 2)
   
        section_palette_3d:AddParagraph("In the first version of Quorum Studio, there was a project tree that represented Quorum source code in a pane. Starting in Quorum Studio 2.0, this tree was replaced with a tabbed pane that had two new items, the scene and palette tab. Navigate between tabs using COMMAND+TAB on Mac or CONTROL+TAB on Windows. In the scene tab, all objects created as part of the grid are located inside a tree. This includes two components, cameras, and items. 
               Notably, the camera contains a reference to the editor camera, which can be manipulated and adjusted through setting properties with the keyboard or mouse. Inside of items is everything added to the scene.")
       section_palette_3d:AddParagraph("The Palette Tab contains images or models that can be placed inside of a scene. There are default (open licensed) art objects that can be used freely in any project as a starting point. This provides a way to add, for 3D games, basic objects for dirt, water, stone, monsters, and other items for use in a potential game. In each case, the art is appropriately labeled so that users can both see the image, and get written information. 
                All default art is child-appropriate and should be usable in or out of a classroom. Below is an image of the Palette in the current version of Quorum Studio.")
       Image image3 = section_palette_3d:AddImage("/media/scenes/CreateScene/3DPalette.png","This is an image of the Palette, which from an accessibility standpoint should feel like a tree, even though it visually appears on screen somewhat different. In practice, each part of the tree is actually an image, but one labeled with accessibility information. To use it, press enter on any tree item, which places us in the Grid Editor with an item of that kind at the cursor's location.")
        image3:AddAttribute("data-zoom", "")

        Section section_grid_3d
        section_grid_3d:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_grid_3d)
        AddHeading(section_grid_3d, "The 3D Grid Editor", 2)

        section_grid_3d:AddParagraph("While the Scene and Palette tabs are designed to organize what is in or can be added to, a scene, the grid editor is where these objects are placed, and properties are set. For this tutorial, we will go over only the editor for 3D game creation, although 2D is similar. Notably, the grid provides a way to place items from the palette into pre-defined cubes. Technically, the scene is not really a grid. The default shows this to make it easier to understand and use. 
                Because of this, keep in mind that all items are placed in 3D cartesian coordinates (x, y, z coordinates), not grid locations.")
                section_grid_3d:AddParagraph("For example, in the image below, there are a series of grid lines extending to infinity on the x and z axis, effectively forming a plane. The up and down, or y axis, does not have gridlines but has the same unit measurements and movement as x and z. By default, these lines are spaced 1 'unit' apart from each other, which for this 3D editor is considered a meter in terms of unit measurement. This default is chosen by the design team to match other 3D systems. This choice is related to the nature of 3D models.")bodyDiv:AddParagraph("It is also an example of the scene editor and displays a large grid, with a dark grey square in the middle. The center of the square centered at the axis where the x, y, and z dimensions meet. The cursor is placed at the origin (0,0,0) by default while any items placed will have the same default coordinates the cursors current position where ever that may be on the grid. As such, the next square over is actually at the coordinates (1,0,0). The camera is centered by default and must be changed in code after a game is loaded to alter this default location.")
        Image image4 = bodyDiv:AddImage("/media/scenes/CreateScene/3DSpace.png","This is an image of the 3D grid in Quorum Studio. It shows a series of gridlines that outline a plane (the up and down dimension grid lines are not shown), separated by 1 meter in each dimension. In the center of this grid is the view of the camera, which is shown visually as a darker grey outline.")
        image4:AddAttribute("data-zoom", "")
        section_grid_3d:AddParagraph("The math to find the position of each square on the grid can be a little tricky. Suppose there is a grid cell size of P, where P is 32 meters. This means that to determine the grid coordinate, we always take the grid cell and multiply by P. For example, a cell at position (10, 10, 10) would be (P*10, P*10, P*10), or (320, 320, 320). This is important when setting properties to objects in the scene.")
        
        
        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about the components of the scene editor in Quorum Studio"
    end

    action GetSummaryName returns text
        return "the components of the scene editor"
    end

    action GetName returns text
        return "Components of the Scene Editor"
    end

    action GetShortDescription returns text
        return "components of the scene editor in Quorum Studio"
    end

    action GetLocation returns text
        return "tutorials/Scenes/components.html"
    end

    action GetLinkName returns text
        return "Components of the Scene Editor"
    end

    action GetSectionName returns text
        return "Scene Editing"
    end
end