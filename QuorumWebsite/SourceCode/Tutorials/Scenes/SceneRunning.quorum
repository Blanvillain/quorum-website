use Libraries.Web.Page.all
use Libraries.Containers.Array

class SceneRunning is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Running a Scene - Quorum Programming Language")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
         Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Running a Scene", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Running a Scene")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces running a scene")
        bodyDiv:Add(headDiv)

        
        Section section_scene
        section_scene:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_scene)
        AddHeading(section_scene, "Introduction to Running a Scene", 2)

        section_scene:AddHeading("Introduction to Running a Scene", 2)
        section_scene:AddParagraph("It's complete. The perfect scene. It's cool. It's clever. It's got monsters. They're amazing! Publish it! Hold on. Scenes are cool, but static. Just because there are images in the application, does not mean the game is ready to be published on an app store. 
            The application needs movement, game logic, and many other operations. Any visual item can be placed and manipulated later in code in the general sense.")
        section_scene:AddParagraph(" To load a scene, use the following template:") 

        text source = GetTextFromSource("/html/sources/tutorials/scenes/Runner.quorum")
        section_scene:Add(preformatter:GeneratePreformattedCode(source))

        section_scene:AddParagraph("This template looks similar to a normal game template, as described in the Games tracks and tutorials. The way this works is that there is a new action, added in Quorum version 8, called LoadScene. 
            This action knows how to read a scene file, process the information inside of it, and load that information into an application. This example is the default that is placed into the blank scene template when creating a scene. 
            For this reason, running the default scene project automatically loads whatever scene was created and starts the game.")
        section_scene:AddParagraph("As with all computer applications, save often! While Quorum Studio saves automatically when the program is run, it is still good practice to save projects every several minutes. To save, choose the disk Save icon, or use COMMAND+S or CONTROL+S. 
            To run the scene, click the Green RUN arrow, or use COMMAND+R or CONTROL+R. The scene will run, and open a game window with the scene loaded.")

        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn to run scenes in Quorum Studio"
    end

    action GetSummaryName returns text
        return "Introduction to Running a Scene"
    end

    action GetName returns text
        return "Introduction to Running a Scene"
    end

    action GetShortDescription returns text
        return "running a scene in Quorum Studio"
    end

    action GetLocation returns text
        return "tutorials/Scenes/running.html"
    end

    action GetLinkName returns text
        return "Run a Scene"
    end

    action GetSectionName returns text
        return "Scene Editing"
    end
end