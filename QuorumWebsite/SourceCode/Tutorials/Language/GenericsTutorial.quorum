use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList

class GenericsTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Using Generics - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Using Generics", 1)
        headDiv:AddText("Generics allow us to specify what type is in a container.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("What are Generics?", 2)
        bodyDiv:AddParagraph(   "In computer programming, we often want to create a class that generically specifies an algorithm. "
                            +   "For example, we may want to create a list of objects, like a list of people in a phone book. "
                            +   "Or, we may want to create a list of numbers, integers, or anything else. There are at least two ways we could accomplish this: "
                            +   "1) we could create separate implementations of our list for each data type (e.g., one for numbers, one for integers), or 2) "
                            +   "we could create a " + dq + "generic" + dq + " class." + cr
                            +   "Let us take the first case, a list of numbers or integers.")

        CodeBlock cb1
        Span s1
        cb1:AddText("class List" + cr
                +   "     action Add(integer item)" + cr)
        s1:AddText("          //add our list item" + cr )
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("     end" + cr
                +   "" + cr
                +   "     action Main" + cr
                +   "          output " + dq + "I made a non-generic list class with integers" + dq + cr
                +   "     end" + cr
                +   "end" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))

        AddSideBySideIDE(bodyDiv, "generics1", "Activity: Try Making a List class", 
            "Try making our own generic class")

        bodyDiv:AddParagraph("Our implementation would be identical for numbers, except that the type changes, like so:")

        CodeBlock cb2
        Span s2
        cb2:AddText("class List" + cr
                +   "     action Add(number item)" + cr)
        s2:AddText("          //add our list item" + cr )
        s2:SetClassAttribute("comment")
        cb2:Add(s2)
        cb2:AddText("     end" + cr
                +   "" + cr
                +   "     action Main" + cr
                +   "          output " + dq + "I made a non-generic list class with numbers" + dq + cr
                +   "     end" + cr
                +   "end" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))

        AddSideBySideIDE(bodyDiv, "generics2", "Activity: Try a List with numbers", 
            "Try using numbers instead of integers for the list")


        bodyDiv:AddParagraph(   "Quorum provides a mechanism to do this generically, without needing separate implementations. "
                            +   "Then, our list could compute whatever it needs, without worrying about what kind of object is placed into it. "
                            +   "To do this, we must first declare our new generic list class as so:")

        CodeBlock cb3
        Span s3
        cb3:AddText("class List<<Type>Type>" + cr
                +   "     action Add(Type item)" + cr)
        s3:AddText("          //add our list item" + cr )
        s3:SetClassAttribute("comment")
        cb3:Add(s3)
        cb3:AddText("     end" + cr
                +   "" + cr
                +   "     action RemoveFromFront returns Type" + cr
                +   "          //do remove operation" + cr
                +   "          //we need to say " + dq + "return val" + dq + " where val is of our generic Type" + cr
                +   "          return undefined" + cr
                +   "     end" + cr
                +   "" + cr
                +   "     action Main" + cr
                +   "          output " + dq + "This is a Generic List" + dq + cr
                +   "     end" + cr
                +   "end")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb3))

        AddSideBySideIDE(bodyDiv, "generics3", "Activity: Try a Generic List", 
            "Try making our List class more generic")

        bodyDiv:AddParagraph(   "The syntax here is complicated and requires some explanation.
            Notably, we define our class here normally, first with the word class and 
            then with the word List. This is followed by angle brackets and an arbitrary word, 
            in this case Type. Now, Type here could be any word, similar to a 
            variable, except that this word is used as a flag by Quorum for how we can later use our list. 
            Specifically, when our code is compiled, Quorum keeps track of how 
            a particular generic is used (e.g., an integer, number) and adapts accordingly. 
            In our Add and Remove actions, notice that instead of returning an individual number or 
            integer, we now return Type. To speed along the implementation of the list, 
            we will now use the finished and built in List class in Quorum. To use it, 
            our code looks like this:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  
                "use Libraries.Containers.List" + cr
            +   "List<<integer>integer> list" + cr
            +   "list:Add(1)" + cr
            +   "list:Add(2)" + cr
            +   "list:Add(3)" + cr
            +   "integer a = list:RemoveFromFront()" + cr
            +   "integer b = list:RemoveFromFront()" + cr
            +   "integer c = list:RemoveFromFront()" + cr
            +   "output a" + cr
            +   "output b" + cr
            +   "output c" + cr
        ))

        AddSideBySideIDE(bodyDiv, "generics4", "Activity: Try using a Generic List", 
            "Try using a List built using generics")

        bodyDiv:AddParagraph(   "Like before, using angle brackets tells our list 
            what kind it is. In this case, we are using integers. Next, we are then 
            adding and then removing items from the list, outputting each in turn.
            No doubt, generics are an advanced topic in programming. They might seem esoteric, 
            but there is some evidence in the scholarly literature that they can 
            be helpful to programmers. For those that would like to see the completed list, 
            the source for Quorum can be found here:")

        bodyDiv:AddLink("The List class in Quorum","https://bitbucket.org/stefika/quorum-language/src/2c3e193e650bebd7a46200827d89a02fd1073e0b/Quorum3/Library/Standard/Libraries/Containers/List.quorum?at=master&fileviewer=file-view-default")
        
        bodyDiv:AddParagraph("For those that want more information on the impact 
            of generics on programmers, here are two references that contain evidence:")

        OrderedList ordered
        ordered:AddListItemLink("Michael Hoppe and Stefan Hanenberg. 2013. Do developers 
            benefit from generic types?: an empirical comparison of generic and 
            raw types in java. SIGPLAN Not. 48, 10 (October 2013), 457-474. 
            DOI=http://dx.doi.org/10.1145/2544173.2509528",
            "http://dl.acm.org/citation.cfm?id=2509528&CFID=851762518&CFTOKEN=15553070")
        ordered:AddListItemLink("Parnin, C., Bird, C. & Murphy-Hill, E. Empir Software 
            Eng (2013) 18: 1047. doi:10.1007/s10664-012-9236-6",
            "http://dl.acm.org/citation.cfm?id=2589717&CFID=851762518&CFTOKEN=15553070")
        bodyDiv:Add(ordered)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about how to use generics and templating for storing data in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Generics"
    end

    action GetImageLocation returns text
        return "/media/basics/generics.png"
    end

    action GetName returns text
        return "generics"
    end

    action GetShortDescription returns text
        return "how to use this concept for collections of data"
    end

    action GetLocation returns text
        return "tutorials/language/generics.html"
    end
end