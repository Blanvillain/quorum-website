use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class AutoboxingTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Advanced use of Primitives - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Advanced use of Primitive Types", 1)
        headDiv:AddHeading("Advanced Topics with Primitive Types.", 3)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Calling Actions on Primitives", 1)
        bodyDiv:AddParagraph("Primitive types in Quorum, like integers, often 
            have certain kinds of limitations in programming. In Quorum, while 
            these types are sent to memory and the processor as usual in most 
            cases, they can be used in code very similarly to how objects and 
            classes are. Namely, we can call actions on primitive types. 
            Let’s start with an example using integers:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  
                "integer zero = 0" + cr
            +   "integer max = zero:GetMaximumValue()" + cr
            +   "integer min = zero:GetMinimumValue()" + cr
            +   "" + cr
            +   "output zero" + cr
            +   "output max" + cr
            +   "output min" + cr
        ))

        AddSideBySideIDE(bodyDiv, "autobox1", "Activity: Try using an action on a primitive", 
            "Try calling an action on a primitive integer type")

        bodyDiv:AddParagraph("In the first line, we create a regular primitive 
            integer, which takes up 4 bytes of memory. The way this is stored 
            in what is called two’s complement. We can read more about that here:")

        bodyDiv:AddLink("Wikipedia page on Two's complement","https://en.wikipedia.org/wiki/Two%27s_complement")

        bodyDiv:AddParagraph("While in some programming languages, storing our 
            integer in this way prohibits us from using the primitive to call 
            actions, in Quorum this is not the case. Behind the scenes, Quorum 
            uses a trick to allow actions to be called efficiently. Many 
            actions are available that might help us, including all of them, 
            with the exception of the actions labeled GetValue in each class, 
            listed in the Boolean, Integer, Number, or Text documentation. 
            That documentation and the list of actions supported can be found 
            in the following pages:")

        UnorderedList unordered
        unordered:AddListItemLink("Boolean class","https://quorumlanguage.com/Libraries/Language/Types/Boolean.php")
        unordered:AddListItemLink("Integer class","https://quorumlanguage.com/Libraries/Language/Types/Integer.php")
        unordered:AddListItemLink("Number class","https://quorumlanguage.com/Libraries/Language/Types/Number.php")
        unordered:AddListItemLink("Text class","https://quorumlanguage.com/Libraries/Language/Types/Text.php")
        bodyDiv:Add(unordered)
        
        //the section on mutator function
        bodyDiv:AddHeading("Autoboxing", 2)

        bodyDiv:AddParagraph("When we use containers, how primitives are handled is 
            slightly different. Take Lists, for example. Just like in the 
            generics tutorial, we might have code like the following:")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  
                "use Libraries.Containers.List" + cr
            +   "List<<integer>integer> list" + cr
            +   "list:Add(1)" + cr
            +   "list:Add(2)" + cr
            +   "list:Add(3)" + cr
            +   "integer a = list:RemoveFromFront()" + cr
            +   "integer b = list:RemoveFromFront()" + cr
            +   "integer c = list:RemoveFromFront()" + cr
            +   "output a" + cr
            +   "output b" + cr
            +   "output c" + cr
        ))

        AddSideBySideIDE(bodyDiv, "autobox2", "Activity: Try Autoboxing", 
            "Try to understand how primitives can be used in generic types")

        bodyDiv:AddParagraph("Let us discuss what this code is doing in more 
            detail. Notably, when the first Add action is called, Quorum takes 
            the 1 and, behind the scenes, converts it into an Integer object, 
            not an integer primitive. This takes up more space in memory, 
            technically, but this issue generally only matters if the number 
            of integers we are storing is large.  The same process is used 
            for the integers 2 and 3. When the item is later removed from the 
            list using the RemoveFromFront action, the primitive is converted 
            back from an object into a primitive.")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about calling actions on primitive types and auto-boxing using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Auto-boxing"
    end

    action GetImageLocation returns text
        return "/media/basics/autoboxing.png"
    end

    action GetName returns text
        return "auto-boxing"
    end

    action GetShortDescription returns text
        return "how to automatically convert between primitives and objects"
    end

    action GetLocation returns text
        return "tutorials/language/autoboxing.html"
    end
end
