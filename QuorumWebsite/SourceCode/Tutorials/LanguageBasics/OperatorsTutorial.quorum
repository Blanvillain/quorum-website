use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class OperatorsTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Operators - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)
        //page banner --- change this to either a role
        //if this is a heading
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Operators", 1)
        headDiv:AddText("How to use +, -, *, /, and other operators with various types.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("What are Operators?", 2)
        bodyDiv:AddParagraph("In computer science, we often want to ask the "+
            "computer to do certain mathematical operations. For example, we may"+
            " want the computer to compare a set of numbers to see if they are "+
            "equal or we may want to add, subtract, multiply, or divide numbers. "+
            "In this section, we discuss this concept, operators, including "+
            "which how they work in the Quorum programming language.")
        
        //the section on integers
        bodyDiv:AddHeading("integer and number types", 2)
        bodyDiv:AddParagraph("Integers are those numbers, positive or negative, without decimal points, while numbers are any numbers, including those with decimal points. Both integers and numbers have the same operators defined.")

        //PLUS
        bodyDiv:AddHeading("Plus", 3)
        bodyDiv:AddParagraph("The plus operator adds together numbers and concatenates, or puts together text. The following code would give the variable a the value of 10 and the variable b the value of " + dq + "firefox." + dq + ":")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer a = 5 + 5" + cr + "text b = " + dq + "fire" + dq + " + " + dq + "fox" + dq + cr + "output a" + cr + "output b"))
        AddSideBySideIDE(bodyDiv, "plusIDE", "Activity: Try Plus")


        //MINUS
        bodyDiv:AddHeading("Minus", 3)
        bodyDiv:AddParagraph("The minus operator subtracts numbers. The following code would give the variable a the value of 0:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer a = 5 - 5" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "minusIDE", "Activity: Try Minus")

        //TIMES
        bodyDiv:AddHeading("Times", 3)
        bodyDiv:AddParagraph("The plus (star) operator multiples together numbers. The following code would give the variable a the value of 25:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer a = 5 * 5" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "timesIDE", "Activity: Try Times")

        //DIVIDE
        bodyDiv:AddHeading("Divide", 3)
        bodyDiv:AddParagraph("The divide (forward slash) operator divides numbers. The following code would give the variable a the value of 1:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer a = 5 / 5" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "divideIDE", "Activity: Try Divide")

        //MOD
        bodyDiv:AddHeading("Modulus", 3)
        bodyDiv:AddParagraph("The modulus (mod) operator returns the remainder in an integer division. The following code would give the variable a the value of 0:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer a = 5 mod 5" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "modIDE", "Activity: Try Modulus")

        //LESS
        bodyDiv:AddHeading("Less than", 3)
        bodyDiv:AddParagraph("The less than operator tests to see if the number to the left of the symbol is smaller than the number on the right. The following code would give the variable a the value of true:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = 5 < 6" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "lessIDE", "Activity: Try Less Than")

        //LESS THAN OR EQUAL
        bodyDiv:AddHeading("Less than or equal to", 3)
        bodyDiv:AddParagraph("The  less than operator tests to see if the number to the left of the symbol is smaller than or equal to the number on the right. The following code would give the variable a the value of true:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = 5 <= 6" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "lessEqualsIDE", "Activity: Try Less Than or Equals")

        //GREATER
        bodyDiv:AddHeading("Greater than", 3)
        bodyDiv:AddParagraph("The greater than operator tests to see if the number to the left of the symbol is bigger than the number on the right. The following code would give the variable a the value of false:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = 5 > 6" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "greaterIDE", "Activity: Try Greater Than")

        //GREATER THAN OR EQUAL
        bodyDiv:AddHeading("Greater than or equal to", 3)
        bodyDiv:AddParagraph("The the greater than or equal to operator tests to see if the number to the left of the symbol is bigger or equal to the number on the right. The following code would give the variable a the value of false:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = 5 >= 6" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "greaterEqualsIDE", "Activity: Try Greater Than or Equals")

        //the section on integers
        bodyDiv:AddHeading("boolean types", 2)
        bodyDiv:AddParagraph("Boolean types are those that have only two "+
            "values: true and false. Because they only allow two possible "+
            "values, only equals and not equals can be used. ")

        //EQUALS
        bodyDiv:AddHeading("Equals", 3)
        bodyDiv:AddParagraph("The equals sign determines whether two values are the same "+
            "The following code would give the variable a the value of true:"
        )
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = true = true" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "booleanEqualsIDE", "Activity: Try Equals")

        //NOT EQUALS
        bodyDiv:AddHeading("Not Equals", 3)
        bodyDiv:AddParagraph("The not equals (not=) sign determines whether two values are not the same. "+
            "The following code would give the variable a the value of false:"
        )
        bodyDiv:Add(preformatter:GeneratePreformattedCode("boolean a = true not= true" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "booleanNotEqualsIDE", "Activity: Try Not Equals")

        //AND
        bodyDiv:AddHeading("And", 3)
        bodyDiv:AddParagraph("The 'and' keyword combines boolean expressions and is true if both the left and right hand side is true. Otherwise, it gives false. "+
            "The following code would give us the value of true for a and false for b:"
        )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
            "boolean a = true and true"
             + cr + "output a"
             + cr + "boolean b = true and false"
             + cr + "output b"))
        AddSideBySideIDE(bodyDiv, "booleanAndIDE", "Activity: Try using and")

        //AND
        bodyDiv:AddHeading("Or", 3)
        bodyDiv:AddParagraph("The 'or' keyword combines boolean expressions and is true if both the left or right hand side is true. If both are false, it gives false. "+
            "The following code would give us the value of true for a and false for b:"
        )
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
            "boolean a = false or true"
             + cr + "output a"
             + cr + "boolean b = false or false"
             + cr + "output b"))
        AddSideBySideIDE(bodyDiv, "booleanOrIDE", "Activity: Try using or")

        //the section on integers
        bodyDiv:AddHeading("text types", 2)
        bodyDiv:AddParagraph("The text type allows you to type a list of 
characters that the computer can process. Strings have only one operation 
that is allowed on them, the plus operator, which adds two strings together. 
This is called concatenation. The following code would give the variable 
'combined' the value of "+dq+"Hello, World!."+dq)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(
        "text a = "+dq+"Hello, "+dq+cr+
        "text b = "+dq+" world!"+dq+cr+
        "text combined = a + b"+cr+
        "output combined" +cr
        ))

        //CONCATENATE
        bodyDiv:AddHeading("Concatenate", 3)
        bodyDiv:AddParagraph("Text values can also be combined with other types, like integers, numbers, or booleans using the same operator, plus. For example, we could create an integer and add it to a text field. The following code would give the variable a the value of "+dq+"My favorite number is 5."+dq
        )
        bodyDiv:Add(preformatter:GeneratePreformattedCode("text a = "+dq+" My favorite number is " + dq + " + 5" + cr + "output a"))
        AddSideBySideIDE(bodyDiv, "concatenateIDE", "Activity: Try Concatenate")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action AddSideBySideIDE(Division div, text ideName, text activity)
        CodingOnline ide
        ide:SetDevelopmentLabel(activity)
        ide:SetUniqueIdentifier(ideName)
        ide:Setup()
        //ide:GetIDETitle():AddText(activity)
        div:Add(ide)
    end

    action GetMetaDescription returns text
        return "Learn how to use core operators (e.g., +, -, *, /, mod, =, not=, <, , <=, >, >=) in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Operators"
    end

    action GetImageLocation returns text
        return "/media/basics/operators.png"
    end

    action GetName returns text
        return "operators"
    end

    action GetShortDescription returns text
        return "how to apply mathematical operators to types"
    end

    action GetLocation returns text
        return "tutorials/language/operators.html"
    end
end