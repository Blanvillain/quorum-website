use Libraries.Web.Page.all
use Libraries.System.File
use Libraries.Containers.Array

//TODO where do we put it?
class DevelopmentTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Development Environment Features - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
         Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Development Environment Features", 1)
        headDiv:AddText("How to write notes to remind ourselves of what code does.")
        
        bodyDiv:Add(headDiv)

        Section section_tips
        section_tips:SetClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_tips)
        AddHeading(section_tips, "Quorum Studio Tips", 2)

      
        section_tips:AddParagraph(   "On this page, we discuss software development features available in the offline 
development environment for Quorum, Quorum Studio. This includes shortcuts and ideas for helping us understand 
and work with source code. Using all of these features is optional, although our development team finds 
them helpful and we hope you will too. For example, keep in mind that in computer science, source code 
written in a plain text editor will ultimately do the same thing after being compiled, but we as humans 
use development tools to help us invent things more quickly.")

        //the section on keyboard shortcuts
          Section section_keyboard
        section_keyboard:SetClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_keyboard)
        AddHeading(section_keyboard, "Keyboard Shortcuts", 2)
        section_tips:AddParagraph(   "The Quorum Studio programming environment, by default, has a wide variety of keyboard shortcuts available to the user. "
                            +   "These shortcuts vary by operating system and can be customized by preference. In this section, we discuss some of the more common ones.")


        //the section on navigation shortcuts
         AddHeading(section_keyboard, "Navigation Shortcuts", 3)
  
        section_keyboard:AddParagraph(   "When navigating, there are a variety of shortcuts that can assist in getting from place to place. "
                            +   "The most common of these are as follows." + cr)


        UnorderedList list1
        list1:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list1, "Focus Next Window", " (F6): This window moves the focus to the next window.")
        AddListItemWithBoldAtFront(list1, "Focus Previous Window", " (SHIFT + F6): This window moves the focus to the previous window.")
        AddListItemWithBoldAtFront(list1, "Projects Window", " (CTRL + 1 or COMMAND + 1): This window allows us to navigate source code files and project data.")
        AddListItemWithBoldAtFront(list1, "Editor Window", " (CTRL + 2 or COMMAND + 2): This window is the primary active editor on the system.")          
        AddListItemWithBoldAtFront(list1, "Output Window", " (CTRL + 3 or COMMAND + 3): This window shows the output of any software we are writing.")
        AddListItemWithBoldAtFront(list1, "Errors Window", " (CTRL + 4 or COMMAND + 4): This window shows the output of any software we are writing.")
        AddListItemWithBoldAtFront(list1, "Variables Window", " (CTRL + 5 or COMMAND + 5): This window shows any active variables and what information they contain.")
        AddListItemWithBoldAtFront(list1, "Breakpoints Window", " (CTRL + 6 or COMMAND + 6): This window shows any active variables and what information they contain.")
        AddListItemWithBoldAtFront(list1, "Call Stack Window", " (CTRL + 7 or COMMAND + 7) 1): This window shows us, while debugging, what kind of actions have been called and are currently in memory.")
        AddListItemWithBoldAtFront(list1, "Search Results Window", " (CTRL + 8 or COMMAND + 8): This window shows any results from a search")
       section_keyboard:Add(list1)



        //the section on editor (CTRL + 1 or COMMAND + 1):AddHeading("Editor Shortcuts", 3)
        AddHeading(section_keyboard, "Editor Shortcuts", 3)
        section_keyboard:AddParagraph(   "This section includes a variety of new hotkeys for keyboard navigation in the editor. "
                            +   "There are many more hotkeys other than those listed here, but these can be useful." + cr)


        UnorderedList list2
        list2:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list2, "Go to Line", " (CTRL + G or COMMAND + G): Jumps to a line of code in the editor.")
        AddListItemWithBoldAtFront(list2, "Go to Previous Action", " ( CTRL + ALT + UP or CTRL + COMMAND + UP): Jumps to an action above this one.")
        AddListItemWithBoldAtFront(list2, "Go to Next Action", " (CTRL + ALT + DOWN or CTRL + COMMAND + DOWN): Jumps to an action below this one.")
        AddListItemWithBoldAtFront(list2, "Go to Previous Scope", " (CTRL + ALT + LEFT or CTRL + COMMAND + LEFT): Jumps to the previous scope (e.g., top of an if statement).")
        AddListItemWithBoldAtFront(list2, "Go to Next Scope", " (CTRL + ALT + RIGHT or CTRL + COMMAND + RIGHT): Jumps to the next scope (e.g., bottom of an if statement).")
        AddListItemWithBoldAtFront(list2, "Jump to Declaration", " (CTRL + J or COMMAND + J): In the editor, if the cursor is on a variable, type, or action, "
                        +"we can jump to where that item is declared by pressing this hotkey. For example, if you make class of a particular type, "
                        +"or use something from the standard library, we can jump to that source code and examine it.")
        AddListItemWithBoldAtFront(list2, "Use Editor Hint", " (ALT + ENTER): In the editor, the compiler can sometimes make a suggestion, or automatically fix an error. "
                        +"When this occurs, we can press ALT + ENTER and a box will appear to allow this to occur automatically.")
        section_keyboard:Add(list2)



        //the section on compilation shortcuts
        AddHeading(section_keyboard, "Compilation Shortcuts", 3)

        section_keyboard:AddParagraph(   "This section includes a variety of new hotkeys for keyboard navigation in the editor. There are many more hotkeys other than those listed here, "
                            +   "but these are particularly useful." + cr)


        UnorderedList list3
        list3:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list3, "Run", " (CTRL + R or COMMAND + R): This shortcut will run the active project.")
        AddListItemWithBoldAtFront(list3, "Debug", " (CTRL + D or COMMAND + D): This shortcut will debug the active project.")
        AddListItemWithBoldAtFront(list3, "Build", " (CTRL + B or COMMAND + B): This shortcut will build the active project.")
        AddListItemWithBoldAtFront(list3, "Clean and Build", " (CTRL + SHIFT + B or COMMAND + SHIFT + B): This shortcut will first clean the active project, which means delete any of the previously built files (if any), "
                        +"and then rebuild it from scratch.")
        AddListItemWithBoldAtFront(list3, "End Running Program", "(CTRL + E or COMMAND + E): This shortcut ends a program, whether we are running or debugging it.")
        section_keyboard:Add(list3)


        //the section on debugging shortcuts
        
        AddHeading(section_keyboard, "Debugging Shortcuts", 3)
        section_keyboard:AddParagraph(   "We often want to stop a running program in its tracks, inspect what it is doing, and then make 
changes to our source code to fix bugs or add features. The controls for debugging and their keyboard shortcuts are named 
below and their purpose is described. " + cr)

        UnorderedList list4
        list4:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list4, "Start Debugging", " (CTRL + D or COMMAND + D): This shortcut will debug the active project.")
        AddListItemWithBoldAtFront(list4, "End Running Program", " (CTRL + E or COMMAND + E): Stop the debugger (just like before).")
        AddListItemWithBoldAtFront(list4, "Pause", " (CTRL + F7): If a Quorum program is currently executing, this will temporarily stop it.")
        AddListItemWithBoldAtFront(list4, "Continue", " (CTRL + F8): If we are stopped at a breakpoint, this will resume execution of the program.")
        AddListItemWithBoldAtFront(list4, "Step Over", " (CTRL + F9): Execute the current line and stop at the next one.")
        AddListItemWithBoldAtFront(list4, "Step Into", " (CTRL + F10): Execute the current line and if the current line contains an action, go inside of that action and stop.")
        AddListItemWithBoldAtFront(list4, "Step Out", " (CTRL + F11): If we are inside of an action, finish it and stop again when control goes back to whatever component called that action.")
        AddListItemWithBoldAtFront(list4, "Run to Cursor", " (CTRL + F12): Continue the program until it hits the cursor. If the cursor is never hit, the program either runs forever or terminates.")
        section_keyboard:Add(list4)

        //the section on development environment features
                  Section section_def
        section_def:SetClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_def)
        AddHeading(section_def, "Development Environment Features", 2)
   
        section_def:AddParagraph(   "This section provides a basic list of features that the development environment for Quorum supports and their broad purpose. "
                            +   "Using these features is optional.")

        //the section on code completion
        AddHeading(section_def, "Code Completion", 3)
        section_def:AddParagraph(   "Many modern development environments, including the one for Quorum, has a feature that is often called code completion. "
                            +   "Code completion is a pop-up window that provides information about the source code. "
                            +   "It used to determine the kinds of actions, variables, or other attributes of the object we can interact with.")
        Image image = section_def:AddImage("/media/studio/completion.png", "This is an image of code completion inside of a skybox game application.")
        image:AddAttribute("data-zoom","")

        //the section on coloring, highlighting and folding
        AddHeading(section_def, "Coloring, Highlighting, and Folding", 3)

        section_def:AddParagraph(   "This image shows an example of the coloring and highlighting features in Quorum Studio. 
Notably, there are several kinds of colors. Blue indicates keywords, purple indicates matched keywords (e.g., if and end), 
green indicates field variables, and a orange indicates text. The keyboard shortcuts above allow us to quickly navigate between the items." )
        Image image1 = section_def:AddImage("/media/studio/highlighting.png", "This is an image of source code highlighting")
        image1:AddAttribute("data-zoom","")

        //the section on editor hint
        AddHeading(section_def, "Editor Hints", 3)
        section_def:AddParagraph(   "Sometimes when we program, we make errors. At other times, "
                            +   "the programming language we are using can detect aspects of the program we are writing and provide us with suggestions. "
                            +   "For example, one common error is to " + dq + "forget" + dq + " (or not know) where a library lives on our system. "
                            +   "Consider the class Drawable in the following image. If we were to type Drawable and then a variable name, "
                            +   "Quorum can detect that there is a class called Drawable in the standard library and provide us a suggestion to fix it automatically. "
                            +   "In other words, it is not necessary to memorize all of the locations for classes in the standard library, as Quorum can figure it out on its own. "
                            +   "The hotkey for this is ALT + ENTER.")
        Image image2 = section_def:AddImage("/media/studio/hints.png", "This is an image of the system showing a popup menu with an editor hint at the top. The hint indicates a use statement can be added.")
        image2:AddAttribute("data-zoom","")

         Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about using the built in Quorum Studio features for the the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Development"
    end

    action GetImageLocation returns text
        return "/media/development.png"
    end

    action GetName returns text
        return "Development Environment Features"
    end

    action GetShortDescription returns text
        return "how to use the development environment features"
    end

     action GetLocation returns text
      if GetNewLocation() not= ""
        return GetNewLocation()
      end
      return "tutorials/language/development.html"
    end

    action GetSectionName returns text
        if GetNewSectionName() not= ""
          return GetNewSectionName()
        end
        return "Quorum Basics"
    end
end
