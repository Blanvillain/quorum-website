use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodingGuidelinesTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Coding Coding Conventions - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Quorum Coding Conventions", 1)

        headDiv:AddText("While not required, this page provides standard conventions for writing Quorum code.")
        bodyDiv:Add(headDiv)

        Section section_naming_conventions
        section_naming_conventions:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_naming_conventions, "Conventions for naming classes, actions, and parameters", 2)
        section_naming_conventions:AddParagraph(   "We recommend the following conventions for naming classes, actions, and parameters in Quorum:")

        Label label_do
        label_do:AddText("Do's")
        label_do:SetClassAttribute("font-bold")
        label_do:AddAttribute("for", "do")
        section_naming_conventions:Add(label_do)

        UnorderedList doList
        doList:SetIdentifier("do")
        doList:AddClassAttribute("list-disc list-outside pl-8")
        doList:AddListItem("Do use short and meaningful names")
        doList:AddListItem("Do use names that are common in English")
        doList:AddListItem("Do use names that best represent what it is your class, action, or parameter does or is")
        doList:AddListItem("Do use the most obvious name you can think of for your libraries (a thesaurus is helpful).")
        section_naming_conventions:Add(doList)

        Label label_doNot
        label_doNot:AddText("Do not's")
        label_doNot:SetClassAttribute("font-bold")
        label_doNot:AddAttribute("for", "doNot")
        section_naming_conventions:Add(label_doNot)

        UnorderedList doNotList
        doNotList:SetIdentifier("doNot")
        doNotList:AddClassAttribute("list-disc list-outside pl-8")
        doNotList:AddListItem("Do not use acronyms (e.g., awk, sed, ascii, io)")
        doNotList:AddListItem("Do not use shortened names (e.g. use AbsoluteValue instead of Abs, or CharacterToInteger instead of atoi)")
        doNotList:AddListItem("Do not use single letters for parameter names (e.g., use index instead of i)")
        doNotList:AddListItem("Do not use computer science or technical jargon (e.g., virtual void abs() = 0;, BTree, or LinkedList)")
        doNotList:AddListItem("Do not make names excessively verbose (e.g., ThisActionIsReallyAwesomeButHardToType())")
        doNotList:AddListItem("Do not give your libraries arbitrary names (e.g., call your library MailServer instead of BobsGem)")
        section_naming_conventions:Add(doNotList)

        //the section on naming and layout conventions
        Section section_naming_and_layout_conventions
        section_naming_and_layout_conventions:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_naming_and_layout_conventions, "Naming and Layout Conventions", 2)
        section_naming_and_layout_conventions:AddParagraph(   "In Quorum, there are a few conventions for class, action and variable naming that we recommend following in your code.")

        //the section on class names
        AddHeading(section_naming_and_layout_conventions, "Class Names", 3)
        section_naming_and_layout_conventions:AddParagraph(   "Class names in Quorum should be in the pascal case format, e.g., PascalCase, with the P and C capitalized.")

        //the section on actions names
        AddHeading(section_naming_and_layout_conventions, "Action Names", 3)
        section_naming_and_layout_conventions:AddParagraph(   "Action names in Quorum should also be in the pascal case format, e.g., PascalCase, with the P and C capitalized. "
                            +   "In addition, actions that do not have any parameters do not require parentheses. By convention, leave out any syntax that is not required.")

        //the section on variables names
        AddHeading(section_naming_and_layout_conventions, "Variable Names", 3)
        section_naming_and_layout_conventions:AddParagraph(   "Variable names in Quorum should follow the camel case format, e.g., camelCase, with the first c lowercase and the second C capitalized.")

        //the section on indentation
        AddHeading(section_naming_and_layout_conventions, "Indentation", 3)
        section_naming_and_layout_conventions:AddParagraph(   "The Quorum compiler does not pay attention to whitespace in code. However, we ask that you use consistent indentation." + cr + cr
                            +   "Consistent indentation:")
        section_naming_and_layout_conventions:Add(preformatter:GeneratePreformattedCode(  "class Main" + cr
                                                        +   "    action Main" + cr
                                                        +   "        output " + dq + "hello world." + dq + cr
                                                        +   "    end" + cr
                                                        +   "end"))
        section_naming_and_layout_conventions:AddParagraph(   "Inconsistent indentation:")
        section_naming_and_layout_conventions:Add(preformatter:GeneratePreformattedCode(  "class Main" + cr
                                                        +   "action Main" + cr
                                                        +   "output " + dq + "hello world." + dq + cr
                                                        +   "    end" + cr
                                                        +   "end"))

 

        CodeForIDE code_indentation
        code_indentation:AddFileText("Main.quorum", "//Try the above code blocks")
        IDE ide_indentation = AddIDE()
        ide_indentation:SetCodeForIDE(code_indentation:GetJsonArray())
        ide_indentation:SetIdeTitle("Activity: Try indentation")
        section_naming_and_layout_conventions:Add(ide_indentation)


        //the section on comments and documentation
        Section section_comments_and_documentation
        section_comments_and_documentation:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_comments_and_documentation, "Comments and Documentation", 2)
        section_comments_and_documentation:AddParagraph(   "In Quorum, there are two types of comments: single line and multi-line comments. "
                            +   "For single line comments, we recommend a space after the beginning two forward slashes, like so:" + cr + cr
                            +   "Good single-line comment:")

        CodeBlock cb1
        Span s1
        s1:AddText(     "// Output a message to the user." + cr)
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText(    "output " + dq + "hello world." + dq )
        section_comments_and_documentation:Add(preformatter:GeneratePreformattedCode(cb1))

        section_comments_and_documentation:AddParagraph(   "Multi-line comments should be formatted such that the beginning forward star and ending star forward are on their own lines, like so:")

        CodeBlock cb2
        Span s2
        s2:AddText(     "/*" + cr
                    +   "the main entry point to the program" + cr
                    +   "*/" + cr)
        s2:SetClassAttribute("comment")
        cb2:Add(s2)
        cb2:AddText(    "action Main" + cr
                    +   "end" )
        section_comments_and_documentation:Add(preformatter:GeneratePreformattedCode(cb2))


        section_comments_and_documentation:AddParagraph(   "However, if on only one line, as a single line comment is sufficient:")

        CodeBlock cb3
        Span s3
        s3:AddText(     "/* May as well use a single line comment */" + cr)
        s3:SetClassAttribute("comment")
        cb3:Add(s3)
        cb3:AddText(    "action Main" + cr
                    +   "end" )
        section_comments_and_documentation:Add(preformatter:GeneratePreformattedCode(cb3))

        CodeForIDE code_comments_and_documentation
        code_comments_and_documentation:AddFileText("Main.quorum", "//Try the above code blocks")
        IDE ide_comments_and_documentation = AddIDE()
        ide_comments_and_documentation:SetCodeForIDE(code_comments_and_documentation:GetJsonArray())
        ide_comments_and_documentation:SetIdeTitle("Activity: Try comments and documentation")
        section_comments_and_documentation:Add(ide_comments_and_documentation)


        //the section on documentation
        AddHeading(section_comments_and_documentation, "Documentation", 3)
        section_comments_and_documentation:AddParagraph(   "Please fully document each action and class in Quorum standard library files. " 
                            +   "In each case, please be sure to include at least one example, in all case, of code to execute that action or use that class. "
                            +   "Here is an example comment from the array class:")

        CodeBlock cb4
        Span s4
        s4:AddText(     "/*" + cr
                    +   "The Array class is a data structure that stores items in contiguous memory. An" + cr
                    +   "item is typically stored and accessed through an index or location. This location" + cr
                    +   "always starts at 0, this means the first item in the array is at location 0, the" + cr
                    +   "second is at location 1, etc. The default maximum size is set to 10, but can be" + cr
                    +   "changed by using the SetSize(value) method or the array will automatically" + cr
                    +   "make itself large when the space is needed (note: it is possible to turn the " + cr
                    +   "resizing off with the SetAutoResize(false) method)." + cr + cr
                    +   "Attribute: Example" + cr + cr
                    +   "use Libraries.Containers.Array" + cr
                    +   "class Main" + cr
                    +   "   action Main" + cr
                    +   "      //make the array" + cr
                    +   "      Array<integer> myArray" + cr
                    +   "      //add a value" + cr
                    +   "      myArray:Add(12)" + cr
                    +   "      //get it back" + cr
                    +   "      integer value = myArray:Get(0)" + cr
                    +   "   end" + cr
                    +   "end" + cr
                    +   "*/" )
        s4:SetClassAttribute("comment")
        cb4:Add(s4)
        section_comments_and_documentation:Add(preformatter:GeneratePreformattedCode(cb4))

        bodyDiv:Add(section_naming_conventions)
        bodyDiv:Add(section_naming_and_layout_conventions)
        bodyDiv:Add(section_comments_and_documentation)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about common conventions for writing code in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Coding Guidelines"
    end

    action GetImageLocation returns text
        return "/media/CodingGuidelines.png"
    end

    action GetName returns text
        return "Coding Guidelines"
    end

    action GetShortDescription returns text
        return "some basic conventions that we can follow while coding."
    end

    action GetLocation returns text
        return "tutorials/language/codingGuidelines.html"
    end

    action GetLinkName returns text
        return "Coding Guidelines"
    end

    action GetSectionName returns text
        return "Introduction to Quorum"
    end
end
