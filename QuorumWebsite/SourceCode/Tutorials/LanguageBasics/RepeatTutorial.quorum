use Libraries.Web.Page.all
use Libraries.Containers.Array

class RepeatTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Repeating - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Repeat", 1)

        headDiv:AddText("How to do things over and over and over and ...")
        bodyDiv:Add(headDiv)
        Section section_repeat_times
        AddHeading(section_repeat_times, "repeat &#60expression&#62 times", 2)
        section_repeat_times:AddParagraph(   "The Quorum programming language uses the word repeat to describe the idea of doing something 0 or more times. "
                            +   "This process, sometimes called looping, is an important 
                            concept to learn and understand in programming.
            For example, here is a program that outputs the word Quorum 10 times:")
        section_repeat_times:Add(preformatter:GeneratePreformattedCode("repeat 10 times" + cr
                                                        + "     output " + dq + "Quorum" + dq + cr 
                                                        + "end"))
        section_repeat_times:AddParagraph(   "We can only repeat something a whole number of times, using integers. While this is the case, 
            we can express the integer in both simple and complex ways. For example, we might try the following:")

        CodeBlock cb1
        Span s1
        Span s2
        Span s3
        Span s4
        s1:AddText("//create an integer named a with the value of 1" + cr )
        s1:SetClassAttribute("comment")
        s2:AddText("//create an integer named b with the value of 4" + cr )
        s2:SetClassAttribute("comment")
        s3:AddText("//repeat any number of times we wish, in this case by using an expression" + cr )
        s3:SetClassAttribute("comment")
        s4:AddText("    //output the two values" + cr )
        s4:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText("integer a = 1" + cr )
        cb1:Add(s2)
        cb1:AddText("integer b = 4" + cr )
        cb1:Add(s3)
        cb1:AddText("repeat (b / a + (b - 5)) times" + cr )
        cb1:Add(s4)
        cb1:AddText("   output a" + cr
                +   "   output b" + cr
                +   "end"  )
        section_repeat_times:Add(preformatter:GeneratePreformattedCode(cb1))

        CodeForIDE code_repeat_times
        code_repeat_times:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide_repeat_times = AddIDE()
        ide_repeat_times:HideDisplay()
        ide_repeat_times:SetLightTheme()
        ide_repeat_times:SetCodeForIDE(code_repeat_times:GetJsonArray())
        ide_repeat_times:SetIdeTitle("Activity: Try repeat times")
        section_repeat_times:Add(ide_repeat_times)

        //the section on repeat while expression
        Section section_repeat_while
        section_repeat_while:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_repeat_while, "repeat while &#60expression&#62", 2)

        section_repeat_while:AddParagraph(   "There are three ways we can repeat a construct: repeat times, repeat while, and repeat until. 
            In the next version of repeat, repeat while, we are asking Quorum to 
            continue executing as long as an expression is true, in this case while variable a is less than 15. 
            Then, on each iteration of our repeat, we add one to a, which means it will eventually stop." 
                            +   "The following example shows this idea:")


        CodeBlock cb2
        Span s5
        Span s6
        Span s7
        Span s8
        s5:AddText("//create an integer named a and set it to 0" + cr )
        s5:SetClassAttribute("comment")
        s6:AddText("//keep looping, but only if a is less than 15" + cr )
        s6:SetClassAttribute("comment")
        s7:AddText("    //add one to a. If we did not have this line, we would loop forever" + cr )
        s7:SetClassAttribute("comment")
        s8:AddText("    //send the value of a to the console" + cr )
        s8:SetClassAttribute("comment")
        cb2:Add(s5)
        cb2:AddText("integer a = 0" + cr )
        cb2:Add(s6)
        cb2:AddText("repeat while a < 15" + cr )
        cb2:Add(s7)
        cb2:AddText("   a = a + 1" + cr )
        cb2:Add(s8)
        cb2:AddText("   output a" + cr
                +   "end"  )
        section_repeat_while:Add(preformatter:GeneratePreformattedCode(cb2))

        section_repeat_while:AddParagraph("In this example, a will eventually become larger than 15 and the loop will stop executing.")


        CodeForIDE code_repeat_while
        code_repeat_while:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide_repeat_while = AddIDE()
        ide_repeat_while:HideDisplay()
        ide_repeat_while:SetLightTheme()
        ide_repeat_while:SetCodeForIDE(code_repeat_while:GetJsonArray())
        ide_repeat_while:SetIdeTitle("Activity: Try repeat while")
        section_repeat_while:Add(ide_repeat_while)

        //the section on repeat until
        Section section_repeat_until
        section_repeat_until:AddClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_repeat_until, "repeat until &#60expression&#62", 2)

        section_repeat_until:AddParagraph(   "In this final version of the repeat construct, 
        we will learn about repeat until. Repeat until is just like repeat while, 
        except that the expression must evaluate to false in order to keep executing. 
        As such, using a similar example, with repeat until, the loop will have the same
        behavior as before, except that the condition is flipped.
        ")

        CodeBlock cb3
        Span s9
        cb3:AddText("integer a = 0" + cr )
        s9:AddText("//This will execute so long as a is not greater than 15" + cr )
        s9:SetClassAttribute("comment")
        cb3:Add(s9)
        cb3:AddText("repeat until a >= 15" + cr
            +   "   a = a + 1" + cr
            +   "   output a" + cr 
            +   "end" )
        section_repeat_until:Add(preformatter:GeneratePreformattedCode(cb3))

        section_repeat_until:AddParagraph("These various styles of loops can be used in our 
            programs freely.")
  

        CodeForIDE code_repeat_until
        code_repeat_until:AddFileText("Main.quorum", "//Try the above code blocks.")
        IDE ide_repeat_until = AddIDE()
        ide_repeat_until:HideDisplay()
        ide_repeat_until:SetLightTheme()
        ide_repeat_until:SetCodeForIDE(code_repeat_until:GetJsonArray())
        ide_repeat_until:SetIdeTitle("Activity: Try repeat until")
        section_repeat_until:Add(ide_repeat_until)


        bodyDiv:Add(section_repeat_times)
        bodyDiv:Add(section_repeat_while)
        bodyDiv:Add(section_repeat_until)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to tell the computer to repeat itself using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Repeat"
    end

    action GetImageLocation returns text
        return "/media/basics/repeat.png"
    end

    action GetName returns text
        return "repetition"
    end

    action GetShortDescription returns text
        return "how to do operations over and over again"
    end

    action GetLocation returns text
        return "tutorials/language/repeat.html"
    end

    action GetLinkName returns text
        return "Repeat"
    end

    action GetSectionName returns text
        return "Quorum Basics"
    end
end
