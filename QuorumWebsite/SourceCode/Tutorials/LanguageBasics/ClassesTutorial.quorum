use Libraries.Web.Page.all
use Libraries.Containers.Array

class ClassesTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Creating custom types - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Tutorial: Classes", 1)

        headDiv:AddText("How to create our own custom types.")
        bodyDiv:Add(headDiv)

        Section section_classes
        section_classes:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_classes, "Classes in Quorum", 2)
        section_classes:AddParagraph("When programming a computer, it is often convenient
            to define custom structures that contain data and 
            can run actions on that data. For example, while we hypothetically could 
            create a computer program that represents a dog as a set of 1s and 0s, 
            it might be mentally difficult for us to remember the code. Further, if 
            our dog had certain operations we wanted it to do (e.g., walk, bark), 
            organizing and controlling the structure might also be difficult. In Quorum, 
            we use what are called classes to represent custom structures. Here is 
            a first example:")
        section_classes:Add(preformatter:GeneratePreformattedCode(  
                "class MyClass" + cr
            +   "     action Main" + cr
            +   "          output " + dq + "Hello, World!" + dq + cr
            +   "     end" + cr
            +   "end"))

        CodeForIDE code_classes1
        code_classes1:AddFileText("Main.quorum", "//Try running a class that outputs a message")
        IDE ide_classes1 = AddIDE()
        ide_classes1:HideDisplay()
        ide_classes1:SetCodeForIDE(code_classes1:GetJsonArray())
        ide_classes1:SetIdeTitle("Activity: Try Classes")
        section_classes:Add(ide_classes1)

        section_classes:AddParagraph("This class has several key components. First, the word 
            class itself is telling Quorum that we want to create our own custom 
            structure and that we want to give it a name. In this case, that name 
            is MyClass. Second, notice that just like in the previous tutorial on 
            actions, we need an action named Main, which starts our program. Third, 
            we have an output message with words surrounded in double quotes, 
            which tells Quorum to output information to the screen. Finally, while 
            there is no way to know from the code itself, only one class is allowed
            per file.")

        section_classes:AddParagraph("Now, one obvious question that may arrise is this: 
            if all this program does is outputs something to the screen, do we even
            need a class?")

        section_classes:Add(preformatter:GeneratePreformattedCode(
            "output " + dq + "Hello, World!" + dq + cr
            ))

        section_classes:AddParagraph(   "For a trivial program, the answer is no, not really, 
            but Quorum is sneaky. 
            When we do not specify a class, Quorum actually builds one for us anyway. 
            So, in the above program, Quorum is making us a class behind the scenes. Basically, Quorum
            wraps the above program with a class, which it runs in a Main action 
            by default, which the programmer does not need to specify. 
            In such a case, the name Quorum chooses for the class is
            the file name, minus the
            extension. So, the above code in a file named MyClass.quorum would 
            have the name MyClass. So why then bother? The reason is because 
            classes allow us to, amongst other things, organize and structure our code for reuse.
            One way we do this is with member variables.")

        //the section on instances of classes
        Section section_member_variables
        section_member_variables:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(section_member_variables, "Member Variables", 2)
        section_member_variables:AddParagraph(   "Just as actions can store local variables, so can classes. 
            This concept is useful because it allows multiple actions to share 
            a particular variable. Here is a first example where two actions share the
            variable named addToMe")

        section_member_variables:Add(preformatter:GeneratePreformattedCode(  
                "class Main" + cr
            +   "   integer addToMe = 0" + cr
            +   "   action Main" + cr
            +   "       AddToTheVariable()" + cr
            +   "       output addToMe" + cr
            +   "   end" + cr
            +   "   action AddToTheVariable" + cr
            +   "       addToMe = addToMe + 1" + cr
            +   "   end" + cr
            +   "end" + cr ))

        CodeForIDE code_classes2
        code_classes2:AddFileText("Main.quorum", "//Try using a member variable in two actions")
        IDE ide_classes2 = AddIDE()
        ide_classes2:HideDisplay()
        ide_classes2:SetCodeForIDE(code_classes2:GetJsonArray())
        ide_classes2:SetIdeTitle("Activity: Try a Member Variable")
        section_member_variables:Add(ide_classes2)

        section_member_variables:AddParagraph("Notice that this class has two actions in it. The first, 
            Main, starts our program and then calls the action AddToTheVariable, which 
            jumps the program to that point. Next, the program then adds 1 to the 
            variable addToMe, finishing the AddToTheVariable action and jumping back 
            to Main. After that, it outputs the member variable and exits.")
        section_member_variables:AddParagraph("The reason this works is because the variable addToMe
            is in a different scope, effectively where in a computer's memory something 
            lives, compared to a variable writen inside of an action. Essentially, both 
            actions in the class can see all member variables and then use them.
            When one action modifies the member variable, all other actions are referencing 
            the same place in memory, and as such, the change takes place everywhere.")
        section_member_variables:AddParagraph("As one final point on member variables, note that some 
            programming languages give different names to the same or similar concept. 
            Specifically, member variables can be called fields, instance variables, 
            or other similar names. While there are differences between the languages, 
            the concepts are similar.")

        //the section on instances of classes
        Section section_public_private
        section_public_private:SetClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_public_private, "Public and Private", 2)
        section_public_private:AddParagraph("Both member variables and actions can have a special 
            tag added to them to provide them with an access property. Essentially, 
            it is possible to prevent accidental access to certain actions or variables
            that live in a class by using the words public and private. Here is an 
            example:")
        section_public_private:Add(preformatter:GeneratePreformattedCode(  
                "class Main" + cr
            +   "   public integer addToMe = 0" + cr
            +   "   action Main" + cr
            +   "       AddToTheVariable()" + cr
            +   "       output addToMe" + cr
            +   "   end" + cr
            +   "   private action AddToTheVariable" + cr
            +   "       addToMe = addToMe + 1" + cr
            +   "   end" + cr
            +   "end" + cr ))

        CodeForIDE code_classes3
        code_classes3:AddFileText("Main.quorum", "//Notice that addToMe can be used by both actions")
        IDE ide_classes3 = AddIDE()
        ide_classes3:HideDisplay()
        ide_classes3:SetCodeForIDE(code_classes3:GetJsonArray())
        ide_classes3:SetIdeTitle("Activity: Try a Member Variable")
        section_public_private:Add(ide_classes3)

        section_public_private:AddParagraph("Notice that we have now specified the integer addToMe as 
            public. While we cannot run an example in the online version of Quorum, as it 
            currently only supports executing one class, this keyword allows other 
            classes to access that variable, whereas private only allows the current 
            class to provide access. Second, public and private have the opposite meaning, 
            allowing (public) or preventing (private) access. So by making an action private, 
            other classes cannot access it. By default, member variables are private 
            and actions are public. The words public and private can only be used 
            by member variables and actions, but not local variables inside of an 
            action.")

        //the section on instances of classes
        Section section_instantiation
        AddHeading(section_instantiation, "Instantiation", 2)
        section_instantiation:AddParagraph(   "Classes are a useful concept from the perspective of
            being able to reuse functionality that others have written. By themselves, 
            classes are like a plan for a house. A plan for a house shows how to build it, 
            but is not a house itself. As an analogy, the same is true for classes.")
         section_instantiation:AddParagraph(   "Let's take a tangible example of functionality that 
            we may not know how to write ourselves, a Random Number Generator. Now, generating 
            numbers that appear to be random is a difficult problem, for many reasons. Scientists 
            need random number generators for different purposes. For example, 
            in cryptography, code solving, we need 
            numbers to be generated that are extremely hard to predict. On the 
            other hand, in video games and many other applications, we might 
            prioritize generating random looking numbers quickly over other properties. 
            In Quorum, we 
            use a standard algorithm in our Random number generator called the 
            Mersenne Twister, which is acceptable for many, but not all 
            applications and is commonly used in programming. 
            We can read more about that algorithm, and its uses, here:")

        
        section_instantiation:AddLink("The Wikipedia page for Mersenne Twister", "https://en.wikipedia.org/wiki/Mersenne_Twister")

        section_instantiation:AddParagraph("Implementing a Mersenne Twister on our own 
            can be tricky to get right, but since a class is built into Quorum 
            already, we do not have to. Instead of learning and testing our own, 
            we can use the algorithm built into Quorum. Here is an example of how:")

        section_instantiation:Add(preformatter:GeneratePreformattedCode(  
                "use Libraries.Compute.Random" + cr
            +   "Random generator" + cr
            +   "integer value = generator:RandomIntegerBetween(0, 10)" + cr
            +   "output value" + cr))


        CodeForIDE code_classes4
        code_classes4:AddFileText("Main.quorum", "//Note that we can abstract away random number generation")
        IDE ide_classes4 = AddIDE()
        ide_classes4:HideDisplay()
        ide_classes4:SetCodeForIDE(code_classes4:GetJsonArray())
        ide_classes4:SetIdeTitle("Activity: Try Using a Class")
        section_instantiation:Add(ide_classes4)

        section_instantiation:AddParagraph("This example instantiates a class named Random. 
            When this happens, a variable is created in memory, named generator, 
            and we can then use it. Behind the scenes, when we call 
            RandomIntegerBetween(0,10), while we as programmers only know the 
            algorithm is computing a random number between 0 and 10, Quorum is running
            a Mersenne Twister to do that job. In other words, writing and 
            instantiating classes has potentially saved us time and effort. If someone
            writes code to help us be more productive (e.g., games libraries, physics libraries, statistics libraries)
            we can use that work and be more productive ourselves.")

        //the section on instances of classes
        Section section_me
        AddHeading(section_me, "Accessing Member Variables with 'me'", 2)
        section_me:AddParagraph("As one final point, there is a special keyword that allows 
            us to distinguish between member and local variables with the same name, me.
            Suppose we had a class with a member and local variable named value, like so:")

        section_me:Add(preformatter:GeneratePreformattedCode(  
                "class Main" + cr
            +   "     integer value = 0" + cr
            +   "     action Main" + cr
            +   "          integer value = 5" + cr
            +   "          output value" + cr
            +   "     end" + cr
            +   "end" + cr))

        CodeForIDE code_classes5
        code_classes5:AddFileText("Main.quorum", "//Try scoping variables")
        IDE ide_classes5 = AddIDE()
        ide_classes5:HideDisplay()
        ide_classes5:SetCodeForIDE(code_classes5:GetJsonArray())
        ide_classes5:SetIdeTitle("Activity: Try Scoping Variables")
        section_me:Add(ide_classes5)

        section_me:AddParagraph("We might assume that this code outputs 0, because 
            we are outputting value. However, because value is used locally, it 
            overrides (or masks) the member variable and outputs 5. We can get around this 
            by using the me keyword. Thus, the following code will output 0
            because we are explicitly requesting the member, not the 
            local, variable:")

        section_me:Add(preformatter:GeneratePreformattedCode(  
                "class Main" + cr
            +   "     integer value = 0" + cr
            +   "     action Main" + cr
            +   "          integer value = 5" + cr
            +   "          output me:value" + cr
            +   "     end" + cr
            +   "end" + cr))


        CodeForIDE code_classes6
        code_classes6:AddFileText("Main.quorum", "//Try using the me keyword to access member variables")
        IDE ide_classes6 = AddIDE()
        ide_classes6:HideDisplay()
        ide_classes6:SetCodeForIDE(code_classes6:GetJsonArray())
        ide_classes6:SetIdeTitle("Activity: Try me")
        section_me:Add(ide_classes6)

        bodyDiv:Add(section_classes)
        bodyDiv:Add(section_member_variables)
        bodyDiv:Add(section_public_private)
        bodyDiv:Add(section_instantiation)
        bodyDiv:Add(section_me)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about abstraction and how to code your own custom types, called classes, using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Classes"
    end

    action GetImageLocation returns text
        return "/media/basics/classes.png"
    end

    action GetName returns text
        return "classes"
    end

    action GetShortDescription returns text
        return "how to organize our code using abstraction"
    end

    action GetLocation returns text
        return "tutorials/language/classes.html"
    end

    action GetLinkName returns text
        return "Classes"
    end

    action GetSectionName returns text
        return "Introduction to Quorum"
    end
end
