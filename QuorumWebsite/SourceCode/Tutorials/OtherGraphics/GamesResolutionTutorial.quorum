use Libraries.Web.Page.all
use Libraries.Containers.Array

class GamesResolutionTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Screen Resolutions - Quorum Programming Language")
        AddDefaultHeaders()

        
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
              Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Screen Resolutions and Fullscreen in Quorum", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Screen Resolutions and Fullscreen in Quorum")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to change the screen resolution of games in Quorum")
        bodyDiv:Add(headDiv)

        
        Section section_intro
       section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "An Introduction to Screen Resolutions in Quorum", 2)


        section_intro:AddParagraph("This tutorial discusses changing the size of the game window. "
            + "This includes how to make a game fullscreen and the way screen resolution on the screen relates to cameras.")


          Section section_size
       section_size:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_size)
        AddHeading(section_size, "Setting the Size of the Game Window", 2)


        section_size:AddParagraph("When creating a Quorum game for use on Windows or Mac, by default a game will launch in a window "
            + "that is 800 pixels wide and 600 pixels tall. To change the size of the window, we use the SetScreenSize action "
            + "from the Game class. In the example below, we use SetScreenSize before calling StartGame. This will ensure that "
            + "when the game launches and that the window that appears is the correct size.")

        CodeBlock cb1
        cb1:AddText("use Libraries.Game.Game" + cr + cr)
        cb1:AddText("class Main is Game" + cr)
        cb1:AddText("    action Main" + cr
                +   "        SetScreenSize(1000, 8000)" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr
                +   "end")
        section_size:Add(preformatter:GeneratePreformattedCode(cb1))

        section_size:AddParagraph("We can also change the size of the screen at any time after launching a game. The example below "
            + "shows how to change the size of the game after StartGame is called. As a reminder, CreateGame is called after "
            + "the window has been opened and is shown on the screen. SetScreenSize can be used to set the game window to any "
            + "given positive width and height.")

        CodeBlock cb2
        cb2:AddText("use Libraries.Game.Game" + cr + cr)
        cb2:AddText("class Main is Game" + cr)
        cb2:AddText("    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr
                +   "        SetScreenSize(1000, 8000)" + cr
                +   "    end" + cr
                +   "end")
        section_size:Add(preformatter:GeneratePreformattedCode(cb2))

          Section section_fullscreen
       section_fullscreen:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_fullscreen)
        AddHeading(section_fullscreen, "Fullscreen Games", 2)
  

        section_fullscreen:AddParagraph("When running an application in fullscreen mode, desktop displays have a limited number of "
            + "supported resolutions (width x height). These resolutions can differ with different kinds of computers and "
            + "platforms, which means there is no universal fullscreen resolution that will work everywhere.")

        section_fullscreen:AddParagraph("To see what resolutions are supported by a particular monitor, there is an action built in to "
            + "Quorum called GetAvailableResolutions. This will give us an Array of ScreenResolution objects.")

        CodeBlock cb3
        cb3:AddText("use Libraries.Game.Game" + cr)
        cb3:AddText("use Libraries.Game.ScreenResolution" + cr)
        cb3:AddText("use Libraries.Containers.Array" + cr + cr)
        cb3:AddText("class Main is Game" + cr)
        cb3:AddText("    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr)
        cb3:AddText("    action CreateGame" + cr
                +   "        Array&lt;ScreenResolution&gt; array = GetAvailableResolutions()" + cr
                +   "        integer counter = 0" + cr
                +   "        repeat while counter < array:GetSize()" + cr
                +   "            ScreenResolution resolution = array:Get(counter)" + cr
                +   "            output " + dq + "Supported Resolution #" + dq + " + counter" + cr
                +   "            output " + dq + "Dimensions: " + dq + " + resolution:GetWidth() + " + dq + " x " + dq + " resolution:GetHeight()" + cr
                +   "            output " + dq + "Frequency: " + dq + " + resolution:GetFrequency()" + cr
                +   "            output " + dq + "Bits Per Pixel: " + dq + " + resolution:GetBitsPerPixel()" + cr
                +   "            output " + dq + "Supports Fullscreen: " + dq + " + resolution:IsFullscreen()" + cr
                +   "            counter = counter + 1" + cr
                +   "        end" + cr
                +   "    end" + cr)
        cb3:AddText("end")
        section_fullscreen:Add(preformatter:GeneratePreformattedCode(cb3))

        section_fullscreen:AddParagraph("In the above code, we get the available screen resolutions and output some information about "
            + "them. Each ScreenResolution object contains the following information:")
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        list:AddListItem("Width: How many pixels wide the screen resolution is.")
        list:AddListItem("Height: How many pixels tall the screen resolution is.")
        list:AddListItem("Frequency: How many times per second the monitor updates its image when using this resolution.")
        list:AddListItem("Bits Per Pixel: How many bits are used to store information on each pixel. 32 bits is typical.")
        list:AddListItem("Fullscreen Support: If the monitor can display this resolution in fullscreen mode.")
        section_fullscreen:Add(list)
        section_fullscreen:AddParagraph("Once we have found a ScreenResolution we want to use, we can make our game fullscreen by using the SetScreenResolution action.")

        CodeBlock cb4
        Span s1
        Span s2
        cb4:AddText("use Libraries.Game.Game" + cr)
        cb4:AddText("use Libraries.Game.ScreenResolution" + cr)
        cb4:AddText("use Libraries.Containers.Array" + cr + cr)
        cb4:AddText("class Main is Game" + cr + cr)
        cb4:AddText("    number exitTimer = 0" + cr + cr)
        cb4:AddText("    action Main" + cr)
        cb4:AddText("        Array<ScreenResolution> array = GetAvailableResolutions()" + cr)
        s1:AddText( "        // We'll use the first available resolution for this example." + cr)
        s1:SetClassAttribute("comment")
        cb4:Add(s1)
        cb4:AddText("        ScreenResolution resolution = array:Get(0)" + cr
                +   "        SetScreenResolution(resolution)" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr)
        cb4:AddText("    action Update(number seconds)" + cr)
        s2:AddText( "        // Since our game is going fullscreen, there won't be a window with an exit" + cr
                +   "        // button. For this example, we automatically exit the game after 5 seconds." + cr)
        s2:SetClassAttribute("comment")
        cb4:Add(s2)
        cb4:AddText("        exitTimer = exitTimer + seconds" + cr
                +   "        if exitTimer > 5" + cr
                +   "            Exit()" + cr
                +   "        end" + cr
                +   "    end" + cr
                +   "end")
        section_fullscreen:Add(preformatter:GeneratePreformattedCode(cb4))

        section_fullscreen:AddParagraph("In some cases, we might want to look at all the available screen resolutions and choose "
            + "the one which best suits our game. One way we might do that is to get the resolution currently on "
            + "the user's desktop. The GetDesktopResolution action will give us this information. We can also call "
            + "UseDesktopResolution to tell our game to use it as a default.")

        section_fullscreen:AddParagraph("Let’s look at what our last example would look like if we use the desktop resolution:")

        CodeBlock cb5
        Span s3
        cb5:AddText("use Libraries.Game.Game" + cr + cr)
        cb5:AddText("class Main is Game" + cr + cr)
        cb5:AddText("    number exitTimer = 0" + cr + cr)
        cb5:AddText("    action Main" + cr
                +   "        UseDesktopResolution()" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr)
        s3:AddText( "        // Since our game is going fullscreen, there won't be a window with an exit" + cr
                +   "        // button. For this example, we automatically exit the game after 5 seconds." + cr)
        s3:SetClassAttribute("comment")
        cb5:Add(s3)
        cb5:AddText("        exitTimer = exitTimer + seconds" + cr
                +   "        if exitTimer > 5" + cr
                +   "            Exit()" + cr
                +   "        end" + cr
                +   "    end" + cr
                +   "end")
        section_fullscreen:Add(preformatter:GeneratePreformattedCode(cb5))

        section_fullscreen:AddParagraph("Note that in the two prior code samples we included a way for the game to exit. A "
            +   "fullscreen game does not have an exit button like a windowed game does, so it’s important for the "
            +   "programmer to provide a way to shut it down. If we ever create a fullscreen game without a way to "
            +   "exit, we can still close it via keyboard shortcuts (COMMAND + Q on Mac or ALT + F4 on Windows).")

        
        Section section_display
       section_display:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_display)
        AddHeading(section_display, "Screen Displays and Game Cameras", 2)


        section_display:AddParagraph("At any time before or after a game has started running, it’s possible to change the size of "
            +   "the game window or change the fullscreen resolution. However, changing the size of the display may "
            +   "change the appearance of a game, especially in 2D games.")
        
        section_display:AddParagraph("To see how this can happen, let’s look at some sample code.")

        CodeBlock cb6
        cb6:AddText("use Libraries.Game.Game" + cr
                +   "use Libraries.Game.InputMonitor" + cr
                +   "use Libraries.Game.Graphics.Drawable" + cr
                +   "use Libraries.Interface.Events.KeyboardEvent" + cr + cr
                +   "class Main is Game" + cr + cr
                +   "    InputMonitor monitor" + cr
                +   "    KeyboardEvent keys" + cr + cr
                +   "    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr
                +   "        Drawable box1" + cr
                +   "        box1:LoadFilledRectangle(100, 100)" + cr
                +   "        Add(box1)" + cr + cr
                +   "        Drawable box2" + cr
                +   "        box2:LoadFilledRectangle(100, 100)" + cr
                +   "        box2:SetPosition(700, 500)" + cr
                +   "        Add(box2)" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr
                +   "        if monitor:IsKeyPressed(keys:SPACE)" + cr
                +   "            SetScreenSize(1000, 800)" + cr
                +   "        end" + cr
                +   "    end" + cr
                +   "end")
        section_display:Add(preformatter:GeneratePreformattedCode(cb6))

        section_display:AddParagraph("This program starts with the window at the default size of 800 pixels by 600 pixels. "
            + "It contains two black squares, which are 100 pixels tall and wide. The first square is placed in the "
            + "bottom left corner, and the second square is placed in the top right corner. Pressing the spacebar "
            + "will resize the window to 1000 pixels wide and 800 pixels tall.")

        Image image2 = section_display:AddImage("/media/games/ResolutionDefault.png", "This is an image of the default 800 by 600 pixel window "
            + "with a black square in the bottom left corner and another in the top right corner.")
        image2:AddAttribute("data-zoom","")

        section_display:AddParagraph("After pressing the spacebar, the first square is still in the bottom left corner, but "
            + "the second square is no longer touching the top right corner of the screen. The resized screen is "
            + "larger, so now there is an extra 200 pixels above the square and 200 pixels to the right of it.")

        Image image3 = section_display:AddImage("/media/games/ResolutionCameraAdjusted.png", "This is an image of a 1000 by 800 pixel window "
            + "with a black square in the bottom left corner and another that is close to the top right corner, but is "
            + " not touching it.")
        image3:AddAttribute("data-zoom","")

        section_display:AddParagraph("When the screen is resized, the game engine also automatically adjusts the game’s default "
            + "cameras to match the new dimensions. Since our game launched in a 800x600 window, the default cameras are "
            + "set to view an 800x600 region. When we changed the screen size to 1000x800, the default cameras were also "
            + "resized to view a 1000x800 area. The default 2D camera is also moved slightly to keep the bottom left corner "
            + "in the same position on the screen.")

        section_display:AddParagraph("Sometimes, we may want to adjust the screen size without adjusting the cameras. If we had "
            + "done that in our previous example, after pressing the spacebar our screen would be 1000x800 pixels on the "
            + "screen, but the game’s camera would be “zoomed in” on an area that was still only 800x600 game units.")

        section_display:AddParagraph("All actions that adjust the screen size, namely SetScreenSize, SetScreenResolution, and "
            + "UseDesktopResolution, can be given a boolean value as their last parameter. If this value is false, then "
            + "the game area will be resized without adjusting the cameras. Where we set the screen size in our last "
            + "example, let’s replace it with this line of code:")

        CodeBlock cb7
        cb7:AddText("SetScreenSize(1000, 800, false)")
        section_display:Add(preformatter:GeneratePreformattedCode(cb7))

        section_display:AddParagraph("Here’s what our resulting code looks like:")

        CodeBlock cb8
        cb8:AddText("use Libraries.Game.Game" + cr
                +   "use Libraries.Game.InputMonitor" + cr
                +   "use Libraries.Game.Graphics.Drawable" + cr
                +   "use Libraries.Interface.Events.KeyboardEvent" + cr + cr
                +   "class Main is Game" + cr + cr
                +   "    InputMonitor monitor" + cr
                +   "    KeyboardEvent keys" + cr + cr
                +   "    action Main" + cr
                +   "        StartGame()" + cr
                +   "    end" + cr + cr
                +   "    action CreateGame" + cr
                +   "        Drawable box1" + cr
                +   "        box1:LoadFilledRectangle(100, 100)" + cr
                +   "        Add(box1)" + cr + cr
                +   "        Drawable box2" + cr
                +   "        box2:LoadFilledRectangle(100, 100)" + cr
                +   "        box2:SetPosition(700, 500)" + cr
                +   "        Add(box2)" + cr
                +   "    end" + cr + cr
                +   "    action Update(number seconds)" + cr
                +   "        if monitor:IsKeyPressed(keys:SPACE)" + cr
                +   "            SetScreenSize(1000, 800, false)" + cr
                +   "        end" + cr
                +   "    end" + cr
                +   "end")
        section_display:Add(preformatter:GeneratePreformattedCode(cb8))

        section_display:AddParagraph("Now when we press the spacebar, the square in the top right is still touching the top "
            + "right corner of the window. Each square is still the exact same size in the engine (100 units wide by "
            + "100 units tall), but on the screen they appear slightly larger than they did before we resized the "
            + "screen. Here’s what it looks like:")

        Image image = section_display:AddImage("/media/games/ResolutionCameraUnadjusted.png", "This is an image of a 1000 by 800 pixel window "
            + "with a black square in the bottom left corner and another in the top right corner. The squares are slightly "
            + "larger than in the previous image.")
        image:AddAttribute("data-zoom","")

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to change the screen resolution using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Screen Resolutions"
    end

    action GetImageLocation returns text
        return "/media/games/Screen_Resolutions.jpg"
    end

    action GetName returns text
        return "Screen Resolutions"
    end

    action GetShortDescription returns text
        return "how to change the screen resolution and window size"
    end

    action GetLocation returns text
        return "tutorials/games/resolutions.html"
    end

    action GetLinkName returns text
        return "Screen Resolution"
    end

    action GetSectionName returns text
        return "Other Graphics"
    end
end