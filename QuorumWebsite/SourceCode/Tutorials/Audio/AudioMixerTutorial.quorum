use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Containers.Array
use Libraries.Web.Page.Section
use Libraries.Web.Page.Heading

class AudioMixerTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Mixing Signals - Quorum Programming Language")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Tutorial: Mixing Signals", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Tutorial: Mixing Signals")
        AddToHeadingArray(h_heading)

        headDiv:AddText("Working with mixers")
        bodyDiv:Add(headDiv)

        bodyDiv:AddHeading("Audio Mixing", 2)
        
        bodyDiv:AddParagraph("Audio mixing is a technique that allows us to combine multiple signals, sounds, or tracks together into a single object. 
            Consider if we wanted to record a band composed of the vocals, guitar, bass, and drums. 
            Instead of having just one microphone pick up all the musical notes from the set, we could use multiple microphones for each instrument. 
            If we were to implement the latter approach, we can manually modulate each signal we are receiving. 
            We have the ability to increase and decrease the volumes of each signal so we can have one instrument be emphasized more. 
            If we were to use just a single input, we would have a single signal to work with. 
            Mixers allow applications to tackle this issue. ")
        
        bodyDiv:AddHeading("Example Program", 4)
        bodyDiv:AddText("To fully comprehend how mixing works, let us take a look at the example program below:")
        
        CodeBlock cb1
        Span s1
        Span s2
        Span s3
        Span s4
        Span s5
        Span s6
        Span s7
        Span s8
        Span s9
        Span s10
        Span s11
        Span s12
        Span s13
        Span s14
        Span s15
        Span s16
        Span s17
        Span s18
        Span s19
        Span s20
        Span s21
        Span s22
        Span s23
        Span s24
        Span s25
        Span s26
        Span s27
        Span s28
        Span s29
        Span s30
        Span s31
        Span s32
        Span s33
        s1:AddText("// Array to hold the AudioSamples" + cr)
        s2:AddText("// The AudioSamples object that holds the mix" + cr)
        s3:AddText("// AudioSamples 1" + cr)
        s4:AddText("// AudioSamples 2" + cr)
        s5:AddText("// AudioSamples 3" + cr)
        s6:AddText("// AudioSamples 4" + cr)
        s7:AddText("// Set all samples to mono" + cr)
        s8:AddText("// 4 second playback" + cr)
        s9:AddText("// 4 second playback (acts as background noise)" + cr)
        s10:AddText("// 3 second playback" + cr)
        s11:AddText("// 2 second playback" + cr)
        s12:AddText("// 1 second playback" + cr)
        s13:AddText("// frequency for samples1" + cr)
        s14:AddText("// frequency for samples2" + cr)
        s15:AddText("// frequency for samples3" + cr)
        s16:AddText("// frequency for samples4" + cr)
        s17:AddText("//        number s1 = math:Sine(frequency1 * twoPI * counter/sampleSize)  // Sine wave with frequency of 110" + cr)
        s18:AddText("// FM synthesized wave" + cr)
        s19:AddText("// Sine wave with frequency of 220 Hz" + cr)
        s20:AddText("// Sine wave with frequency of 330 Hz" + cr)
        s21:AddText("// Sine wave with frequency of 440 Hz" + cr)
        s22:AddText("// Add samples1 object to Array" + cr)
        s23:AddText("// Add samples2 object to Array" + cr)
        s24:AddText("// Add samples3 object to Array" + cr)
        s25:AddText("// Add samples4 object to Array" + cr)
        s26:AddText("// Number of samples actually mixed" + cr)
        s27:AddText("// i = 0, 1, 2, 3 since mix size = 4 (added 4 objects into mix array)" + cr)
        s28:AddText("// Gets the current AudioSamples object (samples1 - samples4)" + cr)
        s29:AddText("// If the counter is withing the size of the AudioSamples object " + cr)
        s30:AddText("// result = result + current sample from current AudioSamples object" + cr)
        s31:AddText("// Increment number of samples actually mixed" + cr)
        s32:AddText("// result = result / number of samples actually mixed" + cr)
        s33:AddText("// Set the combined samples into the mixedSamples object" + cr)
        s1:SetClassAttribute("comment")
        s2:SetClassAttribute("comment")
        s3:SetClassAttribute("comment")
        s4:SetClassAttribute("comment")
        s5:SetClassAttribute("comment")
        s6:SetClassAttribute("comment")
        s7:SetClassAttribute("comment")
        s8:SetClassAttribute("comment")
        s9:SetClassAttribute("comment")
        s10:SetClassAttribute("comment")
        s11:SetClassAttribute("comment")
        s12:SetClassAttribute("comment")
        s13:SetClassAttribute("comment")
        s14:SetClassAttribute("comment")
        s15:SetClassAttribute("comment")
        s16:SetClassAttribute("comment")
        s17:SetClassAttribute("comment")
        s18:SetClassAttribute("comment")
        s19:SetClassAttribute("comment")
        s20:SetClassAttribute("comment")
        s21:SetClassAttribute("comment")
        s22:SetClassAttribute("comment")
        s23:SetClassAttribute("comment")
        s24:SetClassAttribute("comment")
        s25:SetClassAttribute("comment")
        s26:SetClassAttribute("comment")
        s27:SetClassAttribute("comment")
        s28:SetClassAttribute("comment")
        s29:SetClassAttribute("comment")
        s30:SetClassAttribute("comment")
        s31:SetClassAttribute("comment")
        s32:SetClassAttribute("comment")
        s33:SetClassAttribute("comment")
        
        cb1:AddText("use Libraries.Compute.Math" + cr +
            "use Libraries.Containers.Array" + cr +
            "use Libraries.Sound.Audio" + cr +
            "use Libraries.Sound.AudioSamples" + cr + cr + 
            "Array&lt;AudioSamples&gt; mix    ")
        cb1:Add(s1)
        cb1:AddText("AudioSamples mixedSamples  ")
        cb1:Add(s2)
        cb1:AddText("AudioSamples samples1  ")
        cb1:Add(s3)
        cb1:AddText("AudioSamples samples2  ")
        cb1:Add(s4)
        cb1:AddText("AudioSamples samples3  ")
        cb1:Add(s5)
        cb1:AddText("AudioSamples samples4  ")
        cb1:Add(s6)
        cb1:AddText(cr + "mixedSamples:SetChannels(1) ")
        cb1:Add(s7)
        cb1:AddText("samples1:SetChannels(1)" + cr +
            "samples2:SetChannels(1)" + cr +
            "samples3:SetChannels(1)" + cr +
            "samples4:SetChannels(1)" + cr + cr)
        cb1:AddText("mixedSamples:SetSizeInSeconds(4)   ") 
        cb1:Add(s8)
        cb1:AddText("samples1:SetSizeInSeconds(4)   ")
        cb1:Add(s9)
        cb1:AddText("samples2:SetSizeInSeconds(3)   ")
        cb1:Add(s10)
        cb1:AddText("samples3:SetSizeInSeconds(2)   ")
        cb1:Add(s11)
        cb1:AddText("samples4:SetSizeInSeconds(1)   ")
        cb1:Add(s12)
        cb1:AddText(cr + "Math math" + cr +
        "integer counter = 0" + cr +
        "integer sampleSize = mixedSamples:GetSamplesPerSecond()" + cr +
        "number twoPI = math:pi * 2" + cr)
        cb1:AddText("number frequency1 = 110    ") 
        cb1:Add(s13)
        cb1:AddText("number frequency2 = 220    ") 
        cb1:Add(s14)
        cb1:AddText("number frequency3 = 330    ") 
        cb1:Add(s15)
        cb1:AddText("number frequency4 = 440    ") 
        cb1:Add(s16)
        cb1:AddText(cr + "repeat while counter < mixedSamples:GetSize()" + cr +
            "   if (counter < samples1:GetSize())" + cr)
        cb1:Add(s17)
        cb1:AddText("       number modulatorWave = 10 * math:Sine(10 * twoPI * counter/sampleSize)" + cr + 
            "       number s1 = 1 * math:Sine(frequency1 * twoPI * counter/sampleSize + modulatorWave) ")
        cb1:Add(s18)
        cb1:AddText("       samples1:Set(counter, s1, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples2:GetSize())" + cr +
            "       number s2 = math:Sine(frequency2 * twoPI * counter/sampleSize) ")
        cb1:Add(s19)
        cb1:AddText("       samples2:Set(counter, s2, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples3:GetSize())" + cr +
            "       number s3 = math:Sine(frequency3 * twoPI * counter/sampleSize) ")
        cb1:Add(s20)
        cb1:AddText("       samples2:Set(counter, s3, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples4:GetSize())" + cr +
            "       number s4 = math:Sine(frequency4 * twoPI * counter/sampleSize) ")
        cb1:Add(s21)
        cb1:AddText("       samples4:Set(counter, s4, 0)" + cr +
            "   end" + cr +
            "   counter = counter + 1" + cr +
            "end" + cr + cr)
        cb1:AddText("mix:Add(samples1)  ")
        cb1:Add(s22)
        cb1:AddText("mix:Add(samples2)  ")
        cb1:Add(s23)
        cb1:AddText("mix:Add(samples3)  ")
        cb1:Add(s24)
        cb1:AddText("mix:Add(samples4)  ")
        cb1:Add(s25)
        cb1:AddText(cr + "counter = 0" + cr + 
            "repeat while counter < mixedSamples:GetSize()" + cr +
            "   number result = 0" + cr +
            "   integer samplesMixed = 0    ")
        cb1:Add(s26)
        cb1:AddText("   integer i = 0" + cr + cr +
        "   repeat while i < mix:GetSize()  ")
        cb1:Add(s27)
        cb1:AddText("       AudioSamples mixable = mix:Get(i)   ")
        cb1:Add(s28)
        cb1:AddText("       if counter < mixable:GetSize()  ")
        cb1:Add(s29)
        cb1:AddText("           result = result + mixable:Get(counter)  ")
        cb1:Add(s30)
        cb1:AddText("           samplesMixed = samplesMixed + 1 ")
        cb1:Add(s31)
        cb1:AddText("       end" + cr + 
        "       i = i + 1" + cr + 
        "   end" + cr + cr + 
        "   result = result / 4    ")
        cb1:Add(s32)
        cb1:AddText(cr + "  mixedSamples:Set(counter, result, 0)    ")
        cb1:Add(s33)
        cb1:AddText("   counter = counter + 1" + cr +
            "end" + cr + cr +
            "Audio audio" + cr +
            "audio:Load(mixedSamples)" + cr +
            "audio:PlayUntilDone()")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))

        bodyDiv:AddHeading("Creating the Signals", 3)
        bodyDiv:AddText("In the example above, notice that there are five different AudioSamples objects. 
            The mixedSamples object is the “mixer” that holds the other four AudioSamples mixed signal.")
        CodeBlock cb2
        cb2:AddText("Array&lt;AudioSamples&gt; mix    ")
        cb2:Add(s1)
        cb2:AddText("AudioSamples mixedSamples  ")
        cb2:Add(s2)
        cb2:AddText("AudioSamples samples1  ")
        cb2:Add(s3)
        cb2:AddText("AudioSamples samples2  ")
        cb2:Add(s4)
        cb2:AddText("AudioSamples samples3  ")
        cb2:Add(s5)
        cb2:AddText("AudioSamples samples4  ")
        cb2:Add(s6)
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))
        
        bodyDiv:AddParagraph("Looking at this code, we see that we also have an array containing AudioSamples objects called mix. 
            Mix holds the original signals (samples 1 through 4) which we will use later to generate the mixed signals. 
            After creating the objects, we (as we did in previous tutorials) must set the channels and seconds of our samples. 
            Next we move on to adding the values into our samples objects. ")

        CodeBlock cb3
        cb3:AddText("Math math" + cr +
        "integer counter = 0" + cr +
        "integer sampleSize = mixedSamples:GetSamplesPerSecond()" + cr +
        "number twoPI = math:pi * 2" + cr)
        cb3:AddText("number frequency1 = 110    ") 
        cb3:Add(s13)
        cb3:AddText("number frequency2 = 220    ") 
        cb3:Add(s14)
        cb3:AddText("number frequency3 = 330    ") 
        cb3:Add(s15)
        cb3:AddText("number frequency4 = 440    ") 
        cb3:Add(s16)
        cb3:AddText(cr + "repeat while counter < mixedSamples:GetSize()" + cr +
            "   if (counter < samples1:GetSize())" + cr)
        cb3:Add(s17)
        cb3:AddText("       number modulatorWave = 10 * math:Sine(10 * twoPI * counter/sampleSize)" + cr + 
            "       number s1 = 1 * math:Sine(frequency1 * twoPI * counter/sampleSize + modulatorWave) ")
        cb3:Add(s18)
        cb3:AddText("       samples1:Set(counter, s1, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples2:GetSize())" + cr +
            "       number s2 = math:Sine(frequency2 * twoPI * counter/sampleSize) ")
        cb3:Add(s19)
        cb3:AddText("       samples2:Set(counter, s2, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples3:GetSize())" + cr +
            "       number s3 = math:Sine(frequency3 * twoPI * counter/sampleSize) ")
        cb3:Add(s20)
        cb3:AddText("       samples2:Set(counter, s3, 0)" + cr +
            "   end" + cr +
            "   if (counter < samples4:GetSize())" + cr +
            "       number s4 = math:Sine(frequency4 * twoPI * counter/sampleSize) ")
        cb3:Add(s21)
        cb3:AddText("       samples4:Set(counter, s4, 0)" + cr +
            "   end" + cr +
            "   counter = counter + 1" + cr +
            "end")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb3))

        bodyDiv:AddParagraph("To start off we set our frequencies for each of our samples. 
            Next we run a loop that goes from 0 to mixedSamples:GetSize(). 
            The reason why we use mixedSamples’ size is because samples1 through 4 have different sizes (due to their size we set in seconds earlier). 
            So for example, if we had one sample object with a size of 5 and another at the size of 10, than in this context, we should use the size of 10 to limit the loop because we can access elements from both objects. 
            If we were to use 5, then we are limited to accessing only half of what is in the second object. 
            Alternatively, we can loop through each samples object individually but this method allows us to do so all at once." + cr +
            "As explained, the samples have different sizes so we must account for them when accessing their elements. 
            We do this through our conditional structures (an if statement) to check if counter is within the bounds of its size. 
            Since we have four samples objects, we need four of these statements. 
            As you can see, we used sine waves with different frequencies for all our samples not including the first one. 
            The first sample uses an FM synthesized wave for reasons we will discuss later on but one could alternatively use another sine wave instead. 
            After creating and setting the values within our samples objects, we add them to our array with:")
        CodeBlock cb4
        cb4:AddText("mix:Add(samples1)  ")
        cb4:Add(s22)
        cb4:AddText("mix:Add(samples2)  ")
        cb4:Add(s23)
        cb4:AddText("mix:Add(samples3)  ")
        cb4:Add(s24)
        cb4:AddText("mix:Add(samples4)  ")
        cb4:Add(s25)
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb4))
        bodyDiv:AddText("and are now ready to mix the signals.")

        bodyDiv:AddHeading("Mixing the Signals", 3)
        bodyDiv:AddText("Looking at the code below, we can see that we have two loops, one within another (a technique called “nesting”).")

        CodeBlock cb5
        cb5:AddText("counter = 0" + cr + 
            "repeat while counter < mixedSamples:GetSize()" + cr +
            "   number result = 0" + cr +
            "   integer samplesMixed = 0    ")
        cb5:Add(s26)
        cb5:AddText("   integer i = 0" + cr + cr +
        "   repeat while i < mix:GetSize()  ")
        cb5:Add(s27)
        cb5:AddText("       AudioSamples mixable = mix:Get(i)   ")
        cb5:Add(s28)
        cb5:AddText("       if counter < mixable:GetSize()  ")
        cb5:Add(s29)
        cb5:AddText("           result = result + mixable:Get(counter)  ")
        cb5:Add(s30)
        cb5:AddText("           samplesMixed = samplesMixed + 1 ")
        cb5:Add(s31)
        cb5:AddText("       end" + cr + 
        "       i = i + 1" + cr + 
        "   end" + cr + cr + 
        "   result = result / samplesMixed    ")
        cb5:Add(s32)
        cb5:AddText(cr + "  mixedSamples:Set(counter, result, 0)    ")
        cb5:Add(s33)
        cb5:AddText("   counter = counter + 1" + cr + 
            "end")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb5))

        bodyDiv:AddText("The outside loop is the standard loop that goes from 0 to mixedSamples:Getsize(), and is nearly identical to the previous loops we’ve been working on with digital signal processing. 
            The bottom of the loop contains code that sets the sample and also increments the counter. ")
        bodyDiv:AddParagraph("The actual mixing happens inside the nested loop. Our samplesMixed variable is an integer that holds the amount of samples that we are actually mixing. 
            This number will change as we go through the loop because each AudioSamples object we are going through have different sizes. 
            This means that at certain points, we won’t be mixing all the signals, but only the ones within the boundaries we specified which in this case, would be its size. ")
        bodyDiv:AddText(cr + cr + "Let's further examine this chunk of code: ")
        
        CodeBlock cb6
        cb6:AddText("repeat while i < mix:GetSize()  ")
        cb6:Add(s27)
        cb6:AddText("   AudioSamples mixable = mix:Get(i)   ")
        cb6:Add(s28)
        cb6:AddText("   if counter < mixable:GetSize()  ")
        cb6:Add(s29)
        cb6:AddText("      result = result + mixable:Get(counter)  ")
        cb6:Add(s30)
        cb6:AddText("       samplesMixed = samplesMixed + 1 ")
        cb6:Add(s31)
        cb6:AddText("   end" + cr + 
        "   i = i + 1" + cr + 
        "end")

        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb6))
        bodyDiv:AddParagraph("First we are going through and grabbing each samples object that we have in our AudioSamples array. 
            Next, if the counter is within the size of the current AudioSamples object, then we are going to add the sample to our result number from that specific object. 
            Result is the sum of all the samples which would result in the combination of all the signals. 
            This approach is a sample-by-sample mix which elements the loss of signals. 
            We repeat this process for every item in our array. 
            We then divide our result by the amount of samples we actually mixed to separate each sound so we can hear which signal is playing. 
            If we were not to do this, we would simply hear static. ")
        
        bodyDiv:AddHeading("Playing the Mixed Sounds", 3)
        bodyDiv:AddParagraph("Lastly, we load the sound and play it until it’s done. 
        Pay attention to the different sounds and frequencies being played here. 
        We essentially have each sound playing at the same time but we hear one less signal each second. 
        Why is this? 
        This is because we set the samples to different sizes (in seconds) and what we hear is samples4 playing for one second, samples3 playing for two seconds, samples2 playing for two seconds, and samples1 playing for four seconds so what results is a sound getting deeper and deeper. 
        The reason why we included an FM synthesized wave is to hear it in the background so we can actually hear what is going on. 
        We can see how each wave is played simultaneously which proves that we actually “mixed” our signals.  ")

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Mixing Signals."
    end

    action GetSummaryName returns text
        return "Working with mixers."
    end

    action GetImageLocation returns text
        return "/media/Sound.gif"
    end

    action GetName returns text
        return "Mixing Signals"
    end

    action GetShortDescription returns text
        return "how to mix different sounds together."
    end

    action GetLocation returns text
        return "tutorials/dsp/audiomixer.html"
    end

    action GetLinkName returns text
        return "Audio Mixing"
    end

    action GetSectionName returns text
        return "Audio"
    end
end
