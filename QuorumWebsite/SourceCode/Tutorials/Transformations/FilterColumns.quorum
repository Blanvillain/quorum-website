use Libraries.Web.Page.all
use Libraries.Containers.Array

class FilterColumns is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Transformations - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
         Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Filtering Columns", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Filtering Columns")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial demonstrates how to filter columns in our datasets")
        bodyDiv:Add(headDiv)

        
        Section section_filter
        section_filter:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_filter)
        AddHeading(section_filter, "Filtering a Column", 2)


       
        section_filter:AddParagraph("While filtering rows can be a somewhat complicated operation, filtering columns is straightforward. In a DataFrame, we can remove any column we want to get rid of by calling RemoveColumnAt() and telling it which one we want to remove. We can also copy a data frame first before doing so, to preserve the original data, but for now, let us try to transform our data by removing the unnecessary columns. Here is a brief description of what the function we are using does.
")        

         WebTable table = AddWebTable("Filtering Helper Functions")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Class / Action")
        tableHeaderArray:Add("Description") 
        tableHeaderArray:Add("Usage")
      
        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)        

         Array<text> rubricText1
        rubricText1:Add("DataFrame:RemoveColumnAt(integer columnNumber)")
        rubricText1:Add("This function will remove unwanted columns from our dataset starting from 0 to N, where N is the number of total columns contained in the dataset. It takes in integers, signifying the corresponding column number to remove.")
        rubricText1:Add("//This action removes various empty entries from our CSV  file
frame:RemoveColumnAt(3)")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        table:Add(tableBody)
        section_filter:Add(table)
        

        section_filter:AddParagraph("To accomplish this, we will be going back to our AskAManager.csv file and begin to load it back into our DataFrame, 'frame' using the Load(text fileLocation) action. After properly loading our file, we will be able to use the RemoveColumnAt(integer num) action which will remove unwanted columns with empty entries. In this case, as when looking at the dataset, there are missing chunks of information on these columns: additional context on job title, other monetary comp, currency - other, and additional context on income. We would not want to have undefined values and mostly, we have decided that these columns are not useful pieces of information so it would be okay to get rid of them. ")

        Link link3 
        link3:AddText("We can click this link to download the file for the CSV.")
        link3:SetAddress("https://raw.githubusercontent.com/qorf/curriculum/main/Reference/DataScience/Charts%20(New)/Data/Miscellaneous/AskAManager.csv")
        link3:SetClassAttribute("underline text-quorum-blue-150")
        link3:SetTarget(link3:newTab)

        section_filter:Add(link3)


        section_filter:Add(preformatter:GeneratePreformattedCode("//Create a DataFrame, which is essentially a table that understands 
//more information about the data that is being loaded.
DataFrame frame

//This loads data relative to the project, so put the AskAManager.csv file in the Data/Miscellaneous folder
frame:Load("+dq+"../Data/Miscellaneous/AskAManager.csv"+dq+")
"))

        section_filter:AddParagraph("We want to figure out the corresponding column number to these columns. We will be calling RemoveColumnAt() action using our 'frame' object. Reminder that with a CSV file, columns start off at 0, therefore the corresponding column numbers for these headings we are filtering are as follows: ")


        WebList startRemarks
startRemarks:AddListItem("Additional context on job title: 3")
startRemarks:AddListItem("Other monetary comp: 5")
startRemarks:AddListItem("Currency - other: 7")
startRemarks:AddListItem("Additional context on income: 8")
section_filter:AddNestedTag(startRemarks)
startRemarks:AddClassAttribute("list-disc list-outside pl-8")

section_filter:AddParagraph(" ")

        section_filter:Add(preformatter:GeneratePreformattedCode("//This action removes various empty entries from our CSV  file
frame:RemoveColumnAt(3) // additional context on job title
frame:RemoveColumnAt(5) // other monetary comp
frame:RemoveColumnAt(7) // currency - other
frame:RemoveColumnAt(8) // additional context on income
"))

    section_filter:AddParagraph("Finally, we can output our dataset to confirm the filter using frame:ToText(). The full code is shown below.")

    section_filter:Add(preformatter:GeneratePreformattedCode("//We need the DataFrame class to load in files for Data Science operations.
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Transforms.RemoveUndefinedRowsTransform

//Create a DataFrame, which is essentially a table that understands 
//more information about the data that is being loaded.
DataFrame frame

//This loads data relative to the project, so put the AskAManager.csv file in the Data/Miscellaneous folder
frame:Load("+dq+"../Data/Miscellaneous/AskAManager.csv"+dq+")

//This action removes various empty entries from our CSV  file
frame:RemoveColumnAt(3) // additional context on job title
frame:RemoveColumnAt(5) // other monetary comp
frame:RemoveColumnAt(7) // currency - other
frame:RemoveColumnAt(8) // additional context on income

//We can save the frame or output it to the console, like we are doing here.
output frame:ToText()
"))

         Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("Main.quorum", "examples/Transformations/FilterColumns.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Filtering Columns")
    section_try_yourself:Add(ide3)
  
Paragraph para
para:AddText("To view the program we have made, we can ")

     Link link2
        link2:AddText("download the program file")
        link2:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Transformations/FilterColumns.quorum")
        link2:SetTarget(link2:newTab)
        link2:SetClassAttribute("underline text-quorum-blue-150")
        para:Add(link2)
        section_try_yourself:Add(para)

        
        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about filtering columns in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "filtering columns values with DataFrames"
    end

    action GetName returns text
        return "filtering columns"
    end

    action GetShortDescription returns text
        return "filtering columns"
    end

    action GetLocation returns text
        return "tutorials/Transformations/FilteringColumns.html"
    end

         action GetLinkName returns text
        return "Filtering Columns"
    end

    action GetSectionName returns text
        return "Data Transformations"
    end
end