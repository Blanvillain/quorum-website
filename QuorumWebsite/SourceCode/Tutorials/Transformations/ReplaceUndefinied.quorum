use Libraries.Web.Page.all
use Libraries.Containers.Array

class ReplaceUndefined is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Transformations - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)



        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Replacing Undefined Values", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Replacing Undefined Values")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial demonstrates how to replace values in our datasets")
        bodyDiv:Add(headDiv)

        
        Section section_rm
        section_rm:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_rm)
        AddHeading(section_rm, "Replacing Undefined Values", 2)

       
        section_rm:AddParagraph("In addition to removing undefined values, sometimes we want to replace them with an alternative. For example, if we had a DataFrame with integers, and a few were undefined, then we might want to replace them with zero. While we should always use caution when replacing data in a data set, as a practical matter, sometimes replacing undefined values is desirable in the field of data science. ")
        
        section_rm:AddParagraph("To do this, there are two actions we can use, ReplaceUndefined(text) and ReplaceUndefinedFromSelectedColumns(text). They both do essentially the same operation, which is to ask the column to replace any undefined values with a value represented via the text. ")

         WebTable tableAction = AddWebTable("Replacing Undefined Values Helper Functions")
        TableBody tableBodyAction = AddTableBody()
        
        Array<text> tableHeaderArrayAction
        tableHeaderArrayAction:Add("Class / Action")
        tableHeaderArrayAction:Add("Description") 
        tableHeaderArrayAction:Add("Usage")
      
        TableHeader theadAction = AddTableHeaderRow(tableHeaderArrayAction)
        tableAction:Add(theadAction)        


        Array<text> rubricText1
        rubricText1:Add("dataFrameObject:ReplaceUndefined(text replacedElement)")
        rubricText1:Add("This action will replace any empty element within the dataset with the text value passed across the whole DataFrame.")
        rubricText1:Add("frame:ReplaceUndefined("+dq+"0"+dq+")")
         tableBodyAction:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("dataFrameObject:ReplaceUndefinedSelectedColumns(text replacedElement)")
        rubricText2:Add("This action will replace any empty element within the dataset with the text value passed given a specified numerical or non-numerical column.")
        rubricText2:Add("frame:ReplaceUndefinedSelectedColumns("+dq+"0"+dq+")")
        tableBodyAction:Add(AddTableBodyRow(rubricText2))
        
        tableAction:Add(tableBodyAction)
        section_rm:Add(tableAction)

        section_rm:AddParagraph("For example, suppose we have an integer column and we send it the text value of 'Dog.' In such a case, this is not a valid integer. With invalid values, any column that the text value is not related to automatically ignores the request. If, however, the value is valid for a particular column, like it would be in a text column, then the undefined values are all replaced. For the actions, the difference between them is that one does the replacement across the entire DataFrame, while the other does it for selected columns only.
")

        section_rm:AddParagraph("The reason why we want to replace bad data values is to increase the usability of a dataset. Typically, in data science, columns with values that are all of the same type and filed in are typically more reliable. Why this is important is because when we need to summarize our data (whether it be through a chart or using some form of descriptive statistics), we would not want the risk of any corrupted data (data that is unable to be calculated by any actions we use to manipulate our DataFrame) or in a case where major outliers are present. ")
        
        section_rm:AddParagraph("In this example, we are going to take a look at the 'Other monetary comp' column within the AskAManager.csv. Here is a snippet of this column from our dataset.")



         WebTable tableCsv = AddWebTable("Snippet of AskAManager.csv")
        TableBody tableBodyCsv = AddTableBody()
        
        Array<text> tableHeaderArrayCsv
        tableHeaderArrayCsv:Add("Other monetary comp")
   
        TableHeader theadCsv = AddTableHeaderRow(tableHeaderArrayCsv)
        tableCsv:Add(theadCsv)   

        Array<text> rubricText3
        rubricText3:Add("0")
        tableBodyCsv:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("4000")
        tableBodyCsv:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add(" ")
        tableBodyCsv:Add(AddTableBodyRow(rubricText5))

        Array<text> rubricText6
        rubricText6:Add("3000")
        tableBodyCsv:Add(AddTableBodyRow(rubricText6))

        Array<text> rubricText7
        rubricText7:Add("7000")
        tableBodyCsv:Add(AddTableBodyRow(rubricText7))

        tableCsv:Add(tableBodyCsv)
        section_rm:Add(tableCsv)

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Other monetary comp", " "))
      
        section_rm:AddParagraph("As we can see here within the first few rows, some data entries are missing, and we are going to clean that up. We will be calling the action ReplaceUndefinedSelectedColumns(text) and replace any empty boxes with the number '0' so we have a more complete dataset. ")

        section_rm:AddParagraph("We would first want to read in our file, AskAManager.csv using the Load(text file) action and pass in the file location of our CSV file. In this case, the file is located within the main 'Data' folder in a subfolder called 'Miscellaneous.' ")

        section_rm:Add(preformatter:GeneratePreformattedCode("DataFrame frame
frame:Load("+dq+"../Data/Miscellaneous/AskAManager.csv"+dq+")
"))

        section_rm:AddParagraph("Next, we want to select the column number of the column we want to grab; note that columns start off from 0 which means the 'Other monetary comp' would be column 6. Finally we would want to call our action, ReplaceUndefinedFromSelectedColumns(text replacedElement) and pass the value we want to replace any undefined values as. This means any blanks in our dataset would be replaced with the number 0 in its place for that column.")

       
        section_rm:Add(preformatter:GeneratePreformattedCode("frame:ReplaceUndefinedFromSelectedColumns("+dq+"0"+dq+")
"))

        section_rm:AddParagraph("Below is the full code example:") 

        section_rm:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame

DataFrame frame
frame:Load("+dq+"../Data/Miscellaneous/AskAManager.csv"+dq+")
        
//Add the first column in the set to the list of selected columns
frame:AddSelectedColumn(6)

//perhaps this replaces an undefined in an IntegerColumn or a TextColumn
frame:ReplaceUndefinedFromSelectedColumns("+dq+"0"+dq+")
output frame:ToText()
"))


        Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("Main.quorum", "examples/Transformations/ReplaceUndefined.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Replace Undefined")
    section_try_yourself:Add(ide3)

Paragraph para
para:AddText("To view the program we have made, we can ")

     Link link2
        link2:AddText("download the program file")
        link2:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Transformations/ReplaceUndefinedValues.quorum")
        link2:SetTarget(link2:newTab)
        link2:SetClassAttribute("underline text-quorum-blue-150")
        para:Add(link2)
        section_try_yourself:Add(para)
        
        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", GetDataScienceDefaultKeywords() + 
        ", data transformation, dplyr, reshape, data cleaning, remove null, null, replace null, undefined,
        remove empty values, replace empty values, empty, replace empty")
        AddMetaData(keywords)
    end

    action GetMetaDescription returns text
        return "Learn about replacing undefined values in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "replacing undefined values with DataFrames"
    end

    action GetName returns text
        return "replace undefined values "
    end

    action GetShortDescription returns text
        return "replace undefined values"
    end

    action GetLocation returns text
        return "tutorials/Transformations/ReplacingUndefined.html"
    end

    action GetLinkName returns text
        return "Replacing Undefined Values"
    end

    action GetSectionName returns text
        return "Data Transformations"
    end
end