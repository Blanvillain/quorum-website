use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList
use Libraries.Containers.Array
use Libraries.Web.Page.Link

class Mutate is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Transformations - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Calculating Columns (Mutating)", 1)
        headDiv:AddText("This tutorial demonstrates how to calculate columns (mutate) in our datasets")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        
        bodyDiv:AddHeading("Calculate Columns", 2)
       
        bodyDiv:AddParagraph("Another topic of interest in regard to rows is automatically calculating columns, sometimes called mutation. In many programming languages, the idea is that similarly to Filter, we can write an expression and calculate a new column based on that expression. The rules in mutation are identical to those in Filter, except that the result of each row's result becomes the value in the new column. There are two actions we can use for this: AddColumn(text, text) and CalculateColumn(text, text). Here are brief descriptions of both of these actions:")
        
        Array<text> rubricText1
        rubricText1:Add("dataFrameObject:AddColumn(text columnName, text expression)")
        rubricText1:Add("This action takes in two parameters: the name of the newly added column and an expression in which we would take values from other columns, manipulate them in some way (with our expression) and translate this into the newly added column.")
        rubricText1:Add("frame:AddColumn("+dq+"new column"+dq+", "+dq+"x + y + z"+dq+")")

         Array<text> rubricText2
        rubricText2:Add("dataFrameObject:CalculateColumn(text columnName, text expression)")
        rubricText2:Add("This action takes in two parameters: the name of the newly added column and an expression in which we would take values from other columns, manipulate them in some way (with our expression) and translate this into the newly added column. However, this would not be added into the DataFrame.")
        rubricText2:Add("frame:CalculateColumn("+dq+"new column"+dq+", "+dq+"a < 45"+dq+")")

        
        Array<text> rubricHeader
        rubricHeader:Add(AddTextBoldFront("Class / Action", " "))
        rubricHeader:Add(AddTextBoldFront("Description", " "))
        rubricHeader:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows
        rubricRows:Add(AddTableHeaderTag(rubricHeader))
      
        rubricRows:Add(AddTableDataTag(rubricText1))
        rubricRows:Add(AddTableDataTag(rubricText2))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows), "Calculate Columns Helper Functions"))

        bodyDiv:AddParagraph("The AddColumn action has two parameters, one for the name of the column to be added and the second for our Filter-like expression. Imagine we had a DataFrame like before:")

        Array<text> rubricText3
        rubricText3:Add("1")
        rubricText3:Add("5")

        Array<text> rubricText4
        rubricText4:Add("2")
        rubricText4:Add("6")

        Array<text> rubricText5
        rubricText5:Add("3")
        rubricText5:Add("7")

        Array<text> rubricText6
        rubricText6:Add("4")
        rubricText6:Add("8")
        
        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("x", " "))
        rubricHeader1:Add(AddTextBoldFront("y", " "))

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))
      
        rubricRows1:Add(AddTableDataTag(rubricText3))
        rubricRows1:Add(AddTableDataTag(rubricText4))
        rubricRows1:Add(AddTableDataTag(rubricText5))
        rubricRows1:Add(AddTableDataTag(rubricText6))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "Example DataFrame"))

        bodyDiv:AddParagraph("If we had an expression like AddColumn("+dq+"NewColumn"+dq+", "+dq+"x + y"+dq+") then we would then add a new column to our existing DataFrame that is the sum of these two columns. We again will be using the simple numerical dataset, random.csv which can be downloaded here. This is a snippet of our dataset being used.")

        Array<text> rubricText7
        rubricText7:Add("1")
        rubricText7:Add("45")
        rubricText7:Add("3")
        rubricText7:Add("9")
        
        Array<text> rubricText8
        rubricText8:Add("2")
        rubricText8:Add("57")
        rubricText8:Add("67")
        rubricText8:Add("5")

        Array<text> rubricText9
        rubricText9:Add("3")
        rubricText9:Add("183")
        rubricText9:Add("70")
        rubricText9:Add("18")

        Array<text> rubricText10
        rubricText10:Add("4")
        rubricText10:Add("322")
        rubricText10:Add("20")
        rubricText10:Add("48")

        Array<text> rubricText11
        rubricText11:Add("5")
        rubricText11:Add("10")
        rubricText11:Add("15")
        rubricText11:Add("90")

        Array<text> rubricText12
        rubricText12:Add("6")
        rubricText12:Add("29")
        rubricText12:Add("11")
        rubricText12:Add("25")

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("id", " "))
        rubricHeader2:Add(AddTextBoldFront("a", " "))
        rubricHeader2:Add(AddTextBoldFront("b", " "))
        rubricHeader2:Add(AddTextBoldFront("c", " "))

        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))
      
        rubricRows2:Add(AddTableDataTag(rubricText7))
        rubricRows2:Add(AddTableDataTag(rubricText8))
        rubricRows2:Add(AddTableDataTag(rubricText9))
        rubricRows2:Add(AddTableDataTag(rubricText10))
        rubricRows2:Add(AddTableDataTag(rubricText11))
        rubricRows2:Add(AddTableDataTag(rubricText12))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Example of random.csv file"))

        
        bodyDiv:AddParagraph(" ")

     Link link3
        link3:AddText("We can download this sample dataset, random.csv by clicking this link.")
        link3:SetAddress("https://raw.githubusercontent.com/qorf/curriculum/main/Reference/DataScience/Charts%20(New)/Data/Miscellaneous/random.csv")
        link3:SetTarget(link3:newTab)
        bodyDiv:Add(link3)

        bodyDiv:AddParagraph("To highlight our process we first loaded our file, random.csv and read it into our DataFrame, 'frame.' Because we are eventually going to manipulate our 'frame' we want to save the original DataFrame so we create a new DataFrame called 'copy.' We simply call 'frame:Copy()' and save it into the 'copy' object which will give us the exact same frame. 
")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("//Create a DataFrame, which is essentially a table that understands 
//more information about the data that is being loaded.
DataFrame frame
DataFrame copy

//This loads data relative to the project, so put the AskAManager.csv file in the Data/Miscellaneous folder
frame:Load("+dq+"../Data/Miscellaneous/random.csv"+dq+")

// save the original frame
copy = frame:Copy()
"))

        bodyDiv:AddParagraph("Next, we call AddColumn() on the frame, and the heading title, 'new' and insert the equation we have (a + b + c) as the second parameter. Finally, what we are doing is outputting both the original frame (copy) and the newly modified frame (frame). As we can see, our 'frame' object has a new column called 'new' and is the sum of the a + b + c columns. ")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("frame:AddColumn("+dq+"new"+dq+", "+dq+"a + b + c"+dq+")"))        

        bodyDiv:AddParagraph("We have the full code example below:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("frame:AddColumn("+dq+"new"+dq+", "+dq+"a + b + c"+dq+")

//We need the DataFrame class to load in files for Data Science operations.
use Libraries.Compute.Statistics.DataFrame
use Libraries.Compute.Statistics.Transforms.RemoveUndefinedRowsTransform

//Create a DataFrame, which is essentially a table that understands 
//more information about the data that is being loaded.
DataFrame frame
DataFrame copy

//This loads data relative to the project, so put the random.csv file in the Data/Miscellaneous folder
frame:Load("+dq+"../Data/Miscellaneous/random.csv"+dq+")

// save the original frame
copy = frame:Copy()

//This creates a new column based on adding the a + b + c columns
frame:AddColumn("+dq+"new"+dq+", "+dq+"a + b + c"+dq+")

output "+dq+"original frame"+dq+"
output copy:ToText()

output "+dq+"modified frame"+dq+"
//We can save the frame or output it to the console, like we are doing here.
output frame:ToText()
"))

    bodyDiv:AddParagraph("Like before, this calculation is actually compiling our expression in real-time, once per call to AddColumn, and as such it is slower than other areas of Quorum. Conducting the operation manually through other calls can be faster. However, for many applications, the extra speed increase is nominal and as such, with the exception of very large data sets, this operation has many possible uses. Finally, while AddColumn creates a new column, CalculateColumn runs the script and returns the column, but does not add it to the frame. Either can be used depending on the need. ")

        bodyDiv:AddHeading("Run the Example",2)
        
        AddIDE(bodyDiv,"Mutate","Calculate Columns (Mutate)","Mutating for data transformations","examples/Transformations/Mutate.quorum")

bodyDiv:AddParagraph(" ")
bodyDiv:AddText("To view the program we have made, we can ")

     Link link2
        link2:AddText("download the program file")
        link2:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Transformations/Mutate.quorum")
        link2:SetTarget(link2:newTab)
        bodyDiv:Add(link2)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about calculating columns in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "calculating columns with DataFrames"
    end

    action GetName returns text
        return "calculating columns (mutate)"
    end

    action GetShortDescription returns text
        return "calculating columns (mutate)"
    end

    action GetLocation returns text
        return "tutorials/Transformations/CalcColumns.html"
    end
end