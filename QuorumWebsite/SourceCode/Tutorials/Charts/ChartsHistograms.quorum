use Libraries.Web.Page.all
use Libraries.Containers.Array
use Libraries.System.FileReader
use Libraries.System.File

class ChartsHistograms is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Histograms - Quorum Programming Language")
        AddDefaultHeaders()

         // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Histograms", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Histograms")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces how to make Histograms in Quorum")
        bodyDiv:Add(headDiv)

        Section section_histogram
        section_histogram:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_histogram)
        
        Heading h2_histogram = section_histogram:AddHeading("Making Histograms", 2)
        h2_histogram:AddAttribute("data-text", "Making Histograms")
        
        h2_histogram:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_histogram)
       
        section_histogram:AddParagraph("A very common chart for visualizing numeric data is through a histogram. Histograms are typically used to represent the distribution of numerical data. The variable we observe is divided into different intervals where as a whole, we can examine the shape of the graph whether it is skewed, normal, uniform, bimodal [two distinct curves], etc. and draw conclusions about the data. Typical datasets to look out for when wanting to construct a histogram would be datasets featuring costs, ages, GPAs, and test scores. Note that datasets with non-numeric data are not recommended for histograms.")
        section_histogram:AddParagraph("For this lesson, we will examine the costs of various AirBnB per night in NYC in 2019. We can examine how expensive it is to rent an AirBnB and can make a conclusion if using the app is worth it or not.")
        section_histogram:AddParagraph("First step to this process is that we will need to properly load in the dataset and format it. It is best to keep track of where we are storing our data files. For this tutorial, we will have our dataset inside of a Data folder contained in another internal folder called "+dq+"Other."+dq+"")

        Paragraph para
        para:AddText("To follow along, we can download the NYC Airbnb dataset ")
        
        Link link
        link:AddText("here")
        link:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/Data/Other/AB_NYC_2019.csv")
        link:SetTarget(link:newTab)
        link:SetClassAttribute("underline text-quorum-blue-150")
        
        para:Add(link)
        para:AddText(".")
        section_histogram:Add(para)

        section_histogram:AddParagraph("Here is a snippet of what the dataset should look like:")

       
        WebTable table = AddWebTable("Airbnb Prices in NYC CSV")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Category")
        tableHeaderArray:Add("City") 
        tableHeaderArray:Add("Country")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)    

        Array<text> rubricText1
        rubricText1:Add("Brooklyn")
        rubricText1:Add("Kensington") 
        rubricText1:Add("Private room")
        rubricText1:Add("149")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText2
        rubricText2:Add("Manhattan")
        rubricText2:Add("Midtown") 
        rubricText2:Add("Entire home/apt")
        rubricText2:Add("225")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText3
        rubricText3:Add("Manhattan")
        rubricText3:Add("Harlem") 
        rubricText3:Add("Private room")
        rubricText3:Add("150")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText4
        rubricText4:Add("Brooklyn")
        rubricText4:Add("Clinton Hill") 
        rubricText4:Add("Entire home/apt")
        rubricText4:Add("89")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText5
        rubricText5:Add("Manhattan")
        rubricText5:Add("East Harlem") 
        rubricText5:Add("Entire home/apt")
        rubricText5:Add("80")
        tableBody:Add(AddTableBodyRow(rubricText5))
        
        table:Add(tableBody)
        section_histogram:Add(table)

        Section section_formatting
        section_formatting:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_formatting)
        
        Heading h2_formatting = section_formatting:AddHeading("Loading and Formatting", 2)
        h2_formatting:AddAttribute("data-text", "Loading and Formatting")
        
        h2_formatting:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_formatting)


        section_formatting:AddParagraph("As mentioned previously, to load and read in the dataset, we will 
        need to create a DataFrame component named "+dq+"frame"+dq+". Using the frame, we must 
        use the Load function and type in the file path of the Airbnb CSV.")        

        section_formatting:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.Histogram

// Create a DataFrame to hold the data.
DataFrame frame

// Load your data file into the frame.
frame:Load("+dq+"data/AB_NYC_2019.csv"+dq+")
"))

        section_formatting:AddParagraph("Once the data has been loaded in, we will now extract this data to use in the data chart. 
        We will be using two functions from our frame component, AddSelectedColumns(text header) and 
        AddSelectedFactors(text header) where the columns will be used to label our x axis, signifying the groups 
        we are observing and the factor will be used to label our y axis, signifying the change over time. 
        AddSelectedColumn and AddSelectedFactor take in a parameter of either the column number or the column label in the CSV file. We will be using the column number to demonstrate. ")
        section_formatting:AddParagraph("Notice in our data that we do have a lot of columns, but feel free to ignore them, the only column we will be pulling are the prices. Please note that for a Histogram, we will only be using the AddSelectedColumns(text header) because we would like to count the totals of each cost range for AirBnBs. This goes for other datasets as well, in which we will not be modifying the y axis. AddSelectedColumns(text header) will take a string as the parameter which represents the text header in the data file.")
        section_formatting:AddParagraph("We should have the following code:")

        section_formatting:Add(preformatter:GeneratePreformattedCode("// Select data from the frame that you wish to use in your histogram. 
// Note: In Histograms, factors and non-numerical columns are not supported.
// For this example we will be using the numerical column "+dq+"price"+dq+".
frame:AddSelectedColumns("+dq+"price"+dq+")
"))

        section_formatting:AddParagraph("Now it is time to create the Histogram which can be done with the following code. This creates a chart object from our DataFrame component, frame. The rest of this lesson, we will be using the chart object we have created to change and format the rest of our line chart. ")

        section_formatting:Add(preformatter:GeneratePreformattedCode("// Using the frame, create a Histogram object.
Histogram chart = frame:Histogram()

// Display your histogram.
chart:Display()
"))

        CodeForIDE code1
        code1:AddFileUrl("Histogram.quorum", "examples/Charts/H1.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Reading in and Displaying")
        section_formatting:Add(ide)

        section_formatting:AddParagraph("Calling the Display() function will give us a pop-up of our formatted data so far. We still need to give meaning to our data, therefore, the following steps will show us how to label and customize our chart.")

        Section section_labeling
        section_labeling:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_labeling)
        
        Heading h2_labeling = section_labeling:AddHeading("Labeling the Histogram", 2)
        h2_labeling:AddAttribute("data-text", "Labeling the Histogram")
        
        h2_labeling:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_labeling)

        
        section_labeling:AddParagraph("In order for viewers to understand our data, labels give a clear comprehension of what is being presented. This means that we will be labeling the x axis, y axis, legend, and giving our chart a title that describes the dataset. To do so, we will call the following functions with our "+dq+"chart"+dq+" object: SetTitle(text title), SetXAxisTitle(text title), SetYAxisTitle(text title), SetLegendTitle(text title), and SetSubtitle(text title). Here is a brief description on what each function does and what it takes in.")

        
        WebTable tableLabel = AddWebTable("Histrogram Labeling Functions")
        TableBody tableBodyLabel = AddTableBody()
        
        Array<text> tableHeaderArrayLabel
        tableHeaderArrayLabel:Add("Function")
        tableHeaderArrayLabel:Add("Description") 
        tableHeaderArrayLabel:Add("Usage")

        TableHeader theadLabel = AddTableHeaderRow(tableHeaderArrayLabel)
        tableLabel:Add(theadLabel) 

        Array<text> rubricText6
        rubricText6:Add("SetTitle(text name)*")
        rubricText6:Add("SetTitle() takes in a string as a parameter, which would be the title of the chart. For this example, we will name the chart "+dq+"Price per night with AirBnB in 2019 (NYC)"+dq+"
") 
        rubricText6:Add("chart:SetTitle("+dq+"Price per night with AirBnB in 2019 (NYC)"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText6))

        Array<text> rubricText7
        rubricText7:Add("SetXAxisTitle(text name)")
        rubricText7:Add("SetXAxisTitle() takes in a string as a parameter, which would be the label of the x axis. For this example, we will label this section "+dq+"Price ($)"+dq+" because this is the time frame we are observing") 
        rubricText7:Add("chart:SetXAxisTitle("+dq+"Price ($)"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText7))

        Array<text> rubricText8
        rubricText8:Add("SetYAxisTitle(text name)")
        rubricText8:Add("SetYAxisTitle() takes in a string as a parameter, which would be the label of the y axis. For this example, we will label this section "+dq+"Number of Stays"+dq+" because this is the factor used for comparison between the different countries. This is also a good section to label the unit we are comparing, such as dollars") 
        rubricText8:Add("chart:SetYAxisTitle("+dq+"Number of Stays"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText8))

        Array<text> rubricText9
        rubricText9:Add("SetLegendTitle(text name)")
        rubricText9:Add("SetLegendTitle() takes in a string as a parameter, which would label the legend of the chart. The legend identifies the separate countries into different lines. For this example, we will label the legend "+dq+"Cost per night"+dq+"") 
        rubricText9:Add("chart:SetLegendTitle("+dq+"Cost per Night"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText9))

        Array<text> rubricText10
        rubricText10:Add("SetSubtitle(text title)")
        rubricText10:Add("SetSubtitle() takes in a string as a parameter which would set a subtitle under the title. This can be any short description or any other necessary information for our chart. For this example, we will label the subtitle "+dq+"How expensive is it to stay in NYC?"+dq+"")
        rubricText10:Add("chart:SetSubtitle("+dq+"How expensive is it to stay in NYC?"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText10))

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Function", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))

        tableLabel:Add(tableBodyLabel)
        section_labeling:Add(tableLabel)

        section_labeling:Add(preformatter:GeneratePreformattedCode("// Give the chart a descriptive title.
chart:SetTitle("+dq+"Price per night with AirBnB in 2019 (NYC)"+dq+")

// Add a subtitle for further description.
chart:SetSubtitle("+dq+"How expensive is it to stay in NYC?"+dq+")

// Give the x axis a descriptive title.
chart:SetXAxisTitle("+dq+"Price ($)"+dq+")

// Give the y axis a descriptive title.
chart:SetYAxisTitle("+dq+"Number of Stays"+dq+")
"))

        section_labeling:AddParagraph("*Note: We will also be adjusting the font size for the title as well so it fits nicely with our histogram. For this, we will be calling the function SetTitleFontSize(integer size) with our chart object. This takes in an integer (size) as the parameter, so for this case, we will insert 20 as our parameter.")

        CodeForIDE code2
        code2:AddFileUrl("Histogram.quorum", "examples/Charts/H2.quorum")
        IDE ide1 = AddIDE()
        ide1:SetLightTheme()
        ide1:SetCodeForIDE(code2:GetJsonArray())
        ide1:SetIdeTitle("Reading in and Displaying")
        section_labeling:Add(ide1)
      

         Section section_customizing
    section_customizing:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_customizing)
    
    Heading h2_customizing = section_customizing:AddHeading("Customizing the Histogram", 2)
    h2_customizing:AddAttribute("data-text", "Customizing the Histogram")
    
    h2_customizing:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_customizing)


        section_customizing:AddParagraph("Now that we have our data labeled, we can customize our data to our liking, such as adjusting the intervals, changing starting values, and changing the color. We will be playing around with all these features and to do so, we will be again, using our chart object to call these functions. The functions we will be using for this would be: SetXTickInterval(integer num), SetXAxisMinimum(integer num), and SetColorPaletteToWarmScale(). ")

        WebTable tableCustomize = AddWebTable("Other Useful Histogram Functions")
        TableBody tableBodyCustomize = AddTableBody()
        
        Array<text> tableHeaderArrayCustomize
        tableHeaderArrayCustomize:Add("Function")
        tableHeaderArrayCustomize:Add("Description") 
        tableHeaderArrayCustomize:Add("Usage")

        TableHeader theadCustomize = AddTableHeaderRow(tableHeaderArrayCustomize)
        tableCustomize:Add(theadCustomize) 

        Array<text> rubricText11
        rubricText11:Add("SetXTickInterval(number setX)")
        rubricText11:Add("SetXTickInterval() takes in a number as a parameter and sets the interval in multiples of the setX value given. For this tutorial, we will insert 50 as the tick interval") 
        rubricText11:Add("chart:SetXTickInterval(50)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText11))

        Array<text> rubricText12
        rubricText12:Add("SetXAxisMinimum(number min)")
        rubricText12:Add("SetXAxisMinimum()  takes in a number as a parameter and adjusts the starting point for the x axis. For this tutorial, we will insert 0 as our minimum so we can see the price ranges from 0-50, 50-100, etc.") 
        rubricText12:Add("chart:SetXAxisMinimum(0)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText12))        

        Array<text> rubricText13
        rubricText13:Add("SetColorPaletteToWarmScale()")
        rubricText13:Add("SetColorPaletteToWarmScale() changes the color palette to warmer colors such as yellows, reds, and oranges.") 
        rubricText13:Add("chart:SetColorPaletteToWarmScale()")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText13))
        
        tableCustomize:Add(tableBodyCustomize)
        section_customizing:Add(tableCustomize)

        section_customizing:Add(preformatter:GeneratePreformattedCode("// You can hide the legend, as it is not needed for this example.
chart:ShowLegend(false)

// If needed, you can change the color palette to a predefined palette or create a custom one.
chart:SetColorPaletteToWarmScale()

// Set a custom interval along the x axis to 50 for a better display.
// Alternatively, you can use SetBinWidth(50) for the same result.
chart:SetXTickInterval(50)

// Start the x axis at 0 for a better display.
chart:SetXAxisMinimum(0)
"))

         CodeForIDE code3
    code3:AddFileUrl("Histogram.quorum", "examples/Charts/H3.quorum")
    IDE ide2 = AddIDE()
    ide2:SetLightTheme()
    ide2:SetCodeForIDE(code3:GetJsonArray())
    ide2:SetIdeTitle("Customizing Histograms")
    section_customizing:Add(ide1)

      Section section_display
    section_display:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_display)
    
    Heading h2_display = section_display:AddHeading("Displaying The Chart", 2)
    h2_display:AddAttribute("data-text", "Displaying The Chart")
    
    h2_display:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_display)



        section_display:AddParagraph("Congratulations, our Histogram is constructed! Now we can display our chart with the Display() function. There are two ways to do this, letting it automatically display and specifying a specific window size. By doing chart:Display() it will display in a size equal to the screen size. By doing chart:Display(num, num), it will display the chart in a respected constraint window size. We will be using the default display to show the histogram.
")

        section_display:Add(preformatter:GeneratePreformattedCode("chart:Display()"))


    Paragraph para1
    para1:AddText("Now, feel free to clean, build, and run our program and we shortly should see a Game window pop-up. This is our Histogram! To view the entire code, click ")
    
    Link link1
    link1:AddText("here")
    link1:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode/HistogramExample2.quorum")
    link1:SetTarget(link1:newTab)
    link1:SetClassAttribute("underline text-quorum-blue-150")

    para1:Add(link1)
    para1:AddText(" to view the file.")
    section_display:Add(para1) 

Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    
    CodeForIDE code4
    code4:AddFileUrl("Histogram.quorum", "examples/Charts/Histogram.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Full Histogram Example")
    section_try_yourself:Add(ide3)
   
    File f
    FileReader reader

     Section section_final
    section_final:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_final)
    
    Heading h2_final = section_final:AddHeading("Final Chart", 2)
    h2_final:AddAttribute("data-text", "Final Chart")
    
    h2_final:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_final)

    Division chart1
    chart1:SetStyle("min-width: 100px; max-width: 100%;")
    f:SetPath("html/media/tutorials/charts/histogramtutorial.svg")
    reader:OpenForRead(f)
    chart1:AddText(reader:Read())
    reader:Close()
    
    section_final:Add(chart1)

    Section section_additional
    section_additional:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_additional)
    
    Heading h2_additional = section_additional:AddHeading("Further Useful Histogram Functions", 2)
    h2_additional:AddAttribute("data-text", "Further Useful Histogram Functions")
    
    h2_additional:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_additional)

   
    WebTable tableActions = AddWebTable("Other Useful Histogram Actions")
    TableBody tableBodyActions = AddTableBody()
        
    Array<text> tableHeaderArrayActions
    tableHeaderArrayActions:Add("Function")
    tableHeaderArrayActions:Add("Description") 
    tableHeaderArrayActions:Add("Usage")

    TableHeader theadActions = AddTableHeaderRow(tableHeaderArrayActions)
    tableActions:Add(theadActions) 


    Array<text> rubricText15
        rubricText15:Add("StackBars(boolean)")
        rubricText15:Add("StackBars() will stack bars on top of each other when a group contains multiple bars. They are not stacked by default.") 
        rubricText15:Add("chart:StackBars(true)")
    tableBodyActions:Add(AddTableBodyRow(rubricText15))

    Array<text> rubricText16
        rubricText16:Add("OverlayBars(boolean)")
        rubricText16:Add("OverlayBars() will overlay bars on top of each other when a group contains multiple bars. They are not overlayed by default.") 
        rubricText16:Add("chart:OverlayBars(true)")
     tableBodyActions:Add(AddTableBodyRow(rubricText16))

    Array<text> rubricText17
        rubricText17:Add("SetBinWidth(number)")
        rubricText17:Add("SetBinWidth() will override the auto-calculated bin width with a user determined interval.") 
        rubricText17:Add("chart:SetBinWidth(10)")
     tableBodyActions:Add(AddTableBodyRow(rubricText17))

    Array<text> rubricText18
        rubricText18:Add("SeparateBySeries(integer)")
        rubricText18:Add("SeparateBySeries() will separate the chart into a grid of subcharts based on the legend (series). It takes in an integer as the number of columns in the grid. If empty, it results in a single-column grid.")
        rubricText18:Add("chart:SeparateBySeries(4)")
     tableBodyActions:Add(AddTableBodyRow(rubricText18))

    Array<text> rubricText19
        rubricText19:Add("SeparateBySeries(boolean)")
        rubricText19:Add("SeparateBySeries() will separate the chart into a grid of subcharts based on the legend (series). If set to false, it will combined the subcharts to one histogram.")
        rubricText19:Add("chart:SeparateBySeries(false)")
     tableBodyActions:Add(AddTableBodyRow(rubricText19))

        
        tableActions:Add(tableBodyActions)
        section_additional:Add(tableActions)

        Paragraph para2
        para2:AddText("To view more examples with charts, we can reference the Quorum Curriculum Repository for ")      
        
        Link link2
        link2:AddText("charts")
        link2:SetAddress("https://github.com/qorf/curriculum/tree/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode")
        link2:SetTarget(link2:newTab)
        link2:SetClassAttribute("underline text-quorum-blue-150")
        
        para2:Add(link2)
        para2:AddText(".")
        section_additional:Add(para2)


        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())

    end

    action GetMetaDescription returns text
        return "Learn about Histograms in the Quorum programming language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts,
        histogram, how to make a histogram, accessible histogram, histogram for visually impaired, histogram text to speech, 
        accessible data, normal distribution, bell curve, uniform distribution, skew, data skew, histogram skewed data, median,
        average, discrete random variable, continuous random variable, pretty histogram, easy histogram, plots, plotting, data statistics,
        statistics, histogram for students, beginner histogram, histogram tutorial")
        //AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "creating a histogram "
    end

    action GetName returns text
        return "creating a histogram"
    end

    action GetShortDescription returns text
        return "how to use the histogram chart in quorum"
    end

    action GetLocation returns text
        return "tutorials/charts/histogram.html"
    end

    action GetLinkName returns text
        return "Histograms"
    end

    action GetSectionName returns text
        return "Charts"
    end
end