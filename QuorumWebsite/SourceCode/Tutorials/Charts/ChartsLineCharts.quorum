use Libraries.Web.Page.all
use Libraries.Containers.Array
use Libraries.System.FileReader
use Libraries.System.File

class ChartsLineCharts is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Line Charts - Quorum Programming Language")
        AddDefaultHeaders()

         // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

         Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Line Charts", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Line Charts")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces how to make Line Charts in Quorum")
        bodyDiv:Add(headDiv)

        Section section_line
        section_line:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_line)
        
        Heading h2_line = section_line:AddHeading("Making a Line Chart", 2)
        h2_line:AddAttribute("data-text", "Making a Line Chart")
        
        h2_line:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_line)
        
        section_line:AddParagraph("The next chart type to learn how to create is a line chart. Line charts are a great visualization tool to use when presenting trends over time. Scientists typically use line charts to emphasize patterns of change in one or more variables of data. The dataset that we will be using for this lesson describes how much people in the US and the UK spend on Christmas on average over the years. With this graph, we can see how expensive (or inexpensive) shopping has been from 1999 to present day, and can draw conclusions about overall spending habits and price adjustments.")
        section_line:AddParagraph("First step to this process is that we will need to properly load in the dataset and format it. It is best to keep track of where we are storing our data files. For this tutorial, we will have our dataset inside of a Data folder contained in another internal folder called "+dq+"Miscellaneous." +dq+"")
        
        Paragraph para
        para:AddText("To follow along, we can download the Christmas spending dataset ")
        
        Link link
        link:AddText("here")
        link:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/Data/Miscellaneous/Christmas%20spending.csv")
        link:SetTarget(link:newTab)
        link:SetClassAttribute("underlned quorum-blue-150")
        
        para:Add(link)
        para:AddText(".")
        section_line:Add(para)

        section_line:AddParagraph("Here is a snippet of what the dataset should look like:")

         
        WebTable table = AddWebTable("Airbnb Prices in NYC CSV")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Year")
        tableHeaderArray:Add("Christmas Spending in US") 
        tableHeaderArray:Add("Christmas Spending in UK")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)    

        Array<text> rubricText1
        rubricText1:Add("1999")
        rubricText1:Add("857") 
        rubricText1:Add("945")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText2
        rubricText2:Add("2000")
        rubricText2:Add("817") 
        rubricText2:Add("926")
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("2001")
        rubricText3:Add("794") 
        rubricText3:Add("845")
        tableBody:Add(AddTableBodyRow(rubricText3))

        
        Array<text> rubricText4
        rubricText4:Add("2002")
        rubricText4:Add("690") 
        rubricText4:Add("760")
        tableBody:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("2003")
        rubricText5:Add("734") 
        rubricText5:Add("832")
        tableBody:Add(AddTableBodyRow(rubricText5))
        
        table:Add(tableBody)
        section_line:Add(table)

        
        Section section_formatting
        section_formatting:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_formatting)
        
        Heading h2_formatting = section_formatting:AddHeading("Loading and Formatting", 2)
        h2_formatting:AddAttribute("data-text", "Loading and Formatting")
        
        h2_formatting:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_formatting)


        section_formatting:AddParagraph("As mentioned previously, to load and read in the dataset, we will need to create a DataFrame component named 'frame'. Using the frame, we must use the Load function and type in the file path of the Christmas Spending CSV. Recall that a CSV is a comma separated text file that holds in data.")

        section_formatting:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.LineChart

/*
    This is an example of a Line Chart built in quorum.
    The dataset we will be working with examines how much spending people in the US and the UK 
    have spent on Christmas over the years.
*/

// create dataframe to read in data
DataFrame frame
frame:Load("+dq+"../Data/Miscellaneous/Christmas spending.csv"+dq+")
"))
        CodeForIDE code1
        code1:AddFileUrl("LineChart.quorum", "examples/Charts/LC1.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Reading in and Displaying")
        section_formatting:Add(ide)

        section_formatting:AddParagraph("Note that, we stored this dataset in a Data folder and contained in that folder is an inner folder named Science.")

        section_formatting:AddParagraph("Once the data has been loaded in, we will now extract this data to use in the data chart. We will be using two functions from our frame component, AddSelectedColumn(text header) and AddSelectedFactor(text header) where the columns will be used to label our x axis, signifying the groups we are observing and the factor will be used to label our y axis, signifying the change over time. AddSelectedColumn(text header) and AddSelectedFactor(text header) take in a parameter of either the column number or the column label in the CSV file. We will be using the column number to demonstrate.")
        section_formatting:AddParagraph("In our dataset, we have a total of three columns: the year (0), spending in the US (1), and spending in the UK (2). The numbers correspond to the columns which we will extract using AddSelectedColumns(text header) and AddSelectedFactor(text header). For this, we would call AddSelectedFactor(text header) and type in 0 inside the parameter, which grabs the year. Similarly, we would call AddSelectedColumn() and inside the parameters type 1 and 2. Note that AddSelectedColumn(text header) must be called twice to separate column 1 and column 2 from each other. The usage of these functions is shown below:")
        
        WebTable tableFormat = AddWebTable("Adding CSV columns onto Charts")
        TableBody tableBodyFormat = AddTableBody()
        
        Array<text> tableHeaderArrayFormat
        tableHeaderArrayFormat:Add("Function")
        tableHeaderArrayFormat:Add("Description") 
        tableHeaderArrayFormat:Add("Usage")
    
        TableHeader theadFormat = AddTableHeaderRow(tableHeaderArrayFormat)
        tableFormat:Add(theadFormat) 

        Array<text> rubricText6
        rubricText6:Add("frame:AddSelectedColumns(text heading)")
        rubricText6:Add("AddSelectedColumns() takes in a string that matches a column heading from our dataset. This function is used to format our axises. For this tutorial, we will be selecting two columns, specifically column 1 (spending values in the US) and column 2 (spending values in the UK).") 
        rubricText6:Add("frame:AddSelectedColumns("+dq+"heading"+dq+")")  
        tableBodyFormat:Add(AddTableBodyRow(rubricText6))   

        Array<text> rubricText7
        rubricText7:Add("frame:AddSelectedFactors(text heading)")
        rubricText7:Add("AddSelectedFactors() takes in a string that matches a column heading from our dataset. This function is used to label our dots and form the legend based off of the two variables we are comparing. For this tutorial, we will be extracting factor in column 0 (the year)")
        rubricText7:Add("frame:AddSelectedFactors("+dq+"heading"+dq+")")    
        tableBodyFormat:Add(AddTableBodyRow(rubricText7))        

        tableFormat:Add(tableBodyFormat)
        section_formatting:Add(tableFormat)

        section_formatting:AddParagraph("We should have the following code:")

        section_formatting:Add(preformatter:GeneratePreformattedCode("// grabs the average spending values and place as y-axis
frame:AddSelectedColumn(1)
frame:AddSelectedColumn(2)

// grabs the year values and place as x-axis
frame:AddSelectedFactor(0)
"))

        section_formatting:AddParagraph("
Now it is time to create the Line chart which can be done with the following code. This creates a chart object from our DataFrame component, frame. Because we want both the UK and the US data to be on the same chart, we will be calling the function SeparateByFactor(bool) and put in 'false' as the parameter to get us started. By default, the line chart will separate each line with its own graph, so to adjust that setting, we will just want to simply call the function. The rest of this lesson, we will be using the chart object we have created to change and format the rest of our line chart. 
")
        section_formatting:Add(preformatter:GeneratePreformattedCode("// create chart component inherited from the line chart library
LineChart chart = frame:LineChart()
// creates only 1 chart but both lines are on same chart
chart:SeparateByFactor(false)
chart:Display()
"))

        section_formatting:AddParagraph("Calling the Display() function will give us a pop-up of our formatted data so far. We still need to give meaning to our data, therefore, the following steps will show us how to label and customize our chart.")
        
        Section section_labeling
        section_labeling:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_labeling)
        
        Heading h2_labeling = section_labeling:AddHeading("Labeling the Line Chart", 2)
        h2_labeling:AddAttribute("data-text", "Labeling the Line Chart")
        
        h2_labeling:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_labeling)

        section_labeling:AddParagraph("In order for viewers to understand our data, labels give a clear comprehension of what is being presented. This means that we will be labeling the x axis, y axis, legend, and giving our chart a title that describes the dataset. To do so, we will call the following functions with our 'chart' object: SetTitle(text name), SetXAxisTitle(text name), SetYAxisTitle(text name), SetLegendTitle(text name), and SetSubtitle(text name). Here is a brief description on what each function does and what it takes in.")
       
        WebTable tableLabel = AddWebTable("Line Chart Labeling Functions")
        TableBody tableBodyLabel = AddTableBody()
        
        Array<text> tableHeaderArrayLabel
        tableHeaderArrayLabel:Add("Function")
        tableHeaderArrayLabel:Add("Description") 
        tableHeaderArrayLabel:Add("Usage")
    
        TableHeader theadLabel = AddTableHeaderRow(tableHeaderArrayLabel)
        tableLabel:Add(theadLabel)

        Array<text> rubricText8
        rubricText8:Add("SetTitle(text name)")
        rubricText8:Add("SetTitle() takes in a string as a parameter, which would be the title of the chart. For this example, we will name the chart "+dq+"How Much the US and UK Spend During Christmas"+dq+"")
        rubricText8:Add("chart:SetTitle("+dq+"How Much the US and UK Spend During Christmas"+dq+")")   
        tableBodyLabel:Add(AddTableBodyRow(rubricText8))     

        Array<text> rubricText9
        rubricText9:Add("SetXAxisTitle(text name)")
        rubricText9:Add("SetXAxisTitle(text name): SetXAxisTitle takes in a string as a parameter, which would be the label of the x axis. For this example, we will label this section " +dq+"Year" +dq+ " because this is the time frame we are observing.")
        rubricText9:Add("chart:SetXAxisTitle("+dq+"Year"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText9))           

        Array<text> rubricText10
        rubricText10:Add("SetYAxisTitle(text name)")
        rubricText10:Add("SetYAxisTitle() takes in a string as a parameter, which would be the label of the y axis. For this example, we will label this section "+dq+"Money Spent (in $)"+dq+" because this is the factor used for comparison between the different countries. This is also a good section to label the unit we are comparing, such as dollars.
")
        rubricText10:Add("chart:SetYAxisTitle("+dq+"Money Spent (in $)"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText10))   

        Array<text> rubricText11
        rubricText11:Add("SetLegendTitle(text name)")
        rubricText11:Add("SetLegendTitle takes in a string as a parameter, which would label the legend of the chart. The legend identifies the separate countries into different lines. For this example, we will label the legend "+dq+"Christmas Shopping Spending."+dq+"")
        rubricText11:Add("chart:SetLegendTitle("+dq+"Christmas Shopping Spending"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText11))   

        Array<text> rubricText12
        rubricText12:Add("SetSubtitle(text title)")
        rubricText12:Add("SetSubtitle takes in a string as a parameter which would set a subtitle under the title. This can be any short description or any other necessary information for our chart. For this example, we will label the subtitle "+dq+"Overtime, shopping costs have increased over the years in XMAS shopping"+dq+"")
        rubricText12:Add("chart:SetSubtitle("+dq+"Overtime, shopping costs have increased over the years in XMAS shopping"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText12))   
        
        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("Function", " "))
        rubricHeader2:Add(AddTextBoldFront("Description", " "))
        rubricHeader2:Add(AddTextBoldFront("Usage", " "))
     
        
        tableLabel:Add(tableBodyLabel)
        section_labeling:Add(tableLabel)

        section_labeling:Add(preformatter:GeneratePreformattedCode("// label your line chart
chart:SetXAxisTitle("+dq+"Year"+dq+")
chart:SetYAxisTitle("+dq+"Money Spent (in $)"+dq+")
chart:SetLegendTitle("+dq+"Christmas Shopping Spending"+dq+")
chart:SetLegendLocationToTop()
chart:SetTitle("+dq+"How Much the US and UK Spend During Christmas"+dq+")
"))
        section_labeling:AddParagraph("Note, if we would like to see the data chart so far, we can type "+dq+"chart:Display()"+dq+" to view it with the labels we created.")

        CodeForIDE code2
        code2:AddFileUrl("LieChart.quorum", "examples/Charts/LC2.quorum")
        IDE ide1 = AddIDE()
        ide1:SetLightTheme()
        ide1:SetCodeForIDE(code2:GetJsonArray())
        ide1:SetIdeTitle("Labeling the Line Chart")
        section_labeling:Add(ide1)

        
         Section section_customizing
        section_customizing:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_customizing)
        
        Heading h2_customizing = section_customizing:AddHeading("Customizing the Line Chart", 2)
        h2_customizing:AddAttribute("data-text", "Customizing the Line Chart")
        
        h2_customizing:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_customizing)
        
        section_customizing:AddParagraph("Now that we have our data labeled, we can customize our data to our liking, such as adjusting the intervals, changing starting values, and changing the color. We will be playing around with all these features and to do so, we will be again, using our chart object to call these functions. The functions we will be using for this would be: SetLegendLocationToTop(), SetColorPaletteToDisurbing(), SetFontSize(integer size), FlipOrientation(), and ShowLinearRegression(bool). Here are brief descriptions on what each function does and how to use it.")

        WebTable tableCustomize = AddWebTable("Other Useful Line Chart Functions")
        TableBody tableBodyCustomize = AddTableBody()
        
        Array<text> tableHeaderArrayCustomize
        tableHeaderArrayCustomize:Add("Function")
        tableHeaderArrayCustomize:Add("Description") 
        tableHeaderArrayCustomize:Add("Usage")

        TableHeader theadCustomize = AddTableHeaderRow(tableHeaderArrayCustomize)
        tableCustomize:Add(theadCustomize) 

        Array<text> rubricText13
        rubricText13:Add("SetXTickInterval(integer count)")
        rubricText13:Add("SetXTickInterval() takes in an integer as a parameter and sets the interval in multiples of the setX value given. For this tutorial, we will insert 5 as the tick count.")
        rubricText13:Add("chart:SetXTickInterval(5)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText13))

        Array<text> rubricText14
        rubricText14:Add("SetFontSize(integer size)")
        rubricText14:Add("SetFontSize() takes in an integer as a parameter and will set the font size on all text based on the desired input. For this tutorial, we will insert 20 as the font size.")
        rubricText14:Add("chart:SetFontSize(20)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText14))

        Array<text> rubricText15
        rubricText15:Add("SetLineDensity(number size)") 
        rubricText15:Add("SetLineDensity(number size) takes in an integer as a parameter and will adjust the thickness of the lines within the chart. For this tutorial, we will insert 4 for the density.")
        rubricText15:Add("chart:SetColorPaletteToDisturbing()")  
        tableBodyCustomize:Add(AddTableBodyRow(rubricText15))

        Array<text> rubricText16
        rubricText16:Add("SetColorPaletteToCalm()")
        rubricText16:Add("SetColorPaletteToCalm() changes the color palette to calmer colors such as lighter blues and grays. To view more options for color palettes, check out our Color Accessibility tutorial.")
        rubricText16:Add("chart:SetColorPaletteToCalm()")

        Array<text> rubricHeader3
        rubricHeader3:Add(AddTextBoldFront("Function", " "))
        rubricHeader3:Add(AddTextBoldFront("Description", " "))
        rubricHeader3:Add(AddTextBoldFront("Usage", " "))

        tableCustomize:Add(tableBodyCustomize)
        section_customizing:Add(tableCustomize) 

        section_customizing:Add(preformatter:GeneratePreformattedCode("/* this will divide up the years by 5 from all years from 1999 to 2021
*/
chart:SetXTickInterval(5)

// makes font size bigger
chart:SetFontSize(20)
// creates a thicker line for graph
chart:SetLineDensity(4)
// changes the color palette
chart:SetColorPaletteToCalm()
"))
    
         CodeForIDE code3
    code3:AddFileUrl("LineChart.quorum", "examples/Charts/LC3.quorum")
    IDE ide2 = AddIDE()
    ide2:SetLightTheme()
    ide2:SetCodeForIDE(code3:GetJsonArray())
    ide2:SetIdeTitle("Customizing Line Chart")
    section_customizing:Add(ide1)

     
    Section section_display
    section_display:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_display)
    
    Heading h2_display = section_display:AddHeading("Displaying The Chart", 2)
    h2_display:AddAttribute("data-text", "Displaying The Chart")
    
    h2_display:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_display)

        section_display:AddParagraph("Congratulations, our line chart is constructed! Now we can display our chart with the Display() function. There are two ways to do this, letting it automatically display and specifying a specific window size. By doing chart:Display() it will display in a size equal to the screen size. By doing chart:Display(number width, number height), it will display the chart in a respected constraint window size. We will be using the specified chart display for this. In this case, inside the Display parameters, we will put 1500 as the first parameter and 750 as the second parameter which will construct a display based on those dimensions.")
    bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:Display(1500, 750)"))      


    Paragraph para1
    para1:AddText("Now, feel free to clean, build, and run our program and we shortly should see a Game window pop-up. This is our Line Chart! To view the entire code, click ")
    
    Link link1
    link1:AddText("here")
    link1:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode/LineChartExample.quorum")
    link1:SetTarget(link1:newTab)
    link1:SetClassAttribute("underlined quorum-blue-150")

    para1:Add(link1)
    para1:AddText(" to view the file.")
    section_display:Add(para1)

    Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("LineChart.quorum", "examples/Charts/LineChart.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Full Line Chart Example")
    section_try_yourself:Add(ide3)


        File f
        FileReader reader
    
        Section section_final
        section_final:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_final)
        
        Heading h2_final = section_final:AddHeading("Final Chart", 2)
        h2_final:AddAttribute("data-text", "Final Chart")
        
        h2_final:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_final)
    
        Division chart1
        chart1:SetStyle("min-width: 100px; max-width: 100%;")
        f:SetPath("html/media/tutorials/charts/linecharttutorial.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        
        section_final:Add(chart1)

        Paragraph para2
        para2:AddText("To view more examples with charts, we can reference the Quorum Curriculum Repository for ")      
        
        Link link2
        link2:AddText("charts")
        link2:SetAddress("https://github.com/qorf/curriculum/tree/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode")
        link2:SetTarget(link2:newTab)
        link2:SetClassAttribute("underlined quorum-blue-150")
        
        para2:Add(link2)
        para2:AddText(".")
        section_final:Add(para2)

        
        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about creating line charts in the Quorum programming language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts,
        line chart, line charts, how to make a line chart, line graph, accessible line chart, accessible line graph, 
        text to speech line chart, p-test, z-test, data statistics, statistical analysis, trend data, data over time, 
        causation, dependant variable, independant variable, line chart maker, line plot, quantitative values, interval,
        data visualization, line graph trends, good charts, readable charts
        ")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "making a line chart"
    end

    action GetName returns text
        return "line chart"
    end

    action GetShortDescription returns text
        return "how to use the line chart in quorum"
    end

    action GetLocation returns text
        return "tutorials/charts/linechart.html"
    end

    action GetLinkName returns text
        return "Line Chart"
    end

    action GetSectionName returns text
        return "Charts"
    end
end