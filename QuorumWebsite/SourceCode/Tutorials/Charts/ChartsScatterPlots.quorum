use Libraries.Web.Page.all
use Libraries.Containers.Array
use Libraries.System.FileReader
use Libraries.System.File

class ChartsScatterPlots is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Scatter Plots - Quorum Programming Language")
        AddDefaultHeaders()

         // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Scatter Plot", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Scatter Plots")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial introduces how to make Scatter Plots in Quorum")
        bodyDiv:Add(headDiv)

        Section section_scatter
        section_scatter:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_scatter)
        
        Heading h2_scatter = section_scatter:AddHeading("Making a Scatter Plot", 2)
        h2_scatter:AddAttribute("data-text", "Making a Scatter Plot")
        
        h2_scatter:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_scatter)

        section_scatter:AddParagraph("The next chart we will be learning to create would be a scatter plot. Scatter plots are used to observe relationships between two variables. An example of this would be comparing the heights and diameters of trees, where the position of each dot correlates to that specified height and diameter. The data as a whole can represent a relationship: strong positive/negative linear, moderate positive/negative linear, or no relationship. As a data scientist, one of the most important patterns is seeing how points cluster from other points, if there are any gaps within the dataset, and identifying outliers for within the set. We focus on these aspects to make predictions on future datasets and understand trends.")

        section_scatter:AddParagraph("This next dataset we are using to create a scatter plot is about dog breeds and their traits.
        The chart will compare maximum life spans to maximum weights to see how they're related. ")

        Paragraph para
        para:AddText("To follow along, we can download the dogs dataset ")
        
        Link link
        link:AddText("here")
        link:SetAddress("https://github.com/qorf/quorum-website/blob/main/QuorumWebsite/html/data/Dogs.csv")
        link:SetTarget(link:newTab)
        link:SetClassAttribute("underline quorum-blue-150")
        
        para:Add(link)
        para:AddText(".")
        section_scatter:Add(para)

        section_scatter:AddParagraph("Here is a snippet of what the dataset should look like:")

        WebTable table = AddWebTable("Dog CSV")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Breeding Group")
        tableHeaderArray:Add("Maximum Life Span") 
        tableHeaderArray:Add("Maximum Life Span")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)    

        Array<text> rubricText1
        rubricText1:Add("Toy")
        rubricText1:Add("12") 
        rubricText1:Add("13")
        tableBody:Add(AddTableBodyRow(rubricText1))
        
        Array<text> rubricText2
        rubricText2:Add("Hound")
        rubricText2:Add("13") 
        rubricText2:Add("60")
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Terrier")
        rubricText3:Add("13") 
        rubricText3:Add("65")
        tableBody:Add(AddTableBodyRow(rubricText3))
        
        Array<text> rubricText4
        rubricText4:Add("Working")
        rubricText4:Add("12") 
        rubricText4:Add("120")
        tableBody:Add(AddTableBodyRow(rubricText4))
        
        Array<text> rubricText5
        rubricText5:Add("Working")
        rubricText5:Add("14") 
        rubricText5:Add("115")
        tableBody:Add(AddTableBodyRow(rubricText5))

        table:Add(tableBody)
        section_scatter:Add(table)

        Section section_formatting
        section_formatting:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_formatting)
        
        Heading h2_formatting = section_formatting:AddHeading("Loading and Formatting", 2)
        h2_formatting:AddAttribute("data-text", "Loading and Formatting")
        
        h2_formatting:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_formatting)


        section_formatting:AddParagraph("As mentioned previously, to load and read in the dataset, we will need to create a DataFrame component named frame. Using the frame, we must use the Load function and type in the file path of the dogs CSV. Recall that a CSV is a comma separated text file that holds in data.")

        section_formatting:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.ScatterPlot
            
DataFrame frame
frame:Load(" + dq + "data/Dogs.csv" + dq + ")"))

        section_formatting:AddParagraph("Note that, we stored this dataset in a data folder.")
        section_formatting:AddParagraph("Once the data has been loaded in, we will now extract this data to use in the data chart. We will be using two functions from our frame component, AddSelectedColumns(text heading) and AddSelectedFactors(text heading). In this instance, because scatter plots need two data variables for comparisons, we will be extracting the maximum life span and weight for the dogs using our AddSelectedColumns(text header) function. We will also be extracting dog breeds with our AddSelectedFactors(text header) function to discriminate the two variables through the dots. The usage of these two functions are shown below:")

         WebTable tableFormat = AddWebTable("Adding CSV columns onto Charts")
        TableBody tableBodyFormat = AddTableBody()

        Array<text> tableHeaderArrayFormat
        tableHeaderArrayFormat:Add("Function")
        tableHeaderArrayFormat:Add("Description") 
        tableHeaderArrayFormat:Add("Usage")
    
        TableHeader theadFormat = AddTableHeaderRow(tableHeaderArrayFormat)
        tableFormat:Add(theadFormat) 

        Array<text> rubricText6
        rubricText6:Add("frame:AddSelectedColumns(text heading)")
        rubricText6:Add("AddSelectedColumns() takes in a string that matches a column heading from our dataset. This function is used to format our axises. For this tutorial, we will be calling this function twice and extract "+dq+"Maximum Life Span"+dq+" and "+dq+"Maximum Weight."+dq+"") 
        rubricText6:Add("frame:AddSelectedColumns("+dq+"heading"+dq+")") 
        tableBodyFormat:Add(AddTableBodyRow(rubricText6))    

        Array<text> rubricText7
        rubricText7:Add("frame:AddSelectedFactors(text heading)")
        rubricText7:Add("AddSelectedFactors() takes in a string that matches a column heading from our dataset. This function is used to label our dots and form the legend based off of the two variables we are comparing. For this tutorial, we will be extracting "+dq+"Breed Group."+dq+"")
        rubricText7:Add("frame:AddSelectedFactors("+dq+"heading"+dq+")")    
         tableBodyFormat:Add(AddTableBodyRow(rubricText7))  
        
       tableFormat:Add(tableBodyFormat)
       section_formatting:Add(tableFormat)

        section_formatting:AddParagraph("We should have the following code:")

        section_formatting:Add(preformatter:GeneratePreformattedCode("// pull out selected data
frame:AddSelectedFactors(" + dq + "Breed Group" + dq + ")
frame:AddSelectedColumns(" + dq + "Maximum Life Span" + dq + ")
frame:AddSelectedColumns(" + dq + "Maximum Weight" + dq + ")"))

        section_formatting:AddParagraph("
Now it is time to create the Scatter Plot which can be done with the following code. This creates a chart object from our DataFrame component, frame. The rest of this lesson, we will be using the chart object we have created to change and format the rest of our scatter plot.
")
        section_formatting:Add(preformatter:GeneratePreformattedCode("// using the data frame, format data by creating a scatter plot chart component
ScatterPlot chart = frame:ScatterPlot()
chart:Display()
"))

        CodeForIDE code1
        code1:AddFileUrl("ScatterPlot.quorum", "examples/Charts/SC1.quorum")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Reading in and Displaying")
        section_formatting:Add(ide)

        section_formatting:AddParagraph("Calling the Display() function will give us a pop-up of our formatted data so far. We still need to give meaning to our data, therefore, the following steps will show us how to label and customize our chart.")
        
        Section section_labeling
        section_labeling:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_labeling)
        
        Heading h2_labeling = section_labeling:AddHeading("Labeling the Scatter Plot", 2)
        h2_labeling:AddAttribute("data-text", "Labeling the Scatter Plot")
        
        h2_labeling:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_labeling)

        section_labeling:AddParagraph("In order for viewers to understand our data, labels give a clear comprehension of what is being presented. This means that we will be labeling the x axis, y axis, legend, and giving our chart a title that describes the dataset. To do so, we will call the following functions with our "+dq+"chart"+dq+" object: SetTitle(text name), SetXAxisTitle(text name), SetYAxisTitle(text name), SetLegendTitle(text name), and SetSubtitle(text name). Here is a brief description on what each function does and what it takes in.")
       
        WebTable tableLabel = AddWebTable("Scatter Plot Labeling Functions")
        TableBody tableBodyLabel = AddTableBody()
        
        Array<text> tableHeaderArrayLabel
        tableHeaderArrayLabel:Add("Function")
        tableHeaderArrayLabel:Add("Description") 
        tableHeaderArrayLabel:Add("Usage")
    
        TableHeader theadLabel = AddTableHeaderRow(tableHeaderArrayLabel)
        tableLabel:Add(theadLabel)

        Array<text> rubricText8
        rubricText8:Add("SetTitle(text name)")
        rubricText8:Add("SetTitle() takes in a string as a parameter, which would be the title of the chart. For this example, we will name the chart "+dq+"Dog Weight and Life Span"+dq+"")
        rubricText8:Add("chart:SetTitle("+dq+"Dog Weight and Life Span"+dq+")")  
        tableBodyLabel:Add(AddTableBodyRow(rubricText8))      

        Array<text> rubricText9
        rubricText9:Add("SetXAxisTitle(text name)")
        rubricText9:Add("SetXAxisTitle() takes in a string as a parameter, which would be the label of the x axis. For this example, we will label this section "+dq+"Maximum Life Span"+dq+"")
        rubricText9:Add("chart:SetXAxisTitle("+dq+"Maximum Life Span"+dq+"")
        tableBodyLabel:Add(AddTableBodyRow(rubricText9))
        
        Array<text> rubricText10
        rubricText10:Add("SetYAxisTitle(text name)")
        rubricText10:Add("SetYAxisTitle() takes in a string as a parameter, which would be the label of the y axis. For this example, we will label this section "+dq+"Maximum Weight (pounds)."+dq+"  This is also a good section to label the unit we are comparing, such as pounds.
")
        rubricText10:Add("chart:SetYAxisTitle("+dq+"Maximum Weight"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText10))

        Array<text> rubricText11
        rubricText11:Add("SetLegendTitle(text name)")
        rubricText11:Add("SetLegendTitle() takes in a string as a parameter, which would label the legend of the chart. The legend identifies the separate ages for the dots. For this example, we will label the legend "+dq+"Breed Group"+dq+"
")
        rubricText11:Add("chart:SetLegendTitle("+dq+"Breed Group"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText11))

        Array<text> rubricText12
        rubricText12:Add("SetSubtitle(text title)")
        rubricText12:Add("SetSubtitle() takes in a string as a parameter which would set a subtitle under the title. 
This can be any short description or any other necessary information for our chart. For this example, we will label the subtitle "+dq+"Does weight correlate to life span for dogs?"+dq+"")
        rubricText12:Add("chart:SetSubtitle("+dq+"Does weight correlate to life span for dogs?"+dq+")")
        tableBodyLabel:Add(AddTableBodyRow(rubricText12))

       
        tableLabel:Add(tableBodyLabel)
        section_labeling:Add(tableLabel)

        section_labeling:Add(preformatter:GeneratePreformattedCode("// label your scatter plot
chart:SetXAxisTitle"+dq+"Maximum Life Span (years)"+dq+")
chart:SetYAxisTitle("+dq+"Maximum Weight (pounds)"+dq+")
chart:SetLegendTitle("+dq+"Breed Group"+dq+")
chart:SetSubtitle("+dq+"Does weight correlate to life span for dogs?"+dq+")
chart:SetTitle("+dq+"Dog Weight and Life Span"+dq+")
"))
        section_labeling:AddParagraph("Note, if we would like to see the data chart so far, we can type "+dq+"chart:Display()"+dq+" to view it with the labels we created.
")
        CodeForIDE code2
        code2:AddFileUrl("ScatterPlot.quorum", "examples/Charts/SC2.quorum")
        IDE ide1 = AddIDE()
        ide1:SetLightTheme()
        ide1:SetCodeForIDE(code2:GetJsonArray())
        ide1:SetIdeTitle("Labeling the Chart")
        section_labeling:Add(ide1)
        

        Section section_customizing
        section_customizing:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_customizing)
        
        Heading h2_customizing = section_customizing:AddHeading("Customizing the Scatter Plot", 2)
        h2_customizing:AddAttribute("data-text", "Customizing the Scatter Plot")
        
        h2_customizing:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_customizing)

       
        section_customizing:AddParagraph("Now that we have our data labeled, we can customize our data to our liking, such as adjusting the intervals, changing starting values, and changing the color. We will be playing around with all these features and to do so, we will be again, using our chart object to call these functions. The functions we will be using for this would be: SetLegendLocationToBottom(), SetColorPaletteToDisurbing(), SetFontSize(integer size), FlipOrientation(), and ShowLinearRegression(bool). Here are brief descriptions on what each function does and how to use it.")

        WebTable tableCustomize = AddWebTable("Other Useful Scatter Plot Functions")
        TableBody tableBodyCustomize = AddTableBody()
        
        Array<text> tableHeaderArrayCustomize
        tableHeaderArrayCustomize:Add("Function")
        tableHeaderArrayCustomize:Add("Description") 
        tableHeaderArrayCustomize:Add("Usage")

        TableHeader theadCustomize = AddTableHeaderRow(tableHeaderArrayCustomize)
        tableCustomize:Add(theadCustomize) 

        Array<text> rubricText13
        rubricText13:Add("SetLegendLocationToBottom()")
        rubricText13:Add("SetLegendLocationToBottom() takes in no parameters, which would be the directions, but will place the legend in a specificed place. For this example, we will place the legend on the bottom. Alternatively, you could also use SetLegendLocationToTop(), SetLegendLocationToLeft() or SetLegendLocationToRight().")
        rubricText13:Add("chart:SetLegendLocationToBottom()")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText13))

        Array<text> rubricText14
        rubricText14:Add("SetFontSize(integer size)")
        rubricText14:Add("SetFontSize() takes in an integer as a parameter and will set the font size on all text based on the desired input. For this tutorial, we will insert 30 as the font size.")
        rubricText14:Add("chart:SetFontSize(30)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText14))

        Array<text> rubricText15
        rubricText15:Add("SetColorPaletteToDisurbing()") 
        rubricText15:Add("SetColorPaletteToDisurbing() takes in no parameters, but will adjust the color palette based off of yellows, browns, oranges, and greens")
        rubricText15:Add("chart:SetColorPaletteToDisturbing()")  
        tableBodyCustomize:Add(AddTableBodyRow(rubricText15))

        Array<text> rubricText16
        rubricText16:Add("ShowLinearRegression(boolean)")
        rubricText16:Add("takes in a true or false value (boolean), and wll show the regression lines and equations for the chart")
        rubricText16:Add("chart:ShowLinearRegression(true)")
        tableBodyCustomize:Add(AddTableBodyRow(rubricText16))

        Array<text> rubricText17
        rubricText17:Add("FlipOrientation()")
        rubricText17:Add("FlipOrientation() takes in no parameters, and this function will swap the places of the x and y axis.")
        rubricText17:Add("chart:FlipOrientation()")    
        tableBodyCustomize:Add(AddTableBodyRow(rubricText17))

        Array<text> rubricHeader3
        rubricHeader3:Add(AddTextBoldFront("Function", " "))
        rubricHeader3:Add(AddTextBoldFront("Description", " "))
        rubricHeader3:Add(AddTextBoldFront("Usage", " "))

        tableCustomize:Add(tableBodyCustomize)
        section_customizing:Add(tableCustomize)


        section_customizing:Add(preformatter:GeneratePreformattedCode("// set the legend location, choices are left, right, top and bottom
chart:SetLegendLocationToBottom()

// color palette contains yellows, oranges, browns, and greens
chart:SetColorPaletteToDisturbing()

// adjust font size by preference, here we set it to 30 pt
chart:SetFontSize(30)

// if we would like to switch the x and y axis
chart:FlipOrientation()
"))

        
     CodeForIDE code3
    code3:AddFileUrl("ScatterPlot.quorum", "examples/Charts/SC3.quorum")
    IDE ide2 = AddIDE()
    ide2:SetLightTheme()
    ide2:SetCodeForIDE(code3:GetJsonArray())
    ide2:SetIdeTitle("Customizing Scatter Plot")
    section_customizing:Add(ide2)

    Section section_display
    section_display:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_display)
    
    Heading h2_display = section_display:AddHeading("Displaying The Chart", 2)
    h2_display:AddAttribute("data-text", "Displaying The Chart")
    
    h2_display:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_display)

        section_display:AddParagraph("Congratulations, our Scatter Plot is constructed! Now we can display the chart with the Display() function. There are two ways to do this, letting it automatically display and specifying a specific window size. By doing chart:Display() it will display in a size equal to the screen size. By doing chart:Display(num, num), it will display the chart in a respected constraint window size. We will be using the specified display.")
        section_display:Add(preformatter:GeneratePreformattedCode("chart:Display(1000, 750)"))      

        Paragraph para1
        para1:AddText("Now, feel free to clean, build, and run our program and we shortly should see a Game window pop-up. This is our Scatter Plot! To view the entire code, click ")
        
        Link link1
        link1:AddText("here")
        link1:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode/ScatterPlotExample.quorum")
        link1:SetTarget(link1:newTab)
        link1:SetClassAttribute("underline quorum-blue-150")
    
        para1:Add(link1)
        para1:AddText(" to view the file.")
        section_display:Add(para1)
        

        Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("ScatterPlot.quorum", "examples/Charts/ScatterPlot.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Full Scatter Plot Example")
    section_try_yourself:Add(ide3)
        

        File f
        FileReader reader
    
         Section section_final
        section_final:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_final)
        
        Heading h2_final = section_final:AddHeading("Final Chart", 2)
        h2_final:AddAttribute("data-text", "Final Chart")
        
        h2_final:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_final)
    
        Division chart1
        chart1:SetStyle("min-width: 100px; max-width: 1000;")
        f:SetPath("html/media/tutorials/charts/scatterplottutorial.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        
        section_final:Add(chart1)

         Section section_additional
    section_additional:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_additional)
    
    Heading h2_additional = section_additional:AddHeading("Further Useful Scatter Plot Functions", 2)
    h2_additional:AddAttribute("data-text", "Further Useful Scatter Plot Functions")
    
    h2_additional:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_additional)

   
    WebTable tableActions = AddWebTable("Other Useful Scatter Plot Actions")
    TableBody tableBodyActions = AddTableBody()

    
        Array<text> tableHeaderArrayActions 
        tableHeaderArrayActions:Add("Function")
        tableHeaderArrayActions:Add("Description") 
        tableHeaderArrayActions :Add("Usage")


          tableActions:Add(tableBodyActions)
        section_additional:Add(tableActions)


        Array<text> rubricText18
        rubricText18:Add("SetPointDestiny(integer num)")
        rubricText18:Add("This function takes in an integer that will adjust the size of the dots of the scatter plot")
        rubricText18:Add("chart:SetPointDensity(5)")
        tableBodyActions:Add(AddTableBodyRow(rubricText18))
  
      
        Paragraph para2
        para2:AddText("To view more examples with charts, we can reference the Quorum Curriculum Repository for ")      
        
        Link link2
        link2:AddText("charts")
        link2:SetAddress("https://github.com/qorf/curriculum/tree/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode")
        link2:SetTarget(link2:newTab)
        link2:SetClassAttribute("underline quorum-blue-150")
        
        para2:Add(link2)
        para2:AddText(".")
        section_additional:Add(para2)

       Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about creating scatter plots in the Quorum programming language."
    end

     action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts,
        scatter plot, how to make scatter plot, pretty scatter plot, scatter plot maker, easy scatter plot, accessible scatter plot,
        scattter plot text to speech, trends, scatter plot graph, cartesian coordinates, data points, dependant variable, independant variable,
        z-score, bell curve, f-test, data statistics, numerican values, scatter plot guide, positive correlarion, no correlation, negative correlation, clustering,
        data clusters, regression lines, trend lines, regression, causation, coefficient, analysis of variance, parameter, regression analysis, standard deviation, correlation,
        linear interpolation, extrapolation, line of best fit, relational data
        ")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "making a scatter plot"
    end

    action GetName returns text
        return "scatter plot"
    end

    action GetShortDescription returns text
        return "how to use the scatter plot chart in quorum"
    end

    action GetLocation returns text
        return "tutorials/charts/scatterplot.html"
    end

    action GetLinkName returns text
        return "Scatter Plots"
    end

    action GetSectionName returns text
        return "Charts"
    end
end