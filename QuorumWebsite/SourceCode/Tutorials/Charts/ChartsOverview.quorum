use Libraries.Web.Page.all
use Libraries.Containers.Array

class ChartsOverview is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Charts Overview")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Section headerSection
        Heading head = headerSection:AddHeading("Charts Overview", 1)
        head:AddAttribute("data-text", "Charts Overview")
        head:AddClassAttribute("text-3xl font-bold") 
        AddToHeadingArray(head)       
        headerSection:AddText("This tutorial introduces how to make Charts in Quorum")
        bodyDiv:Add(headerSection)

        Section section_overview
        section_overview:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_overview)
        
        Heading h2_overview = section_overview:AddHeading("Overview on the Charts Library", 2)
        h2_overview:AddAttribute("data-text", "Overview on the Charts Library")
        
        h2_overview:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_overview)
 
        section_overview:AddParagraph("When data is cleaned and ready to be presented, scientists show their data to others. When scientists do this, it is rare that they just hand a community or person a data set. Looking at the raw data can be difficult for many reasons (e.g., it is huge, it is difficult to understand). Thus, we often use charts to represent summaries of the information in our data.")
        section_overview:AddParagraph("Consider an example. We will take this example from a dataset about different dog breeds and their attributes such as maximum/minimum lifespan, maximum/minimum height, and maximum/minimum weight. Suppose we want to create a visualization about the heights of dogs based on their height from shortest to tallest by creating a line chart. It would be very clear that the Irish Wolfhound would be the tallest dog while the Yorkshire Terrier would be the shortest dog. All other dogs in the dataset would fall in-between this line. As data scientists we can observe any indication of the purpose of their breed type based on height. Data to make these predictions would be more difficult to see with just a data table. We will start by learning to load our data for the charts system.
")

         Section section_formatting
        section_formatting:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_formatting)
        
        Heading h2_formatting = section_formatting:AddHeading("Loading and Formatting Data", 2)
        h2_formatting:AddAttribute("data-text", "Loading and Formatting Data")
        
        h2_formatting:AddClassAttribute("text-2xl font-bold")
        AddToHeadingArray(h2_formatting)

        section_formatting:AddParagraph("Running our program on Quorum Studio is recommended for best practice.")

        Paragraph para
        para:AddText("To follow along, we can download the Dog.csv dataset ")
        
        Link link
        link:AddText("here")
        link:SetAddress("https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/Data/Animals/Dogs.csv")
        link:SetTarget(link:newTab)
        link:SetClassAttribute("underlined text-quorum-blue-150")
        
        para:Add(link)
        para:AddText(".")
        section_formatting:Add(para)

        section_formatting:AddParagraph("For the data to be read in, we use the DataFrame component to read in the Dogs CSV file. To do that, we include the DataFrame library and create a DataFrame:")

        section_formatting:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
DataFrame frame
frame:Load("+dq+"../Data/Animals/Dogs.csv"+dq+")
"))
        section_formatting:AddParagraph("
Note that the file structure for this tutorial is that the dog CSV file is contained in a separate Data folder contained in an internal Animals folder for organization of datasets. The Data folder should be in a separate outside the project folder but inside the main parent directory.
")
        section_formatting:AddParagraph("To format the data, we can select certain columns from our CSV file to consider in our chart. Let us try pull out the min and maximum height and weight as well as the breed group:")
        
        WebTable table = AddWebTable("Preview of Dogs.CSV file")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("Breed Group")
        tableHeaderArray:Add("Max Weight") 
        tableHeaderArray:Add("Min Weight")
        tableHeaderArray:Add("Max Height") 
        tableHeaderArray:Add("Min Height")

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)  

        Array<text> rubricText1
        rubricText1:Add("Toy")
        rubricText1:Add("13") 
        rubricText1:Add("6") 
        rubricText1:Add("12") 
        rubricText1:Add("9")
        tableBody:Add(AddTableBodyRow(rubricText1))

        Array<text> rubricText2
        rubricText2:Add("Hound")
        rubricText2:Add("60") 
        rubricText2:Add("50") 
        rubricText2:Add("27") 
        rubricText2:Add("25")
        tableBody:Add(AddTableBodyRow(rubricText2))

        Array<text> rubricText3
        rubricText3:Add("Terrier")
        rubricText3:Add("65") 
        rubricText3:Add("40") 
        rubricText3:Add("23") 
        rubricText3:Add("21")
        tableBody:Add(AddTableBodyRow(rubricText3))

        Array<text> rubricText4
        rubricText4:Add("Working")
        rubricText4:Add("120") 
        rubricText4:Add("90") 
        rubricText4:Add("34") 
        rubricText4:Add("28")
        tableBody:Add(AddTableBodyRow(rubricText4))

        Array<text> rubricText5
        rubricText5:Add("Working")
        rubricText5:Add("115") 
        rubricText5:Add("65") 
        rubricText5:Add("28") 
        rubricText5:Add("24")
        tableBody:Add(AddTableBodyRow(rubricText5))
    
        table:Add(tableBody)
        section_formatting:Add(table)

        section_formatting:AddParagraph("Taking our frame component, we use the AddSelectedFactors to create the x-axis for the chart. For the y-axis, AddSelectedColumns will be used as the comparison data to display the different data points taken from the data table. Think of this as the contents of the bars, lines, etc. of the chart. AddSelectedColumns() and AddSelectedFactors() both take in strings as a parameter or the table column number. In this example, we use the defined text headers to extract our data.")
     
        section_formatting:Add(preformatter:GeneratePreformattedCode("frame:AddSelectedFactors("+dq+"Breed Group"+dq+") // this will pull out the breed group from table and label on the x axis
frame:AddSelectedColumns("+dq+"Maximum Weight"+dq+") // this will pull out the max weight from table and label on the y axis
frame:AddSelectedColumns("+dq+"Minimum Weight"+dq+")
frame:AddSelectedColumns("+dq+"Maximum Height"+dq+")
frame:AddSelectedColumns("+dq+"Minimum Height"+dq+")"))

        section_formatting:AddParagraph("Let us run this example below!")

         Section section_try_yourself
    section_try_yourself:AddClassAttribute("flex flex-col gap-y-2")
    bodyDiv:Add(section_try_yourself)
    Heading h2_try_yourself = section_try_yourself:AddHeading("Try it Yourself!", 2)
    h2_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    h2_try_yourself:AddClassAttribute("text-2xl font-bold")
    AddToHeadingArray(h2_try_yourself)
    section_try_yourself:AddAttribute("data-text", "Try it Yourself!")
    section_try_yourself:AddParagraph("Press the blue run button to execute the code in the code editor. Press the red stop button to end the program. Your program will work when the console outputs "+dq+"Build Successful!"+dq+"")
    
    CodeForIDE code4
    code4:AddFileUrl("Charts.quorum", "examples/Charts/chartOverview1.quorum")
    IDE ide3 = AddIDE()
    ide3:SetLightTheme()
    ide3:SetCodeForIDE(code4:GetJsonArray())
    ide3:SetIdeTitle("Using the Data Frame")
    section_try_yourself:Add(ide3)

        section_try_yourself:AddParagraph("Now that we have demonstrated let's use the data we have read in and transform our data into a chart. For this example, we will be creating a chart object.  The chart we will be constructing is a bar chart in which we will need to create a 'chart' object. We will formally learn more about bar charts and how to properly construct them, but for this tutorial, we want to learn how to combine data frames with the charts.")
        
    CodeForIDE code5
    code5:AddFileUrl("Charts.quorum", "examples/Charts/chartOverview2.quorum")
    IDE ide4 = AddIDE()
    ide4:SetLightTheme()
    ide4:SetCodeForIDE(code5:GetJsonArray())
    ide4:SetIdeTitle("Constructing Our First Chart")
    section_try_yourself:Add(ide4)

        /*

        
        Array<text> rubricText8
        rubricText8:Add("Code: Comments")
        rubricText8:Add("The update screen function has a comment which clearly explains its purpose and functionality.") 
        rubricText8:Add("The update screen function has a comment which clearly explains its purpose or functionality.") 
        rubricText8:Add("A comment is present, but it does not clearly explain anything about the function.") 
        rubricText8:Add("No comments are present.")

        Array<text> rubricHeader
        rubricHeader:Add(AddTextBoldFront("No Evidence:"," Planning guide is not complete."))

        Array<text> rubricRows
        rubricRows:Add(AddTableHeaderTag(rubricHeader))
      
        rubricRows:Add(AddTableDataTag(rubricText8))

        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows), "Rubric for Practice PT Guide."))


        bodyDiv:AddImage("\media\tutorials\charts\barchart2.svg", "Image of Bar Chart")
        bodyDiv:AddParagraph("hkjfsghfsg")

        */

        
        Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)    
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about Charts Overview on Quorum Language."
    end

    action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts, graphing data,
        plotting data, plot, data points, data values, plot area, introduction to charts, charts tutorial, easy charts tutorial, 
        how to make a chart, data visualizations, what are charts, learn about charts, making accessible charts, line chart, bar chart,
        histogram, pie chart, scatter plot, violin chart, box plots, chart maker, graph maker")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "Overview"
    end

    action GetName returns text
        return "Overview"
    end

    action GetShortDescription returns text
        return "overview on charts"
    end

    action GetLocation returns text
        return "tutorials/charts/overview.html"
    end
    
    action GetLinkName returns text
        return "Charts Overview"
    end

    action GetSectionName returns text
        return "Charts"
    end
end