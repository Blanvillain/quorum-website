use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList
use Libraries.Containers.Array
use Libraries.System.FileReader
use Libraries.System.File

class ChartsViolinPlots is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Violin Plots - Quorum Programming Language")
        AddDefaultHeaders()

         // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Charts", 1)
        headDiv:AddText("This tutorial introduces how to make Charts in Quorum")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        
        bodyDiv:AddHeading("Making a Violin Chart", 2)

        bodyDiv:AddParagraph("The next chart that we will discuss is a Violin Plot. A violin plot is a mix of 2 plots, a box plot and a density plot. Violin plots are used to visualize the distribution of numerical data. Because the violin plot is a mixture of two plots, it can show summary statistics and the density of each variable. Let's talk about the structure of a violin plot: the white dot represents the median of the dataset, the thick black bar represents the interquartile range, and a thin black bar represents the rest of the distribution, except for the outliers. On each side of the black bar is a density estimation that shows the shape of the data's distribution. The skinnier sections of the violin plot represent a lower probability, while wider sections represent a higher probability.")

        bodyDiv:AddParagraph("The dataset that we will use in this example to create a violin plot is about the minimum and maximum lifespan of the various cat breeds.")

        bodyDiv:AddText("To follow along, we can download the Cats dataset ")
        bodyDiv:AddLink("here", "https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/Data/Animals/Cats.csv")
        bodyDiv:AddText(".")

        bodyDiv:AddParagraph("Here is a snippet of what the dataset should look like:")

        Array<text> rubricText1
        rubricText1:Add("Abyssinian")
        rubricText1:Add("14.0") 
        rubricText1:Add("15.0")
        
        
        Array<text> rubricText2
        rubricText2:Add("Aegean")
        rubricText2:Add("9.0") 
        rubricText2:Add("12.0")


        Array<text> rubricText3
        rubricText3:Add("American Bobtail")
        rubricText3:Add("11.0") 
        rubricText3:Add("15.0")

        
        Array<text> rubricText4
        rubricText4:Add("American Curl")
        rubricText4:Add("12.0") 
        rubricText4:Add("16.0")

        
        Array<text> rubricText5
        rubricText5:Add("American Shorthair")
        rubricText5:Add("15.0") 
        rubricText5:Add("17.0")

        
        Array<text> rubricHeader
        rubricHeader:Add(AddTextBoldFront("Name", " "))
        rubricHeader:Add(AddTextBoldFront("Minimum Life Span", " "))
        rubricHeader:Add(AddTextBoldFront("Maximum Life Span", " "))

        Array<text> rubricRows
        rubricRows:Add(AddTableHeaderTag(rubricHeader))
      
        rubricRows:Add(AddTableDataTag(rubricText1))
        rubricRows:Add(AddTableDataTag(rubricText2))
        rubricRows:Add(AddTableDataTag(rubricText3))
        rubricRows:Add(AddTableDataTag(rubricText4))
        rubricRows:Add(AddTableDataTag(rubricText5))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows), "Cats CSV"))

        bodyDiv:AddHeading("Loading and Formatting", 2)

        bodyDiv:AddParagraph("As mentioned previously, to load and read in the dataset, we will need to create a DataFrame component named frame. Using the frame, we must use the Load function and type in the file path of the insurance CSV. Recall that a CSV is a comma separated text file that holds in data.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.ViolinPlot

/*
    This is an example of a simple violin plot in quorum.
    The data collected is about chicks' weight that depends on their sex and the type of feed they were consuming.
*/

// create dataframe to read in data
DataFrame frame
frame:Load("+dq+"../Data/Animals/Cats.csv"+dq+")
"))

        bodyDiv:AddParagraph("Note that, we stored this dataset in a Data folder, and contained in that folder is an inner folder named Animals.")

        bodyDiv:AddParagraph("Once the data has been loaded in, we will now extract this data to use in the data chart. We will be using two functions from our frame component, AddSelectedColumns(text header) and AddSelectedFactors(text header) where the columns will be used to label our x axis, signifying the groups we are observing and the factor will be used to label our y axis, signifying the change over time. AddSelectedColumn(text header) and AddSelectedFactor(text header) take in a parameter of either the column number or the column label in the CSV file. We will be using the column number to demonstrate.")
        
        bodyDiv:AddParagraph("Please note that for a Violin Plot, we will only be using the AddSelectedColumns(text header) because we would like to count the totals range of the minimum and maximum lifespan of cats. AddSelectedColumns(text header) will take a string as the parameter which represents the text header in the data file. Usage is shown below:")        

        Array<text> rubricText6
        rubricText6:Add("frame:AddSelectedColumns(text heading)")
        rubricText6:Add("AddSelectedColumns() takes in a string that matches a column heading from our dataset. This function is used to format our axises. For this tutorial, we will be calling this function twice and extract "+dq+"Minimum Life Span"+dq+" and "+dq+"Maximum Life Span."+dq+"") 
        rubricText6:Add("frame:AddSelectedColumns("+dq+"heading"+dq+")")      
        
        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Function", " "))
        rubricHeader1:Add(AddTextBoldFront("Description", " "))
        rubricHeader1:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))
      
        rubricRows1:Add(AddTableDataTag(rubricText6))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "Adding CSV columns onto Charts"))

        bodyDiv:AddParagraph("We should have the following code:")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// pull out selected data, for this we will be categorizing by life span
frame:AddSelectedColumns("+dq+"Minimum Life Span"+dq+")
frame:AddSelectedColumns("+dq+"Maximum Life Span"+dq+")
"))

        bodyDiv:AddParagraph("
Now it is time to create the Violin Plot which can be done with the following code. This creates a chart object from our DataFrame component, frame. The rest of this lesson, we will be using the chart object we have created to change and format the rest of our line chart.
")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("
// using the data frame, format data by creating a violin plot chart component
ViolinPlot chart = frame:ViolinPlot()
chart:Display()
"))

        AddIDE(bodyDiv,"V1","Violin Plots: Reading in Data and Displaying","Example of loading our data and creating violin plot object","examples/Charts/V1.quorum")

        bodyDiv:AddParagraph("Calling the Display() function will give us a pop-up of our formatted data so far. We still need to give meaning to our data, therefore, the following steps will show us how to label and customize our chart.")
   
        bodyDiv:AddHeading("Labeling the Violin Plot",2)

        bodyDiv:AddParagraph("In order for viewers to understand our data, labels give a clear comprehension of what is being presented. This means that we will be labeling the x axis, y axis, legend, and giving our chart a title that describes the dataset. To do so, we will call the following functions with our 'chart' object: SetTitle(), SetXAxisTitle(text title), SetYAxisTitle(text title), SetLegendTitle(text title), and SetSubtitle(text title). Here is a brief description on what each function does and what it takes in.")
        Array<text> rubricText7
        rubricText7:Add("SetTitle(text name)")
        rubricText7:Add("SetTitle() takes in a string as a parameter, which would be the title of the chart. For this example, we will name the chart "+dq+"Minimum and Maximum Life Expectancy for Various Cat Breeds"+dq+"")
        rubricText7:Add("chart:SetTitle("+dq+"Minimum and Maximum Life Expectancy for Various Cat Breeds"+dq+")")        

        Array<text> rubricText8
        rubricText8:Add("SetXAxisTitle(text name)")
        rubricText8:Add("SetXAxisTitle() takes in a string as a parameter, which would be the label of the x axis. For this example, we will label this section "+dq+"Min/Max Lifespan"+dq+"")
        rubricText8:Add("chart:SetXAxisTitle("+dq+"Min/Max Lifespan"+dq+"")
        
        Array<text> rubricText9
        rubricText9:Add("SetYAxisTitle(text name)")
        rubricText9:Add("SetYAxisTitle() takes in a string as a parameter, which would be the label of the y axis. For this example, we will label this section "+dq+"Type of Extrema."+dq+"
")
        rubricText9:Add("chart:SetYAxisTitle("+dq+"Type of Extrema"+dq+")")

        Array<text> rubricText10
        rubricText10:Add("SetLegendTitle(text name)")
        rubricText10:Add("SetLegendTitle() takes in a string as a parameter, which would label the legend of the chart. The legend identifies the separate ages for the dots. For this example, we will label the legend "+dq+"Age Group"+dq+"
")
        rubricText10:Add("chart:SetLegendTitle("+dq+"Age Group"+dq+")")

        Array<text> rubricText11
        rubricText11:Add("SetSubtitle(text title)")
        rubricText11:Add("SetSubtitle() takes in a string as a parameter which would set a subtitle under the title. This can be any short description or any other necessary information for our chart. For this example, we will label the subtitle "+dq+"How long do cats live?"+dq+"")
        rubricText11:Add("chart:SetSubtitle("+dq+"How long do cats live?"+dq+")")

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("Function", " "))
        rubricHeader2:Add(AddTextBoldFront("Description", " "))
        rubricHeader2:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))
      
        rubricRows2:Add(AddTableDataTag(rubricText7))
        rubricRows2:Add(AddTableDataTag(rubricText8))
        rubricRows2:Add(AddTableDataTag(rubricText9))
        rubricRows2:Add(AddTableDataTag(rubricText10))
        rubricRows2:Add(AddTableDataTag(rubricText11))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Labeling Charts"))        

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// label your violin plot
chart:SetXAxisTitle"+dq+"Min/Max Lifespan"+dq+")
chart:SetYAxisTitle("+dq+"Age"+dq+")
chart:SetLegendTitle("+dq+"Type of Extrema"+dq+")
chart:SetSubtitle("+dq+"How long do cats live?"+dq+")
chart:SetTitle("+dq+"Minimum and Maximum Life Expectancy for Various Cat Breeds"+dq+")
"))
        bodyDiv:AddParagraph("Note, if we would like to see the data chart so far, we can type "+dq+"chart:Display()"+dq+" to view it with the labels we created.
")
        
        AddIDE(bodyDiv,"V2","Violin Plots: Labeling","Example of labeling our violin plot","examples/Charts/V2.quorum")

        bodyDiv:AddHeading("Customizing the Data Chart", 2)
        
        bodyDiv:AddParagraph("Now that we have our data labeled, we can customize our data to our liking, such as adjusting the intervals, changing starting values, and changing the color. We will be playing around with all these features and to do so, we will be again, using our chart object to call these functions. The functions we will be using for this would be: SetLegendLocation(text location), SetColorPaletteToDisurbing(), SetFontSize(integer size), and FlipOrientation(). Here are brief descriptions on what each function does and how to use it.")

        Array<text> rubricText12
        rubricText12:Add("SetLegendLocation(text location)")
        rubricText12:Add("SetLegendLocation() takes in a string as a parameter, which would be the directions, left, right, top or bottom. These directions would place the legend in the specified place. For this example, we will place the legend on the "+dq+"bottom"+dq+"")
        rubricText12:Add("chart:SetLegendLocation("+dq+"Legend Location"+dq+")")

        Array<text> rubricText13
        rubricText13:Add("SetFontSize(integer size)")
        rubricText13:Add("SetFontSize() takes in an integer as a parameter and will set the font size on all text based on the desired input. For this tutorial, we will insert 20 as the font size.")
        rubricText13:Add("chart:SetFontSize(20)")

        Array<text> rubricText14
        rubricText14:Add("SetColorPaletteToDisurbing()") 
        rubricText14:Add("SetColorPaletteToDisurbing() takes in no parameters, but will adjust the color palette based off of yellows, browns, oranges, and greens")
        rubricText14:Add("chart:SetColorPaletteToDisturbing()")  

        Array<text> rubricText15
        rubricText15:Add("FlipOrientation()")
        rubricText15:Add("FlipOrientation() takes in no parameters, and this function will swap the places of the x and y axis.")
        rubricText15:Add("chart:FlipOrientation()")    

        Array<text> rubricHeader3
        rubricHeader3:Add(AddTextBoldFront("Function", " "))
        rubricHeader3:Add(AddTextBoldFront("Description", " "))
        rubricHeader3:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows3
        rubricRows3:Add(AddTableHeaderTag(rubricHeader3))
      
        rubricRows3:Add(AddTableDataTag(rubricText12))
        rubricRows3:Add(AddTableDataTag(rubricText13))
        rubricRows3:Add(AddTableDataTag(rubricText14))
        rubricRows3:Add(AddTableDataTag(rubricText15))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows3), "Customizing Charts")) 


        bodyDiv:Add(preformatter:GeneratePreformattedCode("// set the legend location, choices are left, right, top and bottom
chart:SetLegendLocation("+dq+"bottom"+dq+")

// color palette contains yellows, oranges, browns, and greens
chart:SetColorPaletteToDisturbing()

// adjust font size by preference, here we set it to 30 pt
chart:SetFontSize(20)

// if we would like to switch the x and y axis
chart:FlipOrientation()
"))

        AddIDE(bodyDiv,"V3","Violin Plots: Customization","Example of customizing our violin plot","examples/Charts/V3.quorum")

        bodyDiv:AddParagraph("Congratulations, our Violin Plot is constructed! Now we can display our chart with the Display() function. There are two ways to do this, letting it automatically display and specifying a specific window size. By doing chart:Display() it will display in a size equal to the screen size. By doing chart:Display(num, num), it will display the chart in a respected constraint window size. We will be using the specified display.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:Display(1000, 750)"))      

         bodyDiv:AddParagraph(" ")
    bodyDiv:AddText("Now, feel free to clean, build, and run our program and we shortly should see a Game window pop-up. This is our Violin Plot! To view the entire code, click ") 
    bodyDiv:AddLink("here ", "https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode/ViolinExample1.quorum")
    bodyDiv:AddText("to view the file.")

        AddIDE(bodyDiv,"ViolinPlot","Creating a Violin Plots","Full Example of the Violin Plot","examples/Charts/ViolinPlot.quorum")
    
        bodyDiv:AddParagraph(" ")
    
        File f
        FileReader reader
    
        bodyDiv:AddHeading("Final Chart", 2)
    
        Division chart1
        chart1:SetStyle("min-width: 200px; max-width: 800px")
        f:SetPath("html/media/tutorials/charts/violionchart1.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        
        bodyDiv:Add(chart1)

        bodyDiv:AddHeading("Further Useful Violin Plot Functions",2)
        Array<text> rubricText16
        rubricText16:Add("SetBandWidth(integer num)")
        rubricText16:Add("This function takes in an integer that will make a violin chart more or less exaggerated.")
        rubricText16:Add("chart:SetBandWidth(1)")

        Array<text> rubricText17
        rubricText17:Add("IsSplit(boolean value)")
        rubricText17:Add("This function takes in a boolean that will split the violins if there are two violin charts in a group.")
        rubricText17:Add("chart:IsSplit(false)")
        
  
        Array<text> rubricHeader4
        rubricHeader4:Add(AddTextBoldFront("Function", " "))
        rubricHeader4:Add(AddTextBoldFront("Description", " "))
        rubricHeader4:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows4
        rubricRows4:Add(AddTableHeaderTag(rubricHeader4))
      
        rubricRows4:Add(AddTableDataTag(rubricText16))
        rubricRows4:Add(AddTableDataTag(rubricText17))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows4), "Extra Functions")) 

        bodyDiv:AddParagraph("")
        bodyDiv:AddText("To view more examples with charts, we can reference the Quorum Cirriculum Repository for ")
        bodyDiv:AddLink("charts","https://github.com/qorf/curriculum/tree/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode")
        bodyDiv:AddText(".")
        bodyDiv:AddParagraph(" ")
        
        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about creating violin plots in the Quorum programming language."
    end

     action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts,
        violin plot, violin chart, how to make violin chart, accessible violin chart, violin chart accessible, easy violin plot, 
        violin chart text to speech, readable violin chart, plotting data, numerical plot data, density curves, frequency, normal distrubution, 
        experimental conditions, median, quartiles, lower quartile, upper quartile, kernel function, kernels, bell curves, data structure, kernel density estimation,
        hybrid plots, hybrid graphs, what is a violin chart, pretty violin chart
        ")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "making a violin plot"
    end

    action GetName returns text
        return "violin plot"
    end

    action GetShortDescription returns text
        return "how to use the violin plot chart in quorum"
    end

    action GetLocation returns text
        return "tutorials/charts/violinplot.html"
    end
end