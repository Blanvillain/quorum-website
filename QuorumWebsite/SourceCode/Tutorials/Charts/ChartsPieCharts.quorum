use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.OrderedList
use Libraries.Containers.Array
use Libraries.System.FileReader
use Libraries.System.File

class ChartsPieCharts is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        //html header stuff
        SetWebPageTitle("Pie Charts - Quorum Programming Language")
        AddDefaultHeaders()

         // The VersionHelper has up-to-date query strings for the source files.
        // The query strings don't modify the file at all, but will prevent the cache from returning an old version of the file.
        VersionHelper versions

        // add necessary scripts
        AddScript("/script/quorumCharts.js" + versions:GetChartsScriptVersionQuery())

        // add necessary styles
        AddStylesheet("/style/quorumCharts.css" + versions:GetChartsStyleVersionQuery())

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Charts", 1)
        headDiv:AddText("This tutorial introduces how to make Charts in Quorum")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        
        bodyDiv:AddHeading("Making a Pie Chart", 2)

        bodyDiv:AddParagraph("The next chart to learn is the pie chart. Pie charts are used to see parts-to-whole relationships such as totaling the favorite types of movie genres out of a survey of 100 people. Pie charts divide up a circle into various slices in which each slice represents a percentage of the total variable being represented.  The dataset that we will be using for this lesson describes wine reviews in which we can observe the various popular wine types.
")

        bodyDiv:AddParagraph("First step to this process is that we will need to properly load in the dataset and format it. It is best to keep track of where we are storing our data files. For this tutorial, we will have our dataset inside of a Data folder contained in another internal folder called "+dq+"Miscellaneous."+dq+"")

        bodyDiv:AddText("To follow along, we can download the wineReviews.csv dataset ")
        bodyDiv:AddLink("here", "https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/Data/Miscellaneous/wineReviews.csv")
        bodyDiv:AddText(".")

        bodyDiv:AddParagraph("Here is a snippet of what the dataset should look like:")

         Array<text> rubricText5
        rubricText5:Add("California")
        rubricText5:Add("Napa Valley") 
        rubricText5:Add("Cabernet Sauvignon")
      

        Array<text> rubricText6
        rubricText6:Add("Northern Spain")
        rubricText6:Add("Toro") 
        rubricText6:Add("Tinta de Toro")
    

        Array<text> rubricText7
        rubricText7:Add("California")
        rubricText7:Add("Knights Valley") 
        rubricText7:Add("Sauvignon Blanc")

        Array<text> rubricText8
        rubricText8:Add("Oregon")
        rubricText8:Add("Willamette Valley") 
        rubricText8:Add("Pinot Noir")

        Array<text> rubricText9
        rubricText9:Add("Provence")
        rubricText9:Add("Bandol") 
        rubricText9:Add("Provence red blend")

        Array<text> rubricHeader1
        rubricHeader1:Add(AddTextBoldFront("Province", " "))
        rubricHeader1:Add(AddTextBoldFront("Region 1", " "))
        rubricHeader1:Add(AddTextBoldFront("Variety", " "))
   
        Array<text> rubricRows1
        rubricRows1:Add(AddTableHeaderTag(rubricHeader1))
      
        rubricRows1:Add(AddTableDataTag(rubricText5))
        rubricRows1:Add(AddTableDataTag(rubricText6))
        rubricRows1:Add(AddTableDataTag(rubricText7))
        rubricRows1:Add(AddTableDataTag(rubricText8))
    rubricRows1:Add(AddTableDataTag(rubricText9))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows1), "wineReviews.csv"))

        bodyDiv:AddHeading("Loading and Formatting", 2)

        bodyDiv:AddParagraph("As mentioned previously, to load and read in the dataset, we will need to create a DataFrame component named "+dq+"frame"+dq+". Using the frame, we must use the Load function and type in the file path of the wine reviews CSV. Recall that a CSV is a comma separated text file that holds in data.")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Statistics.DataFrame
use Libraries.Interface.Controls.Charts.PieChart

// create dataframe to read in data
DataFrame frame
frame:Load("+dq+"../Data/Miscellaneous/wineReviews.csv"+dq+")
"))

        bodyDiv:AddParagraph("Once the data has been loaded in, we will now extract this data to use in the data chart. We will be using the function, AddSelectedFactors(text header) to format our data into the pie chart. AddSelectedFactors(text header) will take in a string value that matches a column header to the dataset. For instance, we will be extracting the "+dq+"variety"+dq+" column from the dataset.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// pull out selected data, for this we will be categorizing by wine type
frame:AddSelectedFactors("+dq+"variety"+dq+")"))

        bodyDiv:AddParagraph("Now it is time to create the Pie Chart which can be done with the following code. This creates a chart object from our DataFrame component, frame. The rest of this lesson, we will be using the chart object we have created to change and format the rest of our line chart. ")
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode("// pull out selected data, for this we will be categorizing by wine type
frame:AddSelectedFactors("+dq+"variety"+dq+")
// create chart component inherited from the line chart library
PieChart chart = frame:PieChart()
chart:Display()"))

    AddIDE(bodyDiv,"P1","Pie Charts: Reading in Data and Displaying","Example of loading our data and creating our pie chart object","examples/Charts/P1.quorum")

    bodyDiv:AddHeading("Labeling the Pie Chart", 2)
    bodyDiv:AddParagraph("Pie charts are unique because there actually is no need to label an x axis or y axis. The different variables within the genre group we are using separates into parts that we can examine as a whole. For this part, we will focus on learning how to label our chart title and our legend title. Additionally, we will also change the orientation of our legend within the pie chart. The functions we would be using in this case are: SetTitle(text title), SetLegendTitle(text title), SetLegendLocation(text title), and SetSubtitle(text title). Here is a brief description of what each function takes in.
")

     Array<text> rubricText1
        rubricText1:Add("SetTitle(text name)")
        rubricText1:Add("SetTitle() takes in a string as a parameter, which would be the title of the chart. For this example, we will name the chart "+dq+"Top Wine Reviews Based on Type."+dq+"
") 
        rubricText1:Add("chart:SetTitle("+dq+"Title Name"+dq+")")


     Array<text> rubricText2
        rubricText2:Add("SetLegendTitle(text name)")
        rubricText2:Add("SetLegendTitle() takes in a string as a parameter, which would label the legend of the chart. The legend identifies the separate countries into different lines. For this example, we will label the legend "+dq+"Variety."+dq+"") 
        rubricText2:Add("chart:SetLegendTitle("+dq+"Legend Description"+dq+")")

     Array<text> rubricText3
        rubricText3:Add("SetLegendLocation(text location)")
        rubricText3:Add("SetLegendLocation() takes in a string as a parameter, which would be the directions, left, right, top or bottom. These directions would place the legend in the specified place. For this example, we will place the legend on the "+dq+"bottom."+dq+"
") 
        rubricText3:Add("chart:SetLegendLocation("+dq+"Legend Location"+dq+")")

     Array<text> rubricText4
        rubricText4:Add("SetSubtitle(text title)")
        rubricText4:Add("SetSubtitle takes in a string as a parameter which would set a subtitle under the title. This can be any short description or any other necessary information for our chart. For this example, we will label the subtitle "+dq+"Praised wine categorized by type"+dq+"
") 
        rubricText4:Add("chart:SetSubtitle("+dq+"Praised wine categorized by type"+dq+")
")

        Array<text> rubricHeader
        rubricHeader:Add(AddTextBoldFront("Function", " "))
        rubricHeader:Add(AddTextBoldFront("Description", " "))
        rubricHeader:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows
        rubricRows:Add(AddTableHeaderTag(rubricHeader))
      
        rubricRows:Add(AddTableDataTag(rubricText1))
        rubricRows:Add(AddTableDataTag(rubricText2))
        rubricRows:Add(AddTableDataTag(rubricText3))
        rubricRows:Add(AddTableDataTag(rubricText4))
        
        bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows), "Labeling Pie Charts"))

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// create title to describe graph
chart:SetTitle("+dq+"Top Wine Reviews Based on Type"+dq+")

// label your legend to show users what is being categorized
chart:SetLegendTitle("+dq+"Variety"+dq+")
chart:SetSubtitle("+dq+"Praised wine categorized by type"+dq+")
// set the legend location, choices are left, right, top and bottom
chart:SetLegendLocation("+dq+"bottom"+dq+")
"))

       AddIDE(bodyDiv,"P2","Pie Charts: Labeling","Example of labeling our pie chart","examples/Charts/P2.quorum")

       bodyDiv:AddHeading("Customizing The Data Chart",2)

       bodyDiv:AddParagraph("Now that we have our data labeled, we can customize our data to our liking, such as adjusting the font size, changing the color palette, and creating a hole in the middle of our pie chart. We will be playing around with all these features and to do so, we will be again, using our chart object to call these functions. The functions we will be using for this would be: SetDonutHolePercent(), SetFontSize(), and SetColorPaletteToPositive()")
        
       Array<text> rubricText10
        rubricText10:Add("SetDonutHolePercent(float percent)")
        rubricText10:Add("SetDonutHolePercent() takes in a decimal value which will adjust the size of the hole in relation to the size of the pie chart. Larger percentages will make the hole bigger and smaller percentages will make the hole smaller. For this tutorial, let us make our hole 10%") 
        rubricText10:Add("chart:SetDonutHolePercent(0.6) // sets hole size to 60% of chart")

        Array<text> rubricText11
        rubricText11:Add("SetColorPaletteToPositive()")
        rubricText11:Add("SetColorPaletteToPositive() takes in no parameters, but will adjust the color palette based on a positive color scale including bright oranges, greens, pinks, and yellows") 
        rubricText11:Add("chart:SetColorPaletteToPositive()")

        Array<text> rubricText12
        rubricText12:Add("SetFontSize(integer size)")
        rubricText12:Add("SetFontSize() takes in an integer as a parameter and will set the font size on all text based on the desired input. For this tutorial, we will insert 20 as the font size.") 
        rubricText12:Add("chart:SetFontSize(20)")
       

        Array<text> rubricHeader2
        rubricHeader2:Add(AddTextBoldFront("Function", " "))
        rubricHeader2:Add(AddTextBoldFront("Description", " "))
        rubricHeader2:Add(AddTextBoldFront("Usage", " "))

        Array<text> rubricRows2
        rubricRows2:Add(AddTableHeaderTag(rubricHeader2))
      
        rubricRows2:Add(AddTableDataTag(rubricText10))
        rubricRows2:Add(AddTableDataTag(rubricText11))
        rubricRows2:Add(AddTableDataTag(rubricText12))
 
       bodyDiv:AddParagraph(AddTableTag(AddRowTag(rubricRows2), "Custom Pie Chart Functions"))

        bodyDiv:Add(preformatter:GeneratePreformattedCode("// creates a hole in the middle of the pie chart (optional feature)
chart:SetDonutHolePercent(0.1)

// adjust font size by preference, here we set it to 20 pt
chart:SetFontSize(20)

/* change color palette if needed, this color palette is set to 
   Colorgorical which helps give our graphs aesthetic and discriminable color palettes
*/
//chart:SetColorPaletteToNegative()
//chart:SetColorPaletteToCalm()
//chart:SetColorPaletteToMagma()
//chart:SetColorPaletteToColorgorical()
chart:SetColorPaletteToPositive()
"))

     AddIDE(bodyDiv,"P3","Pie Charts: Customizing","Example of customizing our pie chart","examples/Charts/P3.quorum")

 bodyDiv:AddHeading("Displaying The Chart", 2)
 bodyDiv:AddParagraph("Congratulations, our Pie Chart is constructed! Now we can display our chart with the Display() function. There are two ways to do this, letting it automatically display and specifying a specific window size. By doing chart:Display() it will display in a size equal to the screen size. By doing chart:Display(num, num), it will display the chart in a respected constraint window size. We will be using the default display to show the histogram.")

 bodyDiv:Add(preformatter:GeneratePreformattedCode("chart:Display()"))

  bodyDiv:AddParagraph(" ")
    bodyDiv:AddText("Now, feel free to clean, build, and run our program and we shortly should see a Game window pop-up. This is our Pie Chart! To view the entire code, click ") 
    bodyDiv:AddLink("here ", "https://github.com/qorf/curriculum/blob/main/Reference/DataScience/Charts%20(New)/DataScienceCurric/SourceCode/PieChartExample3.quorum")
    bodyDiv:AddText("to view the file.")

    bodyDiv:AddHeading("Run the program",2)
    AddIDE(bodyDiv,"PieChart","Creating a Pie Chart","Full Example of the Pie Chart","examples/Charts/PieChart.quorum")

        bodyDiv:AddParagraph(" ")

        File f
        FileReader reader
    
        bodyDiv:AddHeading("Final Chart", 2)
    
        Division chart1
        chart1:SetStyle("min-width: 200px; max-width: 800px")
        f:SetPath("html/media/tutorials/charts/piechart3.svg")
        reader:OpenForRead(f)
        chart1:AddText(reader:Read())
        reader:Close()
        
        bodyDiv:Add(chart1)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about creating a pie chart in the Quorum programming language."
    end

     action AddKeywords
        MetaData keywords
        keywords:AddAttribute("name", "keywords")
        keywords:AddAttribute("content", "charts, acessibility, charts for accessibility, accessible charts,
        pie chart, pie graph, donut chart, donut graph, how to make a pie chart, pie chart maker, accessible pie chart,
        accessible pie graph, data analysis, slice, data slice, percentages, create a pie chart, circular graph, pie slices,
        relative data, data sectors, population size, sample size, bias, statistical summary, statistical summary of data, correlation,
        ratio, pie chart text to speech, easy pie chart, good pie chart, pretty pie chart
        ")
        AddMetaData(keywords)
    end

    action GetSummaryName returns text
        return "Creating a Pie Chart"
    end

    action GetName returns text
        return "Creating a Pie Chart"
    end

    action GetShortDescription returns text
        return "how to use pie charts in quorum studios"
    end

    action GetLocation returns text
        return "tutorials/charts/piechart.html"
    end
end