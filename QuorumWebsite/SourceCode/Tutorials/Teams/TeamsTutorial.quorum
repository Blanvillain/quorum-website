use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Link
use Libraries.Web.Page.Image

class TeamsTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper
    text imageSize = "75%"
    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Coding in Teams - Quorum Programming Language")
        AddDefaultHeaders()

        //page header
        Division headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Tutorial: Coding in Teams", 1)
        headDiv:AddText("How to start using Git to code in teams.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        bodyDiv:AddHeading("Introduction To Git/Version Control", 2)
        bodyDiv:AddParagraph(   "Often when working on programming projects, we work in teams and we want to have access to older versions. "
                            +   "Perhaps the most common way to meet both goals in industry is to use a type of program called " + dq + "version control." + dq 
                            +   " In this tutorial, we will discuss one way of collaborating on teams with version control using a system called Git.")


        //the section on git
        bodyDiv:AddHeading("What is Git?", 3)
        bodyDiv:AddParagraph(   "One of the most common methods of collaborating and tracking work is through a version control system, like Git. "
                            +   "Git's purpose is to make continuous backups of code, to provide access to those backups and to coordinate changes made by different people "
                            +   "so that everybody stays synchronized. The general idea is to make it more difficult to lose work that is being completed on a project "
                            +   "and to be able to quickly revert to previous versions. Given that real-world projects are almost always completed on a team, "
                            +   "Git allows collaboration among many programmers on a single project. "
                            +   "The system works by having a common repository stored on a networked server which keeps a master copy of the source code and project files. "
                            +   "Team members can " + dq + "pull" + dq + " a copy to their local environment, which means they download a copy of the code from the web to work on. "
                            +   "Once developers obtain the source code, they can make changes and send them back (through a process called committing and pushing). "
                            +   "Doing this by hand, by emailing files back and forth for example, would be complicated and prone to error. Git handles all of this for us automatically.")

        //the section on getting started
        bodyDiv:AddHeading("Getting Started", 3)
        bodyDiv:AddParagraph(   "Git is supported in Quorum Studio 2.0 and above. To start using Git, "
                            +   "we need to download a copy of the code " + dq + "repository." + dq 
                            +   " A repository is a set of files online that we can pull (download) from and push (upload) to. "
                            +   "Several websites are available to store shared code repositories, including two of the more common ones: Github and Bitbucket.")

        //the section on bitbucket
        bodyDiv:AddHeading("Bitbucket", 4)

        bodyDiv:AddText(   "Bitbucket is one of the most popular websites used to host Git repositories. "
                            +   "Bitbucket allows users to have unlimited public and private repositories for teams of up to five people. "
                            +   "To sign up with Bitbucket, navigate to the ")
        bodyDiv:AddLink("Bitbucket website", "https://bitbucket.org")
        bodyDiv:AddText(        " and use the the Get Started link at the top of the page. "
                            +   "Once there, we will need to enter our information to make an account.")


        //the section on github
        bodyDiv:AddHeading("Github", 4)
        bodyDiv:AddText(   "Github is another popular option for hosting Git repositories. To sign up with Github, "
                            +   "we can navigate to the ")
        bodyDiv:AddLink("Github website", "https://github.com")
        bodyDiv:AddText(        " and select the Sign Up link at the top of the page. Again, we enter our information to create the account."
                            + " Both websites are supported within Quorum Studio.")

        //the section on starting a repository
        bodyDiv:AddHeading("Starting a Repository", 3)
        bodyDiv:AddParagraph(   "Before we can start using Git to manage our project, we need to set up a location on our Bitbucket or Github account for our code to go. "
                            +   "To do this, we need to create a repository on our Bitbucket or Github account for our project." )
        bodyDiv:AddParagraph(   "If we are using Github, look for the link that says " + dq + "+ New repository." + dq 
                            +   " This link is located above the list of any already-existing repositories we may have.")
        bodyDiv:AddImage("/media/tutorials/newRepoGithub.png", "This is an image of the new Repository Github")
        bodyDiv:AddParagraph(   "If we are using Bitbucket, the link to create a new repository is under the Repositories navigation bar. "
                            +   "Select " + dq + "Create Repository" + dq + " and then follow the instructions to create the repository. "
                            +   "(The keyboard shortcut to create a new respository is: " + dq + "c" + dq + " and then " + dq + "r" + dq + ")")
        bodyDiv:AddImage("/media/tutorials/newRepoBitbucket.png", "This is an image of the new Repository Bitbucket")
        bodyDiv:AddParagraph(   "Follow the instructions and fill in the necessary information in order to set up the new repository. "
                            +   "Typically, it will ask for a repository name and whether the repository is public or private. "
                            +   "A private repository is a repository that can only be seen by people that you specifically give access to. "
                            +   "A public repository is a repository that can be viewed by anyone.")

        //the section on cloning a repository
        bodyDiv:AddHeading("Cloning a Repository", 3)
        bodyDiv:AddParagraph(   "Once we have a repository created on Bitbucket or Github, we need to get a copy of it on our local machine by " + dq + "cloning." + dq 
                            +   " Cloning a repository downloads all of the files from that repository, typically from the Internet. "
                            +   "To clone a repository, we first locate it (or one from another person) and then we look for its address. "
                            +   "Just like websites, git repositories have their own address. In Bitbucket, this link is located at the top of the page of the repository towards the right. "
                            +   "In Github, it is also located near the top of the page towards the right. Here's an example of a repository:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "https://bitbucket.org/stefika/quorum-language.git"))
        bodyDiv:AddParagraph(   "The above is the Git repository for Quorum itself.")
        bodyDiv:AddImage("/media/tutorials/cloneBitbucket.png", "This is an image of the cloneBitbucket")
        bodyDiv:AddImage("/media/tutorials/cloneGithub.png", "This is an image of the cloneGithub")
        bodyDiv:AddParagraph(   "First, copy the link to clone the repository 
        from the browser and then switch to Quorum Studio, go to the Team tab in the Menu bar and select Clone.")
        Image image = bodyDiv:AddImage("/media/tutorials/quorumStudioClone.png", "This is an image of the netbeansClone")
        bodyDiv:AddParagraph(   "In the pop up window, add the link you copied from the repository in the box for Repository URL, "
                            +   "the username and password for your Github or Bitbucket account and the location to save the repository. When complete, select next.")
        image:SetWidth(imageSize)
        bodyDiv:AddImage("/media/tutorials/cloneRepo.png", "This is an image of the cloneRepo")
        image:SetWidth(imageSize)
//        bodyDiv:AddParagraph(   "In the next window that appears select the branch you wish to use. In the screenshot, the " + dq + "Master" + dq + " branch is selected. "
//                            +   "In simple projects we often only have a single branch, so we can usually just select Master. "
//                            +   "In more complicated projects, however, branches are used to provide alternate versions of the code, often during development of new features.")
//        bodyDiv:AddImage("/media/tutorials/cloneBranch.png", "This is an image of the cloneBranch")
//        bodyDiv:AddParagraph(   "Finally, you are asked to chose a parent directory and a name for the cloned project. Clicking finish allows us to clone the project.")
//        bodyDiv:AddImage("/media/tutorials/cloneDestination.png", "This is an image of the cloneDestination")
//        bodyDiv:AddParagraph(   "Once the project is cloned, a pop up window will ask if you wish to open the project.")
//        bodyDiv:AddImage("/media/tutorials/openClone.png", "This is an image of the openClone")

        bodyDiv:AddParagraph("Once the project is cloned, you will need to open the project.")
        //the section on adding/removing files
        bodyDiv:AddHeading("Adding/Removing Files", 3)
        bodyDiv:AddParagraph(   "When we create new files, Git needs to be told to track 
            these new files in the repository. We can use the Add menu item under teams 
            to add files from the project. We can also select Add Project Files, which adds all changed source files.")
//                            +   "Fortunately, Netbeans automatically informs Git to add or remove any files from our repository depending on our changes.")

        //the section on committing
        bodyDiv:AddHeading("Committing", 3)
        bodyDiv:AddParagraph(   "After we have finished modifying a file, we are ready to send our changes back to the server. This involves a two-step process: 1) committing, and 2) pushing. "
                            +   "Committing tells Git that we want to store a new version locally, meaning on our machine. "
                            +   "We can think of a commit like a " + dq + "snapshot" + dq + " of our project at a particular time (e.g., version 1, version 2, version 3). "
                            +   "To commit changes to a project, we open the Team tab in the navigation bar, then select Commit.")
        image = bodyDiv:AddImage("/media/tutorials/commitButton.png", "This is an image of the commitButton")
        image:SetWidth(imageSize)
        bodyDiv:AddParagraph(   "A pop up window will ask us to add a commit message. A commit message is something we write to remind people what was changed. "
                            +   "Keep in mind that messages written are public, meaning anyone on the project (e.g., our teacher, our friends, the world) can see them. "
                            +   "As such, we should keep commit messages respectful.")
        image = bodyDiv:AddImage("/media/tutorials/commitMessage.png", "This is an image of the commitMessage")
        image:SetWidth(imageSize)
//        bodyDiv:AddParagraph(   "Below the box for adding a commit message is a list of all the files we are committing changes to. "
//                            +   "NetBeans provides us this list to help identify what was changed in our new versions. If there is a file here we don’t want to save changes to, "
//                            +   "we can uncheck the checkbox next to the file. In the list, a green filename is a newly added file and a blue filename is an existing modified file.")
//        bodyDiv:AddImage("/media/tutorials/commitFiles.png", "This is an image of the commitFiles")
//        bodyDiv:AddParagraph(   "Clicking the commit button completes the commit. We have now saved our " + dq + "snapshot" + dq + " of our project.")

        //the section on naming and layout conventions
        bodyDiv:AddHeading("Pushing", 3)
        bodyDiv:AddParagraph(   "Typically, after committing changes to a project, we want to send the source code back to the server. "
                            +   "We call this a " + dq + "push." + dq + " A push is an action that takes the files of our project from our local computer and uploads them to the repository, "
                            +   "usually one located on the Internet. In our case, this other repository is on the server at Bitbucket or Github. "
                            +   "Once the repository is pushed our files are backed up and protected if something were to happen our computer. "
                            +   "As an additional benefit, by regularly committing and pushing our files back to a server, "
                            +   "others on a software development team can obtain our updates by doing a pull." )
        bodyDiv:AddParagraph(   "To push, we first need to set our username and password. We do this by 
            opening the project properties for the project we are pushing to and going to the Teams tab. 
            We then enter our username, password, and optionally our name and email, into the text fields. 
            We then press OK and select Push from the Team menu. Once complete, information is output in the console.")
        image = bodyDiv:AddImage("/media/tutorials/pushWindow.png", "This image shows the teams tab in the project properties window.
            It contains four fields for username, password, name, and email.")
        image:SetWidth(imageSize)

//        bodyDiv:AddParagraph(   "At this stage, a window will now appear asking us to choose which local branch to push to the repository to. "
//                            +   "Most likely, there will only be one option, called " + dq + "master," + dq + " which we will leave as the default. Click next.")
//        bodyDiv:AddImage("/media/tutorials/pushBranchLocal.png", "This is an image of the pushBranchLocal")
//        bodyDiv:AddParagraph(   "Another window will appear asking us which remote branch to push our code to. Again, for this tutorial there is only one option, which we leave as it is. "
//                            +   "Next, we select the Finish button.")
//        bodyDiv:AddImage("/media/tutorials/pushBranchRemote.png", "This is an image of the pushBranchRemote")
//        bodyDiv:AddParagraph(   "One final window will appear for this new repository. This window asks us to confirm whether we want to create the link between our own local "
//                            +   "(on our computer) repository and the remote (on another computer, like the servers for our Github or Bitbucket account) repository. "
//                            +   "We want to be able to send the code back to the server, so we select yes.")
//        bodyDiv:AddImage("/media/tutorials/pushLink.png", "This is an image of the pushLink")
        bodyDiv:AddParagraph(   "We have now completed our first push! Our team members can now get access to the code we've been writing by cloning "
                            +   "if they are just setting their project up for the first time. If they already have the project repository cloned on their local machine, "
                            +   "they can update with our changes by " + dq + "pulling" + dq + " the current version of the repository, which we will talk about next.")

        //the section on naming and layout conventions
        bodyDiv:AddHeading("Pulling", 3)
        bodyDiv:AddParagraph(   "Similar to how pushing is the way to upload our changes to the repository, pulling downloads the latest updates from an existing repository "
                            +   "to our local machine. Typically, when other team members are writing code and pushing it, we want to stay up to date, so we pull down the changes, "
                            +   "integrate them into our local project, and then push back our own changes." )
        bodyDiv:AddParagraph(   "To pull a project, under the Team menu select Pull. Information about the request will be sent to the console.")
        image = bodyDiv:AddImage("/media/tutorials/pullWindow.png", "This is an image of the Team menu open with Pull highlighted.")
        image:SetWidth(imageSize)

//        bodyDiv:AddParagraph(   "Like before, for this tutorial, the only option in our next window is Master, the default. We continue by selecting Finish.")
//        bodyDiv:AddImage("/media/tutorials/pullBranch.png", "This is an image of the pullBranch")
        bodyDiv:AddParagraph(   "With pushing and pulling, it is often customary to pull from a repository when we start working on the project for the day. " 
                            +   "When we make any important changes that we want to keep, we commit those changes. When we are done working on a project for the day, "
                            +   "we push all of our changes to the remote repository. This is not required, but it's a reasonable and typical way to control source code on a project.")

        //the section on naming and layout conventions
        bodyDiv:AddHeading("Merging and Merge Conflicts", 3)
        bodyDiv:AddParagraph(   "Occasionally when working with Git, we encounter Merging and Merge Conflicts. "
                            +   "These can be confusing and are caused by multiple team members changing the same files in the repository. "
                            +   "They can be avoided by team members being aware of what parts of the code they are working on in comparison to their colleagues, to prevent overlap. "
                            +   "They can still come up though, so we need to know how to resolve them." )
        bodyDiv:AddParagraph(   "When we push or pull from a repository, Git tries to reconcile all the differences between the code in the two locations, "
                            +   "that is, the code on our computer and the code on the remote one. Most of the time, it is able to tell where differences are and how to put the two versions "
                            +   "of the file(s) together. Sometimes, however, two or more versions have made changes to the same line, and Git cannot know which line is intended, "
                            +   "so it can not properly merge the files. This is where a conflict happens." )
//        bodyDiv:AddParagraph(   "In another situation, another team member pushed a change to a repository before we have done a new pull. "
//                            +   "This means we will need to do a merge commit to put multiple versions of a repository together. "
//                            +   "In this case, a pop up window will explain the situation. Selecting the Merge option on this window allows us to merge the two versions. "
//                            +   "In this window is a separate option called rebasing. Rebasing is an advanced topic that is rarely necessary and should be researched before attempting.")
//        bodyDiv:AddImage("/media/tutorials/mergeNeeded.png", "This is an image of the mergeNeeded")
//        bodyDiv:AddParagraph(   "After selecting " + dq + "Merge," + dq + " if there were merge conflicts, another window will open telling us that the attempt to merge "
//                            +   "the two files produced one. It asks us if we want to resolve the differences manually. Select the option to review the differences.")
//        bodyDiv:AddImage("/media/tutorials/mergeConflict.png", "This is an image of the mergeConflict")
//
//        bodyDiv:Add(break)
        bodyDiv:AddText(   "The file or files that caused the merge conflict are shown in the text editor of the IDE, 
                and Git has made some additions to the file(s). "
                            +   "These changes are marked by " + dq + "conflict markers" + dq + " which are a set of ")

        CodeBlock cb1
        CodeBlock cb2
        CodeBlock cb3
        CodeBlock cb4
        CodeBlock cb5
        cb1:AddText("<<<<<<< HEAD")
        cb2:AddText(">>>>>>> origin/master")
        cb3:AddText("=======")
        cb4:AddText("<<<<<<<")
        cb5:AddText(">>>>>>>")
        bodyDiv:Add(cb1)
        bodyDiv:AddText(            " and ")
        bodyDiv:Add(cb2)
        bodyDiv:AddText(            " with a ")
        bodyDiv:Add(cb3)
        bodyDiv:AddText(            " between them. The ")
        bodyDiv:Add(cb4)
        bodyDiv:AddText(            " marks the beginning or the part of the code where the conflict occurs and the ")
        bodyDiv:Add(cb5)
        bodyDiv:AddText(            " marks the end of the part of the code where the conflict occurs. Below the ")
        bodyDiv:Add(cb1)
        bodyDiv:AddText(            " line is the line or lines of code from our file that have caused the merge conflict. The two conflicting parts are divided with the ")
        bodyDiv:Add(cb3)
        bodyDiv:AddText(            " symbols. Below this line is the line or lines of code from the file on the remote computer that have caused the conflict. Below these line(s) is the ")
        bodyDiv:Add(cb2)
        bodyDiv:AddText(            " origin/master marking the end of the conflict area. We know that the symbols chosen here make little sense. "
                            +   "Unfortunately, while version control can be very helpful, this is one of its quirks.")

//        bodyDiv:AddImage("/media/tutorials/mergeConflictUnresolved.png", "This is an image of the mergeConflictUnresolved")
        bodyDiv:AddText(   "We now have a few options to fix the conflict. First, we must remove the conflict separators from our file; that is, "
                            +   "we must remove the lines with the ")
        bodyDiv:Add(cb4)
        bodyDiv:AddText(    ", ")
        bodyDiv:Add(cb3)
        bodyDiv:AddText(    ", and ")
        bodyDiv:Add(cb5)
        bodyDiv:AddText(    " symbols. We can then choose to keep our change to the file by removing the line or lines that our team member changed. Alternatively, we can choose to keep the change our team member made and remove the line or lines that we changed. A third option is to come up with a solution that keeps both changes if both changes are needed. We should follow these steps in order to resolve any other merge conflicts that exist. Once we are done resolving the conflicts, we should save our file to keep the changes.")
//        bodyDiv:AddImage("/media/tutorials/mergeConflictResolved.png", "This is an image of the mergeConflictResolved")
        bodyDiv:AddParagraph(   "Once we have saved our file, we should commit and push our project so that all of our hard work in resolving the merge conflict "
                            +   "is saved for everyone else to see. Committing and pushing after a merge conflict is the same as committing and pushing any other changes, "
                            +   "so we follow the same steps. The only difference is that the commit message for a merge conflict by default says that it is a merge commit "
                            +   "and which files caused the merge conflict.")

        //the section on Additional Information
        bodyDiv:AddHeading("Additional Information", 2)
        bodyDiv:AddParagraph(   "Git is a useful and practical way to collaborate on teams. "
                            +   "One useful resource in understanding it is the free Pro Git book:")

        bodyDiv:Add(break)


        Link link
        link:SetAddress("https://progit.org")
        link:AddText("Pro Git book")
        Bold proGitBook
        proGitBook:Add(link)
        bodyDiv:Add(proGitBook)

        bodyDiv:AddParagraph(   "This book, available online, provides a very in-depth description of what Git is and how to use it. "
                            +   "It mainly focuses on using Git via the command line, which has more features available than Quorum Studio
                                does out of the box. We suggest that reading through chapter 3 is sufficient for almost all anyone, even up to
                                professional programmers.")

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn more about programming in teams using version control in the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Teams"
    end

    action GetImageLocation returns text
        return "/media/TeamsAndVersionControl.png"
    end

    action GetName returns text
        return "Teams and version control"
    end

    action GetShortDescription returns text
        return "how to work with a team"
    end

    action GetLocation returns text
        return "tutorials/language/teamsAndVersionControl.html"
    end
end