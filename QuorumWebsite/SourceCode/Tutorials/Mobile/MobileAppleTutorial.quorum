use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.Link

class MobileAppleTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Apple Devices - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Using Quorum on Apple iOS Devices", 1)
        headDiv:AddText("Quorum can be compiled to run on Apple Devices.")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Prerequisites", 2)
        bodyDiv:AddParagraph("Before putting Quorum programs onto iOS devices, there are a few things needed in addition to the regular tools for Quorum:")
        UnorderedList unorderedList0
        bodyDiv:Add(unorderedList0)
        ListItem listItem1
        unorderedList0:Add(listItem1)
        listItem1:AddText("A Mac running on OS X. (Apple requires iPhone programs to be made on Macs.)")
        ListItem listItem2
        unorderedList0:Add(listItem2)
        listItem2:AddText("An iOS device (such as an iPhone or iPad).")
        ListItem listItem3
        unorderedList0:Add(listItem3)
        listItem3:AddText("Xcode version 7 or later. You can download or update this from the App Store on your Mac.")
        ListItem listItem4
        unorderedList0:Add(listItem4)
        listItem4:AddText("An Apple ID. If you don’t already have one, you can sign up for one for free at ")
        Link link
        link:SetAddress("https://appleid.apple.com")
        link:AddText("appleid.apple.com")

        listItem4:Add(link)
        bodyDiv:AddHeading("Writing the Quorum Program", 2)
        bodyDiv:AddParagraph("Once everything is ready, the first step is to write the Quorum program. The program needs to use the Game class to work properly on iOS devices. For this tutorial, we will make a new Quorum project using the " + dq + "Game Application" + dq + " template, however, you could use any existing Quorum game project. You can find complete steps to making a new Quorum project in the Getting Started with Quorum tutorial.")
        bodyDiv:AddHeading("Using Xcode to Set Up a Development Profile", 2)
        bodyDiv:AddParagraph("In order to put any program on an iOS device, Apple 
        requires developers to set up a profile. This tutorial will use a free 
        development profile, using an Apple ID. This will allow you to create an 
        app and put it on a phone directly connected to your computer. Note that 
        you won’t be able to distribute the app remotely or submit it to the App 
        Store with this free profile; you will need to get a paid developer’s 
        license from Apple for that. To set up your free profile, open Xcode. 
        Under the Xcode navigation menu, go to Preferences. Choose the Accounts 
        tab in the Preferences window.")
        bodyDiv:AddImage("/media/windows/AccountsTab.png","The Accounts Tab.")
        bodyDiv:AddParagraph("In the bottom-left corner there is a button marked with a 
        plus symbol. Click the button and select " + dq + "Add Apple ID" + dq + ". The 
        window that appears will ask you to login with your Apple ID. Enter your 
        account information and then select " + dq + "Sign In" + dq + ". If you 
        don’t have an Apple ID, you can select " + dq + "Create Apple ID" + dq + " to 
        set one up, or you can create one for free at appleid.apple.com. Once signed in, the account tab should look like this:")
        bodyDiv:AddImage("/media/windows/AccountWithUser.png","The Account With User.")
        bodyDiv:AddParagraph("If your Apple ID is not already selected in the column on the left, select it now. Then use the " + dq + "View Details" + dq + " button in the bottom right corner of the window. This will open a new window that will allow you to create a signing identity to use for your developer profile.")
        bodyDiv:AddImage("/media/windows/SigningIdentities.png","The Signing Identities.")
        bodyDiv:AddParagraph("In the row that reads " + dq + "iOS Development" + dq + ", select the " + dq + "Create" + dq + " button. The button should become gray and disabled. Choose " + dq + "Done" + dq + " at the bottom of the window to return to the Preferences page.")
        
        bodyDiv:AddHeading("Creating a Provisioning Profile", 2)
        bodyDiv:AddParagraph("Although the account is now set up in Xcode, we 
            still need to create a provisioning profile for the program. A 
            provisioning profile is an identifier that is made for a single 
            iOS program. It’s used to show who developed it, and that it 
            hasn’t been changed. To create a provisioning profile, we’ll need to 
            use Xcode to make a dummy iOS project. Although this won’t be used 
            as part of the final program, making a project in Xcode will let 
            us create the provisioning profile, as well as test to make sure 
            we can connect to the iOS device. In Xcode, navigate to File > New > Project (or 
            use the hotkey SHIFT-COMMAND-N). In the window that appears, 
            select " + dq + "iOS Application" + dq + " in the left column, 
            and " + dq + "Single View Application" + dq + " in the pane on the right.")
        bodyDiv:AddImage("/media/windows/NewXcodeProject.png","The New Xcode Project.")
        bodyDiv:AddParagraph("Select " + dq + "Next" + dq + " in the bottom right to continue to the next screen. You will now be asked to choose options for your Xcode project. In order to properly create a provisioning profile we can use for the Quorum program, these options will need to be exactly correct. If the options are incorrect, the created profile won’t match with the finished program.")

        bodyDiv:AddParagraph("The first field is the Product Name. In this field, you 
        should provide the exact name of the class in the main file of your Quorum 
        project. By default, this is Main, but you could set it to a different file. The second field is the Organization Name. Put a name 
        here that identifies you as the developer of this program. This field isn’t 
        critical; you can put anything here. The third field is the Organization Identifier. This 
        field is used to package your code, and so it has to be exact. The first part 
        of the identifier must be " + dq + "quorum" + dq + " (all lower case). If your 
        main file does not have a package name, then this is all that’s required here. 
        However, if your main file does have a package name, it has to go next. For 
        example, if your main file in your Quorum project uses the line of 
        code " + dq + "package MyGame" + dq + ", then your organization identifier 
        would look like " + dq + "quorum.MyGame" + dq + ".")

        bodyDiv:AddParagraph("Below this is the Bundle Identifier. This is not a field 
        you can edit, but it’s instead automatically created using the Product Name 
        and Organization Identifier. It should always read as " + dq + "quorum" + dq + 
        " (all lower case) followed by a period, followed by the name of the main 
        file’s package and a period (if your main file has a package), followed 
        by the name of the class in your main file. The next field is the Language. This should be set to 
        Objective-C, which should typically be the default setting. Below this is the Devices field. Keep this set to 
        Universal. This will allow the Quorum project to run on both iPhone and iPad devices. Below all these fields should be several checkboxes 
        that should default to being unchecked. Keep them as their default settings. For a default project, the options should look like 
        below. Click " + dq + "Next" + dq + " to choose a destination for your Xcode project.")
        bodyDiv:AddImage("/media/windows/XcodeProjectOptions.png","The Xcode Project Options.")
        bodyDiv:AddParagraph("You can put the Xcode project anywhere convenient on your system. Once you have selected a location, the project should be created and the main Xcode window will open.")
        bodyDiv:AddImage("/media/windows/XcodeMainScreen.png","The Xcode Main Screen.")
        bodyDiv:AddParagraph("Before continuing, the iOS device needs to be contected to the machine. First, plug in your device. Once your system has recognized the device, go to the top bar in Xcode and navigate to Product > Destination > (the name of your connected device).")
        bodyDiv:AddImage("/media/windows/SelectDevice.png","The Select Device.")
        bodyDiv:AddParagraph("Now that you have selected the device, generate the provisioning profile and run dummy Xcode project.")
        bodyDiv:AddParagraph("In the central pane of the window, there should be a section labeled " + dq + "Identity" + dq + ". At the bottom of this section there should be a warning that says " + dq + "No matching provisioning profiles found" + dq + ". Choose the " + dq + "Fix Issue" + dq + " button below it.")
        bodyDiv:AddParagraph("Once you choose " + dq + "Fix Issue" + dq + ", you will be asked to select a development team to use. Select the one that corresponds to your Apple ID you entered earlier, then select the " + dq + "Choose" + dq + " button.")
        bodyDiv:AddImage("/media/windows/ChooseDevelopmentTeam.png","The Choose Development Team.")
        bodyDiv:AddParagraph("After you select " + dq + "Choose" + dq + ", you should return to the main project window, and the warning should be gone.")

        bodyDiv:AddHeading("Running the Dummy Xcode Project", 2)
        bodyDiv:AddParagraph("Now, we can test the dummy Xcode application on the 
        device. This step will ensure that your profile is fully set up and that 
        you can successfully place an app on your device. To do this, choose the 
        Run button, select Run from the Product menu in the top navigation bar, 
        or use the Run hotkey (COMMAND-R). The dummy Xcode project should install 
        itself on the device and launch. Xcode may prompt you to unlock your device 
        to complete installation.")

        bodyDiv:AddParagraph("If the program runs without issue, you can skip to the 
        next section. However, you may receive a message stating that your program 
        could not be launched because your developer app certificate is not trusted 
        on the device. If this happens, open the Settings on your device, then 
        navigate to General > Device Management, and select your Apple ID. From 
        this menu you can verify the app developer. The app should then run.")
        bodyDiv:AddParagraph("When you run the app, it should do nothing but open a 
        blank screen. This is because that’s all the templated project we made in 
        Xcode is meant to do. You have now confirmed that the development environment 
        is set up to put apps on the device.")

        bodyDiv:AddHeading("Using the Developer Information for the Quorum Project", 2)
        bodyDiv:AddParagraph("In order to run the Quorum project on iPhone, you need to retrieve the information we used for the Xcode project. Two pieces of information are nedded: the provisioning profile used for the program, and the signing identity that identifies the developer.")

        bodyDiv:AddHeading("Finding the Provisioning Profile", 3)
        bodyDiv:AddParagraph("To find the provisioning profile, open up the Preferences 
        from the Xcode menu in the top navigation bar. Select the Accounts tab and 
        find your Apple ID. Then select " + dq + "View Details" + dq + " at the 
        bottom of the right pane. On the bottom half of the window, there should now be 
        an entry in the " + dq + "Provisioning Profiles" + dq + " area. Right click 
        it and select " + dq + "Show in Finder" + dq + ".")
        bodyDiv:AddImage("/media/windows/FindProvisioningProfile.png","The Find Provisioning Profile.")
        bodyDiv:AddParagraph("This will open Finder with the provisioning profile highlighted. The profile is actually a single file with a long name of random letters and numbers, you will need to know what the name of this file is when telling Sodbeans to compile the program for iOS.")
        bodyDiv:AddImage("/media/windows/ProvisioningProfile.png","The Provisioning Profile.")

        bodyDiv:AddHeading("Finding the Signing Identity", 3)
        bodyDiv:AddParagraph("To find the signing identity, open the Keychain Access 
        app on the machine. This can also be done using Spotlight Search (click the 
        magnifying glass on the right side of the top navigation bar, or use the hotkey 
        COMMAND-SPACE) and searching for " + dq + "Keychain Access" + dq + ". In Keychain Access, make sure Login is selected under 
        the Keychains column, and My Certificates selected under the Category column. 
        The signing identity that corresponds to your Apple ID will appear here.")
        bodyDiv:AddImage("/media/windows/FindSigningIdentity.png","The Find Signing Identity.")

        bodyDiv:AddHeading("Building the Quorum Project for iOS", 2)
        bodyDiv:AddParagraph("Open the Quorum project in Sodbeans.")
        bodyDiv:AddParagraph("You will not make a folder to hold any assets 
        that the program may need. Right click on the project in the project window, 
        and select New > Folder. Name the folder anything you want, but for this 
        example we will name it " + dq + "Assets" + dq + ".")
        bodyDiv:AddParagraph("Right click on the project in the project
        window again, and select " + dq + "Properties" + dq + ". A window will 
        appear with several properties. In the " + dq + "Category" + dq + " column 
        on the left, select " + dq + "Mobile" + dq + ". There will be three 
        properties needed to be set here. The first property is Resources. This is the 
        location of the folder containing all of the program files and resources. 
        For this tutorial, provide it with the folder that we just created. The second property is iPhone Provisioning 
        Key. This is where you provide Quorum with the provisioning profile made 
        earlier. Give it the full name of the provisioning profile, not 
        including any file extension. The third property is iPhone Signing Identity. 
        This provides Quorum the signing identity for this program. Again, you need 
        the full name of the identity (including the combination of letters and 
        numbers in parenthesis at the end).")
        bodyDiv:AddImage("/media/windows/MobileProperties.png","The Mobile Properties.")
        bodyDiv:AddParagraph("Once the properties are filled in, select " 
+ dq + "OK" + dq + ". You are ready to build the Quorum project.")
        bodyDiv:AddParagraph("In the project window, right click your project 
again, and select " + dq + "Send to iPhone Application" + dq + ". Compiling a 
program to run on iPhone is a slow process, so this may take a few minutes.")
        bodyDiv:AddImage("/media/windows/SendToIPhone.png","The Send To IPhone.")
        bodyDiv:AddParagraph("Once it’s finished, you will have three new files inside the " + dq + "Run" + dq + " folder of your project. Each of these files should have a name matching the bundle identifier you gave Xcode earlier when you built the dummy project.")
        
        bodyDiv:AddHeading("Running the Quorum Program on your Device", 2)
        bodyDiv:AddParagraph("Now that the program is built, it has to be 
        put on a device to run. If your iOS device isn’t connected to the machine, 
        connect it now. You need to use Xcode to put the program on the 
        connected device. Open Xcode again, then in the top navigation bar, go to 
        Window > Devices (or use the hotkey SHIFT-COMMAND-2). Select your device 
        in the left pane. If you haven’t already deleted it from your 
        device, you should see the dummy app we installed earlier under the " + dq + 
        "Installed Apps" + dq + " section. Select it and click the minus button to 
        uninstall the program. The " + dq + "Installed Apps" + dq + " section 
        should now be empty.")
        bodyDiv:AddImage("/media/windows/DevicWindow.png","The Device Window")

        bodyDiv:AddParagraph("Now to install the Quorum program. Select the plus 
        button at the bottom of the " + dq + "Installed Apps" + dq + " section. 
        This will open a file navigator. When the Quorum project was built, it placed three 
        new files in the " + dq + "Run" + dq + " folder of the project directory. 
        Each of these files should have the same name as the bundle identifier in 
        the dummy Xcode project. Select and open the file with the " + dq + ".ipa" + 
        dq + " file extension. If you now try to run the app on your device, you may 
        receive a message stating that the developer is not trusted. If so, you can 
        fix this issue by going to the device settings and going to General > Device 
        Management and selecting your Apple ID. Your app should now successfully be installed on your device.")

        bodyDiv:AddHeading("Advanced iPhone work from the console", 2)
        bodyDiv:AddParagraph("While working with iPhone applications is built into 
        Sodbeans directly, in some rare cases we may want to create an iPhone 
        application (called a .ipa file) from the console. This is being added for 
        users who choose to work through the console. Keep in mind that using the console will still 
        require the same developer information the other approach uses. You must 
        have a provisioning profile and a signing identity to create a valid .ipa 
        file, whether it is through Sodbeans or the command line. There are two different commands for doing this, 
        both of which require a zip file with an executable inside of it to do the 
        conversion called RoboVM. Download our version of the zip here. First, 
        however, we have to open a terminal.")

        bodyDiv:AddHeading("Open a terminal on Mac", 3)
        bodyDiv:AddParagraph("There are several ways to open a terminal. First, we can use Mac's spotlight search feature. In it, type " + dq + "Terminal," + dq + " then hit enter, one will open. Second, to get to a terminal, you can go to Applications > Utilities > Terminal. A terminal window on Mac looks like so and is accessible:")
        bodyDiv:AddImage("/media/windows/Terminal.png","The Terminal on Mac.")
        bodyDiv:AddHeading("Create the iPhone application from the terminal", 3)
        bodyDiv:AddParagraph("Once a terminal is open, navigate to the location of the unzipped folder. If we want to create an iPhone application file (.ipa), using a Quorum program named Default.jar and one single resource called Ding2.wav, we would issue the following command:")
        bodyDiv:AddParagraph("./robovm -os ios -libs libfreetype.a:libGameEngineCPlugins.a:libObjectAL.a -classpath")
        bodyDiv:AddParagraph("robovm-cocoatouch-1.8.0.jar:robovm-rt-1.8.0.jar:robovm-objc-1.8.0.jar -weakframeworks")
        bodyDiv:AddParagraph("OpenGLES:UIKit:QuartzCore:CoreGraphics:OpenAL:AudioToolbox:AVFoundation -jar Default.jar -resources Ding2.wav")
        bodyDiv:AddParagraph("-signidentity 'iPhone Developer: william.allee@unlv.edu (RXSFT2A6NT)' -provisioningprofile")
        bodyDiv:AddParagraph("cb082625-1b0d-489c-99c8-65d204cfdb7c -d ~/Desktop/IPA -createipa")
        bodyDiv:AddParagraph("This command can be slow, taking a minute or two on some machines. The benefit, however, is that it writes pure Quorum code with no changes and works on mobile devices.")
        bodyDiv:AddHeading("Send an application to the iPhone simulator", 3)
        bodyDiv:AddParagraph("Similarly, we can send an application directly to the iPhone simulator using a similar command. In this case, instead of making the application, it loads it up so that we can use it directly.")
        bodyDiv:AddParagraph("./robovm -os ios -arch x86_64 -libs libfreetype.a:libGameEngineCPlugins.a:libObjectAL.a -classpath")
        bodyDiv:AddParagraph("robovm-cocoatouch-1.8.0.jar:robovm-rt-1.8.0.jar:robovm-objc-1.8.0.jar -weakframeworks")
        bodyDiv:AddParagraph("OpenGLES:UIKit:QuartzCore:CoreGraphics:OpenAL:AudioToolbox:AVFoundation -jar Default.jar -run -resources Ding2.wav")
        bodyDiv:AddParagraph("These commands are not pretty, and you never have to use them, as they are built in, but are documented here so that users can if they simply want to.")

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how to use the Quorum programming language for coding on Apple iOS devices like the iPhone or iPad."
    end

    action GetSummaryName returns text
        return "Apple Mobile"
    end

    action GetImageLocation returns text
        return "/media/Phone.png"
    end

    action GetName returns text
        return "Apple Mobile"
    end

    action GetShortDescription returns text
        return "how to use Quorum on an Apple iOS device."
    end

    action GetLocation returns text
        return "tutorials/mobile/iOS.html"
    end
end
