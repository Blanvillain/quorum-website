use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header

class DataWriting is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Writing JavaScript Object Notation Formatted Data as Text Values or to a File")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Writing JavaScript Object Notation Formatted Data as a Text Value or to a File", 1)
        headDiv:AddText("This tutorial will teach you how to write JavaScript Object Notation (JSON) formatted data as a text value or to a file")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

bodyDiv:AddHeading("Writing JavaScript Object Notation Objects as a Text Value", 2)
bodyDiv:AddParagraph("To write formatted JavaScript Object Notation data as a 
text value we will use the “ToText()” action on the JavaSciptObjectNotation 
object which will output the associated JavaScriptObjectNotation 
object to the screen by default. Using just the " + dq + "ToText()" + dq + " 
action on its own will output the JavaScriptObjectNotation object as a single line of text 
with the {name : value} pairs separated only by a comma. To output the 
JavaScriptObjectNotation with the {name : value} pairs separated by a comma and a 
carriage return, we must also use the " + dq + "SetPrettyPrint()" + dq + " action 
with the boolean parameter set to true. In the following example we 
begin by creating a JavaScriptObjectNotation object “json” and adding a few 
{ name : value } pairs to the object. To write ”json” as a text value in 
JavaScript Object Notation format we will first set " + dq + "json" + dq + "
to use PrettyPrint and then output the JavaScriptObjectNotation text value to the screen")
bodyDiv:AddParagraph("Here is the complete code to output the 
JavaScriptObjectNotation object “json” as a text value to the screen:")

CodeBlock cb1
        cb1:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr + cr)
        cb1:AddText("class Main" + cr)
        cb1:AddText("   action Main" + cr)
        cb1:AddText("       JavaScriptObjectNotation json" + cr)
        cb1:AddText("       json:Add(" + dq + "item1" + dq + ", 1)" + cr)
        cb1:AddText("       json:Add(" + dq + "item2" + dq + ", 2.2)" + cr)
        cb1:AddText("       json:Add(" + dq + "item3" + dq + ", " + dq + "three" + dq + ")" + cr)
        cb1:AddText("       json:SetPrettyPrint(true)" + cr)
        cb1:AddText("       output json:ToText()" + cr)
        cb1:AddText("   end" + cr)
        cb1:AddText("end" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb1))
AddSideBySideIDE(bodyDiv, "dataWritingIDE1", "Activity: Writing as a Text Value in JSON Format", 
            "This code will output the JavaScriptObjectNotation object's key value pairs as a text value in JavaScript Object Notation format")

bodyDiv:AddParagraph("The text value output to the screen should look similar to this: ")

CodeBlock cb2
        cb2:AddText("{" + cr)
        cb2:AddText("       " + dq + "item1" + dq + ": 1," + cr)
        cb2:AddText("       " + dq + "item2" + dq + ": 2.2," + cr)
        cb2:AddText("       " + dq + "item3" + dq + ": " + dq + "three" + dq + cr)
        cb2:AddText("}")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))

bodyDiv:AddParagraph("Try changing the " + dq + "SetPrettyPrint()" + dq + " boolean parameter to false and you will notice the change in format.")


bodyDiv:AddHeading("Writing JavaScript Object Notation Objects to a File", 2)
bodyDiv:AddParagraph("In order to write a JavaScripObjectNotation object to a 
file we must use the additional “Libraries.System.File” library. After adding 
our { name : value } pairs to the JavaScriptObjectNotaion object “json” we will create
a File object and specify the path for the File called " + dq + "myFile" + dq + " in this example.
In specifying the path for " + dq + "myFile" + dq + " we can either
create a new file path or rewrite to an existing file path. For this example we will use the " 
+ dq + "response.json" + dq + " file path that we read in from in the last tutorial. By writing to an existing file, we will replace
the contents of the existing file with the JavaScriptObjectNotation object " + dq + "json" + dq + 
" that we are creating in this example. We will Write to the file using the 
“json:ToText()” action within the “Write()” action. Finally, note that we can only write to a File 
when running Quorum offline because of security on the Internet.")
bodyDiv:AddParagraph("Here is the complete code to write a 
JavaScriptObjectNotation object to a file:")


CodeBlock cb3
        Span s1
        s1:AddText("        //Creates a File object called “myFile” Sets the Path for “myFile”" + cr )
        s1:AddText("        //(where you will be writing the JavaScriptObjectNotation object “json” to," + cr )
        s1:AddText("        //in this example we are using the file path for our downloaded " + dq + "response.json" + dq + " file)" + cr)
        s1:AddText("        //and Writes the JavaScript Object Notation formatted “json” " + cr )
        s1:AddText("        //to the specified file path." + cr)
        s1:SetClassAttribute("comment")
        cb3:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr)
        cb3:AddText("use Libraries.System.File" + cr + cr)
        cb3:AddText("class Main" + cr)
        cb3:AddText("   action Main" + cr)
        cb3:AddText("       JavaScriptObjectNotation json" + cr)
        cb3:AddText("       json:Add(" + dq + "item1" + dq + ", 1)" + cr)
        cb3:AddText("       json:Add(" + dq + "item2" + dq + ", 2.2)" + cr)
        cb3:AddText("       json:Add(" + dq + "item3" + dq + ", " + dq + "three" + dq + ")" + cr)
        cb3:AddText("       json:SetPrettyPrint(true)" + cr)
        cb3:Add(s1)
        cb3:AddText("       File myFile" + cr)
        cb3:AddText("       myFile:SetWorkingDirectory(" + dq + "/Users/userName/Downloads" + dq + ")" + cr) 
        cb3:AddText("       myFile:SetPath(" + dq + "response.json" + dq + ")" + cr)
        cb3:AddText("       myFile:Write(json:ToText())" + cr)
        cb3:AddText("   end" + cr)
        cb3:AddText("end" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb3))

bodyDiv:AddParagraph("Your " + dq + "response.json" + dq + " file will now contain the output from this example
 which will look like this:")
bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))
        
bodyDiv:AddHeading("Writing a JavaScriptObjectNotation Object as a List with Name/Value Pairs", 2)
bodyDiv:AddParagraph("In order to get a list (array) of JavaScriptObjectNotation 
object key name and value pairs we must use the “Libraries.Containers.Array” 
library. In this example we will output a list of key names followed by an arrow 
and the name’s value.")

CodeBlock cb4
        Span s2
        s2:AddText("        //Loop to output a list of each key and the key’s associated value in the" + cr )
        s2:AddText("        //JavaScriptObjectNotation object “json”" + cr )
        s2:SetClassAttribute("comment")
        cb4:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr)
        cb4:AddText("use Libraries.Containers.Array" + cr + cr)
        cb4:AddText("class Main" + cr)
        cb4:AddText("   action Main" + cr)
        cb4:AddText("       JavaScriptObjectNotation json" + cr)
        cb4:AddText("       json:Add(" + dq + "item1" + dq + ", 1)" + cr)
        cb4:AddText("       json:Add(" + dq + "item2" + dq + ", 2.2)" + cr)
        cb4:AddText("       json:Add(" + dq + "item3" + dq + ", true)" + cr)
        cb4:AddText("       json:Add(" + dq + "item4" + dq + ", " + dq + "text" + dq + ")" + cr)
        cb4:Add(s2)
        cb4:AddText("       Array&lt;text&gt; keys = json:GetKeys()" + cr)
        cb4:AddText("       i = 0" + cr)
        cb4:AddText("       repeat keys:GetSize() times" + cr)
        cb4:AddText("           key = keys:Get(i)" + cr)
        cb4:AddText("           output key + " + dq + " =&gt; " + dq + " + json:GetValue(key)" + cr)
        cb4:AddText("           i = i + 1" + cr)
        cb4:AddText("       end" + cr)
        cb4:AddText("   end" + cr)
        cb4:AddText("end" + cr)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb4))
AddSideBySideIDE(bodyDiv, "dataWritingIDE2", "Activity: Writing as a Text Value", 
            "This code will output the JavaScriptObjectNotation object's key value pairs as a text value in an alternate format")


bodyDiv:AddParagraph("This example should produce a list of all of “json’s” 
name value pairs in the format (name => value). The output should look similar 
to this:")

CodeBlock cb5
    cb5:AddText("item1 => 1" + cr)
    cb5:AddText("item2 => 2.2" + cr)
    cb5:AddText("item3 => true" + cr)
    cb5:AddText("item4 => text" + cr)
    bodyDiv:Add(preformatter:GeneratePreformattedCode(cb5))

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn to write formatted JSON data with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Writing JSON data"
    end
    action GetName returns text
        return "Writing JavaScript Object Notation Data Overview"
    end
    action GetShortDescription returns text
        return "how to write JavaScript Object Notation (JSON) formatted data as a text value or to a file"
    end
    action GetLocation returns text
        return "tutorials/data/writing.html"
    end
end