use Libraries.Web.Page.all
use Libraries.Containers.Array

class DataReading is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Reading in JavaScript Object Notation Formatted Data from Text Values or from a File")
        AddDefaultHeaders()

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Reading in JavaScript Object Notation Formatted Data from Text Values or from a File", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Reading in JavaScript Object Notation Formatted Data from Text Values or from a File")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial will teach you how to read in JavaScript Object Notation (JSON) formatted data from a text value or from a file")
        bodyDiv:Add(headDiv)

Section section_overview
section_overview:SetClassAttribute("flex flex-col gap-y-2")

Heading h_overview = section_overview:AddHeading("Overview", 2)
h_overview:AddClassAttribute("text-2xl font-bold")
h_overview:AddAttribute("data-text", "Overview")
AddToHeadingArray(h_overview)

section_overview:AddParagraph("If you have data which is already in JavaScript Object Notation 
format, with { “name” : value } pairs in curly braces, then the data can be 
read in and stored as a JavaScriptObjectNotation object. This data can be read 
in as a text value or from a file.")


Section section_reading
section_reading:SetClassAttribute("flex flex-col gap-y-2")

Heading h_reading = section_reading:AddHeading("Reading in from a Text Value", 2)
h_reading:AddClassAttribute("text-2xl font-bold")
h_reading:AddAttribute("data-text", "Reading in from a Text Value")
AddToHeadingArray(h_reading)

section_reading:AddParagraph("In this example, we are using the JavaScript Object 
Notation formatted text “myValue” with the key name “data” and its associated array value.")

CodeBlock cb1
        Span s1
        Span s2
        s1:AddText("        //sets myValue = {“data” : [21.5, 22.7, 23.9]} " + cr )
        s1:SetClassAttribute("comment")
        s2:AddText("        //creates a JavaScriptObjectNotation object “json” to store" + cr)
        s2:AddText("        //“myValue” and outputs the JavaScript Object Notation formatted object" + cr)
        s2:SetClassAttribute("comment")
        cb1:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr + cr)
        cb1:AddText("class Main" + cr)
        cb1:AddText("   action Main" + cr)
        cb1:Add(s1)
        cb1:AddText("       text dq = " + dq + dq + cr)
        cb1:AddText("       dq = dq:GetDoubleQuote()" + cr)
        cb1:AddText("       text myValue = " + dq + "{" + dq + " + dq + " + dq + "data" + dq + " + dq + " + dq + ": [21.5, 22.7, 23.9]}" + dq + cr)
        cb1:Add(s2)
        cb1:AddText("       JavaScriptObjectNotation json" + cr)
        cb1:AddText("       json:Read(myValue)" + cr)
        cb1:AddText("       output json:ToText()" + cr)
        cb1:AddText("   end" + cr)
        cb1:AddText("end" + cr)
        section_reading:Add(preformatter:GeneratePreformattedCode(cb1))

        CodeForIDE code1
        code1:AddFileText("ReadingText", "//This code will output the JavaScriptObjectNotation object in JavaScript Object Notation format")
        IDE ide1 = AddIDE()
        ide1:SetLightTheme()
        ide1:SetCodeForIDE(code1:GetJsonArray())
        ide1:SetIdeTitle("Activity: Reading from a Text Value")
        section_reading:Add(ide1)

section_reading:AddParagraph("The output should look like this: " + cr)

CodeBlock cb2
        cb2:AddText("{" + cr)
        cb2:AddText("       "+ dq + "data" + dq + " : [21.5, 22.7, 23.9]" + cr)
        cb2:AddText("}" + cr)        
        section_reading:Add(preformatter:GeneratePreformattedCode(cb2))

Section section_reading_file
section_reading_file:SetClassAttribute("flex flex-col gap-y-2")

Heading h_reading_file = section_reading_file:AddHeading("Reading in from a File", 2)
h_reading_file:AddClassAttribute("text-2xl font-bold")
h_reading_file:AddAttribute("data-text", "Reading in from a File")
AddToHeadingArray(h_reading_file)

Paragraph paragraph_reading_file
paragraph_reading_file:AddText("To read in formatted JavaScript Object Notation data from 
a file we need to use the additional “Libraries.System.File” library and 
connect to the file containing the data. The file ")

Link link_response_json = paragraph_reading_file:AddLink("response.json", "/files/data/response.json")
link_response_json:AddClassAttribute("underline text-quorum-blue-150")
link_response_json:AddAttribute("download", "response.json")
link_response_json:AddAttribute("hreflang", "en")


paragraph_reading_file:AddText(" is available for you to download for testing in this next example.")
section_reading_file:Add(paragraph_reading_file)

CodeBlock cb3
        Span s3
        Span s4
        s3:AddText("        //Creates a File object “myFile”, Sets the Path for “myFile”" + cr )
        s3:AddText("        //(where you will be reading the JavaScript Object Notation data from)" + cr )
        s3:AddText("        //and Reads from the specified file path." + cr )
        s3:SetClassAttribute("comment")
        s4:AddText("        //be sure to use the file path that you have set your response.json file to" +cr)
        s4:SetClassAttribute("comment")
        cb3:AddText("use Libraries.Data.Formats.JavaScriptObjectNotation" + cr)
        cb3:AddText("use Libraries.System.File" + cr + cr)
        cb3:AddText("class Main" + cr)
        cb3:AddText("   action Main" + cr)
        cb3:AddText("       JavaScriptObjectNotation json" + cr)
        cb3:Add(s3)
        cb3:AddText("       File myFile" + cr)
        cb3:Add(s4)
        cb3:AddText("       myFile:SetPath(" + dq + "files/data/response.json" + dq + ")" + cr)
        cb3:AddText("       json:Read(myFile)" + cr)
        cb3:AddText("       output json:ToText()" + cr)
        cb3:AddText("   end" + cr)
        cb3:AddText("end" + cr)
        section_reading_file:Add(preformatter:GeneratePreformattedCode(cb3))

        CodeForIDE code2
        code2:AddFileText("ReadFile.quorum", "//This code will read a file online or offline and output it in JavaScript Object Notation format")
        IDE ide2 = AddIDE()
        ide2:SetLightTheme()
        ide2:SetCodeForIDE(code2:GetJsonArray())
        ide2:SetIdeTitle("Activity: Reading from a File")
        section_reading_file:Add(ide2)

section_reading_file:AddParagraph("Since the file" + dq + " response.json" + dq + " that we are 
reading in from contained the following JavaScript Object Notation formatted data:")

CodeBlock cb4
    cb4:AddText("{" + cr)
    cb4:AddText("      " + dq + "item1" + dq + ": 22," + cr)
    cb4:AddText("      " + dq + "item2" + dq + ": 33.2," + cr)
    cb4:AddText("      " + dq + "item3" + dq + ": true" + cr)
    cb4:AddText("}")
    section_reading_file:Add(preformatter:GeneratePreformattedCode(cb4))

section_reading_file:AddParagraph("The output to the screen should look like this:")

CodeBlock cb5
    cb5:AddText("{" + cr)
    cb5:AddText("      " + dq + "item1" + dq + ": 22," + cr)
    cb5:AddText("      " + dq + "item2" + dq + ": 33.2," + cr)
    cb5:AddText("      " + dq + "item3" + dq + ": true" + cr)
    cb5:AddText("}")
    section_reading_file:Add(preformatter:GeneratePreformattedCode(cb5))


bodyDiv:Add(section_overview)
bodyDiv:Add(section_reading)
bodyDiv:Add(section_reading_file)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn to read in formatted JSON data with the Quorum programming language."
    end

    action GetSummaryName returns text
        return "Introducing Reading JSON data"
    end
    action GetName returns text
        return "Reading JavaScript Object Notation Data Overview"
    end
    action GetShortDescription returns text
        return "an overview into reading in JavaScript Object Notation (JSON) data from text values and files"
    end
    action GetLocation returns text
        return "tutorials/data/reading.html"
    end
    action GetLinkName returns text
        return "Reading"
    end
    action GetSectionName returns text
        return "Reading and Writing JavaScript Object Notation (JSON) Data"
    end
end
