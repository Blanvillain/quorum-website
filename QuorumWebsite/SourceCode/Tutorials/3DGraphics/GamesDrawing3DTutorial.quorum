use Libraries.Web.Page.all
use Libraries.Containers.Array

class GamesDrawing3DTutorial is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Drawing in 3D - Quorum Programming Language")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        //MainContent mainRegion
        //AdjustMain(mainRegion)

        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Drawing in 3D with Quorum", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Drawing in 3D with Quorum")
        AddToHeadingArray(h_heading)

        headDiv:AddText("This tutorial tells you how to draw 3D objects on the screen in Quorum")
        bodyDiv:Add(headDiv)

        Section section_animate
        section_animate:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_animate)
        AddHeading(section_animate, "Drawing in 3D", 2)
        
        Paragraph para
        para:AddText(             "This tutorial will cover 1) loading primitive shapes, 2) basic camera setup, and 3) basic lighting. "
                            +   "These topics will help the reader learn to load basic 3D shapes and view and light a 3D scene in the Quorum Game Engine. You can download ")
        Link link = para:AddLink("this program template", "/files/games/Drawing3DTutorial.zip")
        link:AddClassAttribute("underline text-quorum-blue-150")
        para:AddText(             " which contains the image we will use. You may also use the IDE below." )
        section_animate:Add(para)

        CodeForIDE code1
        code1:AddFileText("Drawing3D.quorum", " ")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetCodeForIDE(code1:GetJsonArray())
        ide:SetIdeTitle("Try actions")
        section_animate:Add(ide)
    
        Section section_coordinates
        section_coordinates:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_coordinates)
        AddHeading(section_coordinates, "Quorum's 3D Coordinate System", 2)
    
        section_coordinates:AddParagraph(   "Before we begin to draw 3D objects in Quorum, we have to understand the 3D space in which our objects will live. "
                            +   "3D objects are called 3D because they have three dimensions. A 2D object has width and height and a 3D object adds depth. "
                            +   "In 2D animation, the position and size of an object on the screen can be explained using two measurements: "
                            +   "one horizontal across the center of the screen (the x-axis) and one vertical across the center of the screen (the y-axis). "
                            +   "When we add a third measurement for 3D, it runs from the user through the screen, getting farther away (we call this the z-axis). "
                            +   "All 3D modeling is based on these three axes, but different programs use them differently." )
       section_coordinates:AddParagraph(   "In general, there is a right-hand coordinate system and a left-hand coordinate system. In both systems, "
                            +   "the y-axis is positive in the up direction and the x-axis is positive to the right. The difference between the two is the z-axis. "
                            +   "In the left-handed system, the z-axis is positive away from the user. In the right-handed system, the z-axis is positive toward the user. "
                            +   "Quorum uses the left-handed coordinate system. This is important because if we want an object to move closer or farther away, "
                            +   "we need to know if we should increase or decrease the z coordinate. Below is an image that represents the left-handed coordinate system "
                            +   "using a computer monitor.")

        Image image = section_coordinates:AddImage("/media/games/coordinate_system.png", "This is an image of the coordinate system")
        image:AddAttribute("data-zoom","")


        //the section on loading primitives

        Section section_primatives
        section_primatives:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_primatives)
        AddHeading(section_primatives, "Loading Primitives", 2)

        section_primatives:AddParagraph(   "3D Drawing is very similar to 2D drawing. The template you downloaded or any new game application will already have the use statement "
                            +   "for the game library. Now, just like we need to tell Quorum where to find the code to create a 2D image (a Drawable), "
                            +   "in order to draw a 3D shape (or a Model in Quorum), we need to add the use statement:")
        section_primatives:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.Model"))
        section_primatives:AddParagraph(   "This tells the compiler where to find the commands for the standard library Model class. "
                            +   "We will also use the Speech library in order to give our box a description.")
        section_primatives:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Sound.Speech"))
        section_primatives:AddParagraph(   "Then, we need to instantiate (or create and name) our model and our speech object:")

        CodeBlock cb1
        Span s0
        Span s1
        cb1:AddText(    "class Main is Game" + cr)
        s0:AddText(     "    //Create a Model object " + cr)
        s0:SetClassAttribute("comment")
        cb1:Add(s0)
        cb1:AddText(    "    Model model" + cr)
        s1:AddText(     "    //Create a Speech object " + cr)
        s1:SetClassAttribute("comment")
        cb1:Add(s1)
        cb1:AddText(    "    Speech speech" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "    end" + cr
                    +   "end")
        section_primatives:Add(preformatter:GeneratePreformattedCode(cb1))


        section_primatives:AddParagraph(   "Quorum has some primitive 3D shapes that are ready to be used: a box or a cylinder for example. "
                            +   "Let’s start by loading a box. We could have a box that is one solid color, but in order to add a file to texture the outside of our box, "
                            +   "download the Logo.png file and let’s put that in our project directory. In the template, it is provided in the media folder." )
        section_primatives:AddParagraph(   "Inside the CreateGame action we will use the code below to load a box and set its description:")

        CodeBlock cb2
        Span s2
        Span s3
        s2:AddText(     "//We load a box by giving the action LoadBox 4 parameters: width," + cr
                    +   "//height, depth and a color or texture) " + cr)
        s2:SetClassAttribute("comment")
        cb2:Add(s2)
        cb2:AddText(    "model:LoadBox(1.5, 1.5, 1.5, " + dq + "media/Logo.png" + dq + ")" + cr
                    +   "model:SetDescription(" + dq + "This is a box which has the image of a rabbit wearing glasses on each side" + dq + ")" + cr)
        s3:AddText(     "//Tell Quorum to add our box to the game " + cr)
        s3:SetClassAttribute("comment")
        cb2:Add(s3)
        cb2:AddText(    "Add(model)")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(cb2))


        section_primatives:AddParagraph(   "In order to make Quorum read the description of our box when the space key is pressed, we can use input polling "
                            +   "(For more information on handling input see the Events tutorial). This can be done with just a few extra lines of code. "
                            +   "First, we need two use statements:")
        section_primatives:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.InputMonitor" + cr
                                                        +   "use Libraries.Interface.Events.KeyboardEvent"))
        section_primatives:AddParagraph(   "Then we need an object to monitor the input of the game (e.g., keystrokes). We can do that like this:")

        CodeBlock cb3
        Span s4
        Span s5
        s4:AddText(     "//Create an InputMonitor object" + cr)
        s4:SetClassAttribute("comment")
        cb3:Add(s4)
        cb3:AddText(    "InputMonitor monitor" + cr)
        s5:AddText(     "//Create a KeyboardEvent object" + cr)
        s5:SetClassAttribute("comment")
        cb3:Add(s5)
        cb3:AddText(    "KeyboardEvent keys")
        section_primatives:Add(preformatter:GeneratePreformattedCode(cb3))


        section_primatives:AddParagraph(   "Finally, we need to add code into our update loop to check when the space bar is pressed. We do that like this:")

        CodeBlock cb4
        Span s6
        cb4:AddText(    "action Update(number seconds)" + cr)
        s6:AddText(     "    //This code uses input polling to see if the space key is pressed." + cr
                    +   "    //When the space key is pressed, Quorum reads our box's description." + cr)
        s6:SetClassAttribute("comment")
        cb4:Add(s6)
        cb4:AddText(    "    if monitor:IsKeyPressed(keys:SPACE)" + cr
                    +   "        speech:Say(model:GetDescription())" + cr
                    +   "    end" + cr
                    +   "end")
        section_primatives:Add(preformatter:GeneratePreformattedCode(cb4))


        section_primatives:AddParagraph(   "And this is what our game code should look like altogether:")

        CodeBlock cb5
        Span s7
        Span s8
        Span s9
        Span s10
        Span s11
        Span s12
        Span s13
        cb5:AddText(    "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Model" + cr
                    +   "use Libraries.Sound.Speech" + cr
                    +   "use Libraries.Game.InputMonitor" + cr
                    +   "use Libraries.Interface.Events.KeyboardEvent" + cr + cr
                    +   "class Main is Game" + cr)
        s7:AddText(     "    //Create a Model object " + cr)
        s7:SetClassAttribute("comment")
        cb5:Add(s7)
        cb5:AddText(    "    Model model" + cr)
        s8:AddText(     "    //Create a Speech object " + cr)
        s8:SetClassAttribute("comment")
        cb5:Add(s8)
        cb5:AddText(    "    Speech speech" + cr)
        s9:AddText(     "    //Create an InputMonitor object" + cr)
        s9:SetClassAttribute("comment")
        cb5:Add(s9)
        cb5:AddText(    "    InputMonitor monitor" + cr)
        s10:AddText(     "    //Create a KeyboardEvent object" + cr)
        s10:SetClassAttribute("comment")
        cb5:Add(s10)
        cb5:AddText(    "    KeyboardEvent keys" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr)
        s11:AddText(     "        //We load a box by giving the action LoadBox 4 parameters: width, " + cr
                    +   "        //height, depth and a color or texture) " + cr)
        s11:SetClassAttribute("comment")
        cb5:Add(s11)
        cb5:AddText(    "        model:LoadBox(1.5, 1.5, 1.5, " + dq + "media/Logo.png" + dq + ")" + cr
                    +   "        model:SetDescription(" + dq + "This is a box which has the image of a rabbit wearing glasses on each side." + dq + ")" + cr)
        s12:AddText(     "        //Tell Quorum to add our box to the game " + cr)
        s12:SetClassAttribute("comment")
        cb5:Add(s12)
        cb5:AddText(    "        Add(model)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr)
        s13:AddText(     "        //This code uses input polling to see if the space key is pressed." + cr
                    +   "                 //When the space key is pressed, Quorum reads our box's description." + cr)
        s13:SetClassAttribute("comment")
        cb5:Add(s13)
        cb5:AddText(    "        if monitor:IsKeyPressed(keys:SPACE)" + cr
                    +   "            speech:Say(model:GetDescription())" + cr
                    +   "        end" + cr
                    +   "    end" + cr
                    +   "end")
        section_primatives:Add(preformatter:GeneratePreformattedCode(cb5))


        section_primatives:AddParagraph(   "Now Quorum will read the description of our box when the space key is pressed. If we run this program just like that, the rendered box is pretty boring:")
        Image image2 = section_primatives:AddImage("/media/games/boring_box_1.png", "This is an image of a boring box in 2D")
        image2:AddAttribute("data-zoom","")
        section_primatives:AddParagraph(   "There are two important aspects of a 3D scene that we have not set up yet: the camera and lighting.")


         Section section_camera
        section_camera:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_camera)
        AddHeading(section_camera, "Basic Camera", 2)
        //the section on basic camera
        section_camera:AddParagraph(   "Our scene has a default perspective, but we can move the camera in order to see our box from another angle. "
                            +   "First add this use statement for the Camera object:")
        section_camera:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.Camera"))
        section_camera:AddParagraph(   "Then, in the CreateGame action, we can set up our camera like this:")

        CodeBlock cb6
        Span s14
        Span s15
        Span s16
        s14:AddText(    "//We create a camera object and then we give it a position and " + cr
                    +   "    //a point to look at using (x, y, z) coordinates. " + cr)
        s14:SetClassAttribute("comment")
        cb6:Add(s14)
        cb6:AddText(    "    Camera camera = GetCamera3D()" + cr)
        s15:AddText(    "    //This moves our camera up and to the right of our box" + cr)
        s15:SetClassAttribute("comment")
        cb6:Add(s15)
        cb6:AddText(    "    camera:SetPosition(2, 2.5, 4)" + cr)
        s16:AddText(    "    //This tells our camera to look at the center of the 3D scene" + cr)
        s16:SetClassAttribute("comment")
        cb6:Add(s16)
        cb6:AddText(    "    camera:LookAt(0, 0, 0)")
        section_camera:Add(preformatter:GeneratePreformattedCode(cb6))


        section_camera:AddParagraph(   "Now we have a completely different perspective on our box:")
       section_camera:AddImage("/media/games/camera_box_1.png", "This is an image of a camera box ")

        //the section on basic lighting
        Section section_lighting
        section_lighting:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_lighting)
        AddHeading(section_lighting, "Basic Lighting", 2)

        section_lighting:AddParagraph(   "Our final step that will make our box even better is adding lighting to our scene. Quorum has a few different kinds of light we could add, "
                            +   "but for our box we will use directional and ambient lighting. Neither of these types of lighting has a specific origin point. "
                            +   "Directional lighting comes from a certain direction and ambient lighting is the light that is present in a scene without a specific source. " 
                            +   "We can add some directional light coming from the right, and some ambient light to our scene, "
                            +   "but we first have to add these use statements so that Quorum can find the lighting code:")
        section_lighting:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Game.Graphics.AmbientLight" + cr
                                                        +   "use Libraries.Game.Graphics.DirectionalLight"))
        section_lighting:AddParagraph(   "Then in our createGame action we will add the code to create the lights (and let’s not forget to update our box description). "
                            +   "Here is what our code will look like altogether now:")

        CodeBlock cb8
        Span s17
        Span s18
        cb8:AddText(    "use Libraries.Game.Game" + cr
                    +   "use Libraries.Game.Graphics.Model" + cr
                    +   "use Libraries.Game.Graphics.Camera" + cr
                    +   "use Libraries.Game.Graphics.AmbientLight" + cr
                    +   "use Libraries.Game.Graphics.DirectionalLight" + cr
                    +   "use Libraries.Game.InputMonitor" + cr
                    +   "use Libraries.Interface.Events.KeyboardEvent" + cr
                    +   "use Libraries.Sound.Speech" + cr + cr
                    +   "class Main is Game" + cr
                    +   "    Model model" + cr
                    +   "    Speech speech" + cr
                    +   "    InputMonitor monitor" + cr
                    +   "    KeyboardEvent keys" + cr + cr
                    +   "    action Main" + cr
                    +   "        StartGame()" + cr
                    +   "    end" + cr + cr
                    +   "    action CreateGame" + cr
                    +   "        Camera camera = GetCamera3D()" + cr
                    +   "        camera:SetPosition(2, 2.5, 4)" + cr
                    +   "        camera:LookAt(0, 0, 0)" + cr + cr
                    +   "        model:LoadBox(1.5, 1.5, 1.5, " + dq + "media/Logo.png" + dq + ")" + cr
                    +   "        model:SetDescription(" + dq+ "This is a 3D box with the image of a rabbit wearing " + cr
                    +   "                             glasses on each side. The bottom of the box is shaded." + dq + ")" + cr
                    +   "        Add(model)" + cr + cr)
        s17:AddText(    "        //This code adds a directional light from a direction using (x, y, z)" + cr
                    +   "        //coordinates and gives it a color using a RGBA value" + cr)
        s17:SetClassAttribute("comment")
        cb8:Add(s17)
        cb8:AddText(    "        DirectionalLight light" + cr
                    +   "        light:SetDirection(1, -4, -3)" + cr
                    +   "        light:SetColor(0.8, 0.8, 0.8, 1)" + cr
                    +   "        Add(light)" + cr + cr)
        s18:AddText(    "        //This code gives the scene ambient lighting which has no source or direction" + cr)
        s18:SetClassAttribute("comment")
        cb8:Add(s18)
        cb8:AddText(    "        AmbientLight ambient" + cr
                    +   "        ambient:SetColor(0.4, 0.4, 0.4, 1)" + cr
                    +   "        SetAmbientLight(ambient)" + cr
                    +   "    end" + cr + cr
                    +   "    action Update(number seconds)" + cr
                    +   "        if monitor:IsKeyPressed(keys:SPACE)" + cr
                    +   "            speech:Say(model:GetDescription())" + cr
                    +   "        end" + cr
                    +   "    end" + cr
                    +   "end ")
        section_lighting:Add(preformatter:GeneratePreformattedCode(cb8))


        section_lighting:AddParagraph(   "When we run this code we can see how important lighting is to 3D animation:")
        section_lighting:AddImage("/media/games/final_box_1.png", "his is an image of a final box in 3D")
        section_lighting:AddParagraph(   "Now we can load primitive shapes and setup basic cameras and lighting!")


         Section nextLesson
        nextLesson:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(nextLesson)
        WriteNextTutorial(nextLesson)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Learn about how to draw to the screen in 3D using the Quorum programming language."
    end

    action GetSummaryName returns text
        return "3D Drawing"
    end

    action GetImageLocation returns text
        return "/media/games/Drawing3D.png"
    end

    action GetName returns text
        return "3D Drawing"
    end

    action GetShortDescription returns text
        return "how to draw in 3D"
    end

    action GetLocation returns text
        return "tutorials/games/drawing3D.html"
    end

    action GetLinkName returns text
        return "3D Drawing"
    end

    action GetSectionName returns text
        return "3D Graphics"
    end
end