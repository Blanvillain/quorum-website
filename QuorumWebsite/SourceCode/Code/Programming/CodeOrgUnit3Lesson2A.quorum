use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson2A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 2: The Need for Algorithms")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 2: The Need for Algorithms", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        bodyDiv:AddHeading("Overview", 2)
            Paragraph background
            background:AddText("This is the 2nd day of a 3-lesson sequence in which the students will attempt to show the &quot;art&quot; of programming and introduce the connection between programming and algorithms. In the previous lesson the students established the need for a common language with which they can express algorithms to avoid ambiguity in how instructions would be interpreted. In this lesson the students will continue to establish the connection between programming and algorithms, with more emphasis on the " + dq + "art" + dq + " of algorithms.
                                First, the students are presented with a new task for the &quot;human machine&quot; - to write a set of instructions to identify the smallest (lowest value) card in a row of cards on the table. Once again the students will try to establish a set of fundamental commands for doing this, and develop a more formal set of &quot;low-level&quot; commands for manipulating playing cards. Students are presented with a &quot;Human Machine Language&quot; that includes 5 commands and then must figure out how to use these primitive commands to &quot;program&quot; the same algorithm.
                                At the conclusion several points about programming can be made, namely: ")
            OrderedList backgroundList
                backgroundList:AddListItem("Different algorithms can be developed to solve the same problem.")
                backgroundList:AddListItem("Different programs can be written to implement the same algorithm.")
            bodyDiv:Add(background)
            bodyDiv:Add(backgroundList)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Algorithm: ", "A precise sequence of instructions for processes that can be executed by a computer and are implemented using programming languages. (NOTE: this is the definition from the AP CS Principles framework).")
                AddListItemWithBoldAtFront(voc, "Low level programming language: ", "A programming language that captures only the most primitive operations available to a machine. Anything that a computer can do can be represented with combinations of low level commands.")
                AddListItemWithBoldAtFront(voc, "High level programming language: ", "A programming language with many commands and features designed to make common tasks easier to program. Any high level functionality is encapsulated as combinations of low level commands.")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Trace programs written in the &quot;Human Machine Language&quot;")
                goalList:AddListItem("Develop an algorithm to find the smallest playing card in a row of cards")
                goalList:AddListItem("Express an algorithm in the &quot;Human Machine Language&quot;")
                goalList:AddListItem("Identify the properties of sequencing, selection and iteration the &quot;Human Machine Language&quot;")
                goalList:AddListItem("Evaluate the correctness of algorithms expressed in the &quot;Human Machine Language&quot;")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The main point here is to connect the acts of writing &quot;code&quot; and designing algorithms, and to take some steps towards programming with code. To do this the students will imagine trying to write instructions for a &quot;Human Machine&quot; to complete a tightly defined task with playing cards.
                                The teacher will introduce the term &quot;algorithm&quot; and what designing an algorithm means in computer science (i.e. programming). Then, the students will take a few steps to build up to writing an algorithm with &quot;code.&quot; Here are the basic steps of the lesson and their underlying purpose:")
        bodyDiv:Add(purpose)
            UnorderedList pList
                AddListItemWithBoldAtFront(pList, "Step 1: Discover common instructions ", " - When students write instructions to find the minimum card in a row of cards, we'll discover that even though the words used might be different between groups, there is probably a lot of commonality to underlying actions we need (shifting hands, picking up cards, comparing cards, jumping to a certain line in the instructions, etc.)")
                AddListItemWithBoldAtFront(pList, "Step 2: Agree on a minimal instruction set", " - Recognizing these commonalities we can give names to a few commands and come to agreement about how they should be interpreted. This is the foundation for a &quot;code&quot;. Then, the teacher will provide a 5-instruction &quot;human machine language&quot; that is sufficient for implementing an algorithm to find the minimum card.")
                AddListItemWithBoldAtFront(pList, "Step 3: Use the provided Human Machine Language &quot;code&quot; to implement an algorithm", " - The art of programming is to solve computational problems using a provided language that controls the machine. The point is to show the students that even when they know what the commands are, they still need to be creative to use these commands to solve a problem.")
        bodyDiv:Add(pList)
            Paragraph purpose2
                purpose2:AddText("Why the Human Machine Language? This language bears a strong resemblance to so-called ")
                purpose2:AddLink("'low level' programming languages ", "https://en.wikipedia.org/wiki/Low-level_programming_language")
                purpose2:AddText("  - a sparse, primitive set of commands to directly control the physical/electronic operations of a computing machine. Other programming languages are built on top of the low level languages to provide more abstraction and functionality that combines low level operations into commonly used procedures. The most commonly known low level language is called")
                purpose2:AddLink(" Assembly Language ", "https://en.wikipedia.org/wiki/Assembly_language")
                purpose2:AddText("Please refer to the wrap up of the next lesson where we introduce students to low level languages.")
        bodyDiv:Add(purpose2)



        bodyDiv:AddHeading("Resources",2)
        UnorderedList reso1
        reso1:AddListItemLink("Minimum Card Algorithm - Activity Guide (MS Word)","/files/code/Unit3/Activity Guide - Human Machine - Minimum Card.docx")
        reso1:AddListItemLink("Minimum Card Algorithm - Activity Guide (pdf)","/files/code/Unit3/Activity Guide - Human Machine - Minimum Card.pdf")
        bodyDiv:Add(reso1)

            UnorderedList tTipList
                tTipList:AddListItemLink("Human Machine Language - Activity Guide (contains graphics, MS Word .docx)", "/files/code/Unit3/Activity Guide - The Human Machine Language.docx")
                tTipList:AddListItemLink("Human Machine Language - Activity Guide (contains graphics, PDF)", "/files/code/Unit3/Activity Guide - The Human Machine Language.pdf")
                tTipList:AddListItemLink("Human Machine Language - Activity Guide (text only, MS Word .doc)", "/files/code/Unit3/Activity Guide - The Human Machine Language-Text Only.doc")
                tTipList:AddListItemLink("Human Machine Language - Activity Guide (text only, PDF)", "/files/code/Unit3/Activity Guide - The Human Machine Language-Text Only.pdf")
                tTipList:AddListItemLink("Human Machine Language - Activity Guide (braille ready file)", "/files/code/Unit3/Activity Guide - The Human Machine Language-Braille File.brf")
        bodyDiv:Add(tTipList)

        bodyDiv:AddHeading("Solution", 4)
            Paragraph solution
                solution:AddText("There are several ways to solve the problems in the activity guides. Allow the students to discuss with their classmate or with the teacher about what is the most efficient way to set up this algorithm.")
        bodyDiv:Add(solution)
//            UnorderedList answerKey
//                answerKey:AddListItemLink("KEY: Minimum Card Algorithm - Example of a student response (contains graphics, MS Word .docx)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine - Minimum Card.docx")
//                answerKey:AddListItemLink("KEY: Minimum Card Algorithm - Example of a student response (contains graphics, PDF)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine - Minimum Card.pdf")
//                answerKey:AddListItemLink("KEY: Minimum Card Algorithm - Example of a student response (text only, MS Word .doc)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine - Minimum Card.doc")
//                answerKey:AddListItemLink("KEY: Minimum Card Algorithm - Example of a student response (text only, PDF)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine - Minimum Card - text only.pdf")
//                answerKey:AddListItemLink("KEY: Minimum Card Algorithm - Example of a student response (braille ready file)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine - Minimum Card.brf")
//                answerKey:AddListItemLink("KEY: Human Machine Language - Answers to example programs and Find Min with Human Machine Language (contains graphics, MS Word .docx)", "/files/code/Unit3/ANSWER KEY -Human Machine Language.docx")
//                answerKey:AddListItemLink("KEY: Human Machine Language - Answers to example programs and Find Min with Human Machine Language (contains graphics, PDF)", "/files/code/Unit3/ANSWER KEY -Human Machine Language.pdf")
//                answerKey:AddListItemLink("KEY: Human Machine Language - Answers to example programs and Find Min with Human Machine Language (text only, MS Word .doc)", "/files/code/Unit3/ANSWER KEY-Human Machine Language.doc")
//                answerKey:AddListItemLink("KEY: Human Machine Language - Answers to example programs and Find Min with Human Machine Language (text only, PDF)", "/files/code/Unit3/ANSWER KEY-Human Machine Language - text only.pdf")
//                answerKey:AddListItemLink("KEY: Human Machine Language - Answers to example programs and Find Min with Human Machine Language (braille ready file)", "/files/code/Unit3/ANSWER KEY -- Human Machine Language .brf")
//        bodyDiv:Add(answerKey)

        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip2
                tTip2:SetClassAttribute("cool-box")
                tTip2:AddText("We have prepared the same documents in different file formats for the lesson. The first file is in .docx format and has many graphic components. Another file is in .doc format and is a text only document. All the graphics in the first .docx file are described in narrative manner. There is also a .brf file, which can work with a refreshable braille display or a braille embosser. The PDF files are also included for convenience.")
        bodyDiv:Add(tTip2)



        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("Yesterday's activity focused on the inherent difficulties of trying to express precise processes with written language. Remind the students that conclusions the class has arrived at include: ")
        bodyDiv:Add(getStart)
            UnorderedList startList
                startList:AddListItem("We need to agree on a set of commands and exactly what they mean.")
                startList:AddListItem("The fewer commands we have, the easier it is to agree.")
                startList:AddListItem("We want to know what are the &quot;primitive&quot; operations - the most basic set of operations that will allow us to do most of the tasks that the situation requires.")
        bodyDiv:Add(startList)

        bodyDiv:AddHeading("What is Algorithm Discussion", 4)
        bodyDiv:AddParagraph("Some remarks for the discussion include:")
            UnorderedList algorithm
                algorithm:AddListItem("Language is important, but there is another part to programming. Once we have a well defined language, we need to apply it to problems.")
                algorithm:AddListItem("The art (and science) of using a well-defined language of primitive operations to solve problems is the art and science of algorithms.")
                algorithm:AddListItem("The CS Principles definition of algorithm is: Algorithms are precise sequences of instructions for processes that can be executed by a computer and are implemented using programming languages.")
                algorithm:AddListItem("One way to think of the study of algorithms is that it is the study of processes -- how can we use a small set of instructions to clearly and correctly define a process that will solve some problem?")
                algorithm:AddListItem("Yesterday, with the LEGO blocks, the students also attempted to design an algorithm. Remind students that any time they are trying to write a precise set of instructions for a process to solve a problem they are designing an algorithm.")
                algorithm:AddListItem("Today the class is going to get into algorithms a little more deeply.")
        bodyDiv:Add(algorithm)
        bodyDiv:Add(break)
        bodyDiv:Add(break)

            Paragraph note1
                note1:AddText("<b>Note:</b> For those students who are blind or visually impaired, we suggest using braille cards or other manipulatives to aid the student's participation in the following activities.")
        bodyDiv:Add(note1)    






        bodyDiv:AddHeading("Activity 1: Find Minimum Card Algorithm", 2)
            Paragraph act1
                act1:AddText("Perhaps it goes without saying that in a Computer Science class the students are concerned with not just any processes, but computational processes - ones that can be executed by a computer - which have specific sets of constraints.
                        The students often get started thinking about algorithms and computational processes by trying to rigorously act them out themselves as a sort of &quot;Human Machine.&quot; When acting as a machine, the students can keep the limitations of a computer in mind. In this activity the students are going to pretend that they are a &quot;Human Machine&quot; that operates on playing cards on the table.")
        bodyDiv:Add(act1)
            Paragraph activity1Paragraph
            activity1Paragraph:AddText("Download the " + dq + "Minimum Card Algorithm - Activity Guide" + dq)
            activity1Paragraph:AddText(" and then follow the guide to allow the students to develop their own instructions to find the card with the smallest number value. If students prefer, allow them to do this activity independently. "
                + "While working, consider the following questions for the students: ")
            bodyDiv:Add(activity1Paragraph)
            UnorderedList act1List
                act1List:AddListItem("&quot;How do you know when to stop?&quot;")
                act1List:AddListItem("&quot;Do your instructions state where and how to start?&quot;")
                act1List:AddListItem("&quot;Is it clear where to put cards back down after you've picked them up?&quot;")
        bodyDiv:Add(act1List)

        bodyDiv:AddHeading("Tips", 4)
            UnorderedList protip1
                protip1:AddListItem("Develop a deeper understanding of the problem - trying to write an algorithm should evoke lots of questions about details like: &quot;where do hands start?&quot; or &quot;can we number things?&quot;")
                protip1:AddListItem("Develop clear, precise processes - ask questions to address gaps in clarity. The students might have to define or make up their own terms for things.")
        bodyDiv:Add(protip1)

        bodyDiv:AddHeading("Discussion", 4)
            Paragraph disc
                disc:AddText("Ask the class to review the algorithms the students came up with, show the students that these algorithms are not all the same. If a student is taking this class by himself or herself, help the student find out that there are many algorithms that would produce the same outcome. However, also point out to students that there are common tasks that they are making the &quot;human machine&quot; do. Ask them what are the commands or actions most of these instructions have in common. Ask them if they can define a language of common Human Machine commands for moving cards around. ")
        bodyDiv:Add(disc)

        bodyDiv:AddHeading("Discussion Goal", 4)
            UnorderedList discG
                discG:AddListItem("The goal here is to define and agree upon a language for moving cards around.")
                discG:AddListItem("A secondary, longer range, goal here is to identify where programming languages come from - it's often from a process just like this. What can end up seeming cryptic is often actually simple, or at least stems from trying to keep things as simple as possible.")
        bodyDiv:Add(discG)

        bodyDiv:AddHeading("Sample Set of Human Machine Commands: ", 4)
            UnorderedList example
                AddListItemWithBoldAtFront(example, "SHIFT (hand) - ", "some form of shifting hands one position down the row left or right")
                AddListItemWithBoldAtFront(example, "MOVE (hand) - ", "some form of moving a hand directly to a particular card based on its position in the list or to the position of one of the other hands. ")
                AddListItemWithBoldAtFront(example, "COMPARE - ", "some way to compare cards and do something based on the result like: &quot;if the card in the right hand is less than the card in the left hand then...&quot;")
                AddListItemWithBoldAtFront(example, "GO TO LINE - ", "some way to jump to an earlier or later line in the program")
                AddListItemWithBoldAtFront(example, "PICK CARD UP/PUT CARD DOWN - ", "some way to do this that also makes clear where to put a card back down. Typically something like: &quot;Put right hand card down into the right-most open space in the row of cards.&quot; NOTE: we don't need this command for the next activity, so just acknowledging the command is fine for now.")
        bodyDiv:Add(example)

        bodyDiv:Add(break)
        bodyDiv:AddHeading("Activity 2: The Human Machine Language", 2)
            Paragraph act2
                act2:AddText("As a class, we have just identified a set of primitive commands that the students can use to operate on a set of cards.
                    To be very concrete let's formalize this into a language as a class through the following activity.")
        bodyDiv:Add(act2)

        bodyDiv:AddHeading("Instructions for the Activity Guide", 4)
            UnorderedList humanList
                humanList:AddListItem("If possible, pair students with a classmate for this activity. If not, the activity can be completed independently.")
                humanList:AddListItem("Try to figure out how the sample program works first.")
                humanList:AddListItem("If you have a partner, one person should read the " + dq + "Human Machine Language," + dq + " and the other person should perform the task.")
                humanList:AddListItem("Refer to the reference page to completely understand how each " + dq + "part" + dq + " works in the language.")
                humanList:AddListItem("Try the example which contains the problem. Then come up with a solution without changing the underlining basic language structure and function.")
        bodyDiv:Add(humanList)
        bodyDiv:AddHeading("Discussion",4)
            Paragraph transition
                transition:AddText("The problem we identified with the last example speaks to the art and science of algorithm design and what can make it so interesting. The question is: can we fix the problem without adding more commands to the language? The answer is &quot;Yes.&quot; If we can fix a problem without extending the language, that's a good thing. We can focus our attention on designing algorithms given these constraints. ")
        bodyDiv:Add(transition)

        bodyDiv:Add(break)
        bodyDiv:AddHeading("Challenge Activity: Find Minimum with the Human Machine Language", 2)
            Paragraph first
                first:AddText("First identify what's different about this problem setup for the Human Machine Language:")
        bodyDiv:Add(first)
            UnorderedList fList
                fList:AddListItem("All cards are face up")
                fList:AddListItem("Card positions have numbers")
                fList:AddListItem("We don't need to pick up cards or put them down")
                fList:AddListItem("There is actually no way to move cards at all - only move your hands")
                fList:AddListItem("The ending state is well defined - left hand touching the minimum card.")
        bodyDiv:Add(fList)
            Paragraph second
                second:AddText("Now use the Human Machine Language to write the algorithm for finding the minimum card. NOTE: The students can just write the code, or the students can use the cutout strips of the commands and write values into the boxes. ")
        bodyDiv:Add(second)
            
        bodyDiv:AddHeading("Tips", 4)
            UnorderedList protip2
                protip2:AddListItem("This might be very challenging at first since the problem setup is slightly different, which is why it's worth reviewing these differences before you set out on the challenge.")
                protip2:AddListItem("The problem now has different initial assumptions.")
                protip2:AddListItem("It's likely that a set of hand-written instructions will differ because: They weren't restricted to one command per line as they must be for the Human Machine Language. It involved actions like picking up cards, changing hands, or moving cards to other locations, which is also not possible with the Human Machine Language.")
                protip2:AddListItem("It's okay if the student can't quite finish before the period is over, as this activity continues in the next lesson. The teacher can allow this to overflow into the next period, and make the wrap up points later.")
        bodyDiv:Add(protip2)



        bodyDiv:AddHeading("Wrap Up", 2)
            Paragraph wrapup
                wrapup:AddText("Yesterday the class discussed the need for a programming language. Today class came up with our own programming language and used it to implement an algorithm. The CSP definition of algorithm is: &quot;a precise sequence of instructions for processes that can be executed by a computer and are implemented using programming languages.&quot; There are two facts about the algorithm and programming:")
        bodyDiv:Add(wrapup)
            UnorderedList wList
                AddListItemWithBoldAtFront(wList, "Different algorithms can be developed to solve the same problem: ", "Even though you were all trying to solve the same problem (find minimum), the class probably came up with different methods for doing it. We would say we came up with different algorithms.")
                AddListItemWithBoldAtFront(wList, "Different code can be written to implement the same algorithm: ", "This is sometimes surprising to newcomers. When writing &quot;code&quot; (even with with the human machine language), it is common that two people trying implement the same algorithm end up coding it differently.")
        bodyDiv:Add(wList)

        bodyDiv:AddHeading("Remarks for the Students", 4)
            Paragraph remark
                remark:AddText("These two facts - Different algorithms can be developed to solve the same problem and different code can be written to implement the same algorithm - embody the art of programming and what makes programming so fun, engaging and creative. In programming, just like art, we strive to make beautiful things.")
        bodyDiv:Add(remark)
            OrderedList rList
                rList:AddListItem("A beautiful algorithm is an elegant and clever idea for how to solve a problem.")
                rList:AddListItem("A beautiful program is an elegant use of whatever language structures are provided to make the algorithm actually work on a computer.")
        bodyDiv:Add(rList)



        bodyDiv:AddHeading("Standards Alignment", 2)

            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.1 (A, B, C, D, H, I)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.2 (A, B, G)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.4 (F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (F, I)")
        bodyDiv:Add(list)

/* Completed 1/14/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about algorithms, why we need them, and how they are used"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 2 "
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 2 (The Need for Algorithms)"
    end
    action GetShortDescription returns text
        return "Learn about algorithms"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson2A.html"
    end

end
