use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson9A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Programming Lesson 9: Looping and Random Numbers")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 9: Looping and Random Numbers", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box
        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")

        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

        Division studentInstruction6
        studentInstruction6:SetClassAttribute("cool-box")

        Division studentInstruction7
        studentInstruction7:SetClassAttribute("cool-box")


        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("The students will learn to use random values 
                    and looping to create variation in their drawings with Quorum 
                    Turtle Module (QTM), and quickly duplicate objects they wish 
                    to appear in their digital scenes many times. The students will also be 
                    presented with a version of the " + dq + "repeat ? times," + dq + " which 
                    enables them to change the number of times the loop 
                    runs. This block is essentially a " + dq + "repeat" + dq + " block and will 
                    be presented that way. The students will also be presented with 
                    blocks which enable them to choose a random number 
                    within a given range. Together these blocks will enable 
                    them to create more complex drawings for digital scenes 
                    by randomly placing simple objects within the drawings. 
                    They use these tools to create a variety of drawings with QTM.")
        bodyDiv:Add(ov1)


            
        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, dq + "repeat" + dq + " (keyword): ", "loops that have a predetermined beginning, end, and increment (step interval).")
                AddListItemWithBoldAtFront(voc, "Loop: ", "the action of doing something over and over again.")
                AddListItemWithBoldAtFront(voc, "Iteration: ", "another name for " + dq + "loop" + dq + " - the repetition of a statement, process, or procedure.")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Use a repeat/loop in a program to simplify the expression of repeated tasks.")
                goalList:AddListItem("Identify appropriate situations in a program for using a repeat/loop.")
                goalList:AddListItem("Use random values within a repeat/loop to repeat code that behaves differently each time it is executed.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Loops are a relatively straightforward 
                    idea in programming - used when someone wants a certain chunk of code to run 
                    repeatedly - but it takes a little practice to get good at 
                    controlling loops and recognizing how and where in the 
                    programs to use them. The " + dq + "repeat" + dq + " in the Quorum Programming 
                    Language is designed to be used for both simple and sophisticated 
                    programming tasks, thus it has a lot of syntax to it that will 
                    be explained in the future. In this lesson, the simplest type of 
                    the " + dq + "repeat" + dq + " is introduced - it only lets them change a number 
                    that dictates how many times the loop repeats.")                
        bodyDiv:Add(purpose)
            Paragraph purpose2
                purpose2:AddText("Random numbers are also used more in 
                    this lesson as an effective way to experiment with loops. Creating some 
                    randomly-generated output with each iteration of the loop is good 
                    visual and auditory feedback that the loop is running the way 
                    that someone would expect. It also helps the students explore the ranges of possible 
                    outputs, which tells them more about what their program can and 
                    cannot do.")                
        bodyDiv:Add(purpose2)

        bodyDiv:AddHeading("Tips", 4)
            Paragraph pTip
                pTip:AddText("In Quorum Programming Language, the concept of 
                    " + dq + "loops" + dq + " is represented simply by the keyword " + dq + "repeat." + dq + " Quorum Language is 
                    also known as the world's first " + dq)
                pTip:AddLink("Evidence Oriented Programming Language","https://quorumlanguage.com/evidence.html")
                pTip:AddText("." + dq + " 
                    This means that we did research before we decided what keyword 
                    we should use for certain actions and concepts of computer programming. 
                    When we researched the concept of " + dq + "loops," + dq + " more programmers 
                    - novice level and expert level - understood this concept by using 
                    the keyword " + dq + "repeat" + dq + " instead of the word " + dq + "loop," + dq + " but students 
                    should be understand that both terms refer to the same thing.")
        bodyDiv:Add(pTip)



        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddHeading("New Code", 4)
            UnorderedList code
                AddListItemWithBoldAtFront(code, "repeat [number] times - ", "This code runs all the code written inside of the scope of the code - ending part of the scope has another keyword " + dq + "end." + dq + "")
                AddListItemWithBoldAtFront(code, "end - ", "This code indicates where the scope of the repeat ends. Starting from one line below this code, the function of the repeat is no longer in effect.")
        bodyDiv:Add(code)
        bodyDiv:AddHeading("Loops versus actions", 4)
            Paragraph getStart
                getStart:AddText("These past lessons 
                    have focused on the process of breaking down large tasks into 
                    smaller pieces and assigning each piece an action. When the students break 
                    down a large task, often the students will find that some portion of the 
                    task needs to be repeated many times. As programmers, the students could 
                    simply call the same action many times. This might work if someone 
                    needs to call the same action five times, but if that action 
                    needs to be run 1,000,000 times, we will need a better solution for the student.")
        bodyDiv:Add(getStart)
            Paragraph getStart2
                getStart2:AddText("Today, the students will be exploring how a 
                    programming construct called a loop solves this problem by allowing 
                    them to repeat a set of commands many times. They will also practice 
                    looping through commands many times with random input. This will 
                    be useful both for testing the code and also 
                    for developing more variety in their drawings. ")
        bodyDiv:Add(getStart2)
        bodyDiv:AddParagraph("At the end of 
                    class we need to ask the students to think about the following: " + dq + "<i>When should you use a loop instead of a 
                    action, or vice versa?</i>" + dq)
            Paragraph getStart3
                getStart3:AddText("The students will have an opportunity to explore 
                    the process of creating loops by programming with them in Quorum 
                    Turtle Module (QTM). Use the Getting Started Activity to 
                    realize the need in some programs to repeat commands many times, 
                    and insight into the fact that random inputs can be used in 
                    repeated commands to rapidly develop a variety of behaviors.")
        bodyDiv:Add(getStart3)



        bodyDiv:AddHeading("Commenting in Code", 4)
            Paragraph comment
                comment:AddText("The more sophisticated someone's code 
                    becomes, the more he or she have the chance to get himself or herself confused. 
                    This is because so many steps of abstractions and complexity 
                    management is created in the code that the steps themselves 
                    become the source of complexity. Also, when you is working 
                    on the same code with other programmers, you want them 
                    to be able to understand your code, so that the other programmers could 
                    have a chance to improve some parts of your code. 
                    For this reason, good programmers use commenting in their 
                    code.")
        bodyDiv:Add(comment)
        bodyDiv:AddParagraph("In Quorum Programming Language, there are two ways of 
                    commenting. One way is to use the " + dq + "<b>//</b>" + dq + " (double slash) so that the rest of a line becomes a comment. 
                    The other way is to use " + dq + "<b>/*</b>" + dq + " at the beginning of a comment, 
                    then use the " + dq + "<b>*/</b>" + dq + " at the end of the comment. This method 
                    becomes handy if someone needs to use multiple lines for one 
                    comment string. The following is an example of both comment styles. ")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(" use Libraries.Compute.Random" + cr
                                                        + " integer counter = 0 //Using this variable for keep track of the number" + cr
                                                        + "" + cr
                                                        + " /*" + cr
                                                        + " In the following part, I will use the mathematical formula:" + cr
                                                        + " A^2 = B^2 + C^2" + cr
                                                        + " */" + cr
                                                        + "end"))

        bodyDiv:AddHeading("Activity 1: Coding Challenge - Part 1", 2)
        bodyDiv:AddHeading("Pre-Activity: Video " + dq + "Using Loops" + dq, 3)
        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip2
                tTip2:SetClassAttribute("cool-box")
                tTip2:AddText("In the following video, the concept of 
                        " + dq + "Functions" + dq + " is described using the " + dq + "Turtle Programming  
                        tool" + dq + " used in the Code.org curriculum. While the " + dq + "Turtle Programming 
                        tool" + dq + " primarily uses a " + dq + "block language" + dq + " (a language that could 
                        be written by combining picture blocks on the computer screen), the 
                        " + dq + "Quorum Turtle Module" + dq + " uses " + dq + "text language" + dq + " as the students have already 
                        experienced in the previous lessons. Although the style of the 
                        coding is different between the two languages, the concept that supports 
                        the execution of code is very similar. Therefore viewing 
                        this video before the students start the activity is still beneficial.")
        bodyDiv:Add(tTip2)
       
            InlineFrame inlineFrame
                inlineFrame:SetHeight("480")
                inlineFrame:SetWidth("854")
                inlineFrame:SetAddress("https://www.youtube.com/embed/G8hfAk4PfOM")
        bodyDiv:Add(inlineFrame)
            UnorderedList vid
                vid:AddListItemLink("Video - Using Loops", "https://www.youtube.com/watch?v=G8hfAk4PfOM")
        bodyDiv:Add(vid)
        


        bodyDiv:AddHeading("Challenge 18: Draw Steps", 3)
        bodyDiv:AddHeading("Setting up a " + dq + "repeat […] times" + dq + " in Quorum Programming Language", 4)
            Paragraph quorumAction
                quorumAction:AddText("In the Quorum Programming Language, the 
                    concept of a loop is represented by the keyword " + dq + "repeat." + dq + " For example:")
        bodyDiv:Add(quorumAction)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "repeat 5 times" + cr
                                                        +   "" + cr
                                                        +   "end"))

            Paragraph quorumAction2
                quorumAction2:AddText("The students should write their code on the 
                    lines between " + dq + "repeat 5 times" + dq + " and " + dq + "end." + dq + " Students can write any number of 
                    lines as far as it logically make sense to do so. 
                    For example, the students can ask the turtle to move forward " + dq + "x" + dq + " number of steps
                     using " + dq + "<b>MoveForward()</b>" + dq + " between a repeat structure:")
        bodyDiv:Add(quorumAction2)
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "action MoveForward(integer x)" + cr
                                                        +   "   repeat x times" + cr
                                                        +   "       MoveForward()" + cr
                                                        +   "   end" + cr
                                                        +   "end"))
                                                        bodyDiv:Add(break)

        studentInstruction:AddHeading("Student Instructions",4)
        studentInstruction:AddHeading("Description of an Image", 5)
            Paragraph imgDesc
                imgDesc:SetClassAttribute("cool-box")
                imgDesc:AddText("The picture below shows steps going 
                    up drawn 5 times consecutively to the right of each other.")
        studentInstruction:Add(imgDesc)

        studentInstruction:AddImage("/files/code/Unit3/Draw5steps1.png", "Turtle at (5, 5) with 5 steps drawn going up from to (0, 0) to turtle's position")        
        studentInstruction:AddParagraph("Remember that you have learned how to draw a single step (Challenge 8 from Lesson 5)? Now, try to write an action that uses the repeat structure to draw 5 steps to the right.")
        SideBySideIDE CSP_U3L09_18
        CSP_U3L09_18:SetUniqueIdentifier("CSP_U3L09_18")
        CSP_U3L09_18:GetIDETitle():AddText("Quorum Turtle Module: Challenge 18")
        CSP_U3L09_18:SetGameEnvironment(false)
        CSP_U3L09_18:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_18:Setup()
        studentInstruction:Add(CSP_U3L09_18)
        bodyDiv:Add(studentInstruction)
//
        bodyDiv:AddParagraph("When their code is successful, the following lines would be drawn: (0, 0) to (0, 1) to (1, 1); 
(1, 1) to (1, 2) to (2, 2); 
(2, 2) to (2, 3) to (3, 3); (3, 3) to (3, 4) to (4, 4); (4, 4) to (4, 5) to (5, 5).")



//New lines begin: . New lines begin: (0, 0) to (0, 1) to (1, 1). End of lines. 
//New lines begin: (1, 1) to (1, 2) to (2, 2). End of lines. 
//New lines begin: (2, 2) to (2, 3) to (3, 3). End of lines. 
//New lines begin: (3, 3) to (3, 4) to (4, 4). End of lines. 
//New lines begin: (4, 4) to (4, 5) to (5, 5). End of lines



        bodyDiv:AddHeading("Challenge 19: Make it easier to increase or decrease the number of the steps", 3)
        studentInstruction1:AddHeading("Student Instructions", 4)
        studentInstruction1:AddParagraph("Now, extend what you have done in Challenge 18 to draw the number of steps of your choice.")
        studentInstruction1:AddParagraph("Hint: remember what you can do with actions that have parameters passed in.")
        SideBySideIDE CSP_U3L09_19
        CSP_U3L09_19:SetUniqueIdentifier("CSP_U3L09_19")
        CSP_U3L09_19:GetIDETitle():AddText("Quorum Turtle Module: Challenge 19")
        CSP_U3L09_19:SetGameEnvironment(false)
        CSP_U3L09_19:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_19:Setup()
        studentInstruction1:Add(CSP_U3L09_19)
        bodyDiv:Add(studentInstruction1)



        bodyDiv:AddHeading("Challenge 20: Draw Square Steps", 3)
        studentInstruction2:AddHeading("Student Instructions",4)
        studentInstruction2:AddHeading("Description of an Image", 5)
            Paragraph imgDesc2
                imgDesc2:SetClassAttribute("cool-box")
                imgDesc2:AddText("The picture below shows squares drawn like a steps going up from left to right 9 times.")
        studentInstruction2:Add(imgDesc2)

        studentInstruction2:AddImage("/files/code/Unit3/DrawSquareSteps1.png", "Turtle at (0, 0) with 9 Squares going up and the right of turtle forming steps")
        studentInstruction2:AddParagraph("Now based on what you have done in Challenge 19, try to recreate the square steps shown in the image.")
        SideBySideIDE CSP_U3L09_20
        CSP_U3L09_20:SetUniqueIdentifier("CSP_U3L09_20")
        CSP_U3L09_20:GetIDETitle():AddText("Quorum Turtle Module: Challenge 19")
        CSP_U3L09_20:SetGameEnvironment(false)
        CSP_U3L09_20:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_20:Setup()
        studentInstruction2:Add(CSP_U3L09_20)
        bodyDiv:Add(studentInstruction2)

        bodyDiv:AddParagraph("When their code is successful, the following lines would be drawn: 
(0, 0) to (0, 1) to (1, 1);
(1, 1) to (1, 2) to (2, 2); 
(2, 2) to (2, 3) to (3, 3); 
(3, 3) to (3, 4) to (4, 4); 
(4, 4) to (4, 5) to (5, 5); 
(5, 5) to (5, 6) to (6, 6); 
(6, 6) to (6, 7) to (7, 7); 
(7, 7) to (7, 8) to (8, 8); 
(8, 8) to (8, 9) to (9, 9); 
(9, 9) to (9, 8) to (8, 8); 
(8, 8) to (8, 7) to (7, 7); 
(7, 7) to (7, 6) to (6, 6); 
(6, 6) to (6, 5) to (5, 5); 
(5, 5) to (5, 4) to (4, 4); 
(4, 4) to (4, 3) to (3, 3); 
(3, 3) to (3, 2) to (2, 2); 
(2, 2) to (2, 1) to (1, 1); 
(1, 1) to (1, 0) to (0, 0).")

//New lines begin: . New lines begin: (0, 0) to (0, 1) to (1, 1). End of lines. 
//New lines begin: (1, 1) to (1, 2) to (2, 2). End of lines. 
//New lines begin: (2, 2) to (2, 3) to (3, 3). End of lines. 
//New lines begin: (3, 3) to (3, 4) to (4, 4). End of lines. 
//New lines begin: (4, 4) to (4, 5) to (5, 5). End of lines. 
//New lines begin: (5, 5) to (5, 6) to (6, 6). End of lines. 
//New lines begin: (6, 6) to (6, 7) to (7, 7). End of lines. 
//New lines begin: (7, 7) to (7, 8) to (8, 8). End of lines. 
//New lines begin: (8, 8) to (8, 9) to (9, 9). End of lines. 
//New lines begin: (9, 9) to (9, 8) to (8, 8). End of lines. 
//New lines begin: (8, 8) to (8, 7) to (7, 7). End of lines. 
//New lines begin: (7, 7) to (7, 6) to (6, 6). End of lines. 
//New lines begin: (6, 6) to (6, 5) to (5, 5). End of lines. 
//New lines begin: (5, 5) to (5, 4) to (4, 4). End of lines. 
//New lines begin: (4, 4) to (4, 3) to (3, 3). End of lines. 
//New lines begin: (3, 3) to (3, 2) to (2, 2). End of lines. 
//New lines begin: (2, 2) to (2, 1) to (1, 1). End of lines. 
//New lines begin: (1, 1) to (1, 0) to (0, 0). End of lines


        bodyDiv:AddHeading("Looping with Random Values", 3)
        studentInstruction3:AddHeading("Student Instructions",4)
        studentInstruction3:AddParagraph("This activity will be structured like a walkthrough that will help you 
        to become more familiar with the Random Number Generator and using different actions to draw the image below.")
        studentInstruction3:AddHeading("Image Description",5)
            Paragraph loopRan
                loopRan:AddText("The image below shows a bar 
                    graph with different height of the lines drawn on each 
                    vertical column.")
        studentInstruction3:Add(loopRan)

        studentInstruction3:AddImage("/files/code/Unit3/BarGraph1.png", "Turtle at (8, 0) with 4 vertical lines forming the shape of a bar graph")

            Paragraph loopRan2
                loopRan2:AddText("Think of the code that makes the 
                    turtle to draw one line at a time. The turtle needs to go up a
                    certain number of blocks while drawing lines. 
                    Then turn around and come down the same number 
                    of blocks while not drawing the lines. Finally, 
                    the turtle needs to move itself two columns right 
                    to the right and face upward.")
        studentInstruction3:Add(loopRan2)
       studentInstruction3:AddParagraph("Often we want to start with something simple that we can work on easily. 
        So let's start with drawing one bar. Given the template code in the IDE, try to finish the <b>DrawOneBar</b> action using <b>PenDown</b>, <b>RepeatMoveForward</b>, <b>TurnLeft</b>, <b>MoveForward</b>, and other actions defined in the IDE.")

        SideBySideIDE CSP_U3L09_r1
        CSP_U3L09_r1:SetUniqueIdentifier("CSP_U3L09_r1")
        CSP_U3L09_r1:GetIDETitle():AddText("Quorum Turtle Module: Looping 1")
        CSP_U3L09_r1:SetGameEnvironment(false)
        CSP_U3L09_r1:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Compute.Random

class Main is TurtleGame

     Random ran
     integer randomInt = 0

     action Main
        StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(0,0)

        repeat 5 times
           randomInt = ran:RandomIntegerBetween(1, 9)
           DrawOneBar(randomInt)
        end
     end


     action TurnAround
       TurnLeft()
       TurnLeft()
     end

     action DrawOneBar(integer x)

     end

end
")

/*
     action DrawOneBar(integer x)
       PenDown()
       RepeatMoveForward(x)
       TurnAround()
       PenUp()
       RepeatMoveForward(x)
       TurnLeft()
       MoveForward()
       TurnLeft()
     end
*/
        CSP_U3L09_r1:Setup()
        studentInstruction3:Add(CSP_U3L09_r1)
       


            Paragraph loopRan3
                loopRan3:AddText("Now, try to put the whole structure 
                    into an action so that we can control how many bars are drawn. 
                    Let's call this action <b>DrawBars(integer x)</b>.  
                    The parameter " + dq + "x" + dq + " would accept our request of " + dq + "how many bars" + dq + " to draw
                    (keep the range of the turtle's movement in mind). Finish the code in the IDE below.")
        studentInstruction3:Add(loopRan3)

        SideBySideIDE CSP_U3L09_r2
        CSP_U3L09_r2:SetUniqueIdentifier("CSP_U3L09_r2")
        CSP_U3L09_r2:GetIDETitle():AddText("Quorum Turtle Module: Looping 2")
        CSP_U3L09_r2:SetGameEnvironment(false)
        CSP_U3L09_r2:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Compute.Random

class Main is TurtleGame

     Random ran
     integer randomInt = 0

     action Main
        StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(0,0)
        DrawBars(4)        //draw 4 bars, you can change
                           //the parameter passed in too
     end


     action TurnAround
       TurnLeft()
       TurnLeft()
     end

     action DrawOneBar(integer x)    //complete this

     end

     action DrawBars(integer x)     //complete this

     end
end
")


/*
   action DrawOneBar(integer x)
       PenDown()
       RepeatMoveForward(x)
       TurnAround()
       PenUp()
       RepeatMoveForward(x)
       TurnLeft()
       MoveForward()
       TurnLeft()
   end

   action DrawBars(integer x)
       repeat x times
           randomInt = ran:RandomIntegerBetween(1, 9)
           DrawOneBar(randomInt)
       end
   end
*/
        CSP_U3L09_r2:Setup()
        studentInstruction3:Add(CSP_U3L09_r2)
        bodyDiv:Add(studentInstruction3)



        bodyDiv:AddHeading("Activity 2: Coding Challenge - Part 2", 2)
        bodyDiv:AddHeading("Using a Loop inside of the Loop", 4)
            Paragraph rr
                rr:AddText("When the students successfully complete the 
                    following coding challenges, they will be able to have the 
                    turtle draw the picture below. The picture shows four 
                    banners with different pole heights and different banner 
                    sizes - taller and shorter. These banners look like 
                    stacked up squares- each square has one block length 
                    for a side. Each pole location is separated with two 
                    column length horizontally. At the top of each pole, 
                    there is a banner with different height. The students' code 
                    will draw this pattern of pictures with different 
                    heights of the both poles and banners each time they run 
                    the same code.")
        bodyDiv:Add(rr)

        bodyDiv:AddImage("/files/code/Unit3/PolesWithBanners1.png", "4 vertical lines with 1x1 squares starting at the top of the lines forming a shape that resembles a pole with a banner")



        bodyDiv:AddHeading("Challenge 21: Draw a banner", 3)
            studentInstruction4:AddHeading("Student Instructions", 4)  
            studentInstruction4:AddParagraph("The goal for this challenge is to draw a banner which is a rectangle by using stacked up squares.")
        studentInstruction4:AddImage("/files/code/Unit3/Banner.png", "A banner")
     
       Paragraph chlg23
                chlg23:AddText("Set the 
                    starting coordinate of the turtle to (0, 0). Create an action that accepts 
                    an integer parameter for the height of the banner. You need to include the 
                    " + dq + "repeat" + dq + " structure for writing this code. Once you have created 
                    the action, run the action in <b>Turtle Commands</b> with number 
                    " + dq + "4" + dq + " as the parameter.")
        studentInstruction4:Add(chlg23)
            Paragraph chlg23_1
                chlg23_1:AddText("Hint: In the description of the image above we said the banner looks like stacked up squares. ")
        studentInstruction4:Add(chlg23_1)

        SideBySideIDE CSP_U3L09_21
        CSP_U3L09_21:SetUniqueIdentifier("CSP_U3L09_21")
        CSP_U3L09_21:GetIDETitle():AddText("Quorum Turtle Module: Challenge 21")
        CSP_U3L09_21:SetGameEnvironment(false)
        CSP_U3L09_21:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_21:Setup()
        studentInstruction4:Add(CSP_U3L09_21)
        bodyDiv:Add(studentInstruction4)

        bodyDiv:AddParagraph("When their code is successful, the following lines would be drawn: (0, 0) to (1, 0);
(1, 0) to (1, 1) to (0, 1) to (0, 0); 
(1, 1) to (1, 2) to (0, 2) to (0, 1); 
(1, 2) to (1, 3) to (0, 3) to (0, 2);
(1, 3) to (1, 4) to (0, 4) to (0, 3). ")

//New lines begin: . New lines begin: (0, 0) to (1, 0). End of lines. 
//New lines begin: (1, 0) to (1, 1) to (0, 1) to (0, 0). End of lines. 
//New lines begin: (1, 1) to (1, 2) to (0, 2) to (0, 1). End of lines. 
//New lines begin: (1, 2) to (1, 3) to (0, 3) to (0, 2). End of lines. 
//New lines begin: (1, 3) to (1, 4) to (0, 4) to (0, 3). End of lines



        bodyDiv:AddHeading("Challenge 22: Draw Poles on Every Other Column", 3)
            studentInstruction5:AddHeading("Student Instructions", 4)  
            Paragraph chlg24
                chlg24:AddText("Now, try to draw poles on every other column of the grid, which is similar to how we drew the bar graph before.")
        studentInstruction5:Add(chlg24)


        SideBySideIDE CSP_U3L09_22
        CSP_U3L09_22:SetUniqueIdentifier("CSP_U3L09_22")
        CSP_U3L09_22:GetIDETitle():AddText("Quorum Turtle Module: Challenge 22")
        CSP_U3L09_22:SetGameEnvironment(false)
        CSP_U3L09_22:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_22:Setup()
        studentInstruction5:Add(CSP_U3L09_22)
        bodyDiv:Add(studentInstruction5)

        bodyDiv:AddHeading("Challenge 23: Putting the two together", 3)
        studentInstruction6:AddHeading("Student Instructions", 4)
        studentInstruction6:AddParagraph("Now, combine the code from Challenges 
                    21 and 22. The idea is, at the top of the pole drawing, 
                    the turtle will switch tasks to draw a banner. You don't have to use random number generator for this one. So, create an action that accepts one integer value for the height of the pole and one 
                    integer value for the height of the banner and has the following sequence: ")
            OrderedList chlg25List
                chlg25List:AddListItem("The turtle goes up a " + dq + "set length of pole height" + dq + " while drawing the lines.")
                chlg25List:AddListItem("The turtle starts drawing the banner for 
                    " + dq + "a set height" + dq + " while drawing the lines, then goes back to the top end of the 
                    pole by moving down " + dq + "a set height distance." + dq)
                chlg25List:AddListItem("The the turtle goes down the pole for " + dq + "the set length distance" + dq + " to the bottom row.")
                chlg25List:AddListItem("Once at the bottom row, the turtle 
                    moves itself two columns to the right and turns to 
                    face upward.")
        studentInstruction6:Add(chlg25List)


        studentInstruction6:AddParagraph("After you have done creating the action, pass in 4 as the parameter for the pole height and 3 for the banner height.")
        studentInstruction6:AddImage("/files/code/Unit3/OneBannerPole1.png", "Line (0, 0) to (7, 0) with 3 1x1 squares which form a pole with a banner shape")

        SideBySideIDE CSP_U3L09_23
        CSP_U3L09_23:SetUniqueIdentifier("CSP_U3L09_23")
        CSP_U3L09_23:GetIDETitle():AddText("Quorum Turtle Module: Challenge 23")
        CSP_U3L09_23:SetGameEnvironment(false)
        CSP_U3L09_23:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_23:Setup()
        studentInstruction6:Add(CSP_U3L09_23)

        bodyDiv:Add(studentInstruction6)

            Paragraph chlg25_2
                chlg25_2:AddText("If the students start 
                    the turtle from dot A0, the following lines should be
                    drawn: (0, 0) to (0, 1) to (0, 2) to (0, 3) to (0, 4); (0, 4) to (1, 4); 
(1, 4) to (1, 5) to (0, 5) to (0, 4); (1, 5) to (1, 6) to (0, 6) to (0, 5); 
(1, 6) to (1, 7) to (0, 7) to (0, 6).")
//New lines begin: . New lines begin: (0, 0) to (0, 1) to (0, 2) to (0, 3) to (0, 4). 
//New lines begin: (0, 4) to (1, 4). End of lines. 
//New lines begin: (1, 4) to (1, 5) to (0, 5) to (0, 4). End of lines. 
//New lines begin: (1, 5) to (1, 6) to (0, 6) to (0, 5). End of lines. 
//New lines begin: (1, 6) to (1, 7) to (0, 7) to (0, 6). End of lines. End of lines
        bodyDiv:Add(chlg25_2)



        bodyDiv:AddHeading("Challenge 24: Incorporate randomness", 3)
        studentInstruction7:AddHeading("Student Instructions", 4)
            Paragraph chlg26
                chlg26:AddText("For this final challenge, you should 
                    create an action that runs the completed code for challenge 
                    23 four times. However, your code needs to produce the randomly 
                    generated height of the pole and randomly generated height of 
                    the banner for every separate " + dq + "Pole and Banner" + dq + " drawing. 
                    For the practical limitation of the height in the Turtle Module, have the 
                    random integer generator generate integers between 1 
                    and 4 for both values.")
        studentInstruction7:Add(chlg26)


        SideBySideIDE CSP_U3L09_24
        CSP_U3L09_24:SetUniqueIdentifier("CSP_U3L09_24")
        CSP_U3L09_24:GetIDETitle():AddText("Quorum Turtle Module: Challenge 24")
        CSP_U3L09_24:SetGameEnvironment(false)
        CSP_U3L09_24:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L09_24:Setup()
        studentInstruction7:Add(CSP_U3L09_24)

        bodyDiv:Add(studentInstruction7)



        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddHeading("Discussion: When to use loops versus actions", 4)
            Paragraph wrapup
                wrapup:AddText("Develop a rule for deciding when to 
                    use a loop within a program. Perhaps think about when to use a loop 
                    versus an action. Ask the students to try to make connections to Top-Down Design in their 
                    response. Below their rules, they should write a few sentences justifying their 
                    rule.")
        bodyDiv:Add(wrapup)
        bodyDiv:AddHeading("Discussion Goal", 4)
            Paragraph wrapup2
                wrapup2:AddText("It is important for students to distinguish between when to use an action and when to use a loop:")
        bodyDiv:Add(wrapup2)
            UnorderedList wuList
                wuList:AddListItem("You should write an action when you have a 
                    piece of code - a procedure - that you might reuse in other 
                    places in the program. This is an example of trying to encapsulate and abstract 
                    details so the programmer can think about other parts of a larger program.")
                wuList:AddListItem("Write a loop when there is 
                    something you need to do over and over again and it doesn't 
                    make sense to split it up any more - when they actually just need repetitious 
                    behavior to solve some problem.")
        bodyDiv:Add(wuList)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Free Response", 4)
            Paragraph assess
                assess:AddText("When breaking a problem down, you often 
                    encounter elements that you want to use repeatedly in your code. 
                    Sometimes it's appropriate to write a new function; at other 
                    times it's appropriate to write a loop. There is no hard-and-fast 
                    rule as to which is better, but what do you think? What kinds 
                    of circumstances would lead you to writing a function versus 
                    using a loop?")
        bodyDiv:Add(assess)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CL.L2:3")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L2:5")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L3A:3, CPP.L3A:4")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L2:6")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L3A:1, CT.L3A:3")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L3B:4")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.1 (D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (B, C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.3.1 (A, V, D, F, G, L)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (C, D, E, F, G, H, I, J, K)")
        bodyDiv:Add(list)

/* Completed 2/24/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how loops and random numbers work, and how to use them in the 
                Quorum Programming Language"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 9 (Looping and Random Numbers)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 9"
    end
    action GetShortDescription returns text
        return "Learn about Loops and Random Numbers"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson9A.html"
    end

end
