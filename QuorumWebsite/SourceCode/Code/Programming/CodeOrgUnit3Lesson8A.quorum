use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson8A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 8: Creating Actions with Parameters")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 8: Creating Actions with Parameters", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")



        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("In this lesson, the students will practice using and 
                        creating actions with parameters. They will learn that writing 
                        actions with parameters can generalize solutions to 
                        problems even further. Especially in situations where 
                        feel like the students are about to duplicate some code with 
                        only a few changes to some numbers, it is a good 
                        idea to write an action that accepts parameters. In 
                        the later part of the lesson, the students will be introduced to one of 
                        the Quorum Programming Language's actions that will generate random numbers. 
                        Through this lesson, the students will be previewing a portion of a much larger 
                        picture of computer programming by being introduced 
                        to some of the key concepts of many modern programming 
                        languages - commonly known as " + dq + "Object Oriented Languages." + dq + " ")
        bodyDiv:Add(ov1)


//    The following are not actual vocab words for the AP exam
//
//        bodyDiv:AddHeading("Vocabulary", 2)
//            UnorderedList voc
//                AddListItemWithBoldAtFront(voc, dq + "use Libraries" + dq + " statement - ", "the statement tells the computer that you will be using a particular part of Quorum Programming Language's standard libraries.")
//                AddListItemWithBoldAtFront(voc, "object - ", "a conceptual " + dq + "object" + dq + " that typically helps the programmer to access the actions in a certain class(es) ")
//                AddListItemWithBoldAtFront(voc, "instantiating an object - ", "creating the conceptual " + dq + "object" + dq + " in your code")
//                AddListItemWithBoldAtFront(voc, "class(es) - ", "The numerous file(s) in the Quorum Standard Libraries where all pre-determined actions are written (often by the group of professional programmers who created the language itself). The classes hold the lowest position in the hierarchical organization of the Quorum Standard Libraries.")
//                AddListItemWithBoldAtFront(voc, "random class - ", "the class that is dedicated for the actions that generate random numbers or integers to be used in you program ")
//                AddListItemWithBoldAtFront(voc, dq + "random class" + dq + " actions - ", "several actions with different parameters to generate random numbers and integers.")
//                AddListItemWithBoldAtFront(voc, "integer - ", "A whole number (a number that does not have a decimal point).")
//                AddListItemWithBoldAtFront(voc, "variable - ", "A conceptual container that a programmer create to hold a certain type of value such as an integer " + dq + "6." + dq)
//                AddListItemWithBoldAtFront(voc, "declaring a variable - ", "the way of creating a variable, which is a line of code that tells the computer to make space in the memory for a variable.")
//       bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Write actions with parameters to generalize a solution instead of duplicating code.")
                goalList:AddListItem("Identify appropriate situations for creating an action with parameters.")
                goalList:AddListItem("Use random numbers as inputs to action calls for the purpose of testing")
                goalList:AddListItem("Add parameters to an action in an existing piece of code to generalize its behavior.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Writing actions with parameters is a 
                        simple idea, but it traditionally has some tricky details for new 
                        learners of programming. The basic idea is that programmers often want to 
                        write an action that takes some input and performs some action 
                        based on that input. For example, the turtle action <b>MoveForward</b> 
                        is much more useful when the programmer can specify how much to move forward 
                        (e.g., <b>RepeatMoveForward(6)</b>) rather than just a fixed amount every time. 
                        It's very common to encounter situations where, as a programmer, the student might 
                        realize that he or she basically needs a duplication of some code that he or she 
                        already has, but in which they just want to change some numbers. This is a 
                        good time to write an action with a parameter; the parameter just 
                        acts as a placeholder for some value that a programmer plugs in at the time 
                        the action is called. Just like it's considered good practice to 
                        give descriptive names to the actions, the same is true for the 
                        names of the parameters themselves. For example: 
                        <b>DrawSquare(sideLength)</b> is better than <b>DrawSquare(stuff)</b>.")
        bodyDiv:Add(purpose)



        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddHeading("New Code", 4)
            UnorderedList codes
                codes:AddListItem("use Libraries.Compute.Random")
                codes:AddListItem("Random random")
                codes:AddListItem("random:RandomIntegerBetween(minimum, maximum)")
                codes:AddListItem("integer randomNumber = random:RandomIntegerBetween(minimum, maximum)")
        bodyDiv:Add(codes)
            Paragraph getStart
                getStart:AddText("In the previous lesson, the students have learned 
                        to use a lot of new turtle commands. Some of these commands 
                        accept a parameter, or even many parameters, which allow 
                        the students to pass values to the action. Parameters are a powerful 
                        programming construct. Suppose we have a whole group of 
                        similar problems, like turning the turtle some amount. 
                        Without a parameter we would need 360 different actions, 
                        one for each number of degrees we wanted to turn! Parameters 
                        allow students to use a single action as a general solution to a 
                        whole group of problems. This is clearly a useful construct 
                        to use in their programs, and in today's lesson the students are going to 
                        learn how to create actions with parameters for themselves.")
        bodyDiv:Add(getStart)



        bodyDiv:AddHeading("Activity: Coding Challenge", 2)
        bodyDiv:AddHeading("Pre-Activity: Video " + dq + "Introduction to Functions" + dq, 4)

        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip2
                tTip2:SetClassAttribute("cool-box")
                tTip2:AddText("In the following video, the concept of a
                        " + dq + "Function" + dq + " is described with the example of the " + dq + "Turtle Programming  
                        tool" + dq + " used in the Code.org curriculum. While the " + dq + "Turtle Programming 
                        tool" + dq + " primarily uses the " + dq + "block language" + dq + " (a language that could 
                        be written by combining picture blocks on the computer screen), the 
                        " + dq + "Quorum Turtle Module" + dq + " uses " + dq + "text language" + dq + " as the students have already 
                        experienced in the previous lessons. Although the style of the 
                        coding is different between the two languages, the concept that supports 
                        the execution of the code/command is very similar. Therefore, watching 
                        this video before the students start the activity is still beneficial for their 
                        learning.")
        bodyDiv:Add(tTip2)
       
            InlineFrame inlineFrame
                inlineFrame:SetHeight("480")
                inlineFrame:SetWidth("854")
                inlineFrame:SetAddress("https://www.youtube.com/embed/yPWQfa4CHbw")
        bodyDiv:Add(inlineFrame)
            UnorderedList vid
                vid:AddListItemLink("Video - Turtle Programming", "https://www.youtube.com/watch?v=yPWQfa4CHbw")
        bodyDiv:Add(vid)


        bodyDiv:AddHeading("Challenge 16: Defining and Using an Action with a Parameter", 3)
            Paragraph chlg17
                chlg17:AddText("From the video, the students have learned that 
                    defining multiple actions to draw different sized squares results 
                    in lots of repetitive actions - they are essentially the same, with 
                    a few numbers changed - and this is not desirable. Remind students that any time they 
                    find themselves effectively copy and pasting large sections of code, 
                    it is usually a sign that there is a better way. ")
        bodyDiv:Add(chlg17)

        studentInstruction:AddHeading("Student Instructions",4)
        studentInstruction:AddParagraph("For this challenge, you are going to create 
                        your own action that accepts parameters. Create an action that draws a square with different 
                        sizes determined by your parameters.")
        studentInstruction:AddImage("/files/code/Unit3/SmallBigSquares1.png", "Turtle at (2, 2) on large square with another smaller square at (0, 0)")
        studentInstruction:AddParagraph("Your final answer should be a modified version of the template below. Note that it will not match the image above, at least not initially.")

        SideBySideIDE CSP_U3L08_16
        CSP_U3L08_16:SetUniqueIdentifier("CSP_U3L08_16")
        CSP_U3L08_16:GetIDETitle():AddText("Quorum Turtle Module: Challenge 16")
        CSP_U3L08_16:SetGameEnvironment(false)
        CSP_U3L08_16:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(0, 0)
        DrawSquare(2)
     end

     action TurnRight
        TurnLeft()
        TurnLeft()
        TurnLeft()
    end

    action DrawSquare(integer size)
        RepeatMoveForward(1)
        TurnRight()
        RepeatMoveForward(1)
        TurnRight()
        RepeatMoveForward(1)
        TurnRight()
        RepeatMoveForward(1)
        TurnRight()
    end
end
")
        CSP_U3L08_16:Setup()
        studentInstruction:Add(CSP_U3L08_16)
        bodyDiv:Add(studentInstruction)


            Paragraph chlg17_2
                chlg17_2:AddText("The drawing shown in the picture above is not what we created in our code. This is because we have given students the <b>DrawSquare(size)</b> action that 
                    was created in the video, but it's not quite right. Ask the students to fix the 
                    code inside the <b>TurtleCommands</b> action so that the program creates 
                    the drawing correctly. This will give them to opportunity to call the <b>DrawSquare(size)</b> action twice, with different values each time.")
        bodyDiv:Add(chlg17_2)
        bodyDiv:AddParagraph("If the students are successful, the following lines will be drawn. Starting at coordinate (5, 5): (5, 5) to (5, 6) to (5, 7) to (6, 7) to (7, 7) to (7, 6) to (7, 5) to (6, 5) to (5, 5).")



//New lines begin: (5, 5) to (5, 6) to (5, 7) to (6, 7) to (7, 7) to (7, 6) to (7, 5) to (6, 5) to (5, 5)

        bodyDiv:AddHeading("Analyzing the code above", 4)
            Paragraph analyzing
                analyzing:AddText("The following is the sequence how the computer 
                    executes/runs this code, using the template's call of <b>DrawSquare(2)</b> as an example.")
        bodyDiv:Add(analyzing)
            OrderedList analysis
                analysis:AddListItem("The computer places the turtle at dot A0 because of <b>SetStartCoordinate(0, 0)</b>")
                analysis:AddListItem("The computer finds where action <b>DrawSquare(2)</b> 
                    is called, then immediately looks elsewhere to find 
                    the place this code is defined.")
                analysis:AddListItem("When the computer finds the action 
                    <b>DrawSquare(integer size)</b>, it automatically recognizes 
                    the word " + dq + "size" + dq + " is not text. Rather, it is 
                    the name for an integer variable because it is defined as an
                    " + dq + "integer" + dq + " before it says " + dq + "size." + dq)
                analysis:AddListItem("Then computer remembers that the 
                    programmer placed the integer " + dq + "2" + dq + " when he or she called 
                    this exact action in the middle part of the program.")
                analysis:AddListItem("Therefore, the computer replaces the 
                    word " + dq + "size" + dq + " with the integer " + dq + "2" + dq + " when it runs the code 
                    inside of the action <b>DrawSquare(size)</b>.")
                analysis:AddListItem("This results in the turtle drawing a 
                    straight line with a length of two blocks every time it 
                    runs <b>MoveForward(size)</b> action inside of the 
                    action <b>DrawSquare(size)</b>.")
                analysis:AddListItem("When the <b>DrawSquare(size)</b> action is finished running,
                    we will have a square and the computer returns to the line after we called <b>DrawSquare(2)</b> in the <b>TurtleCommands</b> action.")
        bodyDiv:Add(analysis)
            Paragraph analyzing2
                analyzing2:AddText("Note: In Quorum language, the students need to 
                    specify the type of parameter that the action accepts. There are four 
                    primitive types in Quorum Language - number, integer, text and boolean. 
                    Throughout this lesson, we will only have students use the " + dq + "integer" + dq + " type. As such, they nned to make 
                    sure the students write this word before they place the name of the parameter 
                    when they are defining their own action.")
        bodyDiv:Add(analyzing2)



        bodyDiv:AddHeading("Challenge 17: Defining Actions with Multiple Parameters", 3)
            Paragraph chlg18
                chlg18:AddText("Now it's the student's turn to define a function 
                    that accepts multiple parameters. The concept used is exactly 
                    the same as in the previous Challenge. The only difference is that their 
                    action should now accept two parameters. If the students 
                    would like, they can modify their code from the previous Challenge to complete 
                    this Challenge.")
        bodyDiv:Add(chlg18)
            Paragraph chlg18_1
                chlg18_1:AddText("In this challenge, the students will create and 
                    call an action that produces a rectangle 
                    with their choice of width and height. When they create an action 
                    that accepts multiple parameters, they need to separate the parameters 
                    by comma both when they are defining the action and when they are 
                    calling the action. For example, they would write the action 
                    <b>MyAction(integer width, integer height)</b> when they define the 
                    action. They might write <b>MyAction(5, 7)</b> when they call the acton.")
        bodyDiv:Add(chlg18_1)
            Paragraph chlg18_2
                chlg18_2:AddText("If they have successfully completed
                    the previous challenges, students should have all the knowledge and skills they need to complete 
                    this challenge. Just remind them of the following: they must separate 
                    their parameters with commas and should give them descriptive and meaningful 
                    names.")
        bodyDiv:Add(chlg18_2)

        bodyDiv:AddHeading("Introducing the Random Input", 4)
            Paragraph random
                random:AddText("Programmers often use the random number 
                    generator to make some part of their program " + dq + "unpredictable" + dq + " - 
                    even for the programmers themselves. Many programming languages 
                    have their own random number generators. Commonly, programmers 
                    set up a random number generator with a range of numbers by setting 
                    maximum number and minimum number. For example, if the minimum 
                    number is set to 1 and maximum to 10, the random number generator 
                    will only generate a random number between 1 and 10 (1, 2, 3, 4, 5, 
                    6, 7, 8, 9, or 10).")
        bodyDiv:Add(random)
            Paragraph random2
                random2:AddText("In the Quorum Programming Language, setting 
                    up the " + dq + "Random Number Generator" + dq + " requires the students to learn some more basics of 
                    computer programming. They will learn the basics in detail later, in 
                    Unit 5. So for this part of the lesson, we have provided 
                    a template below to explain how it needs to be done. 
                    This also serves as a great preview to 
                    concept of an " + dq + "Object Oriented Language," + dq + " which is what the Quorum 
                    Programming Language is.")
        bodyDiv:Add(random2)

        studentInstruction1:AddHeading("Student Instructions",4)
        studentInstruction1:AddParagraph("For this challenge, a template has been provided that generates random integers for you. Read through the comments in the template code to try to understand how to generate a random integer.")

        SideBySideIDE CSP_U3L08_17
        CSP_U3L08_17:SetUniqueIdentifier("CSP_U3L08_17")
        CSP_U3L08_17:GetIDETitle():AddText("Quorum Turtle Module: Challenge 17")
        CSP_U3L08_17:SetGameEnvironment(false)
        CSP_U3L08_17:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Compute.Random  //this line tells the computer 
                              //that we are using the class called 
                              //" + dq + "Random" + dq + " from the Quorum Standard Libraries

class Main is TurtleGame

     Random ran                   //this line asks the computer to 
                                  //create a object called 'ran' from 
                                  //the Random class that will allow us 
                                  //to access the actions inside 
                                  //the Random class through this object

     integer randomInteger1 = 0   //this line asks the computer to 
                                  //allocate a memory space in the 
                                  //computer to store an integer, 
                                  //and we call this memory space
                                  //randomInteger1

     integer randomInteger2 = 0

     action Main
        StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(0,0)
        randomInteger1 = ran:RandomIntegerBetween(1, 9)    //this line asks the 
                                                           //object 'ran' to help 
                                                           //with generating a 
                                                           //random integer between 
                                                           //1 and 9, then store 
                                                           //the integer that the 
                                                           //object 'ran' generated  
                                                           //inside 'randomInteger1'
        randomInteger2 = ran:RandomIntegerBetween(1, 9)

     end

end")

        CSP_U3L08_17:Setup()
        studentInstruction1:Add(CSP_U3L08_17)

        studentInstruction1:AddParagraph("Note that since the 
                    computer remembers this randomly generated number in the 
                    " + dq + "<b>randomInteger1</b>" + dq + " variable, we can use this variable and 
                    the value inside the code that we will be writing below 
                    those lines.")
    
        studentInstruction1:AddParagraph("Now, try to write an action named <b>DrawRectangle(integer width, integer height)</b> that draws
             a rectangle. Then, call this action in the turtle commands using the random integers that you generated, <b>DrawRectangle(randomInteger1, randomInteger2)</b>.")
        bodyDiv:Add(studentInstruction1)



        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddHeading("Discussion: When do you need an action with a parameter?", 4)
            Paragraph wrapup
                wrapup:AddText("Ask the students to develop a rule for deciding when to 
                create an action with a parameter rather than a normal action. 
                Below their rule, they should write a couple of sentences justifying their rule. 
                Some examples include: ")
        bodyDiv:Add(wrapup)
            UnorderedList wuList
                wuList:AddListItem("Whenever they have two actions that 
                    basically do the same things, make an action with a parameter instead because 
                    this will remove the need to duplicate code.")
                wuList:AddListItem("If someone needs an action to do the 
                    same things in a lot of different ways, then use a parameter so one 
                    action can do it right away.")
        bodyDiv:Add(wuList)
        bodyDiv:AddHeading("Discussion Goal:", 4)
            Paragraph wrapup2
                wrapup2:AddText("Having used parameters to generalize 
                    the behavior of many actions, try to formalize the students' understanding 
                    of what parameters are and why they are beneficial. Important points 
                    to draw out are: (1) Parameters allow the creation of a generalized 
                    solution to a whole class of problems, rather than individually 
                    solving many specific problems, (2) Parameters remove the need 
                    to create repetitive actions, making the code easier to write, read, 
                    and change.")
        bodyDiv:Add(wrapup2)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Multiple Choice: Which of the following are true?", 4)
            UnorderedList assess1
                assess1:AddListItem("A.) Actions with parameters can be used to prevent the creation of duplicated code.")
                assess1:AddListItem("B.) Parameters can only be used once within the body of an action.")
                assess1:AddListItem("C.) Parameters generalize the solution of a specific problem.")
                assess1:AddListItem("D.) Parameters need not be provided to an action in any particular order.")
        bodyDiv:Add(assess1)

        bodyDiv:AddHeading("Free Response: ", 4)
            Paragraph q3
                q3:AddText(dq + "Abstraction" + dq + " is often used to indicate 
                    cases where we focus on a general case and ignore a specific instance 
                    of a problem. Given this meaning of the word, how are actions with 
                    parameters an example of abstraction?")
        bodyDiv:Add(q3)



        bodyDiv:AddHeading("Extended Learning", 2)
            Paragraph ext
                ext:AddText("The students can try to create actions with parameters to draw different sizes of a given shape.")
            bodyDiv:Add(ext)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principle: ", "2.2.1 (C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principle: ", "2.2.2 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principle: ", "5.3.1 (A, C, D, F, G, L)")
                AddListItemWithBoldAtFront(list, "Computer Science Principle: ", "5.4.1 (C, D, E, F, G, H, I, J, K)")
        bodyDiv:Add(list)

/* Completed 2/22/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn to write Actions with parameters in the Quorum Programming Language"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 8 (Creating Actions with Parameters)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 8"
    end
    action GetShortDescription returns text
        return "Learn to write Actions with parameters"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson8A.html"
    end

end
