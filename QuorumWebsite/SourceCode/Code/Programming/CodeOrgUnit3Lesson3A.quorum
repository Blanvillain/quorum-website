use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson3A is Lesson
text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 3: Creativity in Algorithms")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 3: Creativity in Algorithms", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        bodyDiv:AddHeading("Overview", 2)
            Paragraph overview
                overview:AddText("This is the third of the first three lessons that make the connection between programming and algorithms. In this lesson, the students will continue to work with the " + dq + "Human Machine Language" + dq + " to get creative designing more algorithms for playing cards. One command is added to the language from the previous lesson (SWAP) that allows positions of cards to change. With the addition of this swap command, the challenge is to design an algorithm that will move the minimum card to the front of the list while keeping the relative order of all the other cards the same. If that is achieved, some other Human Machine Language challenges are available.")
        bodyDiv:Add(overview)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Algorithm: ", "A precise sequence of instructions for processes that can be executed by a computer")
                AddListItemWithBoldAtFront(voc, "Iterate: ", "To repeat in order to achieve, or get closer to, a desired goal")
                AddListItemWithBoldAtFront(voc, "Selection: ", "A generic term for a type of programming statement (usually an if-statement) that uses a Boolean condition to determine, or select, whether or not to run a certain block of statements")
                AddListItemWithBoldAtFront(voc, "Sequencing: ", "Putting commands in correct order so computers can read the commands")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Develop an algorithm to solve a new problem with playing cards")
                goalList:AddListItem("Express an algorithm in the Human Machine Language")
                goalList:AddListItem("Identify Sequencing, Selection, and Iteration in a program written in the Human Machine Language")
                goalList:AddListItem("Describe the properties of the Human Machine Language that make it a " + dq + "low level" + dq + " language.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The purpose of this lesson is to identify what â€˜creativity in algorithmsâ€™ means. Creativity has to do with both the process in inventing an algorithm to solve a new problem in a given context and the implementation of that algorithm in a given language. Creativity often means combining or using algorithms someone knows as part of a solution to a new problem. Thus, the â€˜Min To Frontâ€™ problem is interesting because students already solved part of it (the find min part) in the previous lesson. ")
        bodyDiv:Add(purpose)
            Paragraph purpose2
                purpose2:AddText("In the CSP Framework, almost every " + dq + "Essential Knowledge" + dq + " statement from " + dq + "Learning Objective 4.1.1 Develop an algorithm for implementation in a program" + dq + " applies here. The two points from the previous lesson carry over here and are also in the CSP Framework:")
        bodyDiv:Add(purpose2)
            UnorderedList pList
                pList:AddListItem("Different algorithms can be developed to solve the same problem")
                pList:AddListItem("Different programs (or code) can be written to implement the same algorithm")
        bodyDiv:Add(pList)
            Paragraph purpose3
                purpose3:AddText("Furthermore, the CSP Framework states: " + dq + "4.1.1A Sequencing, Selection, and Iteration are building blocks of algorithms" + dq + " and " + dq + "4.1.2G Every algorithm can be constructed using only sequencing, selection, and iteration." + dq + " The findMin problem and the other problems the students solved with the Human Machine Language also have sequencing, selection, and iteration. Here's what they mean:")
        bodyDiv:Add(purpose3)
            UnorderedList p3List
                AddListItemWithBoldAtFront(p3List, "Selection: ", "also known as â€˜branchingâ€™ and is most commonly encountered in if-statements -- The â€œJUMP...IFâ€? command in the Human Machine Language is a form of selection. It gives us a way to compare two things (numbers) and take action â€˜ifâ€™ one thing was true.")
                AddListItemWithBoldAtFront(p3List, "Iteration: ", "also known as â€˜loopingâ€™ -- The JUMP command in the Human Machine Language allows us to move to a different point in the program and start executing from there. This allows us to re-use lines of code, and this is a form of iteration or looping.")
                AddListItemWithBoldAtFront(p3List, "Sequencing: ", "From the framework: â€˜4.1.1B - Sequencing is the application of each step of an algorithm in the order in which the statements are given.â€™ Sequencing is so fundamental to programming. In our lesson, the sequencing is simply implied by the fact that we number the instructions with the intent to execute them in order.")
        bodyDiv:Add(p3List)
            Paragraph purpose4
                purpose4:AddText("While sequencing seems obvious at first, it can trip up the novice programmer, because you must pay attention to how the state of the world changes with each line executed. In particular, this can cause some confusion when programming simple mathematics. For example, here is a series of instructions in some programming language:")
        bodyDiv:Add(purpose4)
        bodyDiv:AddHeading("Example: ", 4)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "x = 2" + cr
                                                        +   "x = 5" + cr
                                                        +   "x = x + 1"))
            Paragraph purpose5
                purpose5:AddText("In mathematics this is an impossible (and meaningless) system of equations. But in programming, because it's sequenced, it simply means do one thing after the other; first, x gets the value 2. Then, x gets the value 5. Then x gets the current value of x plus 1. When these 3 lines have completed executing x has the value 6.")
        bodyDiv:Add(purpose5)



        bodyDiv:AddHeading("Resources", 2)
        bodyDiv:AddHeading("Activity Guides", 4)
            UnorderedList tTipList
                tTipList:AddListItemLink("Human Machine Language Part 2 Min-To-Front - Activity Guide (contains graphics, MS Word .docx)", "/files/code/Unit3/Activity Guide - Human Machine Language - Part 2_ Min-to-Front.docx")
                tTipList:AddListItemLink("Human Machine Language Part 2 Min-To-Front - Activity Guide (contains graphics, PDF)", "/files/code/Unit3/Activity Guide - Human Machine Language - Part 2_ Min-to-Front.pdf")
                tTipList:AddListItemLink("Human Machine Language Part 2 Min-To-Front - Activity Guide (text only, MS Word .doc)", "/files/code/Unit3/Human Machine Language.doc")
                tTipList:AddListItemLink("Human Machine Language Part 2 Min-To-Front - Activity Guide (text only, PDF)", "/files/code/Unit3/Human Machine Language.pdf")
                tTipList:AddListItemLink("Human Machine Language Part 2 Min-To-Front - Activity Guide (braille ready file)", "/files/code/Unit3/Human Machine Language.brf")
        bodyDiv:Add(tTipList)
        bodyDiv:AddHeading("Solutions",4)
//            UnorderedList answerKey
//                answerKey:AddListItemLink("KEY: Human Machine Language Part 2 - Min To Front (contains graphics, MS Word .docx)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine Language - Part 2_ Min-to-Front.docx")
//                answerKey:AddListItemLink("KEY: Human Machine Language Part 2 - Min To Front (contains graphics, PDF)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine Language - Part 2_ Min-to-Front.pdf")
//                answerKey:AddListItemLink("KEY: Human Machine Language Part 2 - Min To Front (text only, MS Word .doc)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine Language - Part 2_ Min-to-Front.doc")
//                answerKey:AddListItemLink("KEY: Human Machine Language Part 2 - Min To Front (text only, PDF)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine Language - Part 2_ Min-to-Front text only.pdf")
//                answerKey:AddListItemLink("KEY: Human Machine Language Part 2 - Min To Front (braille ready file)", "/files/code/Unit3/ANSWER KEY - Activity Guide - Human Machine Language - Part 2_ Min-to-Front.brf")
//        bodyDiv:Add(answerKey)


        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip
                tTip:SetClassAttribute("cool-box")
                tTip:AddText("We have prepared the same documents in different file formats for the lesson. The first file is in .docx format and has many graphic components. Another file is in .doc format and is a text only document. All the graphics in the first .docx file are described in narrative manner. There is also a .brf file, which can work with a refreshable braille display or a braille embosser. The PDF files are also included for convenience.")
        bodyDiv:Add(tTip)



        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("One thing about algorithms is that once someone knows a few, and knows how they work, that person can combine them (or slightly modify them) to solve new problems. Creativity in algorithms comes from figuring out clever ways to solve problems by developing a process that could be executed by a machine. As a class, we study algorithms and care about them because in programming the techniques and mechanics of certain processes come up over and over and over again. So it's worth knowing a few so programmers don't have to reinvent the wheel. For example, suppose someone just wrote an algorithm to find the smallest card in a row of cards. Is it hard to modify that exact same strategy to find the max card? (The answer is no.) There will be challenges in today's class where students will be solving a few more problems that will require the students to get creative!")
        bodyDiv:Add(getStart)



        bodyDiv:AddHeading("Activity: Adding SWAP to Human Machine Language", 2)
        Paragraph act1
        act1:AddText("Download and follow the activity guide with the students.")
        bodyDiv:Add(act1)

        bodyDiv:AddHeading("Teaching Tips", 4)
            UnorderedList pTipList
                pTipList:AddListItem("If possible, it is easier for students to do this activity with a partner or their teacher. However, the students can still do this activity independently.")
                pTipList:AddListItem("Review the first page of the activity guide and the addition of the " + dq + "swap" + dq + " command.")
                pTipList:AddListItem("Do the example code first: if students have a partner, have one student read the code and ask their partner to perform the task, then have them switch roles and go through the code again.")
        bodyDiv:Add(pTipList)
            Paragraph pTipPara
                pTipPara:AddText("Here's what the example program does:")
        bodyDiv:Add(pTipPara)
            UnorderedList pTipList2
                pTipList2:AddListItem("END STATE: the order of the cards has been reversed")
                pTipList2:AddListItem("It does this by first moving the right hand to the end of the list, then shifting each hand progressively toward the middle of the row, swapping cards each time.")
                pTipList2:AddListItem("The program stops once the hands have crossed over each other (by checking if RHPos < LHPos)")
        bodyDiv:Add(pTipList2)
                
        bodyDiv:AddHeading("Challenge Activity: Min-to-Front", 2)
            UnorderedList chList
                chList:AddListItem("The challenge is to find the min card and swap it to the front of the list, keeping the order of the rest of the cards the same.")
                chList:AddListItem("IDEA: Solve the problem of " + dq + "move-to-front" + dq + " first. Remember: " + dq + "Algorithms can be combined to make new algorithms." + dq + " The students should know a solution to find min from the previous lesson, so they can put that out of mind for a minute. Instead, ask the students to start by assuming that they have found the min card, and then have them write a procedure to move some card to the front of the list by swapping. Once they have finished that, they can simply add their algorithms for finding min to the algorithms they just wrote.")
                chList:AddListItem("Remind the students to not be afraid to invent a completely new algorithm.")
        bodyDiv:Add(chList)



        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddHeading("Identify Sequencing, Selection, and Iteration in Human Machine Programs", 4)
            Paragraph wrapup2
                wrapup2:AddText("The CSP Framework states: ")
        bodyDiv:Add(wrapup2)
            UnorderedList w2List
                w2List:AddListItem("Sequencing, selection, and iteration are building blocks of algorithms.")
                w2List:AddListItem("Every algorithm can be constructed using only sequencing, selection, and iteration.")
        bodyDiv:Add(w2List)
            Paragraph wrapup3
                wrapup3:AddText("If these statements are true then we should be 
                    able to identify these elements of sequencing, selection and iteration 
                    in our Find-Min and Min-to-Front algorithms. Give the students a quick 
                    definition of each and ask them if or where we saw it in our 
                    Human Machine Language programs...")
        bodyDiv:Add(wrapup3)
            UnorderedList w3List
            w3List:AddText("<b>" + dq + "Sequencing is the application of each step of an algorithm in the order in which the statements are given." + dq + " -- Does our human machine language have sequencing?</b>")
        bodyDiv:Add(w3List)    
        UnorderedList wu
        wu:AddText("Sequencing is so fundamental to programming it sometimes goes without saying. In our lesson, the sequencing is simply implied by the fact that we number the instructions with the intent to execute them in order.")
        bodyDiv:Add(wu)
        bodyDiv:Add(break)
        UnorderedList wu1
        wu1:AddText("<b>â€˜Selection uses a [true-false] condition to determine which of two parts of an algorithm is used.â€™ -- Where did we encounter â€˜selectionâ€™ in our human machine language programs?</b> ")
        bodyDiv:Add(wu1)

        UnorderedList wu2
        wu2:AddText("The JUMPâ€¦IF command in the Human Machine Language is a form of selection. It gives us a way to compare two things (numbers) and take action if the comparison is true, or simply proceed with the sequence if false. NOTE: Selection is also known as â€œbranchingâ€? and is most commonly encountered in if-statements in programs.")
        bodyDiv:Add(wu2)
        bodyDiv:Add(break)
        UnorderedList wu3
        wu3:AddText("<b>â€˜Iteration is the repetition of part of an algorithm until a condition is met or for a specified number of times.â€™ -- Where did we come across iteration in our human machine language programs? </b>")
        bodyDiv:Add(wu3)

        UnorderedList w3List_1
        w3List_1:AddText("The JUMP command (as well as JUMP...IF) in the Human Machine Language allows us to move to a different point in the program and start executing from there. This allows us to re-use lines of code, and this is a form of iteration or looping. (NOTE: Iteration is also known as " + dq + "looping" + dq + " in most programming languages.)")
        bodyDiv:Add(w3List_1)

        bodyDiv:AddHeading("Discussion", 3)
            Paragraph disc
                disc:AddText("After reviewing solutions, there are a few points to make to wrap up this foray into algorithms:")
        bodyDiv:Add(disc)
        bodyDiv:AddHeading("Algorithms can be combined to make new algorithms", 4)
            UnorderedList dList1
                dList1:AddListItem("This is an important essential knowledge statement directly from the CSP Framework. Students should be able to identify the connection between the the Find-Min problem and the Min-to-Front problem")
        bodyDiv:Add(dList1)
        bodyDiv:AddHeading("Low-Level languages exist", 4)
            UnorderedList dList2
                dList2:AddListItem("Most programming languages that you use in every day life are simply higher level, perhaps easier-to-read commands that are translated into more primitive machine commands. So-called " + dq + "low level" + dq + " languages are the most basic, primitive, set of commands to control a computer. The Human Machine Language is similar to something called Assembly Language.")
                dList2:AddListItemLink("Assembly Language", "https://en.wikipedia.org/wiki/Assembly_language")
                dList2:AddListItem("From the CSP Framework: 2.2.3C " + dq + "Code in a programming language is often translated into code in another (lower level) language to be executed on a computer." + dq)
                dList2:AddListItem("The Human Machine Language is a " + dq + "low level" + dq + " language because the commands are very primitive and tie directly specific functions of the human machine.")
        bodyDiv:Add(dList2)

        bodyDiv:AddHeading("Teaching Tips", 4)
            Paragraph pTipDisc
                pTipDisc:AddText("The students don't really need to know many specifics about low level languages. The point should be made here in order to refer back to it later when the students are programming in a high level language (like JavaScript, Quorum, etc.). A high level language is more abstract, provides more functionality to make it faster to write and reason about programs, but ultimately that code is translated down into low-level, primitive machine instructions for the computer to execute.")
        bodyDiv:Add(pTipDisc)

        bodyDiv:AddHeading("Video: You Should Learn to Program: Christian Genco at TEDxSMU", 4)

        InlineFrame inlineFrame
                inlineFrame:SetHeight("480")
                inlineFrame:SetWidth("854")
                inlineFrame:SetAddress("https://www.youtube.com/embed/xfBWk4nw440")
        bodyDiv:Add(inlineFrame)

        UnorderedList vid
            vid:AddListItemLink("You Should Learn to Program: Christian Genco at TEDxSMU - Video", "https://www.youtube.com/watch?v=xfBWk4nw440")
        bodyDiv:Add(vid)

        bodyDiv:AddHeading("Remarks", 3)
            Paragraph remark
                remark:AddText("Learning to program is really learning how to think in terms of algorithms and processes. And it can be really fun and addicting. In the next lesson the students will start writing programs that a real machine (not a human machine) will execute. But since programming is really about thinking and problem solving, their " + dq + "human machine" + dq + " skills will come in handy - reasoning about programming is a way of reasoning about what a computer can and cannot do, and what the given language you're using lets you and doesn't let you do.")
        bodyDiv:Add(remark)



        bodyDiv:AddHeading("Assessment", 2)
            Paragraph assess
                assess:AddText("Write a human machine language program that: Repeatedly shifts the left hand to the right until it finds a 5 or 6. The program should stop when the left hand is at (or past) the end of the list, or it finds a 5, or it finds a 6.")
        bodyDiv:Add(assess)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.3 (C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.1 (A, B, C, D, E, F, G, H, I)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.2.1 (A, B, D, E, J)")
        bodyDiv:Add(list)

/* Completed 1/14/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn more about algorithms and how creativity fits into them"
    end

    action GetSummaryName returns text
        return "Code.Org Unit3 Lesson 3 (Creativity in Algorithms)"
    end
    action GetName returns text
        return "Code.Org Unit3 Lesson 3"
    end
    action GetShortDescription returns text
        return "Learn about creativity in algorithms"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson3A.html"
    end

end
