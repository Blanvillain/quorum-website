use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson7A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 7: APIs/Libraries and Using Actions with Parameters")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 7: API/Code Completion/Libraries and Using Actions with Parameters", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box
        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")





        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("The students will learn to read the Quorum Programming 
                    Language's " + dq + "Library" + dq + " documentation and will use actions that accept 
                    parameters in order to complete a series of challenges which require 
                    them to make use of the Quorum Programming Language's " + dq + "Library" + dq + " 
                    documentation to learn new drawing commands. Many of these commands 
                    will require the use of parameters. The final challenge asks the students to 
                    design a personal monogram making use of the commands that they learned 
                    in the lesson.")
        bodyDiv:Add(ov1)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Documentation: ", "a description of the behavior of a command, function, library, API, etc.")
                AddListItemWithBoldAtFront(voc, "Library: ", "a collection of commands/functions, typically with a shared purpose")
                AddListItemWithBoldAtFront(voc, "Parameter: ", "an extra piece of information passed to a function to customize it for a specific need")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Use parameters to provide different values as input to procedures when they are called in a program.")
                goalList:AddListItem("Use Quorum Programming Language's " + dq + "Library" + dq + " documentation to assist in writing programs.")
                goalList:AddListItem("Define a " + dq + "Library" + dq + " as the set of commands made available by a programming language.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The " + dq + "Library" + dq + " is a reference guide 
                    which catalogs and explains the functionality of a programming 
                    language in Quorum Programming Language. If a programmer 
                    develops the practice of referencing a " + dq + "Library," + dq + " he or she can 
                    make full use of that functionality without undergoing the 
                    tedium of memorizing every detail of the language. In today's 
                    lesson, the students will need to read through the " + dq + "Quorum Standard 
                    Library" + dq + " in order to find and understand new commands for 
                    moving the turtle to draw different patterns of shapes on 
                    the screen. The students should not necessarily understand every command 
                    in the  " + dq + "Quorum Standard Library" + dq + " in detail, but they should 
                    be familiar with referencing the " + dq + "Quorum Standard Library" + dq + " 
                    as a standard part of the process of writing a program. 
                    This will also be the first time that they are given access to 
                    drawing functions that take parameters.")
        bodyDiv:Add(purpose)



        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("So far in this unit the students have been 
                    exploring programming by drawing turtle art with only 
                    a few commands. It will probably not surprise them 
                    to learn that there are many more commands 
                    included in most programming languages.  
                    In fact, most programming languages 
                    include hundreds if not thousands of 
                    commands. The Quorum Programming Language 
                    includes an extensive number of actions 
                    that make it possible for the students to not only 
                    work on the Quorum Turtle module, but also to 
                    create 2D and 3D games, mobile apps, commercial 
                    programs, and even control robots. Possibility is 
                    limitless as far as they, " + dq + "the programmers," + dq + " have imagination 
                    and creativity.")
        bodyDiv:Add(getStart)
        bodyDiv:AddHeading("Discussion Prompt", 4)
            Paragraph getStart2
                getStart2:AddText("Do they think programmers memorize 
                    all of the commands in a programming language? If not, 
                    how is anyone ever able to use an entire programming language?")
        bodyDiv:Add(getStart2)
        UnorderedList gs_1
        gs_1:AddText("<b>Discussion Goal</b>")
        bodyDiv:Add(gs_1)
        bodyDiv:Add(break)
            UnorderedList getStart3
                getStart3:AddText("What Makes a Programmer: This 
                    discussion is a great opportunity to emphasize that programming 
                    is not some innate talent. Every programmer has to learn by 
                    reviewing examples of a language being used and reading 
                    documentation. In fact, even professional programmers 
                    will frequently reference documentation while designing 
                    software. Becoming a good programmer is much less about 
                    memorizing a language and more about learning habits of the 
                    mind and patterns that allow them to use a language (including 
                    its documentation) effectively! Programmers weren't born knowing 
                    how a programming language works, and they don't 
                    have perfect memories. Instead they rely on written documentation 
                    to help them learn new features of a language and recall how it works. 
                    Today the students are going to be exploring how useful documentation can be 
                    when learning a programming language or just writing software.")
        bodyDiv:Add(getStart3)

        bodyDiv:AddHeading("Activity: Exploring " + dq + "Quorum Standard Libraries" + dq, 2)

//            Paragraph act
//                act:AddText("In Code.org's CSP curriculum, the word API - 
//                    Application Programming Interface - is used to explain the useful 
//                    function of their IDE, " + dq + "Code Studio." + dq + " When the students are using Quorum 
//                    Programming Language on the IDE " + dq + "Sodbeans," + dq + " they can think of 
//                    this concept of API as something similar to the " + dq + "code completion" + dq + " 
//                    function of the Sodbeans. When they start writing more complex program 
//                    in the later Unit,  they will have chance to experience this very 
//                    useful function of the IDE much more than they would in this Unit. 
//                    The following picture shows the example of the occurrence of 
//                    the " + dq + "code completion" + dq + " when writing a program.")
//        bodyDiv:Add(act)
//
//        bodyDiv:AddHeading("Picture Description", 5)
//            Paragraph picDesc
//                picDesc:SetClassAttribute("cool-box")
//                picDesc:AddText("The picture below shows the image of 
//                    Sodbean IDE editing pane on the background. On top of this background, 
//                    there are two pop up box: one is to show the list of the available 
//                    " + dq + "cations" + dq + " in the specific class of the " + dq + "Quorum Standard Libraries" + dq + ". 
//                    The other is to show the general description of what the selected 
//                    action does for the program.")
//        bodyDiv:Add(picDesc)
//
//        bodyDiv:AddImage("/files/code/Unit3/CodeCompletion.png", "Code Completion")
//
//            Paragraph act2
//                act2:AddText("In the IDE Sodbeans, the " + dq + "code completion" + dq + " 
//                    is not the function of the Quorum Language itself. It is rather the 
//                    function of the Sodbeans supported by the Quorum Programming Language. 
//                    The bigger picture is that a programming language needs to have its own 
//                    " + dq + "Libraries" + dq + " to support the " + dq + "code completion" + dq + " function in an IDE. Quorum 
//                    Language has an extensive " + dq + "documentation" + dq + " on its web-site for the " + dq + "Quorum 
//                    Standard Libraries" + dq + ". As programmers, it is more helpful for the students to visit 
//                    these libraries often to learn and discover what the language is capable of, 
//                    rather than always relying on the " + dq + "code completion" + dq + " function of the IDE. 
//                    They can find the documentation for the Quorum Standard Libraries by visiting 
//                    Quorum Language home page and activating the link on the top named " + dq + "Libraries" + dq + ", 
//                    then going into the categorized classes that they may need to use the 
//                    type of program that they are creating. This concept is discussed further 
//                    in the later unit of this curriculum. The following picture shows 
//                    how the Quorum Libraries (at the top hierarchy level) look like.")
//        bodyDiv:Add(act2)
//        bodyDiv:AddHeading("Visit the Quorum Standard Libraries and Explore!", 4)







        bodyDiv:AddHeading("Activity: Exploring 'Quorum Standard Libraries'", 2)
            Paragraph act
                act:AddText("In Code.org CSP curriculum, the word API - 
                    Application Programming Interface - is used to explain the useful 
                    function of the IDE ‘Code Studio’ . When the students are using Quorum 
                    Programming Language on the IDE ‘Sodbeans’,  they can think of 
                    this concept of API as something similar to the ‘code completion’ 
                    function of the Sodbeans. When they start writing more complex program 
                    in the later Unit,  they will have chance to experience this very 
                    useful function of the IDE much more than they would in this Unit. 
                    The following picture shows the example of the occurrence of 
                    the ‘code completion’ when writing a program.")
        bodyDiv:Add(act)

        bodyDiv:AddHeading("Picture Description", 5)
            Paragraph picDesc
                picDesc:SetClassAttribute("cool-box")
                picDesc:AddText("The picture below shows the image of 
                    Sodbean IDE editing pane on the background. On top of this background, 
                    there are two pop up box: one is to show the list of the available 
                    ‘cations’ in the specific class of the ‘Quorum Standard Libraries’. 
                    The other is to show the general description of what the selected 
                    action does for the program.")
        bodyDiv:Add(picDesc)

        bodyDiv:AddImage("/files/code/Unit3/CodeCompletion.png", "Code Completion")

            Paragraph act2
                act2:AddText("In the IDE Sodbeans, the ‘code completion’ 
                    is not the function of the Quorum Language itself. It is rather the 
                    function of the Sodbeans supported by the Quorum Programming Language. 
                    The bigger picture is that a programming language needs to have its own 
                    ‘Libraries’ to support the ‘code completion’ function in an IDE. Quorum 
                    Language has an extensive ‘documentation’ on its web-site for the ‘Quorum 
                    Standard Libraries’. As programmers, it is more helpful for the students to visit 
                    these libraries often to learn and discover what the language is capable of, 
                    rather than always relying on the ‘code completion’ function of the IDE. 
                    They can find the documentation for the Quorum Standard Libraries by visiting 
                    Quorum Language home page and activating the link on the top named ‘Libraries’, 
                    then going into the categorized classes that they may need to use the 
                    type of program that they are creating. This concept is discussed further 
                    in the later unit of this curriculum. The following picture shows 
                    the structure of the Quorum Libraries (at the top hierarchy level).")
        bodyDiv:Add(act2)

        bodyDiv:AddHeading("Picture Description", 5)
            Paragraph picDesc2
                picDesc2:SetClassAttribute("cool-box")
                picDesc2:AddText("The image below shows the Quorum Language web site. The Quorum Standard Libraries 
                    at the top level is a vast list of classes that contains actions 
                    available for the programmers.")
        bodyDiv:Add(picDesc2)

        bodyDiv:AddImage("/media/code/QuorumStandardLibraries.png", "Quorum Standard Library")
        bodyDiv:Add(break)
        bodyDiv:Add(break)

        bodyDiv:AddHeading("Visit the Quorum Standard Libraries and Explore!", 4)
            Paragraph visitLib
                visitLib:AddText("Visit the Quorum Standard Libraries and 
                    explore the use of it by following the direction below. At the end of 
                    each exploration, the students can read the document where you find 
                    the list of actions with the general description and example of use 
                    for each action. If the students are not familiar with this language - most 
                    of them should not be at this point, majority of the information in 
                    the documents would not make any sense to them. That is OK at this 
                    point. The purpose of this activity is to provide them with a chance 
                    to learn how to navigate in the Quorum Standard Libraries. If they get 
                    the flow of the navigation, try to find the library class for the 
                    documentation of the the Quorum Turtle Module. ")
        bodyDiv:Add(visitLib)
            OrderedList libList
                libList:AddListItemLink("Go to the Quorum Programming Language home page (link)", "https://quorumlanguage.com")
                libList:AddListItem("Activate the " + dq + "Libraries" + dq + " link on the top.")
                libList:AddListItem("Chose and activate a link from the list of links (for the available classes)")
                libList:AddListItem("On the next page the students would find the list of the " + dq + "actions" + dq + " available in the class that they have chosen. Activate the link to go to the relevant part of the documentation on the same page.")
                libList:AddListItem("Then read the documentation for that part. Note: We are not asking the students to read the entire documentation - just the part that they chose.")
        bodyDiv:Add(libList)

        bodyDiv:AddHeading("Activity: Coding Challenge", 2)

        bodyDiv:AddHeading("Using Actions with Parameter(s)", 4)
            Paragraph parameter
                parameter:AddText("Today the students are going to learn how some functions can 
                    accept input, such as a number, to more exactly control the turtle's behavior and learning the term parameter. 
                    For example, a student can write <b>RepeatMoveForward(3)</b> to move the turtle 3 block 
                    with this single call of an action.")
        bodyDiv:Add(parameter)


        bodyDiv:AddHeading("Challenge 14: Boundary of Turtle's Movements", 3)

        studentInstruction:AddHeading("Student Instructions", 4)
        studentInstruction:AddParagraph("Place the turtle at position <b>a0</b>, then use the action <b>RepeatMoveForward(11)</b> to move the turtle forward 11 steps. Try it and discover what happens. 
                The number you wrote in the parenthesis 
                    at the end of this action <b>RepeatMoveForward()</b> is called " + dq + "parameter" + dq + " in the 
                    Quorum Programming Language. It gives the programmer an option 
                    to input how he or she wants the simple command to be modified on 
                    execution. The parameter could be one number, several numbers, 
                    text, or even combination of all the above, each separate by 
                    comma in the parenthesis.")
        studentInstruction:AddParagraph("Your goal for this challenge is to try to find the dimensions of movable 
                    area for the turtle in this module.")
        SideBySideIDE CSP_U3L07_14
        CSP_U3L07_14:SetUniqueIdentifier("CSP_U3L07_14")
        CSP_U3L07_14:GetIDETitle():AddText("Quorum Turtle Module: Challenge 14")
        CSP_U3L07_14:SetGameEnvironment(false)
        CSP_U3L07_14:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
          StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L07_14:Setup()
        studentInstruction:Add(CSP_U3L07_14)
        bodyDiv:Add(studentInstruction)
            Paragraph chlg14_2
                chlg14_2:AddText("The students will soon find out that the turtle does not go any further than 
                    a certain point. 
                    If the students check their <b>console output</b> area at that point, they 
                    will read the message ‘Couldn’t move up (or down/right/left)’. 
                    ")
        bodyDiv:Add(chlg14_2)



        bodyDiv:AddHeading("Challenge 15: Start the turtle from the position of your choice", 3)
            //Paragraph chlg15
                //chlg15:AddText("Up to this point, we used the SetStartPostion() action in the starting position area to place the turtle on the dot that works for the challenge you are working on. However, you really have not had a way to set the starting position of your choice. Now we will introduce you to new action called SetStartCoordinate(x, y). ")
        //bodyDiv:Add(chlg15)

        studentInstruction1:AddHeading("Student Instructions", 4)
        studentInstruction1:AddParagraph("As we noted in the previous lessons, the Quorum Turtle Module 
                        consists of 121 dots arranged in eleven rows and eleven columns. 
                        The parameter " + dq + "x" + dq + " represents the column number, and 
                        " + dq + "y" + dq + " represents the row number.")
        studentInstruction1:AddParagraph("So the <b>SetStartingCoordinates(x, y)</b> actually accepts two parameters. Note that the first row and first column have x = 0 and y = 0 for their coordinates, respectively, and the final (eleventh) row and column have x = 10 and y = 10, respectively. You can try to start the turtle at different positions in the IDE below.")
                SideBySideIDE CSP_U3L07_15
        CSP_U3L07_15:SetUniqueIdentifier("CSP_U3L07_15")
        CSP_U3L07_15:GetIDETitle():AddText("Quorum Turtle Module: Challenge 15")
        CSP_U3L07_15:SetGameEnvironment(false)
        CSP_U3L07_15:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
          StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L07_15:Setup()
        studentInstruction1:Add(CSP_U3L07_15)
        bodyDiv:Add(studentInstruction1)



        bodyDiv:AddHeading("Wrap Up", 2)
            Paragraph wrapup
                wrapup:AddText("The level progression for today's lesson 
                    includes many important vocabulary words. While these levels 
                    attempt to introduce these words in the context of using them, 
                    take a moment at the conclusion of the class to review the words 
                    covered and ensure that the students are comfortable using them.")
        bodyDiv:Add(wrapup)
            UnorderedList wuList
                AddListItemWithBoldAtFront(wuList, "Parameter: ", "accepts a value to be passed to an action, typically affecting the behavior of that action (e.g., changing the distance the <b>moveForward()</b> command moves the turtle)")
                AddListItemWithBoldAtFront(wuList, "Library: ", "a collection of commands/actions, typically with a shared purpose (e.g., a library of actions for manipulating the turtle)")
                AddListItemWithBoldAtFront(wuList, "API/Code Completion: ", "application program interface, the full set of commands included in a programming language (e.g., every command made available by App Lab or Sodbeans respectively)")
                AddListItemWithBoldAtFront(wuList, "Documentation: ", "a description of the behavior of an action, library, API, etc.")
        bodyDiv:Add(wuList)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Multiple Choice: What is an API (also represented as " + dq + "Code Completion" + dq + ")?", 4)
            UnorderedList assess1
                assess1:AddListItem("A.) Abstract Programming Inheritance: The idea that abstractions in languages get " + dq + "passed down" + dq + " in newer versions")
                assess1:AddListItem("B.) Artificial Parameter Intelligence: The idea that action parameters should be intelligent enough to " + dq + "know" + dq + " what you want as a programmer")
                assess1:AddListItem("C.) Application Program Interface: A well-documented library of actions provided in a programming language that helps to simplify complex programming tasks.")
                assess1:AddListItem("D.) Abstract Parameter Interface: A high-level description of the parameters an action accepts")
                assess1:AddListItem("E.) Applied Power Implementation: A process by which functions are given extra override power related to parameters.")
        bodyDiv:Add(assess1)

        bodyDiv:AddHeading("Multiple Choice: What is an action parameter?", 4)
            UnorderedList assess2
                assess2:AddListItem("A.) A measure of the distance between an action's conception and implementation")
                assess2:AddListItem("B.) A way to give input to an action that controls how the action runs.")
                assess2:AddListItem("C.) A collection of commands that can be used in a programming language.")
                assess2:AddListItem("D.) Another name for the purpose of an action.")
                assess2:AddListItem("E.) A named memory location.")
        bodyDiv:Add(assess2)

        bodyDiv:AddHeading("Free Response: ", 4)
            Paragraph q3
                q3:AddText("It is said that actions with parameters generalize the behavior of a more specific command. Explain what this sentence means to you using the difference between turnLeft() and turnLeft(angle).")
        bodyDiv:Add(q3)



        bodyDiv:AddHeading("Extended Learning", 2)
            Paragraph e1
                e1:AddText("Ask the students to use the commands learned today to draw a picture. Ask them to 
                    challenge one of their classmates to recreate the picture. 
                    If the classmate was able to recreate this picture, ask the students to 
                    compare and contrast on how the methods that they both used.")
                bodyDiv:Add(e1)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.2 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.3 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (D, E, F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.3 (A, B, C, D, E, F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.3.1 (D, E, F, G, M, N, O)")
        bodyDiv:Add(list)

/* Completed 2/21/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about APIs/Libraries and how to write Actions with parameters in the Quorum Programming Language."
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 7 (APIs/Libraries and Using Actions with Parameters)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 7"
    end
    action GetShortDescription returns text
        return "Learn about APIs/Libraries and using Actions with parameters"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson7A.html"
    end

end
