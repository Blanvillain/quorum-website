use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit4Lesson5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 4 Lesson 5: Conditionals Explore")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Variables, Conditionals, and Functions - Lesson 5: Conditionals Explore", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Variables, Conditionals, and Functions - Lesson 5: Conditionals Explore")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)

        Paragraph overview
        overview:AddText("Students learn the basics of conditionals through an unplugged activity using the sticky notes and plastic baggies from the Variables Explore lesson. Flowcharts are introduced as a way to understand how computers make decisions using Boolean expressions. ")
        section_intro:Add(overview)


         AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList lesson
        lesson:AddClassAttribute("list-disc list-outside pl-8")
        lesson:AddListItem("Use appropriate vocabulary to describe Boolean expressions and conditional statements")
        lesson:AddListItem("Evaluate expressions that include Boolean values, comparison operators, and logical operators")
        lesson:AddListItem("Trace simple programs that use Boolean expressions and conditional statements")
        section_intro:Add(lesson)


        AddHeading(section_intro, "Purpose", 3)
        Paragraph background
        background:AddText("The warm up activity is designed to provide context for the Conditionals progression. The subsequent activity provides students a physical mental model they will be able to use when they start programming with conditionals in the subsequent lessons.")
        section_intro:Add(background)


         AddHeading(section_intro, "Resources", 3)
        UnorderedList resos
        resos:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        resos:AddListItemLink("CS Principles: Conditionals - Part 1 Boolean Expressions (Video)", "https://www.youtube.com/watch?v=y3rCKJNOwpA")
        resos:AddListItemLink("Code.org CSP Unit 4 - Variables, Conditionals, and Functions (Presentation Slides)", "https://docs.google.com/presentation/d/1GhpZOh2589s9MuKsll7YkQ3xv6nwcpmtAnTCgJPIXC0/copy")
        section_intro:Add(resos)


        
        Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
       
        section_gettingStarted:AddParagraphBoldFront("Discuss:"," Imagine you want to make a decision about what to wear to an event. Name two pieces of information you'd want. How would you use them in your decision? ")



                Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (30 minutes)", 2)
        section_activity:AddParagraphBoldFront("Group:"," Group students in pairs.")
        section_activity:AddParagraphBoldFront("Distribute:"," Give each pair of students:")
        UnorderedList distribute
        distribute:AddClassAttribute("list-disc list-outside pl-8")
        distribute:AddListItem("A small stack of red, yellow, and blue sticky notes")        
        distribute:AddListItem("A pen/pencil")
        distribute:AddListItem("3 plastic baggies")
        distribute:AddListItem("A dry erase marker to share with another group")
        section_activity:Add(distribute)

     
        Division substitutes = AddTeachingTip(section_activity)

        substitutes:AddParagraphBoldFront("Supplies Substitutions:"," There's no need to use stickie notes if you have other scraps of colored paper. Also consider cutting stickies in 4 to make them go further. If you don't have dry erase markers handy consider using pieces of masking tape on the baggies.")

        // Should add more here for accessible learning

       
        

        Paragraph guidedActivity
        guidedActivity:AddText(AddTextBoldFront("Guided Activity:"," Today's activity introduces students to the concept of variables. As a visual aid, you can use "))
        Link link = guidedActivity:AddLink("Code.org's presentation slides for Unit 4, Lesson 5: Conditionals Explore", "https://docs.google.com/presentation/d/1GhpZOh2589s9MuKsll7YkQ3xv6nwcpmtAnTCgJPIXC0/copy")
        link:SetClassAttribute("underline text-quorum-blue-150")
        guidedActivity:AddText(". These slides include animations. The notes below describe when to move to the next slide or click through an animation -- if you aren't using the slides, you can ignore these prompts.")
        section_activity:Add(guidedActivity)

        Division runningTip = AddTeachingTip(section_activity)
      
        runningTip:AddParagraphBoldFront("Running the Activity:"," This activity asks students to follow along as a number of core concepts for programming are introduced. The model is typically that a term or concept is introduced and modeled and then afterwards students are encouraged to try it out on their own. Trying it out typically means they are writing information on a sticky note and sharing it with another group before discussing the results with the whole class.")
        runningTip:AddParagraph("If you're using the slides to accompany this activity, slides with animations have an icon in the bottom left corner to let you know you need to click to reveal more of the slide's content.")
        runningTip:AddParagraph("To help you more easily prepare the activity and keep track of your instructions, detailed instructions have been included as speaker notes in the presentation. Here are some tips to help you throughout the presentation.")
        UnorderedList slideList
        slideList:AddClassAttribute("list-disc list-outside pl-8")
        slideList:AddListItem("There are opportunities throughout the presentation for students to actively engage. At these moments students should be making things with their manipulatives or using them to answer questions. Use these opportunities to check progress.")
        slideList:AddListItem("There is a fair amount of new vocabulary introduced but it is introduced gradually and with intentional repetition. Make a point of actively modeling the use of new terms.")
        slideList:AddListItem("The most important goal here is building a mental model. It is ok if students have some open questions that will get resolved over the subsequent conditional lessons.")
        slideList:AddListItem("Both you and students can use the " + dq + "Key Takeaways" + dq + " to check your understanding at the end.")
        slideList:AddListItem("Students who have been using Quorum in the previous lessons will have already seen basic conditionals as part of their event-handling code, but they haven't been given context as to how they work. You can reference back to these examples, or just leave them alone for now.")
        Array<text> nestedSlideList
        nestedSlideList:Add("- The " + dq + "equal to" + dq + " operator in Quorum is " + dq + "=" + dq + " instead of " + dq + "==" + dq + "")
        nestedSlideList:Add("- The " + dq + "not equal to" + dq + " operator in Quorum is " + dq + "not=" + dq + " instead of " + dq + "!=" + dq + "")
        nestedSlideList:Add("- The " + dq + "AND" + dq + " operator in Quorum is " + dq + "and" + dq + " instead of " + dq + "&&" + dq + "")
        nestedSlideList:Add("- The " + dq + "OR" + dq + " operator in Quorum is " + dq + "or" + dq + " instead of " + dq + "||" + dq + "")
        nestedSlideList:Add("- The " + dq + "NOT" + dq + " operator in Quorum is " + dq + "not" + dq + " instead of " + dq + "!" + dq + "")
        slideList:AddListItem("The slides use Javascript instead of Quorum. The concepts of conditionals and booleans are valid regardless of language, but when students program, they should know how to use the Quorum symbols. Here's the differences between the two languages:" + MakeNestedUnorderedList(nestedSlideList))
        runningTip:Add(slideList)
      



        AddHeading(section_activity, "Guided Activity", 3)
        section_activity:AddParagraph("Follow this lesson with the supplemental slides.")
        

        section_activity:AddParagraphBoldFront("Slide:"," Conditionals Explore")
        section_activity:AddParagraphBoldFront("Say:"," Today we are going to explore Conditionals.")


        section_activity:AddParagraphBoldFront("Slide:"," Information can be stored as...")
        section_activity:AddParagraphBoldFront("Say:"," Previously, we learned that information can be stored as numbers or strings in variables. These are two different types of data. Numbers and strings can be combined together using operators to make expressions. Expressions are evaluated before storing in variables.")


        section_activity:AddParagraphBoldFront("Slide:"," Information can be also be stored as a...")
        section_activity:AddParagraphBoldFront("Say:"," Boolean values are another type of data. They can store the values " + dq + "true" + dq + " or " + dq + "false" + dq + ". Why would we want that information? Booleans are used to make decisions. If something is true, do this. If something is false, do that. ")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," You only need two blue sticky notes today. Write down " + dq + "true" + dq + " on one and " + dq + "false" + dq + " on the other.")


        section_activity:AddParagraphBoldFront("Slide:"," 3 < 8")
        section_activity:AddParagraphBoldFront("Say:"," Let's look at this expression: <code>3 < 8</code>. Take a guess as to what Boolean value this evaluates to. ")
        section_activity:AddParagraphBoldFront("Do This:"," Hold up the sticky note with the correct value.")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," The expression evaluates to true, because 3 is less than 8.")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," The less than symbol is a comparison operator. When we see a comparison operator, we need to stop and evaluate for a Boolean value. There are six different comparison operators - you may be familiar with some of them from math class. These symbols are less than, greater than, less than or equal to, greater than or equal to, equal to, and not equal to. The symbols on the slide show how these appear in Javascript, but they look different in Quorum. You'll get a chance to practice with the Quorum symbols later.")           


        section_activity:AddParagraphBoldFront("Slide: Each side of the comparison operator...","")
        section_activity:AddParagraphBoldFront("Say:"," Both sides of the relational operator should be reduced to a single value before we can compare. Think of it in terms of sticky notes. You should have only one sticky note on each side. ")
        section_activity:AddParagraphBoldFront("Do This:"," What does 3 + 6 equate to?")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," Right: 9! Now we can compare 9 and 8 using the relational operator: less than. ")
        section_activity:AddParagraphBoldFront("Do This:"," Does this evaluate to true or false? Hold up the correct sticky note. ")
        section_activity:AddParagraphBoldFront("Click for animation.","")


        section_activity:AddParagraphBoldFront("Slide:"," Do This:")
        section_activity:AddParagraphBoldFront("Say:"," Let's evaluate these expressions line by line. It may be helpful to use your sticky notes here.")
        OrderedList expressions
        expressions:AddClassAttribute("list-decimal list-outside pl-8")
        expressions:AddListItem("6 - 3 < 4 + 1")
        expressions:AddListItem("12 / 6 > 3 - 0")
        expressions:AddListItem("(7 - 3) * 3 <= 10")
        expressions:AddListItem("9 + 5 = 4 + 10")
        section_activity:Add(expressions)
        section_activity:AddParagraphBoldFront("Do This:"," Reduce each side of the relational operator to one sticky note. Then evaluate for a Boolean value. Compare your answers with a partner. ")
        section_activity:AddParagraphBoldFront("Click for animation:"," When the class is finished, click through to view the answers. The third line may be a little tricky. Remind students to evaluate the information in the parenthesis first. In the fourth line, draw attention to the double equal signs used in the slide and remind the class double equal signs are a signal to compare if both sides are the same.")


        section_activity:AddParagraphBoldFront("Slide:"," Any of the values in an expression can be a variable.")
        section_activity:AddParagraphBoldFront("Say:"," The expressions that we evaluate can also contain variables. Remember, variables store information. This information can be different data types like numbers, strings, or even Boolean values themselves. For now, we are going to stick with numbers. ")
        section_activity:AddParagraphBoldFront("Do This:"," With a partner, look at these variables and the expression. Reduce both sides of the relational operator, then evaluate for a Boolean value.")
        OrderedList expressions2
        expressions2:AddClassAttribute("list-decimal list-outside pl-8")
        expressions2:AddListItem("lives: 5")
        expressions2:AddListItem("score: 10")
        expressions2:AddListItem("lives + 4 < score - 1")
        section_activity:Add(expressions2)
        section_activity:AddParagraphBoldFront("Click for animation:"," When the class is finished, click through for the answer.")
        section_activity:AddParagraphBoldFront("Say:"," Any expression that can be evaluated as true or false is known as a Boolean Expression.")
     

        section_activity:AddParagraphBoldFront("Slide:"," Decision time!")
        section_activity:AddParagraphBoldFront("Say:"," At the beginning of class, we talked about how Booleans are used to make decisions. Let's see that in action. Consider the following question: Can I go to the movies? I'm allowed to if it's before 8 o'clock. This may seem like a simple decision! But let's think about this like a computer. ")
        section_activity:AddParagraphBoldFront("Do This:"," What information would the computer need to know in order to answer the question. Create a baggie variable to store the information. Give it a name.")    
   

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Can I go to the movies" + dq + " flowchart")
        section_activity:AddParagraphBoldFront("Say:"," We can think of the decision like a flowchart. It's an organized way to make a decision or come to a conclusion. Creating a flowchart helps us think like a computer. At the top, we are listing the variables that are needed. Your variable might be called time or clock or really anything. It doesn't matter as long as you use the same name every time you refer to the variable. For this example, I'm naming my variable " + dq + "time" + dq + ". Let's step through the flowchart with an example to see how it works.")
 

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Can I go to the movies" + dq + " flowchart #2")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," It's 9 o'clock. Can I go to the movies?")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," First I assign 9 to the variable time, then I move on to the diamond section.")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," I see a comparison operator, which let's me know that we need to stop and evaluate the Boolean expression. ")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," First reduce both sides to a single value. Then evaluate for a Boolean value. In this case, The Boolean expression evaluates to false. ")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," Follow the " + dq + "false" + dq + " path, and we arrive at the result: " + dq + "I can't go to the movies." + dq)
        section_activity:AddParagraphBoldFront("Note:"," If students are confused, return back to the previous slide and try running some examples together as a class. Students can hold up true or false when evaluating the Boolean expression. Once students get the hang of using a flowchart, continue on to the next slide.")


        section_activity:AddParagraphBoldFront("Slide:"," Have I won the game?")
        section_activity:AddParagraphBoldFront("Say:"," Here's another decision that needs to be made. I'm not sure if I have won the game I'm playing. I have won it if my score * (times) my lives is greater than 10. ")
        section_activity:AddParagraphBoldFront("Do This:"," Direct students to create baggie variables for the information that needs to be stored and write down the Boolean expression on a spare sticky note or scrap paper. Groups then compare their Boolean expressions.")
      



        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Have I won the game?" + dq + " flowchart")
        section_activity:AddParagraphBoldFront("Say:"," Take a look at the Boolean expression in the decision section of the flowchart: " + AddCodeTag("score * lives > 10") +". Is this similar to what you and your partner wrote? Are there other ways we could construct this? (score and lives might have different names, score and lives might be in opposite order, you could write it as 10 < score * lives).")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Do This:"," With a partner, try following the flowchart with a few different inputs.")
   

        section_activity:AddParagraphBoldFront("Slide:"," Challenge!!")
        section_activity:AddParagraphBoldFront("Say:"," Here's a new decision we need to make:")
        section_activity:AddParagraph("Is my dog older than me if his age is converted to human years? Seven dog years equals one human year.")
        section_activity:AddParagraphBoldFront("Do This:"," With a partner walk through these steps. Think about what the Boolean expression will look like.")
        OrderedList steps
        steps:AddClassAttribute("list-decimal list-outside pl-8")
        steps:AddListItem("What information do I need to know?")
        steps:AddListItem("Create baggie variable(s) to store that information. Give them names.")
        steps:AddListItem("With a partner, discuss what the Boolean will look like. What will be compared?")
        section_activity:Add(steps)
      

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Is my dog older than me" + dq + " flowchart")
        section_activity:AddParagraphBoldFront("Say:"," Let's use a flowchart for the question we just considered.")
        section_activity:AddParagraphBoldFront("Do This:"," With your partner, step through a flowchart with a few different inputs.")
        section_activity:AddParagraphBoldFront("Note:"," After students have practice on their own, call on one group to give input values for " + AddCodeTag("dogAge") + " and " + AddCodeTag("myAge") + " and step through the flowchart as a class. ")
      

        section_activity:AddParagraphBoldFront("Slide:"," What if my decision requires several steps?")
        section_activity:AddParagraphBoldFront("Say:"," What happens if my decision requires several steps? I want to adopt a cat, but I have to have both 40 dollars and be over 14 years old. ")
        section_activity:AddParagraphBoldFront("Note:"," Emphasize precise language here. The Boolean is checking if I have 40 dollars - that's exactly 40, not one cent more! In the Conditional Practice lesson, students will return to this flowchart and edit it to account for having more than 40 dollars.")
  

        section_activity:AddParagraphBoldFront("Slide:"," Can I adopt a cat?")
        section_activity:AddParagraphBoldFront("Say:"," Let's get setup for stepping through the decision making process for this question: ")
        section_activity:AddParagraph("Can I adopt a cat? I can if I have 40 dollars AND I am over 14 years old.")
        section_activity:AddParagraphBoldFront("Do This:"," Set up your baggies, and discuss with a partner how the flowchart might be set up.")
        OrderedList steps2
        steps2:AddClassAttribute("list-decimal list-outside pl-8")
        steps2:AddListItem("What information do I need to know?")
        steps2:AddListItem("Create baggie variable(s) to store that information. Give them names.")
        steps2:AddListItem("With a partner, discuss what the Boolean will look like. What will be compared?")
        section_activity:Add(steps2)

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Can I adopt a cat?" + dq + " flowchart")
        section_activity:AddParagraphBoldFront("Say:"," This flowchart looks a little different from the previous one. There are two stopping points where a Boolean expression is evaluated. Let's try this out with an example. ")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through, one step at a time with the class. When you get to a decision point, before clicking to the next animation have students evaluate the expression and hold up a blue sticky note. ")
        section_activity:AddParagraphBoldFront("Say:"," Notice in the question box, I've stated that I can adopt the cat if I have 40 dollars AND (emphasize) I am over 14 years old. I am checking two things. Let's look at a way to simplify that process.")


        section_activity:AddParagraphBoldFront("Slide:"," Boolean values are a type of information...")
        section_activity:AddParagraph("Say: In the previous example, we had two Boolean expressions to evaluate. We can use logical operators to compare the results of those Boolean expressions. The logical operators we will look at are AND, OR, and NOT.")
        section_activity:AddParagraphBoldFront("Note:"," If you're using the slides, the symbols shown are for Javascript. In Quorum, these logical operators are " + AddCodeTag("and") + ", " + AddCodeTag("or") + ", and " + AddCodeTag("not") + ".)")


        section_activity:AddParagraphBoldFront("Slide:"," Let's take a look at Truth Tables")
        section_activity:AddParagraphBoldFront("Say:"," Now we're going to take a look at something called a Truth Table.")


        section_activity:AddParagraphBoldFront("Slide:"," Truth Table (AND)")
        section_activity:AddParagraph("This is a truth table.")
        UnorderedList andTable
        andTable:AddClassAttribute("list-decimal list-outside pl-8")
        andTable:AddListItem(AddCodeTag("true") + " and " + AddCodeTag("true") + " = " + AddCodeTag("true") + "")
        andTable:AddListItem("" + AddCodeTag("true") + " and " + AddCodeTag("false") + " = " + AddCodeTag("false") + "")
        andTable:AddListItem("" + AddCodeTag("false") + " and " + AddCodeTag("true") + " = " + AddCodeTag("false") + "")
        andTable:AddListItem("" + AddCodeTag("false") + " and " + AddCodeTag("false") + " = " + AddCodeTag("false") + "")
        section_activity:Add(andTable)
        section_activity:AddParagraphBoldFront("Say:"," The table demonstrates all the possible combinations of true and false and what they would evaluate to if combined with the logical operator AND. The first one seems obvious to us - if something is true and another thing is true, then the whole thing is true!. Read through each row, and consider what is being stated. In rows 2 and 3, if one value is false, the whole thing evaluates to false. This is what happened with the cat example. On the final line, if both values are false, the final evaluation is false.")
        section_activity:AddParagraphBoldFront("Click for animation.","")
        section_activity:AddParagraphBoldFront("Say:"," What's the takeway? In evaluating two Boolean expressions with the AND operator, both must be true in order for the whole expression to evaluate as true.")


        section_activity:AddParagraphBoldFront("Slide:"," Truth Table (OR)")
        section_activity:AddParagraphBoldFront("Say:"," Now let's consider a Truth Table for OR.")
        OrderedList orTable
        orTable:AddClassAttribute("list-decimal list-outside pl-8")
        orTable:AddListItem(AddCodeTag("true") + " or " + AddCodeTag("true"))
        orTable:AddListItem(AddCodeTag("false") + " or " + AddCodeTag("true"))
        orTable:AddListItem(AddCodeTag("true") + " or " + AddCodeTag("false"))
        orTable:AddListItem(AddCodeTag("false") + " or " + AddCodeTag("false"))
        section_activity:Add(orTable)
        section_activity:AddParagraphBoldFront("Do This:"," With a partner, evaluate each row. For example, if the first sticky is " + AddCodeTag("true") + " or the second sticky is " + AddCodeTag("true") + " what do you think the whole expression will evaluate to: true or false? ")
        section_activity:AddParagraphBoldFront("Click for animation:"," Stop line by line and allow time for groups to make their predictions.")
        section_activity:AddParagraphBoldFront("Say:"," For the OR Truth Table, if either sticky note is true, the expression evaluates to true.")

        section_activity:AddParagraphBoldFront("Slide:"," Truth Table (NOT)")
        section_activity:AddParagraphBoldFront("Say:"," The NOT table is simple because it reverses the value. ")
        section_activity:AddParagraphBoldFront("Click for animation:"," As a class quickly state what the opposite values are and click through the animations.")


        section_activity:AddParagraphBoldFront("Slide:"," Use logical operators to combine...")
        section_activity:AddParagraphBoldFront("Say:"," Let's return to the cat example. How can we write a single expression that accounts for all the information that needs to be checked? ")
        section_activity:AddParagraph("Can I adopt a cat? I can if I have 40 dollars AND I am over 14 years old.")
        section_activity:AddParagraphBoldFront("Do This:"," With a partner, create the expression using logical operators.")
        section_activity:AddParagraphBoldFront("Note:"," It's ok if students struggle with this activity. After a few minutes, move on to the next slide and reveal the answer. This will help students make the connection.")

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Can I adopt a cat?" + dq + " flowchart")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through the animation step by step and follow along as a class. Allow time to predict at decision points. When the truth table (yellow box) appears on the screen, take a moment to remind students what this is and what it demonstrates. If a value is true and another value is true, it evaluates to true. It's not expected that students will memorize the truth tables, but they should be familiar with how they work. ")
        section_activity:AddParagraphBoldFront("Note:"," If you have extra time, try running this flowchart with other inputs. Try changing the conditions and then running the flowchart (i.e. I can adopt the cat if I have 40 dollars OR I am over 14 years old)")
        section_activity:AddParagraphBoldFront("Say:"," Today we used flowcharts to demonstrate how computers make decisions. In the next class, we will investigate how decisions are made in code.")


        section_activity:AddParagraphBoldFront("Slide:"," Do This: Now it's your turn to make a flowchart.")
        section_activity:AddParagraphBoldFront("Do This:"," Give students a few minutes to craft their own flowcharts and test on each other following these instructions:")
        UnorderedList instructions
        instructions:AddClassAttribute("list-disc list-outside pl-8")
        instructions:AddListItem("Think back to the warm-up where we discussed making a decision on what to wear to an event. ")
        instructions:AddListItem("Write down the variables at the top.")
        instructions:AddListItem("Below the variables, create the Boolean expression that will be used to make the decision. ")
        instructions:AddListItem("Draw True/False lines to the possible decisions. ")
        instructions:AddListItem("Challenge: Use logical operators (and, or, not) in your Boolean expression. Add extra branches with multiple decisions.")
        instructions:AddListItem("Test your flowchart with a friend!")
        section_activity:Add(instructions)
        section_activity:AddParagraphBoldFront("Note:"," Simple flowcharts are fine, or students can build more complex models. Students are ready to move on when the majority of the class has made and tested a flowchart.")


        section_activity:AddParagraphBoldFront("Slide:"," Key Takeaways")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through the animation to reveal the key takeaways on the slide.")
        section_activity:AddParagraphBoldFront("Review:"," Review the key takeaways with students:")
        UnorderedList takeaways
        takeaways:AddClassAttribute("list-disc list-outside pl-8")
        takeaways:AddListItem("A " + AddTextBoldFront("Boolean Value"," is a data type that is either true or false."))
        takeaways:AddListItem("" + AddTextBoldFront("Comparison Operators"," <, >, <=, >=, =, not= indicate a Boolean expression."))
        takeaways:AddListItem("Each side of the Boolean expression is reduced to a single value.")
        takeaways:AddListItem("Single values are compared and result in a Boolean value (true or false)")
        section_activity:Add(takeaways)


        section_activity:AddParagraphBoldFront("Slide:"," Key Takeaways (#2)")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through the animation to reveal the key takeaways on the slide.")
        
        
        section_activity:AddParagraphBoldFront("Review:"," Review the key takeaways with students:")
        UnorderedList takeaways2
        takeaways2:AddClassAttribute("list-disc list-outside pl-8")
        takeaways2:AddListItem("Boolean expressions can also include " + AddTextBoldFront("Logical Operators"," (AND, OR, NOT). Both sides of the logical operator are reduced to a single Boolean value"))
        takeaways2:AddListItem("A truth table is used to evaluate the reduced Boolean expression to a single Boolean value")
        takeaways2:AddListItem("A decision is made with the single Boolean value")
        takeaways2:AddListItem("A flowchart illustrates the steps of making a decision with a Boolean expression")
        section_activity:Add(takeaways2)
    

        Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap Up (10 minutes)", 2)

        Paragraph video
        video:AddText("" + AddTextBoldFront("Video:"," As a class, watch "))
        Link link1 = video:AddLink("CS Principles: Conditionals - Part 1 Boolean Expressions (Video)", "https://www.youtube.com/watch?v=y3rCKJNOwpA")
        link1:SetClassAttribute("underline text-quorum-blue-150")
        video:AddText(".")
        section_wrap:Add(video)

        AddVideo(section_wrap,"https://www.youtube.com/embed/y3rCKJNOwpA?si=zXjfif5DuhTbXyeO")

        AddHeading(section_wrap, "Journal", 3)
        section_wrap:AddParagraph(" Have students add the following words and definitions to their journals: ")
        UnorderedList vocab
        vocab:AddClassAttribute("list-disc list-outside pl-8")
        vocab:AddListItem(AddItalicFront("Boolean Value:"," True or false"))
        vocab:AddListItem(AddItalicFront("Boolean Expression:"," An expression that evaluates to either true or false"))
        section_wrap:Add(vocab)




          Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

   
            AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

        AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph(" Can a computer evaluate an expression to something between true and false? Can you write an expression to deal with a " + dq + "maybe" + dq + " answer?")


               Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)
            UnorderedList list   
            list:AddClassAttribute("list-disc list-outside pl-8")            
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "2-AP-10, 3A-AP-15")
                AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.E.1, AAP-2.F.5")
            section_standards:Add(list)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end


    action GetMetaDescription returns text
        return "Learn about boolean values and how to make decisions with them"
    end

    action GetSummaryName returns text
        return "CSP Unit 4 Lesson 5"
    end
    action GetName returns text
        return "CSP Unit 4 Lesson 5 Conditionals Explore"
    end
    action GetShortDescription returns text
        return "Explore booleans and conditonals"
    end
    action GetLocation returns text
        return "lessons/code/BigDataAndPrivacy/Lesson5.html"
    end

        action GetLinkName returns text
        return "Conditionals Explore"
    end

    action GetSectionName returns text
        return "Variables, Conditionals, and Functions"
    end 
end
