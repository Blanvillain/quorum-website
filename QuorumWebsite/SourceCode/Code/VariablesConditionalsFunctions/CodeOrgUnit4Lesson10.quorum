use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit4Lesson10 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 4 Lesson 10: Functions Practice")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
   Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Variables, Conditionals, and Functions - Lesson 10: Functions Practice", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Variables, Conditionals, and Functions - Lesson 10: Functions Practice")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)

            Paragraph overview
            overview:AddText("In this lesson students spend most of their time practicing using the skills and processes they have learned about functions. At the conclusion of the lesson students discuss remaining questions in anticipation of their Make project in the following lesson.")
            bodyDiv:Add(overview)


        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList goals
        goals:AddClassAttribute("list-disc list-outside pl-8")
        goals:AddListItem("Write programs that use functions with the support of sample code")
        goals:AddListItem("Debug programs that use functions")
        goals:AddListItem("Identify opportunities to use functions to reduce repeated code within a program ")
        section_intro:Add(goals)


        AddHeading(section_intro, "Purpose", 3)
        section_intro:AddParagraph("This lesson is students primary opportunity to get hands on with functions in code prior to the Make activity in the following lesson. Give students as much class time as you can to work through these. For this lesson it's recommended that you place students in pairs as a support and to encourage discussion about the challenges or concepts they're seeing. In the following lesson students are encouraged to work independently.")

        AddHeading(section_intro, "Resources", 3)
        UnorderedList resources
        resources:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        resources:AddListItemLink("CSP-Widgets Repository", "https://github.com/qorf/CSP-Widgets")
        section_intro:Add(resources)


        Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
        AddHeading(section_gettingStarted, "Remarks", 3)
        UnorderedList openingRemark
        openingRemark:AddClassAttribute("list-disc list-outside pl-8")
        openingRemark:AddListItem("Today we're going to have a chance to practice programming with a lot of the concepts and patterns we've explored over the last two lessons. I encourage you to go through these with a partner, but pay close attention to what each other is doing. In our next lesson you're going to have to use a lot of these on an independent project, and these activities are good practice for what you'll find there! Alright, let's get to it!")
        section_gettingStarted:Add(openingRemark)
      

        Division openingTip = AddTeachingTip(section_gettingStarted)

        openingTip:AddParagraphBoldFront("Move Quickly to the Activity:", " There's a lot in the main activity of today's lesson. You may optionally wish to do a quick vocabulary review or address any questions that came up in the last lesson. Otherwise, give students more time to get hands on with some code.")



        Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (35 minutes)", 2)
        AddHeading(section_activity, "Practice Time", 3)

        Division activityTip1 = AddTeachingTip(section_activity)
       
        activityTip1:AddParagraphBoldFront("Providing Support:", " Circulate around the room through the lesson encouraging students to use the strategies introduced at the beginning of the lesson. Students have a number of supports at their fingertips, so a big part of your role is helping build their independence in using those resources.")


        section_activity:AddParagraphBoldFront("Group:", " It is recommended that students work in pairs for this lesson and a number of the activities feature discussion prompts. Consider using pair programming, having drivers and navigators switch every 3 minutes, not every project.")
        section_activity:AddParagraphBoldFront("Distribute:", " Optionally pass out a plastic cup or other manipulative they can place on their computer when they are stuck as a signal that they need support.")
        section_activity:AddParagraphBoldFront("Open a Project:", " Today's lesson uses several apps. Direct students to begin by opening " + AddTextBoldFront("Lesson10_App1.",""))

        AddHeading(section_activity, "Remarks", 3)
        WebList activityRemarks
        activityRemarks:AddClassAttribute("list-disc list-outside pl-8")
        activityRemarks:AddListItem("Today you're mostly going to practice what we've learned about programming with functions. I'm here to help you when you need, and you can put this cup on your computer when you need help. However, I first want to remind you of the following:")
        activityRemarks:AddListItem(0 , "Use your debugging skills. Try to zoom in on precisely where you're getting stuck.")
        activityRemarks:AddListItem(0 , "Talk to your partner! That's what they're there for!")
        activityRemarks:AddListItem(0 , "Talk to the group next to you. If another group asks for help make sure to take some time to talk it through with them.")
        section_activity:AddNestedTag(activityRemarks)
       

        section_activity:AddParagraphBoldFront("Apps 1 - 5 Declare and Call Functions:", " In these projects students practice declaring and calling functions. At first students practice calling functions that have already been declared for them. Students can focus their energy on the syntax of calling a function and how using functions changes the order in which lines of code run. Later in the progression they practice finding repeated code and are guided through how to create a function in its place.")

        /*
        section_activity:AddParagraphBoldFront("Display:", " Watch the Scope Practice video below. You can also use the Quorum project " + AddTextBoldFront("Lesson10_ScopeExample"," that has similar code written in Quorum"))
        Video scopeVideo
        scopeVideo:SetAddress("/media/lessons/csp/unit4/Scope Practice - App Lab.mp4")
        scopeVideo:SetControlsVisible(true)
        section_activity:Add(scopeVideo)
        */

        section_activity:AddParagraphBoldFront("App 6 - Function Scope:", " This project returns to a topic that was covered in the variables lessons as well: variable scope. While students do not need a deep understanding of scope at this point, they will in some instances encounter debugging challenges that arise because of it. ")

        section_activity:AddParagraphBoldFront("Discuss:", " As a class, discuss the section below, " + dq + "When to make a function" + dq + ".")
        AddHeading(section_activity, "When to Make a Function", 3)
       
        section_activity:AddParagraph("An important questions for new programmers is " + dq + "When should I decide to make a function" + dq + ". In general, the earlier you realize you need a function, the better. This is a skill you'll get better at with practice. <b>By the end of this course you should aim to be in the During or Before rows.</b>")

                WebTable table = AddWebTable("Table with two columns of song lyrics labeled Style 1 and Style 2.")
        TableBody tableBody = AddTableBody()
        
        Array<text> tableHeaderArray
        tableHeaderArray:Add("When You Create Functions")
        tableHeaderArray:Add("Description") 
        tableHeaderArray:Add("Comments")
  

        TableHeader thead = AddTableHeaderRow(tableHeaderArray)
        table:Add(thead)    

         Array<text> textArray1
         textArray1:Add("Never")
         textArray1:Add("You never create functions at all.")
         textArray1:Add("Your code will be difficult to read and debug and have lots of repeated code. Aim to move on at least to the " + dq + "After" + dq + " step.")
         tableBody:Add(AddTableBodyRow(textArray1))
    
         Array<text> textArray2
         textArray2:Add("After")
         textArray2:Add("You write your entire program without functions. Once you're done you look for repeated code and move those into a function.")
         textArray2:Add("Your code is much easier to read and debug now. You're also getting better at seeing how your program is organized. As you get more comfortable, try to move on to " + dq + "During" + dq + " or " + dq + "Before" + dq + ".")
         tableBody:Add(AddTableBodyRow(textArray2))

        Array<text> textArray3
         textArray3:Add("During")
         textArray3:Add("As you write your code you notice when you're about to rewrite code you already wrote somewhere else in your program. Before moving on you declare a function and call that function instead.")
         textArray3:Add("You have a good understanding of your program and are able to keep it organized as you develop it. See if sometimes you can move on to " + dq + "Before" + dq + ".")
         tableBody:Add(AddTableBodyRow(textArray3))

        Array<text> textArray4
         textArray4:Add("Before")
         textArray4:Add("Before you write your program you make a plan and identify places you're likely to use repeated code. You create your function at the beginning.")
         textArray4:Add("This level reflects a strong understanding of how your program is going to be designed. You can almost " + dq + "see it in your head" + dq + " before you begin writing. That said, it's OK if sometimes you realize you need a function while you program and work in the " + dq + "During" + dq + " stage")
         tableBody:Add(AddTableBodyRow(textArray4))
    

        table:Add(tableBody)
        section_activity:Add(table)

        section_activity:AddParagraphBoldFront("App 7 - Creating Functions:", " In this project, students revisit the Movie Ticket app and are challenged to think through the process of declaring a function with code that they anticipate could be repeated.")
    
        Division functionTip = AddTeachingTip(section_activity)

        functionTip:AddParagraphBoldFront("Never - After - During - Before:", " In this section students are introduced to a framework for thinking about their development with using functions. The primary question is " + dq + "when should I make a function" + dq + ". In general, you want students to make their functions earlier, as this both improves the process of writing code and reflects deeper understanding of code structure. Throughout this course, you want to see them moving along the " + dq + "never - after - during - before" + dq + " scale. ")                   
        functionTip:AddParagraph("At this point students are still learning to identify repeated code and replace it with a function. This would align with the " + dq + "after" + dq + " level. In the Functions Make project and the Unit 4 project they are encouraged to anticipate the need for functions in advance. Rather than write code twice and then remove the duplicate code by creating a function later, they should begin deciding early that they'll need a function. The " + dq + "UpdateScreen() pattern" + dq + " helps reinforce this point.")
        functionTip:AddParagraph("Reinforce this language in the classroom, though remember it's only a guide. Not every student will immediately be able to move on to " + dq + "during" + dq + " or " + dq + "before" + dq + ". Different approaches also work better in different contexts, and many experienced programmers will typically operate in the " + dq + "during" + dq + " mode unless they're building a large and complex project.")


                Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap Up (5 minutes)", 2)
     
        section_wrap:AddParagraphBoldFront("Discuss:", " What aspects of working with functions clicked today? What do you still feel like you have trouble with?")

      Division closingGoal = AddDisscussionGoal(section_wrap)
        closingGoal:AddParagraphBoldFront("Discussion Goal:", " Use this opportunity to address any lingering questions or misconceptions in the room. You can also use this as a source of discussion topics to kick off the following lesson. As you lead the discussion, call out the many resources students have access to help when they're getting stuck. ")
  

                  Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

   
            AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

         AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph(" What will the value of the variable score be when the following code is finished running?")

        section_assessment:Add(preformatter:GeneratePreformattedCode("day_of_week = " + dq + "Saturday" + dq + "
day_of_week = " + dq + "Monday" + dq + "

IF ((day_of_week = " + dq + "Saturday" + dq + ") OR (day_of_week = " + dq + "Sunday" + dq + ")) {
     weekend
}
ELSE {
     weekday
}

PROCEDURE weekday {
     DISPLAY(" + dq + "School day" + dq + ")
}

PROCEDURE weekend {
     DISPLAY(" + dq + "Day off" + dq + ")
}"))
        
           

        Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)
        UnorderedList list 
        list:AddClassAttribute("list-disc list-outside pl-8")      
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "3A-AP-17, 3B-AP-14")   
        section_standards:Add(list)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end


    action GetMetaDescription returns text
        return "Practice using and creating functions"
    end

    action GetSummaryName returns text
        return "CSP Unit 4 Lesson 10"
    end
    action GetName returns text
        return "CSP Unit 4 Lesson 10 Functions Practice"
    end
    action GetShortDescription returns text
        return "Practice using functions"
    end
    action GetLocation returns text
        return "lessons/code/BigDataAndPrivacy/Lesson10.html"
    end

            action GetLinkName returns text
        return "Functions Practice"
    end

    action GetSectionName returns text
        return "Variables, Conditionals, and Functions"
    end 
end
