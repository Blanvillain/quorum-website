use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit4Lesson1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 4 Lesson 1: Variables Explore")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
       Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Variables, Conditionals, and Functions - Lesson 1: Variables Explore", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Variables, Conditionals, and Functions - Lesson 1: Variables Explore")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)


        section_intro:AddParagraph("To begin the lesson students explore sample apps similar to the ones they'll be able to build by the end of the unit. Then students complete an unplugged activity with plastic baggies and sticky notes to build a mental model of how variables are used to move and store information. The lesson ends with a synthesizing discussion and students adding key vocabulary to their journal.")


        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList goals
        goals:AddClassAttribute("list-disc list-outside pl-8")
        goals:AddListItem("Use appropriate vocabulary to describe variables, expressions, and variable assignment.")
        goals:AddListItem("Evaluate expressions that include numbers, strings, and arithmetic operators.")
        goals:AddListItem("Trace simple programs that use variables, expressions, and variable assignment.")
        section_intro:Add(goals)


        AddHeading(section_intro, "Purpose", 3)
        section_intro:AddParagraph("The warm up activity is designed to provide context for the coming unit and motivate the reasons students will want to learn the concepts covered in Unit 4. The subsequent activity provides students a physical mental model they will be able to use when they start programming with variables in the subsequent lessons.")

        AddHeading(section_intro, "Preparation", 3)
        Array<text> prepItems
        prepItems:Add("- 3 sandwich baggies")
        prepItems:Add("- packs of red and yellow stickies")
        prepItems:Add("- pens / pencils")
        prepItems:Add("- 1 dry erase marker per four students (pairs can share)")
        UnorderedList preparation
        preparation:AddClassAttribute("list-disc list-outside pl-8")
        preparation:AddListItem("Collect for each pair of students:" + MakeNestedUnorderedList(prepItems))
        preparation:AddListItem("Review the sample apps shown in the warm up")
        preparation:AddListItem("Review the rules and vocabulary used in the activity")
        section_intro:Add(preparation)

        AddHeading(section_intro, "Resources", 3)
        UnorderedList resources
        resources:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        resources:AddListItemLink("EIPM: A Short Introduction (Teacher Resource)", "https://docs.google.com/document/d/1ncil5b0yWAN4LCyOeXwYuNrNKEHtN4nmAd2o-_K5Psw/edit?usp=sharing")
        resources:AddListItemLink("Code.org CSP Unit 4 Presentation Slides", "https://docs.google.com/presentation/d/1GhpZOh2589s9MuKsll7YkQ3xv6nwcpmtAnTCgJPIXC0/copy")
        resources:AddListItemLink("Guide to EIPM Lessons - Video","https://www.youtube.com/watch?v=OTvi0XRTIjA")
        resources:AddListItemLink("Guide to Explore Lessons - Video","https://youtu.be/mzm-xqXH8BQ")
        resources:AddListItemLink("CSP-Widgets Repository", "https://github.com/qorf/CSP-Widgets")
        section_intro:Add(resources)
     

        Division eipmTip = AddTeachingTip(section_intro)
        Paragraph eipm
        eipm:AddText("This is the first official " + dq + "Explore" + dq + " lesson in the EIPM model. Review the EIPM model in the ")
        Link link = eipm:AddLink("EIPM: A Short Introduction - Resource", "https://docs.google.com/document/d/1ncil5b0yWAN4LCyOeXwYuNrNKEHtN4nmAd2o-_K5Psw/edit?usp=sharing")
       link:SetClassAttribute("underline text-quorum-blue-150")
        eipmTip:Add(eipm)
        eipmTip:AddParagraphBoldFront("Overview:"," Students explore the new concept through a teacher-led hands-on group activity.")
        UnorderedList overviewList
        overviewList:AddClassAttribute("list-disc list-outside pl-8")
        overviewList:AddListItem("Typically uses physical manipulatives")
        overviewList:AddListItem("Teacher leads with support of slides and activity guides")
        eipmTip:Add(overviewList)
        eipmTip:AddParagraphBoldFront("Goal:"," Students begin to develop a shared mental model and understand the main ideas of the new concept. ")
        Paragraph eipm2
        Image image = eipm2:AddImage("/media/lessons/csp/unit4/explore_thumbnail.png", "A sketch showcasing students performing an unplugged activity to explore the concept of variables.")
        image:AddAttribute("data-zoom","")
        eipmTip:Add(eipm2)
        eipmTip:AddParagraph("Watch the following videos:")
        UnorderedList teacherVideos
        teacherVideos:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        teacherVideos:AddListItemLink("Guide to EIPM Lessons", "https://www.youtube.com/watch?v=OTvi0XRTIjA")
        teacherVideos:AddListItemLink("Guide to Explore Lessons", "https://www.youtube.com/watch?v=mzm-xqXH8BQ")
        eipmTip:Add(teacherVideos)
     

        
                Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
        AddHeading(section_gettingStarted, "Explore Sample Apps", 3)
        section_gettingStarted:AddParagraphBoldFront("Group:"," Place students in pairs.")
        Paragraph samples
        samples:AddText(AddTextBoldFront("Do This:"," Give students 3-5 minutes to explore the sample apps (beginning with ") + AddTextBoldFront("Lesson1_App1"," in Unit4 of the "))
        Link link1 = samples:AddLink("CSP-Widgets repository", "https://github.com/qorf/CSP-Widgets")
        link1:SetClassAttribute("underline text-quorum-blue-150")
        samples:AddText("). Students can explore one or more depending on time.")
        section_gettingStarted:Add(samples)

        section_gettingStarted:AddParagraphBoldFront("Discuss:"," These are samples of the kinds of apps you'll be able to build by the end of this unit. As you go through them, write down at least two examples where the app seems to be keeping track of a piece of information or using it to make decisions.")
       
        Division warmUpGoal = AddDisscussionGoal(section_gettingStarted)
  
        warmUpGoal:AddParagraphBoldFront("Discussion Goal:"," Have volunteers share what they noticed with the room. Some ideas include:")
        UnorderedList appList
        appList:AddClassAttribute("list-disc list-outside pl-8")
        appList:AddListItem("The Pet Rock App keeps track of button selections and uses it to decide when the pet rock will " + dq + "evolve" + dq)
        appList:AddListItem("The Poem App keeps track of the poem as you write it.")
        warmUpGoal:Add(appList)
 

        AddHeading(section_gettingStarted, "Preview the Unit", 3)
        
        Array<text> previewList
        previewList:Add("- When button is selected, show a picture")
        previewList:Add("- When button is selected, change screen")
        previewList:Add("- When button is selected, play a sound")
        UnorderedList previewRemarks
        previewRemarks:AddClassAttribute("list-disc list-outside pl-8")
        previewRemarks:AddListItem("Last unit we built apps that mostly focused on input and output. For example: " + MakeNestedUnorderedList(previewList))
        previewRemarks:AddListItem("But we all want our programs to do more than that! In this unit we're going to learn how to build apps that keep track of information and use to make decisions and perform calculations. This is going to let us build much more powerful apps! So let's get started by diving in deep on what's involved with programming with information.")
        section_gettingStarted:Add(previewRemarks)
        

        Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (40 minutes)", 2)
        section_activity:AddParagraphBoldFront("Group:"," Group students in pairs.")
        section_activity:AddParagraphBoldFront("Distribute: Give each pair of students","")
        UnorderedList supplies
        supplies:AddClassAttribute("list-disc list-outside pl-8")
        supplies:AddListItem("A small stack of red and yellow sticky notes")
        supplies:AddListItem("A pen / pencil")
        supplies:AddListItem("3 plastic baggies")
        supplies:AddListItem("A dry erase marker to share with another group")
        section_activity:Add(supplies)
      

        Division suppliesTip = AddTeachingTip(section_activity)

        suppliesTip:AddParagraphBoldFront("Supplies Substitutions:"," There's no need to use stickie notes if you have other scraps of colored paper. Also consider cutting stickies in 4 to make them go further. If you don't have dry erase markers handy consider using pieces of masking tape on the baggies. ")
        suppliesTip:AddParagraphBoldFront("Alternatives for Accessibility or Distance Learning:"," When working with students remotely or students who are blind or visually impaired, consider having students type into an online document rather than using sticky notes or baggies. In this case, individual values can be represented on a single line, where strings are denoted by quotes and numbers don't have quotes. To represent variables, have students write the variable name followed by its value on a single line. Students form expressions by combining standalone values, variables, and operators on a single line.")
        suppliesTip:AddParagraph("Using an online document in this way will produce lines of text that will look a lot like code. The important part of the lesson is bringing attention to the concept of storing information in one place, using it again later, or replacing the information in that place with new values.")                 
  

        Paragraph guidedActivity
        guidedActivity:AddText(AddTextBoldFront("Guided Activity:"," Today's activity introduces students to the concept of variables. As a visual aid, you can use "))
        Link link2 = guidedActivity:AddLink("Code.org's presentation slides for Unit 4, Lesson 1: Variables Explore", "https://docs.google.com/presentation/d/1GhpZOh2589s9MuKsll7YkQ3xv6nwcpmtAnTCgJPIXC0/copy")
        guidedActivity:AddText(". These slides include animations. The notes below describe when to move to the next slide or click through an animation -- if you aren't using the slides, you can ignore these prompts.")
        link2:SetClassAttribute("underline text-quorum-blue-150")
        section_activity:Add(guidedActivity)

        Division runningActivity = AddTeachingTip(section_activity)

        runningActivity:AddParagraphBoldFront("Running the Activity:"," This activity asks students to follow along as a number of core concepts for programming are introduced. The model is typically that a term or concept is introduced and modeled and then afterwards students are encouraged to try it out on their own. Trying it out typically means they are writing information on a sticky note and sharing it with another group before discussing the results with the whole class.")
        runningActivity:AddParagraph("Slides with animations have an icon in the bottom left corner to let you know you need to click to reveal more of the slide's content. ")
        runningActivity:AddParagraph("To help you more easily prepare the activity and keep track of your instructions, detailed instructions have been included as speaker notes in the presentation. Here are some tips to help you throughout the presentation.")
        UnorderedList activityList
        activityList:AddClassAttribute("list-disc list-outside pl-8")
        activityList:AddListItem("There are opportunities throughout the presentation for students to actively engage. At these moments students should be making things with their manipulatives or using them to answer questions. Use these opportunities to check progress.")
        activityList:AddListItem("There is a fair amount of new vocabulary introduced but it is introduced gradually and with intentional repetition. Make a point of actively modeling the use of new terms.")
        activityList:AddListItem("The most important goal here is building a mental model. It is ok if students have some open questions that will get resolved over the subsequent conditional lessons.")
        activityList:AddListItem("Both you and students can use the " + dq + "Key Takeaways" + dq + " to check your understanding at the end.")
        runningActivity:Add(activityList)


        AddHeading(section_activity, "Guided Activity", 3)
        section_activity:AddParagraph("Follow this lesson with the supplemental slides.")

        
        section_activity:AddParagraphBoldFront("Slide:"," Variables Explore")
        section_activity:AddParagraphBoldFront("Say:"," Today we are going to explore Variables.")


        section_activity:AddParagraphBoldFront("Slide:"," Value: Numbers, Strings")
        section_activity:AddParagraphBoldFront("Say:"," We're going to be thinking about how computers work with information. We're going to call one " + dq + "piece" + dq + " of information a " + dq + "value" + dq + ". Right now there are two different types of values: numbers and strings. There are a few ways to tell them apart. Numbers work the way you normally think of numbers. They are made of the digits 0 through 9. We are going to put numbers on yellow sticky notes. When we write numbers you don't need quotes. Strings are made of any characters you can see on the keyboard which means all these examples count as strings. Strings go inside double quotes. You can see how it would be important to tell the number 123 apart from the string " + dq + "123" + dq + ". ")              
        section_activity:AddParagraphBoldFront("Do This:"," Make one string and one number and hold it up at your table.")

        section_activity:AddParagraphBoldFront("Slide:"," Operators")
        section_activity:AddParagraphBoldFront("Say:"," Operator is just a fancy name for the plus, minus, multiply, and divide symbols. An expression is a combination of two sticky notes and an operator. When I ask you " + dq + "what's 2 plus 3" + dq + " you say " + dq + "5" + dq + "! You just " + dq + "evaluated" + dq + " the expression 2+3, or figured out what the value is. Since 5 is a number, we put it on a yellow sticky. When evaluating an expression, we follow order of operations - just like in math class. ")
        section_activity:AddParagraphBoldFront("Do This:"," Evaluate the expression 5-1 and make a sticky note. Make sure you pick the correct color and decide if you need quotes or not!")

        section_activity:AddParagraphBoldFront("Slide:"," Expression Table")
        section_activity:AddParagraphBoldFront("Say:"," This table shows the different ways we can create expressions. We can use all four operators with numbers the normal way. When you want to use strings, you can only use the + operator and it connects the two words together. If you're connecting a number and a string, the number first gets converted to a string.")
        UnorderedList expressions
        expressions:AddClassAttribute("list-disc list-outside pl-8")
        expressions:AddListItem("3 + 4 evaluates to 7")
        expressions:AddListItem("5 - 2 evaluates to 3")
        expressions:AddListItem("11 * 2 evaluates to 22")
        expressions:AddListItem("10 / 2 evaluates to 5")
        expressions:AddListItem(dq + "for" + dq + " + " + dq + "ever" + dq + " evaluates to " + dq + "forever" + dq)
        expressions:AddListItem(dq + "gr" + dq + " + 8 evaluates to " + dq + "gr8" + dq)
        expressions:AddListItem("2 + " + dq + "day" + dq + " evaluates to " + dq + "2day" + dq)
        section_activity:Add(expressions)
        section_activity:AddParagraphBoldFront("Do This:", " With your partner make a sticky note for each of these 5 expressions and we'll share as a class. ")
        OrderedList evaluate
        evaluate:AddClassAttribute("list-decimal list-outside pl-8")
        evaluate:AddListItem("4 + 5")
        evaluate:AddListItem("10 - 9")
        evaluate:AddListItem(dq + "tree" + dq + " + " + dq + "house" + dq)
        evaluate:AddListItem(dq + "you" + dq + " + " + dq + "r" + dq)
        evaluate:AddListItem("3 + " + dq + "D" + dq)
        section_activity:Add(evaluate)
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers on the slide.")

        section_activity:AddParagraphBoldFront("Slide:"," Variables")
        section_activity:AddParagraphBoldFront("Say:"," We're going to call the plastic baggies on your table " + dq + "variables" + dq + ". Variables can hold at most one value, or sticky note. They have names that use no quotes, include no spaces, and must start with a letter. For now just practice making a variable with your partner. ")
        section_activity:AddParagraphBoldFront("Do This:"," Make one variable with any name you like. Share it with another group. Make sure you use a whiteboard marker so we can reuse the baggies later.")

        section_activity:AddParagraphBoldFront("Slide:"," Variables and Expressions")
        section_activity:AddParagraphBoldFront("Say:"," We can evaluate expressions that include variable names. To do that, first make a copy of the sticky note inside the variable. Then evaluate the expression the way you normally would. These two examples show you how. ")
        Array<text> codeList1
        codeList1:Add("- zip = 5")
        codeList1:Add("- 3 + zip evaluates to 3 + 5")
        codeList1:Add("- 3 + 5 evaluates to 8")
        Array<text> codeList2
        codeList2:Add("- bop = " + dq + "hi" + dq + "")
        codeList2:Add("- bop + zip evaluates to " + dq + "hi" + dq + " + 5")
        codeList2:Add("- " + dq + "hi" + dq + " + 5 evaluates to " + dq + "hi5" + dq + "")
        UnorderedList examples
        examples:AddClassAttribute("list-disc list-outside pl-8")
        examples:AddListItem("Example #1:" + MakeNestedOrderedList(codeList1))
        examples:AddListItem("Example #2:" + MakeNestedOrderedList(codeList2)) 
        section_activity:Add(examples)
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers to the examples on the slides.")

        section_activity:AddParagraphBoldFront("Slide:"," Do This: Evaluate these expressions.")
        section_activity:AddParagraphBoldFront("Do This:"," Evaluate these expressions. Make sure to pay attention to whether it evaluates to a string or a number. ")
        section_activity:AddParagraph(AddItalicFront("Variables:",""))
        UnorderedList variables
        variables:AddClassAttribute("list-disc list-outside pl-8")
        variables:AddListItem("boo = 4")
        variables:AddListItem("rar = " + dq + "be" + dq)
        section_activity:Add(variables)
        section_activity:AddParagraph(AddItalicFront("Expressions:",""))
        OrderedList problems
        problems:AddClassAttribute("list-decimal list-outside pl-8")
        problems:AddListItem("3 * boo")
        problems:AddListItem("rar + " + dq + "ep" + dq)
        problems:AddListItem("rar + boo")
        section_activity:Add(problems)
        section_activity:AddParagraphBoldFront("Note:"," Have students share their answers by holding up the sticky notes for each solution. ")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers.")


        section_activity:AddParagraphBoldFront("Slide:"," Let's start writing programs...")
        section_activity:AddParagraphBoldFront("Say:"," Now let's write programs. We're going to stop using sticky notes, but will highlight strings and numbers to help you remember the difference.")
  

        section_activity:AddParagraphBoldFront("Slide:"," var")
        section_activity:AddParagraphBoldFront("Say:"," Here's what a program looks like. The var command tells the computer to create a variable.")
        UnorderedList command
        command:AddClassAttribute("list-disc list-outside pl-8")
        command:AddListItem(AddItalicFront("var pow"," : creates a new variable. Grab a new baggie and write the variable's name (in this case, ") + dq + "pow" + dq + ") on it.")
        section_activity:Add(command)

        Division quorumTip = AddTeachingTip(section_activity)
        quorumTip:AddParagraphBoldFront("Teaching Tip:"," The slides show code examples that reflect how variables are used in Javascript, which is used for Code.org's App Lab. At this point, the concept of variables is more important than the exact code. There will be opportunities in later slides to discuss the differences between how the two languages handle variables.")

        section_activity:AddParagraphBoldFront("Slide:"," " + dq + "Assignment operator" + dq)
        section_activity:AddParagraphBoldFront("Say:"," The left arrow is called the " + dq + "assignment operator" + dq + ". That's just a fancy word for " + dq + "put this value in the baggy" + dq + ". If we wanted to read line 01 we would say " + dq + "pow gets 3" + dq + ". We know that variables can only hold one sticky note or value. So if we try to assign a variable that already has a value in it, we just throw the old one away.")
        section_activity:AddParagraphBoldFront("Do This:"," Run this program. What is the result?")
        OrderedList program
        program:AddClassAttribute("list-decimal list-outside pl-8")
        program:AddListItem("var pow")
        program:AddListItem("pow <- 3")
        program:AddListItem("pow <- 5")
        section_activity:Add(program)
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to run the program.")
        section_activity:AddParagraphBoldFront("Say:"," In a computer you don't actually put the old number in a trash can, it's totally deleted! The numbers are stored as electrical charges somewhere in your computer's memory. When you assign a new number to a variable it actually erases the old number, and stores the new number in its place.")


        section_activity:AddParagraphBoldFront("Slide:"," Do This...")
        section_activity:AddParagraphBoldFront("Do This:"," Run this program. Compare your results with another group.")
        OrderedList program2
        program2:AddClassAttribute("list-decimal list-outside pl-8")
        program2:AddListItem("var pizza")
        program2:AddListItem("pizza <- 3")
        program2:AddListItem("var tacos")
        program2:AddListItem("pizza <- " + dq + "yum" + dq)
        program2:AddListItem("tacos <- " + dq + "the best" + dq)
        section_activity:Add(program2)
        section_activity:AddParagraphBoldFront("Note:"," Walk around the room making sure students are following the rules correctly. No baggies should have more than one sticky note in them.")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers.")
        
        Division staticTypeTip = AddTeachingTip(section_activity)
        staticTypeTip:AddParagraphBoldFront("Teaching Tip:"," This is a good opportunity to highlight the difference between variables in Javascript and Quorum. In Javascript, a single variable can hold different types of values over a program -- for example, the " + dq + "pizza" + dq + " in this program stores a number, then replaces it with a string. In Quorum, this isn't allowed, because variables must store a specific type. Rather than declaring " + dq + "var pizza" + dq + ", we might've declared " + dq + "number pizza" + dq + " or " + dq + "text pizza" + ", but it couldn't store both.")
        Paragraph cspLink
        cspLink:AddText("Alternately you can use the Quorum code found in " + AddTextBoldFront("Lesson1_SlideAnswers"," project folder in the CSP-Widget repository."))
        staticTypeTip:Add(cspLink)
        staticTypeTip:AddParagraph("If you want to highlight this, you can use this optional prompt:")
        staticTypeTip:AddParagraphBoldFront("Discuss:"," In our program, we can store either a string or a number in the same variable. What if we said each variable could only hold one type of value instead? What are some of the advantages or disadvantages of that approach?")
        UnorderedList typing
        typing:AddClassAttribute("list-disc list-outside pl-8")
        typing:AddListItem("Allowing variables to hold any type makes them more flexible and makes them easier to reuse.")
        typing:AddListItem("Restricting what types each variable can hold makes them more consistent and predictable -- a text variable always contains text, for example.")
        typing:AddListItem("These two approaches are known as " + AddItalicFront("dynamic typing"," and") + AddItalicFront("static typing",", respectively, and both are very common in real-world programming languages!"))
        staticTypeTip:Add(typing)

        section_activity:AddParagraphBoldFront("Slide:"," Assign a Variable with Expression")
        section_activity:AddParagraphBoldFront("Say:"," Now let's combine what we've learned. You can use assignment with expressions. In order for this to work you need to evaluate first, then assign. This makes sense because we know we can only put one sticky note in the variable baggy.</b>")


        section_activity:AddParagraphBoldFront("Slide:"," Do This...")
        section_activity:AddParagraphBoldFront("Do This:"," Run the program. Compare your results with another group.")
        OrderedList program3
        program3:AddClassAttribute("list-decimal list-outside pl-8")
        program3:AddListItem("var zow")
        program3:AddListItem("var fly")
        program3:AddListItem("fly <- 2 + " + dq + "day" + dq )
        program3:AddListItem("zow <- 4 - 1")
        program3:AddListItem("fly <- 3 * 3")
        program3:AddListItem("zow <- 4 + " + dq + "now" + dq)
        section_activity:Add(program3)
        section_activity:AddParagraphBoldFront("Note:"," Walk around the room making sure students are evaluating before they assign. Reinforce the language " + dq + "gets" + dq + " for the assignment operator. For example, line 02 would read " + dq + "fly gets two plus day" + dq + ". ")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers.")
     
        section_activity:AddParagraphBoldFront("Slide:"," We're not going to...")
        section_activity:AddParagraphBoldFront("Say:"," We're not going to highlight our strings and numbers anymore. We can just use double quotes around the strings to tell the difference. <i>(NOTE: If you aren't using the slides or otherwise highlighting the values, you can skip this.)</i>")

        section_activity:AddParagraphBoldFront("Slide:"," Assign a Variable: Expressions with Variables")
        section_activity:AddParagraphBoldFront("Say:"," Let's run this program. Evaluate the expression on the right first to get one value. Note that variables aren't " + dq + "connected." + dq + " Changing kit doesn't change boo.")
        section_activity:AddParagraphBoldFront("Do This:"," Run through this program together as a class.")
        OrderedList program4
        program4:AddClassAttribute("list-decimal list-outside pl-8")
        program4:AddListItem("var kit")
        program4:AddListItem("kit <- 1")
        program4:AddListItem("var boo")
        program4:AddListItem("boo <- kit + 1")
        program4:AddListItem("kit <- 5")
        section_activity:Add(program4)
        section_activity:AddParagraphBoldFront("Note:","Reinforce:")
        UnorderedList toReinforce  
        toReinforce:AddClassAttribute("list-disc list-outside pl-8")      
        toReinforce:AddListItem("Evaluate, then asssign.")
        toReinforce:AddListItem("As shown on line 04, there's no special " + dq + "connection" + dq + " made between variables. All we're doing is moving information around. ")
        toReinforce:AddListItem("Variables only hold one value, the old one is " + dq + "thrown away" + dq + " (again, what's happening is that assignment replaces the electric charges somewhere inside the computer so the old value is actually " + dq + "erased" + dq + " or " + dq + "deleted" + dq + ") ")
        section_activity:Add(toReinforce)
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers.")
 

        section_activity:AddParagraphBoldFront("Slide:"," Do This:")
        section_activity:AddParagraphBoldFront("Do This:"," Run this program. Compare your results with another group.")
        OrderedList program5
        program5:AddClassAttribute("list-decimal list-outside pl-8")
        program5:AddListItem("var fuzz")
        program5:AddListItem("var clip")
        program5:AddListItem("fuzz <- 5")
        program5:AddListItem("clip <- fuzz + 2")
        program5:AddListItem("fuzz <- clip + 1")
        program5:AddListItem("clip <- " + dq + "gr" + dq + " + fuzz")
        program5:AddListItem("fuzz <- fuzz + 1")
        program5:AddListItem("fuzz <- fuzz + 1")
        program5:AddListItem("fuzz <- fuzz + 1")
        section_activity:Add(program5)
        section_activity:AddParagraphBoldFront("Note:"," Have students hold up their two baggies when they're done. Make sure students are evaluating and then assigning. Call out that last three lines which can be a little nutty to think about. You're using a variable's value as part of the assignment. This lets it " + dq + "count up by one" + dq + ". ")
        section_activity:AddParagraphBoldFront("Click for animation:"," Click through to see the answers.")

        section_activity:AddParagraphBoldFront("Slide:"," Key Takeaways")
        section_activity:AddParagraphBoldFront("Do This:"," Review the key takeaways with students.")
        UnorderedList takeaways
        takeaways:AddClassAttribute("list-disc list-outside pl-8")
        takeaways:AddListItem("Numbers and strings are two different types of values")
        takeaways:AddListItem("Expressions evaluate to a single new value")
        takeaways:AddListItem("When variables are in the expression just make a copy, don't change the actual variable.")
        takeaways:AddListItem("Variables are " + dq + "assigned" + dq + " a new value")
        takeaways:AddListItem("Evaluate first, then assign")
        takeaways:AddListItem("Old values are deleted forever.")
        takeaways:AddListItem("Assignment just moves information around. It does not " + dq + "connect" + dq + " variables.")
        section_activity:Add(takeaways)


        section_activity:AddParagraphBoldFront("Slide:"," In some languages...")
        section_activity:AddParagraphBoldFront("Say:"," In some programming languages (including Quorum and Javascript) the assignment operator is not written with an arrow but is written as an equal sign.")
   

        section_activity:AddParagraphBoldFront("Slide:"," So the command...")
        section_activity:AddParagraphBoldFront("Say:"," That means that in those languages, <code>fuzz <- fuzz + 1</code> would be written as <code>fuzz = fuzz + 1</code>. We'll see more of this in the next lesson!")
        section_activity:AddParagraphBoldFront("Note:"," In math " + dq + "=" + dq + " means " + dq + "are equal forever." + dq + " In programming " + dq + "=" + dq + " means" + dq + " put this value in this variable" + dq + ".")
        

               Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap Up (10 minutes)", 2)
        AddHeading(section_wrap, "Journal", 3)
        section_wrap:AddParagraph(" Have students add the following words to their journals: Expression, Variable, Assignment Operator.")
        UnorderedList vocabulary
        vocabulary:AddClassAttribute("list-disc list-outside pl-8")
        vocabulary:AddListItem(AddItalicFront("Expression:"," a combination of operators and values that evaluates to a single value."))
        vocabulary:AddListItem(AddItalicFront("Variable:"," an abstraction inside the program that can hold a value. Each variable has associated data storage that represents one value at a time."))
        vocabulary:AddListItem(AddItalicFront("Assignment operator:"," allows a program to change the value represented by a variable."))
        section_wrap:Add(vocabulary)

         AddHeading(section_wrap, "Remarks", 3)
        UnorderedList closingRemarks
        closingRemarks:AddClassAttribute("list-disc list-outside pl-8")
        closingRemarks:AddListItem("This isn't the last time we'll look at these definitions and it's fine to update them as you get more experience. In fact, I'm sure you'll have a lot more to add once we see all of these concepts used inside of apps when we meet next time!")
        section_wrap:Add(closingRemarks)


               Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

   
       section_assessment:AddParagraph("Check For Understanding Question(s) and solutions can be found in each lesson on Code Studio. These questions can be used for an exit ticket.")
       
            AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

        AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph(" What will the value of the variable score be when the following code is finished running?")
        section_assessment:Add(preformatter:GeneratePreformattedCode("var score
score <- 3
score <- score + 1
score <- " + dq + "The score is: " + dq + " + score"))
      

               Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)
            UnorderedList list   
            list:AddClassAttribute("list-disc list-outside pl-8")   
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "2-AP-11")
                AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-1.A.1, AAP-1.B.1, AAP-1.B.3, AAP-1.C.4")
                AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.B.3, AAP-2.B.4, AAP-1.B.5, AAP-2.C.1, AAP-2.C.4")
                AddListItemWithBoldAtFront(list, "CSP2021: ", "DAT-1.A.1")
            section_standards:Add(list)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end


    action GetMetaDescription returns text
        return "Learn about variables using an unplugged activity"
    end

    action GetSummaryName returns text
        return "CSP Variables, Conditionals, and Functions Lesson 1 Variables Explore"
    end

    action GetName returns text
        return "CSP Variables, Conditionals, and Functions Lesson 1"
    end

    action GetShortDescription returns text
        return "Explore the concept of variables"
    end

    action GetLocation returns text
        return "lessons/code/BigDataAndPrivacy/Lesson1.html"
    end

    action GetLinkName returns text
        return "Variables Explore"
    end

    action GetSectionName returns text
        return "Variables, Conditionals, and Functions"
    end 
end
