use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit4Lesson7 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 4 Lesson 7: Conditionals Practice")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
       Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Variables, Conditionals, and Functions - Lesson 7: Conditionals Practice", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Variables, Conditionals, and Functions - Lesson 7: Conditionals Practice")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)


        bodyDiv:AddParagraph("In this lesson students spend most of their time practicing using the skills and processes they have learned about conditionals. At the conclusion of the lesson students discuss the main things they realized and still have questions about at the conclusion of this lesson.")

        bodyDiv:AddHeading("Goals",2)
        bodyDiv:AddParagraph("Students will be able to:")
        UnorderedList goals
        goals:AddListItem("Write programs that use boolean expressions and conditional statements with the support of sample code.")
        goals:AddListItem("Debug programs that use boolean expressions and conditional statements")
        bodyDiv:Add(goals)



        bodyDiv:AddHeading("Purpose",2)
        bodyDiv:AddParagraph("This lesson is students primary opportunity to get hands on with conditionals in code prior to the Make activity in the following lesson. Give students as much class time as you can to work through these. For this lesson it's recommended that you place students in pairs as a support and to encourage discussion about the challenges or concepts they're seeing. In the following lesson students are encouraged to work independently.")



        bodyDiv:AddHeading("Getting Started (5 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList openingRemark
        openingRemark:AddListItem("Today we're going to have a chance to practice programming with a lot of the concepts and patterns we've explored over the last two lessons. I encourage you to go through these with a partner, but pay close attention to what each other is doing. In our next lesson you're going to have to use a lot of these on an independent project, and these activities are good practice for what you'll find there! Alright, let's get to it!")
        bodyDiv:Add(openingRemark)
        bodyDiv:Add(break)

        BoxTip openingTip
        openingTip:AddHeading("Teaching Tip", 4)
        openingTip:AddParagraphBoldFront("Move Quickly to the Activity:", " There's a lot in the main activity of today's lesson. You may optionally wish to do a quick vocabulary review or address any questions that came up in the last lesson. Otherwise, give students more time to get hands on with some code.")
        bodyDiv:Add(openingTip)


        bodyDiv:AddHeading("Activity (35 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Group:", " It is recommended that students work in pairs for this lesson and a number of the activities feature discussion prompts. Consider using pair programming, having drivers and navigators switch every 3 minutes, not every project.")
        bodyDiv:AddParagraphBoldFront("Open a Project:", " Direct students to open the " + AddTextBoldFront("Lesson7_App1"," project. Students will start with this project, then move through each Lesson7 project until they finish with Lesson7_App9. Before students start, briefly remind them about debugging skills that they will be using in today's activity."))
        bodyDiv:AddParagraphBoldFront("Remarks", "")
        
        Array<text> remarksOrdered
        Array<text> remarksUnordered
        remarksOrdered:Add("Syntax errors show up when you type code that breaks the rules of the programming language. You can check for errors and warnings")
        remarksOrdered:Add("Logic errors show up when you type valid code but it works incorrectly. Today you're going to focus on testing your code to make sure you don't have logic errors.")
        remarksUnordered:Add("Run-time error - a mistake in the program that shows when running the program. These are defined by the programming language.")
        remarksUnordered:Add("Overflow error - an error that occurs when a computer tries to handle a number outside of the defined range of values.")
        UnorderedList activityRemarks
        activityRemarks:AddListItem("Today you're mostly going to practice what we've learned about programming with conditionals. As always you should be using the debugging process to help you as you work on issues. Today we're also going to be working on finding two types of errors:" + MakeNestedOrderedList(remarksOrdered))
        activityRemarks:AddListItem("Other errors you may encounter include:" + MakeNestedUnorderedList(remarksUnordered))
        bodyDiv:Add(activityRemarks)

        bodyDiv:AddParagraphBoldFront("Projects 1-3:", " These levels only use the " + AddCodeTag("output") + " command which prints commands in the debug console. Here are a few things to keep an eye out for:")
        UnorderedList activityList1
        activityList1:AddListItem("Projects 1-2 ask students to write Boolean expressions using comparison operators. Students may need to quickly review the comparison operators (" + AddCodeTag("<, >, <=, >=, =, not=") + ")")
        activityList1:AddListItem("Project 4 asks students to write Boolean expressions with logical operators (" + AddCodeTag("and, or, not") +")")
        bodyDiv:Add(activityList1)

        bodyDiv:Add(break)
        BoxTip providingSupport
        providingSupport:AddHeading("Teaching Tip", 4)
        providingSupport:AddParagraphBoldFront("Providing Support:", " Circulate around the room through the lesson encouraging students to use the strategies introduced at the beginning of the lesson. Students have a number of supports at their fingertips, so a big part of your role is helping build their independence in using those resources.")
        bodyDiv:Add(providingSupport)

        bodyDiv:AddParagraphBoldFront("Projects 4-8:", " These levels practice if-statements while working with a star color-changing app. ")
        UnorderedList activityList2
        activityList2:AddListItem("Projects 4-5 involve setting up an if-statement that becomes an if-else statement.")
        activityList2:AddListItem("In Project 6 students follow a pattern to create a lengthy if-else-if statement.")
        activityList2:AddListItem("For Project 7, make sure students understand what's happening. Students can use " + AddCodeTag("output") + " statements in each of the if-else-if blocks to see which sections are triggering.")
        activityList2:AddListItem("Project 8 demonstrates that Boolean expressions can be written as conditional statements, and vice versa ")   
        bodyDiv:Add(activityList2)

        bodyDiv:AddParagraphBoldFront("Project 9:", " This two-part project returns to the " + dq + "Can I Adopt a Cat?" + dq + " flowchart from the Conditionals Explore activity. Students will use the flowchart to work out the logic of the if-statements in a their program. ")
        UnorderedList activityList3
        activityList3:AddListItem("A new type of code appears in this project, " + AddCodeTag("cast") + ". A cast is a special command that changes data from one type to another. Here, it's used to turn text into a number that can be used mathematically.")
        activityList3:AddListItem("The second half of the project can be completed many different ways. There are different combinations of Boolean expressions using " + AddCodeTag("and") + " and " + AddCodeTag("or") + ". Students should regularly test their apps to see if their Boolean expressions are working properly.")
        bodyDiv:Add(activityList3)

        bodyDiv:AddHeading("Extension Opportunities:", 4)
        UnorderedList activityList4
        activityList4:AddListItem("Project 3: Students can add more variables and create complex Boolean expressions. One challenge might be to assign a String to a variable and compare that string to another. ")
        activityList4:AddListItem("Project 9: There are multiple solutions. If students build their if-statement using only " + AddCodeTag("and") + " encourage them to figure out how to build it using only " + AddCodeTag("or") + ". They may need to switch the content of the if and else branches. ")
        activityList4:AddListItem("Project 9: Create another input (i.e. How many cats do you already own?). Students use this information to craft more complex if-statements.")
        bodyDiv:Add(activityList4)

        bodyDiv:AddHeading("Wrap Up (5 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Discuss:", " What aspects of working with conditionals do you feel like clicked today? What do you still feel like you have trouble with?")

        BoxTip closingGoal
        closingGoal:AddParagraphBoldFront("Discussion Goal:", " Use this opportunity to address any lingering questions or misconceptions in the room. You can also use this as a source of discussion topics to kick off the following lesson. As you lead the discussion, call out the many resources students have access to help when they're getting stuck. ")
        bodyDiv:Add(closingGoal)

        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList closingRemarks
        closingRemarks:AddListItem("Conditionals can be a little bit tricky, but I saw a lot of good progress today in nailing down this concept. We may have a few lingering questions, but you also have a lot of resources available. Next time you'll have a chance to put all this together by programming an app that starts with " + dq + "the blank screen" + dq + "!")
        bodyDiv:Add(closingRemarks)

        bodyDiv:AddHeading("Assessment: Check for Understanding - AP Practice", 2)

        Paragraph documentLink
        documentLink:AddText(AddStrongTag("AP Reference:") + " The questions below reflect how questions will be represented on the AP exam. You can use the ")
        documentLink:AddLink("AP CSP Reference Sheet and Quorum Info", "/files/code/AP CSP Reference sheet and Quorum info.docx")
        documentLink:AddText(" resource to see more about how the exam is presented and the differences between Quorum and the reference language.")
        bodyDiv:Add(documentLink)

        bodyDiv:AddParagraphBoldFront("Question:", " What will be displayed afer this code segment is run?")
        PreformattedText question1
        question1:AddText("<code>IF (lives = 0)
{
    DISPLAY(" + dq + "You Lose!" + dq + ")
}
ELSE
{
    IF ((score >= 5) AND (lives = 3))
    {
        DISPLAY(" + dq + "Perfect Game!" + dq + ")
    }
    ELSE
    {
        DISPLAY(" + dq + "You Win!" + dq + ")
    }
}</code>")
        bodyDiv:Add(question1)
        bodyDiv:AddParagraphBoldFront("Choose one of the following:","")
        OrderedList answers1
        answers1:AddListItem("Perfect Game!")
        answers1:AddListItem("You Win!")
        answers1:AddListItem("You Lose!")
        answers1:AddListItem("Nothing will be displayed")
        bodyDiv:Add(answers1)

        bodyDiv:AddParagraphBoldFront("Question:", " The program below asks a user to type in a number and then will output a message. What number will a user need to input for the message " + dq + "COLD" + dq + " to be displayed?")
        PreformattedText question2
        question2:AddText("<code>number <- INPUT()

IF (number >= 10)
{
    IF (number <= 20)
    {
        DISPLAY(" + dq + "MEDIUM" + dq + ")
    }
    ELSE
    {
        DISPLAY(" + dq + "HOT" + dq + ")
    }
}
ELSE
{
    DISPLAY(" + dq + "COLD" + dq + ")
}</code>")
        bodyDiv:Add(question2)
        bodyDiv:AddParagraphBoldFront("Choose one of the following:","")
        OrderedList answers2
        answers2:AddListItem("5")
        answers2:AddListItem("10")
        answers2:AddListItem("15")
        answers2:AddListItem("20")
        bodyDiv:Add(answers2)

        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list                
            AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "2-AP-10, 2-AP-12")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.E.2")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.F.1, AAP-2.F.2, AAP-2.F.3, AAP-2.F.4")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.H.2, AAP-2.H.3")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-2.L.3, AAP-2.L.4")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-3.A.9")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "CRD-2.I.1, CRD-2.I.2, CRD-2.I.3, CRD-2.I.4")
            AddListItemWithBoldAtFront(list, "CSP2021: ", "CRD-2.J.2")
            bodyDiv:Add(list)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end


    action GetMetaDescription returns text
        return "Practice using conditionals in a series of projects"
    end

    action GetSummaryName returns text
        return "CSP Unit 4 Lesson 7"
    end
    action GetName returns text
        return "CSP Unit 4 Lesson 7 Conditionals Practice"
    end
    action GetShortDescription returns text
        return "Practice using conditionals"
    end
    action GetLocation returns text
        return "lessons/code/BigDataAndPrivacy/Lesson7.html"
    end


        action GetLinkName returns text
        return "Conditionals Practice"
    end

    action GetSectionName returns text
        return "Variables, Conditionals, and Functions"
    end 
end
