use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit5Lesson2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 2: Lists Investigate")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Lists, Loops, and Traversals - Lesson 2: Lists Investigate", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Lists, Loops, and Traversals - Lesson 2: Lists Investigate")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)


        section_intro:AddParagraph("In this lesson students work with partners to investigate three different apps that use lists. Students first explore all three apps without seeing the code to notice similarities and predict how they will work. Then they explore the code itself and make additions and modifications to the apps. To conclude the lesson, students review and discuss common programming patterns with conditionals.")
            
        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
            UnorderedList goalList
            goalList:AddClassAttribute("list-disc list-outside pl-8")
                goalList:AddListItem("Identify common programming patterns using lists")
                goalList:AddListItem("Explain the purpose of programming patterns with lists both in terms of how they work and what they accomplish")
                goalList:AddListItem("Modify apps that make use of common programming patterns with lists to adjust their functionality")
        section_intro:Add(goalList)

        AddHeading(section_intro, "Purpose", 3)
            Paragraph purpose
                purpose:AddText("After building a conceptual model for list and list operations in the previous lesson, this lesson allows students to see how they are actually implemented in code. This lesson also introduces common programming patterns when using lists. Students will have some opportunities to modify working code in this lesson, but the most significant practice with lists will come in the following lesson.")
        section_intro:Add(purpose)

        AddHeading(section_intro, "Resources", 3)
        section_intro:AddParagraph("For the students")
        UnorderedList resources
        resources:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        resources:AddListItemLink("Introduction to Lists - Part 4 (Video)", "https://youtu.be/H__zi1BiXJM")
        resources:AddListItemLink("Introduction to Lists - Part 3 (Video)", "https://youtu.be/rWSsVSMGXXY")
        resources:AddListItemLink("CSP-Widgets repository", "https://github.com/qorf/CSP-Widgets")
        section_intro:Add(resources)

              Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
        section_gettingStarted:AddParagraphBoldFront("Prompt:", " What are some similarities and differences between variables and lists? How does a list manage complexity in a program?")

        Division startGoal = AddDisscussionGoal(section_gettingStarted)
        startGoal:AddParagraph("Students may bring up the following points:")
        UnorderedList startList1
        startList1:AddClassAttribute("list-disc list-outside pl-8")
        startList1:AddListItem("Both are used to store information")
        startList1:AddListItem("Lists store multiple items, but variables only store one")
        startList1:AddListItem("When written in Javascript, both start with the keyword var")
        startList1:AddListItem("In Quorum, lists are declared differently than variables")
        startList1:AddListItem("In Quorum, both variables and lists have types, and can only hold that specific type of information")
        startGoal:Add(startList1)
        startGoal:AddParagraph("Managing complexity:")
        UnorderedList startList2
        startList2:AddClassAttribute("list-disc list-outside pl-8")
        startList2:AddListItem("You don't need to know how a list is created in order to use it - all you need is the name. There is a separation between the abstract properties of the data type (list) and the concrete details of its representation.")
        startList2:AddListItem("Programs that use lists are easier to read and manage - separate variables are not needed for each individual element")
        startGoal:Add(startList2)
    

            Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (35 minutes)", 2)

         AddHeading(section_activity, "Accessing Lists (20 minutes)", 3)
     

        Division teachingTip = AddTeachingTip(section_activity)

        teachingTip:AddParagraphBoldFront("Finding Target Responses:", " With a verified teacher account you should be able to see target responses to each question posed on each level.")
        teachingTip:AddParagraphBoldFront("Prepping for Investigate Lessons:", "The best way to prepare for this lesson is to go through the experience yourself. Check out both apps to get a sense for how they work. Then watch the videos. Then move on to the Code Investigation and actually try to answer all the questions for each app.")
        teachingTip:AddParagraphBoldFront("Show Videos at the Front:", " Show videos at the front of the room rather than having students watch them individually. It will be a good opportunity to bring the room back together.")
        teachingTip:AddParagraphBoldFront("Display Code at the Front:", " If your room allows it, display the code during the Code Investigation at the front of the room. When students mentions specific lines of code actually scroll to that line and read through it together.")
     

        Paragraph video1
        video1:AddText("<strong>Level 1 - Video:</strong> Show ")
        Link link = video1:AddLink("Introduction to Lists - Part 4 (Video)", "https://youtu.be/H__zi1BiXJM")
        link:SetClassAttribute("underline text-quorum-blue-150")
        video1:AddText(". This video explains how to determine the length of a list in Javascript. In Quorum, the concepts are the same, but the code looks slightly different. Instead of using <code>myList.length</code>, the code in Quorum would be <code>myList:GetSize()</code>.")
        section_activity:Add(video1)

        AddVideo(section_activity,"https://www.youtube.com/embed/H__zi1BiXJM?si=tUsnPzYOoacnlQD5")

        section_activity:AddParagraphBoldFront("Group:", " Place students in pairs.")
        section_activity:AddParagraphBoldFront("Level 2 - Open a Project:", " Direct students to open <b>Lesson2_App1</b> and investigate the Outfit Picker app. Each pair should read the app carefully and prepare answers to the questions for their app.")
        section_activity:AddParagraphBoldFront("Discuss:", " Have pairs match up with another pair, forming a group of four. Each pair should spend ~5 minutes walking them through the way that the app works and what they learned specifically from answering each question. Afterwards discuss any open questions that they couldn't answer with the room.")

        Division discussiongoal = AddDisscussionGoal(section_activity)
        discussiongoal:AddParagraph("Use this paired-group discussion to push students on using new vocabulary associated with lists and referring/pointing to specific lines when explaining their answers to the questions. Both programs use .length in ways that might be challenging for students to understand. Demonstrating the difference between using .length and .length-1 to the class could be useful.")
        

        section_activity:AddParagraphBoldFront("Modify: ", "Have pairs modify the app the investigated based on the instructions for the particular app.")

       AddHeading(section_activity, "Chaning Lists", 3)

        Paragraph video2
        video2:AddText("<strong>Level 4 - Video:</strong> Show ")
        Link link1 = video2:AddLink("Introduction to Lists - Part 3 (Video)", "https://youtu.be/rWSsVSMGXXY")
        link1:SetClassAttribute("underline text-quorum-blue-150")
        video2:AddText(". This video explains how inserting and removing elements in a list in Javascript works. Once again, the concepts are the same in Quorum, but the code is different. Inserting and removing elements in Quorum is done using the <code>Add(index, element)</code> and <code>RemoveAt(index)</code> commands, respectively.")
        section_activity:Add(video2)

         AddVideo(section_activity,"https://www.youtube.com/embed/rWSsVSMGXXY?si=bwoosUrxM1azlofF")

        section_activity:AddParagraphBoldFront("Level 5 - Pair Maker: ", " Have all pairs investigate <b>Lesson2_App2</b> on their own, answering the questions listed in the code of the Pair Maker app.")
        section_activity:AddParagraphBoldFront("Discuss:", " Have pairs match up with another pair forming a group of four. The group should spend ~5 minutes discussing their responses to each of the questions. Bubble up confusion points or open questions to the room.")
        
        Division discussiongoal2 = AddDisscussionGoal(section_activity)
        discussiongoal2:AddParagraph("Make sure students understand how the properties of the dropdown and the lists are working together in this program. Demonstrating how to find these properties and play around with them in design mode might help your students better understand the connection.")
      

        section_activity:AddParagraphBoldFront("Modify Apps:", " If there is time remaining, have pairs return to one or more of the apps and make the suggested modifications.")

        Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap up (5 Minutes)", 2)
        section_wrap:AddParagraphBoldFront("Levels 6-7 Patterns Review:", " Review the patterns below as a class.")
        UnorderedList review
        review:AddClassAttribute("list-disc list-outside pl-8")
        review:AddListItem("Have students add any relevant notes about the patterns to their journals.")
        review:AddListItem("Discuss which of the three apps you think were using which pattern.")
        section_wrap:Add(review)

        
        AddHeading(section_wrap, "Random List Access Patterns", 3)
      
      section_wrap:Add(preformatter:GeneratePreformattedCode("integer index = 0
Array&lt;text&gt; fruitList
Label fruitLabel = undefined

action Start
    fruitList:Add(" + dq + "banana" + dq + ")
    fruitList:Add(" + dq + "apple" + dq + ")
    fruitList:Add(" + dq + "pear" + dq + ")

    // Other code here for setting up an app...
end

action ButtonActivated(Button button)
    index = RandomNumber(0, fruitList:GetSize() - 1)
    UpdateScreen()
end

action UpdateScreen
    fruitLabel:SetText(fruitList:Get(index))
end"))
/*
        PreformattedText example1
        example1:AddText("<code>integer index = 0
Array&lt;text&gt; fruitList
Label fruitLabel = undefined

action Start
    fruitList:Add(" + dq + "banana" + dq + ")
    fruitList:Add(" + dq + "apple" + dq + ")
    fruitList:Add(" + dq + "pear" + dq + ")

    // Other code here for setting up an app...
end

action ButtonActivated(Button button)
    index = RandomNumber(0, fruitList:GetSize() - 1)
    UpdateScreen()
end

action UpdateScreen
    fruitLabel:SetText(fruitList:Get(index))
end</code>")
*/

        //section_wrap:Add(example1)
        AddHeading(section_wrap, "How does it work?", 4)
        section_wrap:AddParagraph("Many projects run in the following way.")
        OrderedList randomListAccess
        randomListAccess:AddClassAttribute("list-disc list-outside pl-8")
        randomListAccess:AddListItem("The user is interested in seeing items in a list, like a list of favorite foods, or a list of reminders.")
        randomListAccess:AddListItem("The app shows the user one item in the list at a time.")
        randomListAccess:AddListItem("By clicking buttons (or otherwise interacting with the app) a new random item in the list is shown to the user.")
        section_wrap:Add(randomListAccess)
        section_wrap:AddParagraph("This pattern allows a user to see random elements in a list. In order to make it work, create an index variable and a list. Then generate a random number between 0 and the length of the list minus one and set the index to that value. Then update the screen.")

        AddHeading(section_wrap, "List Scrolling Pattern", 3)

section_wrap:Add(preformatter:GeneratePreformattedCode("integer index = 0
Array&lt;text&gt; fruitList
Label fruitLabel = undefined
Button leftButton = undefined
Button rightButton = undefined

action Start
    fruitList:Add(" + dq + "banana" + dq + ")
    fruitList:Add(" + dq + "apple" + dq + ")
    fruitList:Add(" + dq + "pear" + dq + ")

    // Other code here for setting up an app...
end

action ButtonActivated(Button button)
    if button = leftButton
        if index > 0
            index = index - 1
        end
    elseif button = rightButton
        if index < fruitList:GetSize() - 1
            index = index + 1
        end
    end
    UpdateScreen()
end

action UpdateScreen
    fruitLabel:SetText(fruitList:Get(index))
end"))
/*
        PreformattedText example2
        example2:AddText("<code>integer index = 0
Array&lt;text&gt; fruitList
Label fruitLabel = undefined
Button leftButton = undefined
Button rightButton = undefined

action Start
    fruitList:Add(" + dq + "banana" + dq + ")
    fruitList:Add(" + dq + "apple" + dq + ")
    fruitList:Add(" + dq + "pear" + dq + ")

    // Other code here for setting up an app...
end

action ButtonActivated(Button button)
    if button = leftButton
        if index > 0
            index = index - 1
        end
    elseif button = rightButton
        if index < fruitList:GetSize() - 1
            index = index + 1
        end
    end
    UpdateScreen()
end

action UpdateScreen
    fruitLabel:SetText(fruitList:Get(index))
end</code>")
*/
       // section_wrap:Add(example2)
        AddHeading(section_wrap, "How does it work?", 4)
        section_wrap:AddParagraph("Many projects run in the following way.")
        OrderedList listScrolling
        listScrolling:AddClassAttribute("list-decimal list-outside pl-8")
        listScrolling:AddListItem("The user is interested in seeing items in a list, like a list of favorite foods, or a list of reminders.")
        listScrolling:AddListItem("The app shows the user one item in the list at a time.")
        listScrolling:AddListItem("By clicking buttons (or otherwise interacting with the app) the user can move back and forth through the list, one item at a time, to see every item.")
        section_wrap:Add(listScrolling)
        section_wrap:AddParagraph("This pattern allows a user to " + dq + "scroll" + dq + " through all the items in the list. In order to make it work, create an index variable and a list. Then use the " + dq + "Counter Pattern with Boundary" + dq + " pattern to create event handlers to change the value of the index.")
        section_wrap:AddParagraph("This pattern makes sense to use with the <code>UpdateScreen</code> pattern since you will need at least two buttons for scrolling left and right through the list but afterwards will use the same code to update the screen.")

        AddHeading(section_wrap, "Synthesis", 3)
        section_wrap:AddParagraphBoldFront("Prompt:", " What aspects of using lists do you feel you already understand? What questions do you want to dig into more tomorrow during the practice lesson?")

        section_wrap:AddParagraphBoldFront("Discuss:", " Have students write in their journals, then share with a neighbor, then finally discuss as a class.")

        Division closingGoal = AddDisscussionGoal(section_wrap)
        closingGoal:AddParagraphBoldFront("Discussion Goal:", " Use this discussion to identify any points of confusion that will need to be reviewed in coming lessons.")
     

     Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "3A-AP-14, 3A-AP-23")            
                AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-1.A.3, AAP-1.A.4")
                AddListItemWithBoldAtFront(list, "CSP2021: ", "AAP-1.D.1, AAP-1.D.2, AAP-1.D.3, AAP-1.D.4, AAP-1.D.5, AAP-1.D.6")

        section_standards:Add(list)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Explore apps and patterns using lists"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 2 (Lists Investigate)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 2"
    end
    action GetShortDescription returns text
        return "Investigating lists in apps"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson2.html"
    end

    action GetLinkName returns text
        return "Lists Investigate"
    end

    action GetSectionName returns text
        return "Lists, Loops, and Traversals"
    end   
end

 
    
