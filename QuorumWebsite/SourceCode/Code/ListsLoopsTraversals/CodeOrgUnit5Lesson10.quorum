use Libraries.Web.Page.all
use Libraries.Containers.Array

/***********************************
Need to still edit IDE identifier
names, as well as the "Standards
Alignment" section.
***********************************/

class CodeOrgUnit5Lesson10 is Lesson
    text iText = ""
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 10: Traversals Investigate")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("TLists, Loops, and Traversals - Lesson 10: Traversals Investigate", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Lists, Loops, and Traversals - Lesson 10: Traversals Investigate")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)

        bodyDiv:AddParagraph("In this lesson students work with partners to investigate three different apps that use traversal to access items in a lists. Students first explore all three apps without seeing the code to notice similarities and predict how they will work. Then they explore the code itself and make additions and modifications to the apps. To conclude the lesson, students review and discuss common programming patterns with traversals.")         


        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Identify common programming patterns using traversals")
                goalList:AddListItem("Explain the purpose of programming patterns with traversals both in terms of how they work and what they accomplish")
                goalList:AddListItem("Modify apps that make use of common programming patterns with traversals to adjust their functionality")
        bodyDiv:Add(goalList)


        bodyDiv:AddHeading("Purpose", 2)
        bodyDiv:AddParagraph("After building a conceptual model using a loop to traverse a list in the previous lesson, this lesson allows students to see how this is actually implemented in code. This lesson also introduces common programming patterns when using lists and traverals. Students will have some opportunities to modify working code in this lesson, but the most significant practice with lists and traversals will come in the following lesson.")          

        bodyDiv:AddHeading("Resources", 2)
        UnorderedList resources
        resources:AddListItemLink("CSP-Widgets repository", "https://github.com/qorf/CSP-Widgets")
        bodyDiv:Add(resources)

        bodyDiv:AddHeading("Getting Started (5 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Prompt:", " Let's review last lesson. What did we do?")
        
        BoxTip warmUpGoal
        warmUpGoal:AddHeading("Discussion Goal", 3)
        warmUpGoal:AddParagraph("Last lesson, we visualized how a loop is used to traverse a list and interact with each element in the list one by one.")
        bodyDiv:Add(warmUpGoal)


        bodyDiv:AddHeading("Activity (35 mins)", 2)
        bodyDiv:AddHeading("Mile Tracker Investigation", 3)
        bodyDiv:AddParagraphBoldFront("Group:", " Group students into groups of four.")

        bodyDiv:AddParagraphBoldFront("Open a Project:", " Today's lesson uses three apps, starting with <b>Lesson10_App1</b>.")
        bodyDiv:AddParagraphBoldFront("App 1:", " Students read the entire code, and then students focus their attention on a single action. Students should re-read the code for their function.")
        UnorderedList app1List
        app1List:AddListItem("Student A - <code>Average()</code>")
        app1List:AddListItem("Student B - <code>Slow()</code>")
        app1List:AddListItem("Student C - <code>Fast()</code>")
        app1List:AddListItem("Student D - <code>NumberedListDisplay()</code>")
        bodyDiv:Add(app1List)

        bodyDiv:AddParagraphBoldFront("Discuss:", "How does the app work?")
        bodyDiv:AddParagraph("Students discuss in their groups how each of their functions work, specifically referencing the list it uses and how it is traversed using a for loop. Then as a class address any confusion over how the app works.")
        UnorderedList discussList
        discussList:AddListItem(AddTextBoldFront("The goal:"," The goal of this investigation is to give students the opportunity to see lists traversed for different reasons and with different outcomes. Students should look at the code for their assigned function and make sense of what the function does overall and how it does it."))
        discussList:AddListItem(AddTextBoldFront("What to look for:"," It may be helpful to re-watch the video in the U5L10 - Traversals Explore lesson starting at 3:07 to hear how the speaker describes a section of code that processes a list for a specific purpose. Listening to that explanation will help give you an idea of what student explanations of their functions should sound like.

        For example, when explaining the average function in this investigation, students should describe what the function does. In this case, the function calculates the average of the values stored in the <code> mileTimes </code> list and stores that value in the <code>avg</code> variable. In addition to describing what the function does, students should describe how the function works. This will involve more detail."
        + "<ul>" + "<li>Students should be able to describe that the function contains a local variable of <code>total</code> which is initialized at 0.<li>" + 
        "Then the function uses a for loop to traverse through the <code>mileTimes</code> list. In the loop, each value inside <code>mileTimes</code> list is accessed and added to the current value stored inside the total variable." 
        + "<li>When the loop reaches the end of the list, the loop ends and the total variable contains the sum of all the <code>mileTimes</code>. In the last line of the function, the value stored in <code>avg</code> is updated by dividing the value stored in <code>total</code> by the total number of elements in the <code>mileTimes</code> list.</li>" +
         "</ul>"))
        bodyDiv:Add(discussList)
        bodyDiv:Add(break)
        
        bodyDiv:AddParagraph("When you bring the class together to talk about how the app works, you should talk both about what the functions do as well as how they work. There likely is not time to go over all four functions, but discussing one or two of them will ensure the full class has an opportunity to hear how their peers describe code.")

        bodyDiv:AddParagraphBoldFront("Modify:", " Students work with a partner to create a function that adds together the total time of every element in the list. Output the result. Call this function in the <code>UpdateScreen()</code> function. ")

        BoxTip prepTip
        prepTip:AddHeading("Teaching Tip", 3)
        prepTip:AddParagraphBoldFront("Prepping for Investigate Lessons:", " The best way to prepare for this lesson is to go through the experience yourself. Check out the three apps to get a sense for how they work. Then move on to the Code Investigation and actually try to answer all the questions for each app. These questions are intended to help students read and make sense of the code. It is not about getting the " + dq + "right answer" + dq + " as much as it is about building skills in your students to read, test, and make sense of code that they haven't seen before.")           
        prepTip:AddParagraphBoldFront("Display Code at the Front:", " If your room allows it, display the code during the Code Investigation at the front of the room. When students mentions specific lines of code actually scroll to that line and read through it together.")
        prepTip:AddParagraphBoldFront("Save Modifications for the End:", " This lesson can be tight on time. Rather than have students modify the code all at once, you can save modifications for the end of the Code Investigation and have students pick a single app they wish to modify.")
        bodyDiv:Add(prepTip)

        bodyDiv:AddHeading("Data Tab Investigation", 3)
        bodyDiv:AddParagraphBoldFront("App 2 (5 mins):", " Students read the code, and then investigate the data folder.")
        bodyDiv:AddParagraphBoldFront("Discuss:", " Encourage students to share out what they found in the datasets and how they can interact with it with code.")
        UnorderedList discussList2
        discussList2:AddListItem("How does it work?
                                What information is available?
                                What can you change? What can't you change?
                                Investigate a few different datasets.")
        discussList2:AddListItem(AddTextBoldFront("The goal:","  The goal of this investigation is to get students comfortable with information inside the Data tab and to help them understand the getColumn command. Students should be given some time to explore the Data tab themselves and even try the Modify task for a few minutes."))
        discussList2:AddListItem(AddTextBoldFront("What to look for:"," When you bring the class together, students should be able to describe what information they see in the data tab and how they can use the data tab to help get access to data. Key points to draw out are:"
        + "<ul>" + "<li>The Data Library on the left hand side has different categories of datasets that students can view.<li>" + 
        "Students need to import a data set to be able to see the data inside it or to use the data in the code." 
        + "<li>Once imported, students will see the data set in the Data Browser area and can click on the name of the Data Set to see the data in table form.</li>" +
        "<li>To use the getColumn command, you need the name of the table you want to use and the name of the column from that table.</li>" +
        "<li>getColumn will return the column from your table as a list. You can see it is a list because when it is printed to the console, it has square brackets [ ] around the items which are separated by commas.</li>" +
         "</ul>"))
        bodyDiv:Add(discussList2)
        bodyDiv:Add(break)

        bodyDiv:AddParagraphBoldFront("Modify:", " Students load a new dataset into the project. Then students modify the code to print out a column of data from the new dataset. Point out to students that when they pull out a column, they are creating a list.")

        bodyDiv:AddParagraphBoldFront("Do This:", " Show the Data Tab in App Lab video.")
        
        BoxTip app2Tip
        app2Tip:AddHeading("Teaching Tip", 3)
        app2Tip:AddParagraph("Note that in the next investigation, students will combine their knowledge of traversals and the Data Tab to make more robust apps that don't require students to type long lists in their code themselves. ")
        bodyDiv:Add(app2Tip)

        bodyDiv:AddHeading("Random Dog Picker Investigation", 3)
        bodyDiv:AddParagraphBoldFront("App 3:", " Instruct students to run the app and then carefully read it. There is a lot of information in the comments in this app. Students work through all of the questions on the screen. ")
        bodyDiv:AddParagraphBoldFront("Discuss:", " Go through the questions one by one and answer as a class. Afterwards, go line by line with the class explaining how the app works. ")

        UnorderedList discussList3
        discussList3:AddListItem(AddTextBoldFront("The goal:"," The goal of this investigation is to give students an opportunity to make sense of how traversals and the datasets can be used together to create a working app. It is important to note that the algorithms in this app have some of the same qualities as the algorithm students will need to develop for the Create PT."))
        discussList3:AddListItem(AddTextBoldFront("What to look for:","  This project defines several different functions. Help guide students particularly to how the lists are filled. Students should see a <code>listSetup</code> function. This function calls the <code>filter</code> function. <code>filter</code> is where the lists are being filled. Use the questions listed in CodeStudio to help students make sense of this code. In particular, spend a little extra time discussing the question How are these lists filled?. This is an opportunity to go through the <code>filter</code> function line by line to understand how the function works."))
        bodyDiv:Add(discussList3)
        bodyDiv:Add(break)

        BoxTip app3Goal
        app3Goal:AddHeading("Discussion Goal", 3)
        app3Goal:AddParagraph("Make sure students arrive at the following answers:")
        UnorderedList app3Answers
        app3Answers:AddListItem("What are the names of the three lists in this program?" +
"<ul>" +
    "<li><code>dogNames</code>, <code>dogHeights</code>, <code>filteredDogNames</code></li>" +
"</ul>")
        app3Answers:AddListItem("On what lines of code are the lists created?" +
"<ul>" +
    "<li><code>dogNames</code>: 30</li>" +
    "<li><code>dogHeights</code>: 31</li>" +
    "<li><code>filteredDogNames</code>: 34</li>" +
"</ul>")
        app3Answers:AddListItem("On what lines of code are the lists filled?" +
"<ul>" +
    "<li><code>dogNames</code>: 98</li>" +
    "<li><code>dogHeights</code>: 99</li>" +
    "<li><code>filteredDogNames</code>: 72-81</li>" +
"</ul>")
        app3Answers:AddListItem("How are these lists filled?" +
"<ul>" +
    "<li><code>dogNames</code> and <code>dogHeights</code> are filled by pulling a column of data from the dataset</li>" +
    "<li>For <code>filteredDogNames</code>, the <code>dogHeights</code> list is traversed. If <code>dogHeights</code> and <code>dogSize</code> meet the given conditions the name at the same index position in the <code>dogNames</code> list is added to the filtered list.</li>" +
"</ul>")
        app3Answers:AddListItem("Find and open the Dogs.csv file in Excel or another spreadsheet program. What columns does this app use?" +
"<ul>" +
    "<li>" + dq + "Name" + dq + ", " + dq + "Maximum Height" + dq + ", " + dq + "Image" + dq + "</li>" +
"</ul>")
        app3Answers:AddListItem("Look at the filter function. On what lines is the filtered list reset to be blank?" +
"<ul>" +
    "<li>Line 64</li>" +
"</ul>")
        app3Answers:AddListItem("What condition is being checked to determine if an element belongs in a filtered list?" +
"<ul>" +
    "<li>If a dog's height is above or below a certain number</li>" +
"</ul>")
        app3Goal:Add(app3Answers)
        bodyDiv:Add(app3Goal)

        BoxTip app3Tip
        app3Tip:AddHeading("Teaching Tip", 3)
        app3Tip:AddParagraph("Traversals can be tricky! In this case, we are filtering a list by information that is in another list. ")
        app3Tip:AddParagraph("There are three lists to start: <code>dogNames</code>, <code>dogHeights</code>, and <code>dogImages</code>. We want to sort out the dogs so that when the user picks a size via the buttons, only dogs of that size show up in the display.")
        app3Tip:AddParagraph("To do this, we traverse using a filter pattern. Using a loop to go through each item in the <code>dogHeights</code> list, if a dog's height matches up to the requirements, we pull the dog's name from the original list (all the indexes will match) and put that in the new filtered list.")
        app3Tip:AddParagraph("Once this is done, we have a filtered list we can pull from to display a random dog's name and image.")
        bodyDiv:Add(app3Tip)

        bodyDiv:AddHeading("Traversal Patterns", 3)
        bodyDiv:AddParagraphBoldFront("Pattern Review:", " Review the two patterns below as a class: the <i>List Filter Pattern</i> and the <i>List Reduce Pattern</i>.")
        UnorderedList patternList
        patternList:AddListItem("Have students add any relevant notes about the patterns to their journals.")
        patternList:AddListItem("Discuss which patterns were used in the apps today.")
        bodyDiv:Add(patternList)

        bodyDiv:AddHeading("List Filter Pattern", 3)
        bodyDiv:AddHeading("Filtering one list", 4)
        bodyDiv:AddParagraph("This pattern allows the user to filter a list into a new list by limiting the information that is added to the new list. For example, you could filter a list of words so that only words of a certain length or words that start with a specific letter appear in the new list. ")
        bodyDiv:AddHeading("<i>Example: List Filter - starting letter</i>", 4)
        PreformattedText example1
        example1:AddText("<code>Array&lt;text&gt; list
list:Add(" + dq + "apples" + dq + ")
list:Add(" + dq + "oranges" + dq + ")
list:Add(" + dq + "apricots" + dq + ")
list:Add(" + dq + "bananas" + dq + ")

Array&lt;text&gt; filteredList

integer i = 0
repeat while i < list:GetSize()
    text firstLetter = list:Get(i):GetSubtext(0, 1)
    if firstLetter = " + dq + "a" + dq + "
        filteredList:Add(list:Get(i))
    end
    i = i + 1
end
</code>")
        bodyDiv:Add(example1)

        bodyDiv:AddHeading("<i>Example: List Filter - length</i>", 4)
        PreformattedText example2
        example2:AddText("<code>Array&lt;text&gt; list
list:Add(" + dq + "apples" + dq + ")
list:Add(" + dq + "oranges" + dq + ")
list:Add(" + dq + "apricots" + dq + ")
list:Add(" + dq + "bananas" + dq + ")

Array&lt;text&gt; filteredList

integer i = 0
repeat while i < list:GetSize()
    integer wordLength = list:Get(i):GetSize()
    if wordLength > 7
        filteredList:Add(list:Get(i))
    end
    i = i + 1
end
</code>")
        bodyDiv:Add(example2)

        bodyDiv:AddHeading("How does it work?", 4)
        UnorderedList howItWorks1
        howItWorks1:AddListItem("Create a variable and store a list in it")
        howItWorks1:AddListItem("Create a blank list to store the filtered list")
        howItWorks1:AddListItem("Use a loop to access each element in the original list")
        howItWorks1:AddListItem("If that element meets a certain condition, append it to the filtered list")
        bodyDiv:Add(howItWorks1)

        bodyDiv:AddHeading("Filtering multiple lists", 4)
        bodyDiv:AddParagraph("What if you have multiple lists, but want to filter all the lists based on the information in a single list?")

        bodyDiv:AddHeading("<i>Example: Multiple List Filter</i>", 4)
        PreformattedText example3
        example3:AddText("<code>Array&lt;text&gt; studentNameList
Array&lt;integer&gt; studentGradeList
Array&lt;integer&gt; studentAgeList

Array&lt;text&gt; filteredStudentNameList
Array&lt;integer&gt; filteredStudentGradeList
Array&lt;integer&gt; filteredStudentAgeList

action Start
    studentNameList:Add(" + dq + "Sal" + dq + ")
    studentNameList:Add(" + dq + "Maya" + dq + ")
    studentNameList:Add(" + dq + "Rudy" + dq + ")
    studentNameList:Add(" + dq + "Gina" + dq + ")
    studentNameList:Add(" + dq + "Paris" + dq + ")
    
    studentGradeList:Add(10)
    studentGradeList:Add(11)
    studentGradeList:Add(10)
    studentGradeList:Add(12)
    studentGradeList:Add(11)
    
    studentAgeList:Add(16)
    studentAgeList:Add(18)
    studentAgeList:Add(15)
    studentAgeList:Add(17)
    studentAgeList:Add(17)

    Filter()
end

action Filter
    // Start with blank lists
    filteredStudentNameList:Empty()
    filteredStudentGradeList:Empty()
    filteredStudentAgeList:Empty()

    integer i = 0
    repeat while i < studentGradeList:GetSize()
        if studentGradeList:Get(i) = 11
            filteredStudentNameList:Add(studentNameList:Get(i))
            filteredStudentGradeList:Add(studentGradeList:Get(i))
            filteredStudentAgeList:Add(studentAgeList:Get(i))
        end
        i = i + 1
    end
end</code>")
        bodyDiv:Add(example3)
        bodyDiv:AddParagraph("All the lists must be the same length for this pattern - ideally they are columns pulled from a table")
 
        bodyDiv:AddHeading("How does it work?", 4)
        UnorderedList howDoesItWork2
        howDoesItWork2:AddListItem("Create a variable for each list")
        howDoesItWork2:AddListItem("Create blank lists to store the filtered lists")
        howDoesItWork2:AddListItem("In a function, first reset all filtered lists to blank lists. Every time the function is called, the filtered lists will reset.")
        howDoesItWork2:AddListItem("Use a loop to access each item in the list that contains the element you are filtering by")
        howDoesItWork2:AddListItem("If the element is found, append to each filtered list the element at the index in the original lists where the element was found")
        bodyDiv:Add(howDoesItWork2)

        bodyDiv:AddHeading("List Reduce Pattern", 3)
        bodyDiv:AddParagraph("This pattern is used when you want to reduce the information in a list down to a single number. For example, you might want to find the average of a list of numbers or the smallest number. ")
        bodyDiv:AddHeading("<i>Example: List Reduce - average</i>", 4)
        PreformattedText example4
        example4:AddText("<code>Array&lt;number&gt; list
number average = 0

action Start
    list:Add(1)
    list:Add(2)
    list:Add(3)
    list:Add(4)
    list:Add(5)

    FindAverage()
end

action FindAverage
    number total = 0
    integer i = 0
    repeat while i < list:GetSize()
        total = total + list:Get(i)
        i = i + 1
    end
    average = total / list:GetSize()
end</code>")
        bodyDiv:Add(example4)
        bodyDiv:AddHeading("How it works", 4)
        UnorderedList howItWorks3
        howItWorks3:AddListItem("Create a list of numbers")
        howItWorks3:AddListItem("Create a blank variable to store the average")
        howItWorks3:AddListItem("In a function create a local variable to store the total value of all elements in the list")
        howItWorks3:AddListItem("Use a loop to access each element in the list and add its value to total")
        howItWorks3:AddListItem("After the loop, calculate the average by dividing total by the length of the list")
        bodyDiv:Add(howItWorks3)

        bodyDiv:AddHeading("<i>Example: List Reduce - smallest</i>", 4)
        PreformattedText example5
        example5:AddText("<code>Array&lt;number&gt; list
number smallest = 0

action Start
    list:Add(5)
    list:Add(4)
    list:Add(3)
    list:Add(2)
    list:Add(1)

    FindSmallest()
end

action FindSmallest
    number temp = list:Get(0)
    integer i = 0
    repeat while i < list:GetSize()
        if list:Get(i) < temp
            temp = list:Get(i)
        end
        i = i + 1
    end
    smallest = temp
end</code>")
        bodyDiv:Add(example5)
        bodyDiv:AddHeading("How it works", 4)
        UnorderedList howItWorks4
        howItWorks4:AddListItem("Create a list of numbers")
        howItWorks4:AddListItem("Create a blank variable to store the smallest number")
        howItWorks4:AddListItem("In a function create a local variable to store a temporary value")
        howItWorks4:AddListItem("Use a for loop to access each element in the list")
        howItWorks4:AddListItem("If that element is less than the value stored in temp, set the value of temp to the current element")
        howItWorks4:AddListItem("After the loop set the value of smallest to the value stored in temp")
        bodyDiv:Add(howItWorks4)

        bodyDiv:AddHeading("Wrap Up (5 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Prompt:", " What aspects of using traversals to process a list do you feel you already understand? What questions do you want to dig into more tomorrow during the practice lesson?")


        bodyDiv:AddHeading("Assessment: Check for Understanding", 2)

        bodyDiv:AddParagraphBoldFront("For Students:"," Open a word doc or google doc and copy/paste the following question.")

        bodyDiv:AddParagraphBoldFront("Question:", " Explain how you would filter the dog dataset using traversal to have a filtered list of dogs who live long lives.")
        


        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "3A-AP-14, 3B-AP-10, 3B-AP-23")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "AAP-3.F.1, AAP-3.F.2, AAP-3.F.3, AAP-3.F.4, AAP-3.F.5, AAP-3.F.6, AAP-3.F.7")
        bodyDiv:Add(list)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Investigate how traversals can be used to filter data"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 10: (Lists, Loops, and Traversals: Traversals Investigate)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 10: Lists, Loops, and Traversals: Traversals Investigate"
    end
    action GetShortDescription returns text
        return "Investigate apps with traverals"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson10.html"
    end
    action GetLinkName returns text
        return "Traversals Investigate"
    end

    action GetSectionName returns text
        return "Lists, Loops, and Traversals"
    end  
end

 
    
