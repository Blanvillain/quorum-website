use Libraries.Web.Page.WebPage
use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.Header
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit1L11o2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 1 Lesson 11 (Optional 2): Algorithms Detour - Shortest Path")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("The Internet - Lesson 11 (Optional 2): Algorithms Detour - Shortest Path", 1)
        headDiv:AddText("Optional | Unplugged | Algorithms")
        Add(headDiv)

        Division bodyDiv   
        bodyDiv:SetClassAttribute("bodyContainer")

        Division box
        box:SetClassAttribute("cool-box")

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("This lesson explores the Single Source Shortest Path 
                    problem, by solving the problem with pencil and paper first, 
                    then by following a famous algorithm that solves the shortest 
                    path problem known as Dijkstra's Algorithm. Even though this is 
                    an algorithms detour, there is a strong connection in this lesson 
                    to routing algorithms used on the Internet. This lesson also 
                    introduces ideas about how we analyze algorithms: looking for 
                    correctness, efficiency and running time.")

//        bodyDiv:AddHeading("Vocabulary", 2)
//        UnorderedList vocabularyList
//            AddListItemWithBoldAtFront(vocabularyList, "Shortest Path: ", "the lowest weighted 
//                    path between two nodes")
//            AddListItemWithBoldAtFront(vocabularyList, "Efficiency: ", "a measure of 
//                    the number of steps per input size needed to complete an algorithm")
//        bodyDiv:Add(vocabularyList)

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")

        UnorderedList goalList
        goalList:AddListItem("Reason about a general solution (algorithm) for a problem while examining specific instances of it")
        goalList:AddListItem("Informally analyze an algorithm to state how " + dq + "long" + dq + " it takes to run relative to the size of the problem")
        goalList:AddListItem("Follow a pseudocode algorithm for the single source shortest path problem")
        bodyDiv:Add(goalList)

//        bodyDiv:AddHeading("Background", 2)
//            Paragraph background
//            background:AddText("Do you know the quickest route from your home to the 
//                    most common place you go? How closely related are protein A, which 
//                    is found in blueberries, and protein B, which is known to prevent 
//                    cancer? How are these two questions related? Both involve the 
//                    shortest path problem and graph theory. Finding the shortest path 
//                    can save you a lot of time and can help you find meaningful connections 
//                    in information. Because computer scientists often work with large 
//                    amounts of information, we care about finding the shortest path 
//                    efficiently, no matter how much information we are working with. 
//                    In this lesson, you will investigate the shortest path problem, 
//                    as well as a famous shortest path algorithm. As you go, pay attention 
//                    to the number of steps required for a computer to find an answer.")
//            bodyDiv:Add(background)


        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
            purpose:AddText("Algorithms for the Shortest Path Problem have many applications 
                    and it's a widely studied class of problems in Computer Science. 
                    The web abounds with video lectures and presentations about it. 
                    Dijkstra's algorithm, which you will follow in this lesson, is 
                    one of the most famous shortest path algorithms. While shortest 
                    path algorithms are not required knowledge for Computer Science Principles, 
                    understanding how algorithms are expressed, and being able to 
                    reason about and informally analyze algorithms is. This lesson should set a good 
                    foundation for the aspects of expressing and analyzing algorithms that 
                    make them challenging and interesting.")
            bodyDiv:Add(purpose)

        bodyDiv:AddHeading("Resources", 2)
        UnorderedList resources
            resources:AddListItemLink("Worksheet - Intro to the Shortest Path Problem in large print", "/files/code/Unit1/U1L11o2 Worksheet LP.docx")
            resources:AddListItemLink("Worksheet - Intro to the Shortest Path Problem in braille, Duxbury file", "/files/code/Unit1/U1L11o2 Worksheet Brl.dxb")
            resources:AddListItemLink("Worksheet - Intro to the Shortest Path Problem in braille, .brf", "/files/code/Unit1/U1L11o2 Worksheet Brl.brf")
            resources:AddListItemLink("Activity Guide in large print", "/files/code/Unit1/U1L11o2 Activity Guide LP.docx")
            resources:AddListItemLink("Activity Guide in braille, Duxbury file", "/files/code/Unit1/U1L11o2 Activity Guide Brl.dxb")
            resources:AddListItemLink("Activity Guide in braille, .brf", "/files/code/Unit1/U1L11o2 Activity Guide Brl.brf")
        bodyDiv:Add(resources)

        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddParagraph("In the previous lesson you developed an algorithm for the 
                        Minimum Spanning Tree (MST) problem. The MST is useful for 
                        knowing the most cost-effective way to build or connect a 
                        network together. This lesson looks at a different problem, 
                        the " + dq + "Shortest Path Problem" + dq + " - which is also 
                        a widely studied problem in computer science. Look at the short 
                        questions on the worksheet, and try to finish the shortest distance 
                        between the nodes.")

        bodyDiv:AddParagraph("Give individual students time to work on the Intro to the Shortest Path Problem Worksheet. Have them start with 
            the small examples in the worksheet, then pair students up to compare their answers. Then discuss the following.")

        UnorderedList discuss
            discuss:AddListItem("In pairs, did you each come up with the shortest path?")
            discuss:AddListItem("Was the shortest path always the same?")
            discuss:AddListItem("What makes the algorithm harder or easier than the minimum spanning tree?")
        bodyDiv:Add(discuss)

        bodyDiv:AddHeading("Pro Tip", 4)
            UnorderedList protip1
                protip1:AddListItem("Work as a group, if you'd like, on the first page, 
                        but try to have students try the second page on their own.")
            bodyDiv:Add(protip1)

        bodyDiv:AddHeading("Activity", 2)
                bodyDiv:AddParagraph("The reason we have routers is because we want to send 
                    messages from our router to lots and lots of different locations. 
                    So a more interesting problem on the Internet is finding not just the 
                    path from my router to one other router, but the path from my 
                    router to EVERY other router!")
                bodyDiv:AddParagraph("This is known as the Single Source Shortest Path Problem 
                    (SSSP). This activity looks at and analyzes a famous algorithm 
                    that solves this problem.")
                bodyDiv:AddParagraph("You and your partner will be given the algorithm and a 
                    graph. And together you will act as the computer, interpreting 
                    the instructions and trying to trace out the algorithm and follow 
                    its steps.")
                bodyDiv:AddParagraph("Part of analyzing an algorithm is trying it out on many 
                    different inputs. So, each group will have a different node to 
                    start with on the graph and we will test the algorithm to see if 
                    it works and then see what we think about it, in terms of its 
                    correctness and efficiency.")
                bodyDiv:AddParagraph("Each student should receive a copy of the first page of the Activity Guide, but each pair 
                    of students only needs one of the eight graph diagrams to trace the algorithm. Try to distribute the 
                    different diagrams to different pairs of students in a relatively even manner.")
                bodyDiv:AddParagraph("When students are done, have them pair up with another group to compare results. Have groups discuss 
                    the following topics.")

            UnorderedList topics
                    topics:AddListItem("Compare the shortest path diagrams; these form a tree extending from the source node.")
                    topics:AddListItem("Are the shortest path trees from two different sources the same?")
                    topics:AddListItem("What about the path between the two source nodes? (for example: in group A, is their path to E the same as E to A?) If so, why? If not, why not?")
                    topics:AddListItem("Based on your experience, would this algorithm find the shortest path for any graph of nodes and edges?")
                    topics:AddListItem("Is there a way to stop early? That is, is there a way to stop processing the algorithm because you know you've found the shortest path tree? Can you guarantee that you could always stop early? Why or why not?")
            bodyDiv:Add(topics)

            bodyDiv:AddHeading("Pro Tip", 4)
                UnorderedList protip2
                bodyDiv:AddParagraph("It's more interesting if you groups pairs based 
                    on which diagrams they were assigned. Here is a suggestion:")
                protip2:AddListItem("Graph A with Graph E")
                protip2:AddListItem("Graph B with Graph F")
                protip2:AddListItem("Graph C with Graph H")
                protip2:AddListItem("Graph D with Graph G")
                bodyDiv:Add(protip2)

        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddParagraph("When analyzing algorithms, ask these three questions:")
            UnorderedList act2Q
            act2Q:AddListItem("Is it correct? Will it always solve the problem with a correct solution?")
            act2Q:AddListItem("How much time does it take to run? (Even correct and efficient algorithms take different amounts of time)")
            act2Q:AddListItem("Will it run in a " + dq + "reasonable" + dq + " amount of time; is it efficient?")
            bodyDiv:Add(act2Q)
        bodyDiv:AddParagraph("1. Is it correct?")
            UnorderedList act2C
            act2C:AddListItem("Yes. Beyond intuition, there is a mathematical proof 
                        that Dijkstra's algorithm is correct (if all edge weights 
                        are positive) and will always find the Shortest Path Spanning 
                        Tree for the given source node")
            bodyDiv:Add(act2C)
        bodyDiv:AddParagraph("2. How much time does it take to run?")
            UnorderedList act2T
            act2T:AddListItem("Time is an interesting element when talking about computer 
                        algorithms. Because there are so many different types of machines 
                        with different processing speeds, it's not really useful to 
                        talk about the amount of time an algorithm takes to run in terms 
                        of " + dq + "clock time," + dq + " since it will be different on 
                        every computer.")
            act2T:AddListItem("A better indicator is to think about how many " + dq +
                        "things" +dq + " the algorithm is making the computer do to run 
                        to completion: arithmetic operations, updates to memory, etc. 
                        The most important things are those that get performed repeatedly 
                        as part of the algorithm. In the shortest path problem, we 
                        have to do some processing of every node and every edge. So 
                        the shortest path problem is dependent on the total number of 
                        nodes and edges in the graph.")
            act2T:AddListItem("With the minimum spanning tree problem, we created a tree, 
                        but it was possible (if not likely) that we didn't even need 
                        to consider every edge in the graph. So with MST, it was dependent 
                        on the number of nodes and edges, but we could stop after we 
                        found n-1 edges. This is a potential factor when thinking about time.")
            act2T:AddListItem("Note: there are graphs for which the MST has to 
                        consider every edge. It has the same theoretical running time 
                        in the worst case as SSSP.")
            act2T:AddListItem("What about the shortest path tree? Is there anyway to stop early? Possibly when are you done?")
                    act2T:AddListItem("For Shortest Path you can only stop after you have processed 
                    every edge. You cannot stop early. When running the algorithm, it 
                    is possible that the very last edge might cause a path to change. 
                    Thus, we might say the amount of " + dq + "time" + dq + " it takes 
                    to run this algorithm is proportional to the amount of time it 
                    takes visit every node and every edge once.")
                    act2T:AddListItem("Note: Technically, the running time for Dijkstra's is a little 
                    bit more than than just V+E (the number of vertices plus the number 
                    of edges). There are computing costs associated with searching 
                    for the node that contains the next smallest total distance.")
            bodyDiv:Add(act2T)
            bodyDiv:AddParagraph("3. Is it efficient?")
            UnorderedList act2E
            act2E:AddListItem("This algorithm is actually pretty efficient. Discovering 
                    the shortest path tree for a node, by looking at every node and 
                    edge just once, intuitively feels like you can't do much better; 
                    how could you know the paths without looking at all the edges? 
                    Some algorithms on graphs require you to process nodes and edges 
                    multiple times. As an easy example to think about: what if we 
                    wanted a computer not to find the single source shortest path, 
                    but find the ALL the shortest path trees?")
            bodyDiv:Add(act2E)

        bodyDiv:AddHeading("Assessment", 2)

                bodyDiv:AddParagraph("1. Which one of the diagrams below shows the shortest path tree from the source node indicated.")

        bodyDiv:AddImage("/files/code/Unit1/U1L11o2.png", "Assessment Question 1 - Diagram")

        bodyDiv:AddHeading("Teacher's Tip: Diagram Description", 4)
            Paragraph tviTip3
                tviTip3:AddText("The diagram above contains five identical graphs. Each graph consists of four nodes connected in a circular 
                fashion, " + dq + "A," + dq + " " + dq + "B," + dq + " " + dq + "C," + dq + " and " + dq + "D," + dq + " and a final node in 
                the middle, " + dq + "E." + dq + " The source node is " + dq + "A," + dq + " and the connections' values are available in the ")
                tviTip3:AddLink("Connection List (link)", "/files/code/Unit1/U1-Opt2 Diagram Connections.rtf")
                tviTip3:AddText(". Each graph has different connections highlighted, as follows.")
        bodyDiv:Add(tviTip3)

        UnorderedList description
            description:AddListItem("Graph 1 Connections: A-E, B-E, C-D, D-E")
            description:AddListItem("Graph 2 Connections: A-E, B-C, C-D, D-E")
            description:AddListItem("Graph 3 Connections: A-B, A-E, A-D, C-E")
            description:AddListItem("Graph 4 Connections: A-D, B-E, C-D, D-E")
            description:AddListItem("Graph 5 Connections: A-E, B-E, C-E, D-E")
        bodyDiv:Add(description)

                bodyDiv:AddParagraph("2. Which of the following statements is FALSE about 
                    minimum spanning trees (from the previous lesson) and shortest path trees:") 
                UnorderedList assess
                    assess:AddListItem("A. The minimum spanning tree algorithm you learned does not 
                    necessarily need to try every edge.")
                    assess:AddListItem("B. A minimum spanning tree contains the shortest path between 
                    the starting vertex and every other reachable vertex in the graph.")
                    assess:AddListItem("C. The shortest path algorithm you learned visits each vertex 
                    and edge once.")
                    assess:AddListItem("D. Both the minimum spanning tree algorithm you learned and 
                    the shortest path algorithm you learned used a " + dq + "greedy" + dq + 
                    " approach, choosing the smallest edge first or vertex with the 
                    smallest distance value first.")
                bodyDiv:Add(assess)

                bodyDiv:AddParagraph("3. Which of the following is NOT something we are 
                    concerned with when we write an algorithm?")
                UnorderedList assess2
                    assess2:AddListItem("A. The algorithm is short.")
                    assess2:AddListItem("B. The algorithm is correct.")
                    assess2:AddListItem("C. The algorithm is efficient.")
                    assess2:AddListItem("D. The algorithm is understandable.")
                bodyDiv:Add(assess2)

                bodyDiv:AddParagraph("4. If a graph has 10 nodes and 33 edges, how many 
                    nodes and edges will be visited/processed as a result of running Dijkstra's algorithm?")
                bodyDiv:AddParagraph("5. When analyzing algorithms, why doesn't the amount 
                    of real time (clock time) tell us very much about the algorithm's "
                    + dq + "efficiency?" + dq)


        bodyDiv:AddHeading("Extended Learning", 2)
            UnorderedList ext
                ext:AddListItemLink("Dijkstra's Algorithm (Wikipedia)", "http://en.wikipedia.org/wiki/Dijkstra's_algorithm")
            bodyDiv:Add(ext)
            bodyDiv:Add(break)

        InlineFrame inlineFrame
            inlineFrame:SetHeight("480")
            inlineFrame:SetWidth("854")
            inlineFrame:SetAddress("http://www.youtube.com/embed/mv4r7F82doA")
        bodyDiv:Add(inlineFrame)

        UnorderedList ext2
                ext2:AddListItemLink("Video: A 9-minute Lecture on Dijkstra's Algorithm", "https://www.youtube.com/watch?v=mv4r7F82doA")
        bodyDiv:Add(ext2)

        bodyDiv:AddHeading("Standards Alignment", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2011): ", "CT.L3B:3, CT.L3B:4, CT.L3B:6")
        AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.2 (A, B, C)")
        AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.1 (A, B)")
        AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.4 (A, B, C, D, G)")
        bodyDiv:Add(list)

        WriteNextTutorial(bodyDiv)
        mainRegion:Add(bodyDiv)
        Add(mainRegion)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn about finding the shortest path using Dijkstra's algorithm."
    end

    action GetSummaryName returns text
        return "Lesson 11 (Optional 2: Algorithms Detour - Shortest Path)"
    end
    action GetName returns text
        return "Lesson 11 (Optional 2)"
    end
    action GetShortDescription returns text
        return "Shortest Path using Dijkstra's algorithm"
    end
    action GetLocation returns text
        return "lessons/code/internet/InternetLesson11o2.html"
    end
end