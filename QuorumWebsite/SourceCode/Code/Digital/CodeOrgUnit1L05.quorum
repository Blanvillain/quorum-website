use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.BoxTip
use Libraries.Web.Page.MainContent

class CodeOrgUnit1L05 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 1 Lesson 5: Overflow and Rounding")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Digital Information - Lesson 5: Overflow and Rounding", 1)
        headDiv:AddText("Limitations in Binary Number Systems")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Overview", 2)
            Paragraph overview
            overview:AddText("Students extend their understanding of the binary number system by exploring errors that result from overflow and rounding. They make a " + dq + "flippy do pro" + dq + " to practice binary-to-decimal number conversions which include fractional place values. ")
            bodyDiv:Add(overview)

        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
        
        UnorderedList goalList
        goalList:AddListItem("Describe how to include fractions in the binary number system.")
        goalList:AddListItem("Understand that overflow and roundoff errors result from real-world limitations in representing place value.")
        bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
            purpose:AddText("This lesson introduces students to the practical aspects of using a binary system to represent numbers in a computing device. Students discover the limitations of creating numbers that are " + dq + "too big" + dq + " or " + dq + "too small" + dq + " to count. They learn that, while a number system is infinite, the physical representation of numbers requires place values -- which are finite, and limit the ability to represent numbers.")


            purpose:Add(break)
            purpose:Add(break)
            purpose:AddText("When using this binary representation of numbers, certain values (1, 2, 4, 8, 16, etc.) are seen repeatedly. When written in binary, these values are 1, 10, 100, 1000, 10000, and so on, and so are the incremental place values in this binary number system.")
            bodyDiv:Add(purpose)

            bodyDiv:AddHeading("Resources", 2)
            bodyDiv:AddHeading("Supplemental Code.org material",3)
                UnorderedList resources
                resources:AddListItemLink("Flippy Do Pro worksheet in print", "https://drive.google.com/a/code.org/file/d/1VpZH4E2c5fR-g2fBMggd4-pz8GNRxxwZ/view?usp=sharing")
                resources:AddListItemLink("Flippy Do Pro worksheet in braille, Duxbury file", "/files/code/Unit1/U1L05_FlippyDoPro.dxb")
                resources:AddListItemLink("Flippy Do Pro worksheet in braille, .brf", "/files/code/Unit1/U1L05_FlippyDoPro.brf")
                bodyDiv:Add(resources)

        bodyDiv:AddHeading("Getting Started (5 minutes)", 2)

        bodyDiv:AddParagraphBoldFront("Discuss:"," Imagine you work at a local store. In the register all you have are nine $10 bills, nine $1 bills, and nine dimes.")
        UnorderedList warmupList
        warmupList:AddListItem("What's the largest amount of change that you can give someone?")
        warmupList:AddListItem("What's the least?")
        warmupList:AddListItem("What would you do if someone needed 7 cents in change?")
        bodyDiv:Add(warmupList)

        bodyDiv:AddParagraphBoldFront("Discussion Goal:"," Today we're going to explore what happens when you don't have the right " + dq + "places" + dq + " to store information. This can happen when you try to store very large numbers, very small ones, and everything in-between! The goal of the prompt is to understand the very real problem of making sure that enough place values are available to represent numbers. ")
        UnorderedList discussionList
        discussionList:AddListItem("The largest amount of change you can give someone is $99.90.")
        discussionList:AddListItem("The least change you can give is $0.10.")
        discussionList:AddListItem("You can't give someone $0.07. You also can't give someone $1.25 in change (because you have no nickels!)")
        bodyDiv:Add(discussionList)
        bodyDiv:AddParagraph("At both extremes of the number range, large and small -- and in between numbers -- you are unable to build some numbers because you don't have the place values to do so.")
        
        bodyDiv:AddHeading("Activity (35 minutes)", 2)
        bodyDiv:AddParagraph("Place students in groups of two. Groups will need one computer per group.")

        BoxTip activityTip
        activityTip:AddHeading("Teaching Tip",3)
        activityTip:AddParagraph("Students will tackle the problem of " + dq + "running out of place values" + dq + " when counting to bigger and bigger numbers. They will consider an odometer to explore what happens when you add one to the largest number you can represent in a number system.")
        bodyDiv:Add(activityTip)
        bodyDiv:AddParagraphBoldFront("Prompt:"," Suppose we have a car odometer. The number in the odometer keeps going up as we drive. What about when the odometer reaches the max value? What happens if we keep driving?")

        bodyDiv:AddHeading("Flippy Do Pro", 3)
        bodyDiv:AddParagraphBoldFront("Remarks","")
        UnorderedList flippyList
        flippyList:AddListItem("Now that you have started thinking about place value and overflow, we are going to work on a different problem. What happens when there aren't enough place values to represent a number? You will explore this with a new version of the Flippy Do, the Flippy Do Pro!")
        bodyDiv:Add(flippyList)

        bodyDiv:AddParagraph("Provide each group with a copy of the Flippy Do Pro Template and scissors.")
        bodyDiv:AddParagraphBoldFront("Do This:"," Cut and fold your Flippy Do Pro following the guidance on the slide. Fill out all the numbers if they are not already done.")
        bodyDiv:AddParagraphBoldFront("Remarks","")
        
        UnorderedList flippyList2
        flippyList2:AddListItem("The Flippy Do Pro is similar to the one you made before. But this time, the Flippy Do Pro is already filled with binary place values assigned in a different way -- they include fractions. ")
        flippyList2:AddListItem("When using the Flippy Do Pro, the numbers on the left-hand side of the line are whole numbers and those on the right-hand side of the line are fractional numbers.")
        bodyDiv:Add(flippyList2)

        bodyDiv:AddHeading("Teaching Tip", 4)
        UnorderedList flippyTips
        flippyTips:AddListItem("The Flippy Do Pro is still using 8 bits to represent a number. But this time, the place value of each bit has been assigned in a different way than in the previous Flippy Do. The bits have been " + dq + "shifted" + dq + " to the right two times. The value 1 (2^0) is no longer the smallest place value. The value of a bit just to the right of 1 (2^0) is 0.5, which is 2^-1. The value to the right again is 0.25 which is 2^-2.")                
        flippyTips:AddListItem("Students may struggle with negative exponents. What's more important than emphasizing the math is emphasizing the pattern of place values in the Flippy Do Pro. As you move left, the place value doubles. As you move right, the place value halves. ")
        flippyTips:AddListItem("Help students see that using the Flippy Do Pro is similar to using the Flippy Do. To form a value, flip the flaps up or down at the bottom of the device to create a sequence of zeros and ones. Note that the range of place values is limited by the largest bit value, 2^5 which is 32, and the smallest bit value, 2^-2 which is 0.25. As with the Flippy Do, adding together all the values for each place value containing a " + dq + "1" + dq + " produces the total value represented on the Flippy Do Pro.")
        bodyDiv:Add(flippyTips)

        bodyDiv:AddHeading("Flippy Do Pro Challenges", 3)
        bodyDiv:AddParagraphBoldFront("Challenge #1 - Smallest Number:"," Produce the smallest binary number possible with the Flippy Do Pro.")
        UnorderedList flippyChallenge1
        flippyChallenge1:AddListItem("The smallest binary number students produce is <code>000000.01</code> and this number has a decimal value of <code>0.25</code>.")
        bodyDiv:Add(flippyChallenge1)
        bodyDiv:AddParagraphBoldFront("Challenge #2 - Next Value:"," Increase the number made in Challenge #1 to the next possible value. ")
        UnorderedList flippyChallenge2
        flippyChallenge2:AddListItem("The binary number students produce is <code>000000.10</code> and this number has a decimal value of <code>0.50</code>.")
        bodyDiv:Add(flippyChallenge2)
        bodyDiv:AddParagraphBoldFront("Challenge #3 - Got Quarters?"," Make the values 0.25, 0.50, and 0.75 one after another. ")
        UnorderedList flippyChallenge3
        flippyChallenge3:AddListItem("The binary numbers students produce are <code>000000.01</code>, <code>000000.10</code>, <code>000000.11</code>. Note the pattern of changing a place value from 1 to 0 and then " + dq + "carrying" + dq + " the one. ")
        bodyDiv:Add(flippyChallenge3)
        bodyDiv:AddParagraphBoldFront("Challenge #4 - Can't Make Change:"," Make all the fractional possible in binary using the Flippy Do Pro. ")
        UnorderedList flippyChallenge4
        flippyChallenge4:AddListItem("There are no new values besides those made in Challenge #3 because there are no place values for representing other fractions.")
        flippyChallenge4:AddListItem("Note, if students need a concrete example for Challenge #4, have them try to make 39 cents in binary. It can't be done with the values they have available in the Flippy Do Pro.")
        bodyDiv:Add(flippyChallenge4)
        bodyDiv:AddParagraphBoldFront("Challenge #5 - Largest Number:"," What is the largest number (in decimal) you can make with the Flippy Do Pro?")
        UnorderedList flippyChallenge5
        flippyChallenge5:AddListItem("With all of the bits flipped to 1, the largest number you can make is 63.75. Note that this is smaller than the largest you can make with a traditional Flippy Do, which is 255. This is because we have shifted two bits to represent smaller numbers (0.5 & 0.25). ")
        bodyDiv:Add(flippyChallenge5)
        bodyDiv:AddParagraphBoldFront("Challenge #6 - How Much Pie:"," Challenge 6 contains a number of pie charts. Each chart has a single colored slice, representing a piece of pie. Students use a Flippy Do Pro to determine how much pie is left at the end of dessert. With each slide, allow time for students to decide how to represent the amount of pie left as a binary number, then convert that to decimal and write it down in the journal. In this challenge it is expected that students will estimate and do some rounding when determining how much pie is left. ")
        bodyDiv:AddParagraphBoldFront("Do This: For each pie chart, students should:","")
        OrderedList challengeList
        challengeList:AddListItem("Estimate how big the colored slice is.")
        challengeList:AddListItem("Use your Flippy Do Pro to represent how big the slice is. You may need to round up or down.")
        challengeList:AddListItem("Convert your binary number to a decimal number.")
        challengeList:AddListItem("Write down the number in your journal.")
        bodyDiv:Add(challengeList)

        bodyDiv:AddHeading("Pie #1: Pumpkin", 4)
        bodyDiv:AddImage("/media/lessons/csp/unit1/Unit1-5_Challenge6_Chart1.png", "A pie chart with a single orange slice that takes approximately two-tenths of the chart.")

        bodyDiv:AddHeading("Pie #2: Cherry", 4)
        bodyDiv:AddImage("/media/lessons/csp/unit1/Unit1-5_Challenge6_Chart2.png", "A pie chart with a single orange slice that takes approximately three-tenths of the chart.")

        bodyDiv:AddHeading("Pie #3: Lemon", 4)
        bodyDiv:AddImage("/media/lessons/csp/unit1/Unit1-5_Challenge6_Chart3.png", "A pie chart with a single orange slice that takes approximately one-tenth of the chart.")

        bodyDiv:AddHeading("Pie #4: Chocolate", 4)
        bodyDiv:AddImage("/media/lessons/csp/unit1/Unit1-5_Challenge6_Chart4.png", "A pie chart with a single orange slice that takes approximately four-tenths of the chart.")
        
        bodyDiv:AddParagraphBoldFront("Do This:"," Add all the decimal numbers together. Compare with a partner and discuss.")

        bodyDiv:AddParagraphBoldFront("Remarks","")
        UnorderedList activityFinalRemarks
        activityFinalRemarks:AddListItem("In our final challenge, your answer may be different than your classmates. It comes down to how you rounded - did you decide to round up or round down with the various amounts of pie. If we did not have to round, the answer would be exactly one pie left over. You may have come to the same conclusion by rounding - or not!")
        bodyDiv:Add(activityFinalRemarks)

        bodyDiv:AddParagraphBoldFront("Prompt:"," Why is it a problem for a computer if your answers are different than others? ")
        bodyDiv:AddParagraphBoldFront("Discussion Goal:"," Computers rely on precision. Think of a calculator. We depend on 1+1 always equaling 2. Rounding is necessary because of the limits of bits, but can lead to errors. ")

        bodyDiv:AddHeading("Wrap Up (5 minutes)", 2)
        bodyDiv:AddParagraph("Review the information on the first wrapup slide showing how binary can be used to precisely represent some fractional values from the decimal number system. Students do not need to understand how to convert fractional amounts from decimal to binary.")

        BoxTip wrapupTip
        wrapupTip:AddHeading("Teaching Tip",4)
        wrapupTip:AddParagraph("For your own personal knowledge, you can read more about " + dq + "decimal points " + dq + "and" + dq + " binary points on Wikipedia.")
        bodyDiv:Add(wrapupTip)

        bodyDiv:AddParagraphBoldFront("Remarks","")
        UnorderedList wrapUpRemarks
        wrapUpRemarks:AddListItem("The most important takeaway from this lesson is to understand that bits can represent a limited amount of information.")
        bodyDiv:Add(wrapUpRemarks)

        bodyDiv:AddParagraphBoldFront("Discuss:","")
        UnorderedList wrapUpPrompt
        wrapUpPrompt:AddListItem("What does an odometer show us about representing large numbers?")
        wrapUpPrompt:AddListItem("What does the Flippy Do Pro show about representing very small numbers?")
        wrapUpPrompt:AddListItem("If we had a big enough odometer or Flippy Do Pro, could we represent every possible number? ")
        bodyDiv:Add(wrapUpPrompt)

        bodyDiv:AddHeading("Discussion Goal", 4)
        bodyDiv:AddParagraph("As students have seen, you can make " + dq + "any number" + dq + " in your head, but the tool you use to represent a number has limitations. It has a fixed number of place values it can show. An odometer keeps running after you move beyond its upper limit, but the largest place values cannot be displayed due to overflow error. ")
        bodyDiv:AddParagraph("In the Flippy Do Pro, you assigned some of the bits to fractions, but you saw that you still couldn't represent certain " + dq + "small" + dq + " numbers -- you could only show a number that was " + dq + "close to" + dq + " your target number. This is roundoff error, an error that occurs when bit arrangements can't represent numbers as intended.")
        bodyDiv:AddParagraph("Ultimately, regardless of the size of our odometer or Flippy Do Pro, and how many bits we add to them, there's going to be numbers that are too large, too small, or " + dq + "in-between" + dq + " the values we want to represent.")

        bodyDiv:AddParagraphBoldFront("Journal:"," Students add to their journals the definitions for: Overflow Error and Round-off Error. ")
        UnorderedList vocabulary
        vocabulary:AddListItem(AddItalicFront("Overflow Error:"," Error from attempting to represent a number that is too large."))
        vocabulary:AddListItem(AddItalicFront("Round-off Error:"," Error from attempting to represent a number that is too precise. The value is rounded."))
        bodyDiv:Add(vocabulary)

        bodyDiv:AddHeading("Assessment: Check for Understanding", 2)

        bodyDiv:AddParagraphBoldFront("For Students:"," Open a word doc or google doc and copy/paste the following 2 questions.")

        bodyDiv:AddParagraphBoldFront("Question:"," Modern car odometers record up to a million miles driven. What happens to the odometer reading when a car drives beyond its maximum reading?")
        bodyDiv:AddParagraphBoldFront("Question:"," When using bits to represent fractions of a number, can you create all possible fractions? Why or why not?")

        bodyDiv:AddHeading("Standards Alignment", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): DA", " - Data & Analysis: 3A-DA-09 - Translate between different bit representations of real-world phenomena, such as characters, numbers, and images.")
        AddListItemWithBoldAtFront(list, "CSP2021: ", "DAT-1.B.1, DAT-1.B.2, DAT-1.B.3")
        bodyDiv:Add(list)

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end


    action GetMetaDescription returns text
        return "Unplugged lesson that reinforces concepts already learned about binary numbers."
    end

    action GetSummaryName returns text
        return "CSP Digital Information Lesson 5 Overflow and Rounding"
    end
    action GetName returns text
        return "CSP Digital Information Lesson 5"
    end
    action GetShortDescription returns text
        return "learn about limitations of binary number systems"
    end
    action GetLocation returns text
        return "lessons/code/internet/InternetLesson5.html"
    end
end