use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit5Lesson9A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 9: " + dq + "if-elseif" + dq + " and Compound Conditional Logic")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 9: " + dq  + "if-elseif" + dq + " and Compound Conditional Logic", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")

        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

        Division studentInstruction6
        studentInstruction6:SetClassAttribute("cool-box")

        Division studentInstruction7
        studentInstruction7:SetClassAttribute("cool-box")




        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("In this lesson, students will be introduced to the boolean (logic) 
                operators NOT, AND, and OR as tools for creating compound boolean conditions in 
                if statements. Students will learn how to more efficiently express complex logic 
                using AND and OR, rather than deeply nested or chained conditionals. Students will 
                work through a worksheet that covers the basics and a few problems with evaluating 
                logical expressions, then write code to practice using AND and OR in if statements.")
        bodyDiv:Add(ov1)
        bodyDiv:Add(break)




        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
//                AddListItemWithBoldAtFront(voc, "Boolean", " - A single value of either TRUE or FALSE")
//                AddListItemWithBoldAtFront(voc, "Boolean Expression", " - in programming, an expression that evaluates to True or False.")
//                AddListItemWithBoldAtFront(voc, "Conditionals", " - Statements that only run under certain conditions.")
//                AddListItemWithBoldAtFront(voc, "If-Statement", " - The common programming structure that implements " + dq + "conditional statements" + dq + ".")
//                AddListItemWithBoldAtFront(voc, "Selection", " - A generic term for a type of programming statement (usually an if-statement) that uses a Boolean condition to determine, or select, whether or not to run a certain block of statements.")
                AddListItemWithBoldAtFront(voc, "Chained if-elseif statement: ", " One " + dq + "if-statement" + dq + " structure that includes a series of leases inside.")
                AddListItemWithBoldAtFront(voc, "Elimination logic: ", " Often used in the " + dq + "elseif" + dq + " structure. The " + dq + "if-conditional" + dq + " or " + dq + "else if-conditional" + dq + " set earlier helps the succeeding " + dq + "else if-conditionals" + dq + " in eliminating some range of the conditions. ")
                AddListItemWithBoldAtFront(voc, "Compound Boolean Expressions: ", " " + dq + "if-conditional" + dq + " or " + dq + "elseif-conditional" + dq + " that uses compound boolean operator " + dq + "and," + dq + " " + dq + "or," + dq + " and/or " + dq + "not." + dq)
                AddListItemWithBoldAtFront(voc, "Nested if-statement: ", " An " + dq + "if-statement" + dq + " (including chained elseif) that is inside of another " + dq + "if-statement structure" + dq)
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Write and test conditional expressions using Boolean operators AND (and) OR (or) and NOT (not)")
                goalList:AddListItem("Given an English description write compound conditional expressions to create desired program logic")
                goalList:AddListItem("Use a " + dq + "chain" + dq + " of if-else-if statements to implement desired program logic")
                goalList:AddListItem("When given starting code add if-else-if statements or compound boolean expression to express desired program logic")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Introduced Code", 2)
//        bodyDiv:AddParagraph("Students should be able to understand the following code structure")
            UnorderedList code
                AddListItemWithBoldAtFront(code, "if age < 13 or age > 65", "")
                AddListItemWithBoldAtFront(code, "if (day = " + dq + "Tuesday" + dq + " or day = " + dq + "Thursday" + dq + ") or (age >= 13 and age < 21)", "")
        bodyDiv:Add(code)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Similar to the previous lesson, the primary objective here is <b>practice, practice, practice</b>! We want students to get into the exercises and solve many different types of problems in many different types of contexts so they can pick up the patterns of writing, testing and debugging if-statements with more complex conditions.")
        bodyDiv:Add(purpose)
            Paragraph purpose1
                purpose1:AddText("This lesson introduces both the <b>if-else-if</b> construct and the Boolean operators AND, OR, and NOT. 
                        While it may appear that these operators extend the types of boolean conditions we can write, this is not actually the case. Nested and chained conditionals alone can be used to express any possible set of boolean conditions. The addition of these new boolean operators merely helps that expression be more succinct, clear, and elegant. But logic can get tricky, since often the way we say things in English is not the way we need to write them in code.")
        bodyDiv:Add(purpose1)



        bodyDiv:AddHeading("Resources",2)
        UnorderedList rs
        rs:AddListItemLink("Compound Conditionals Worksheet, rtf", "/files/code/Unit5/U5L9 Worksheet - Compound Conditionals.rtf")
//        rs:AddListItemLink("U5L9 Worksheet - Compound Conditionals (Google Docs)","https://docs.google.com/document/d/1hQay7DviSRYaVQr54ijMFgNhJNrnPt4-ASzHOxic5zM/edit")
        //rs:AddListItemLink("U5L9 - Exemplar Solution (.rtf file)", "/files/code/Unit5/Unit5Lesson9-ExemplarSolution.rtf")
        bodyDiv:Add(rs)



        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddHeading("Tips",4)
        UnorderedList gs1
        gs1:AddText("<b>Reviewing Concepts</b>")
        bodyDiv:Add(gs1)
        UnorderedList gs2
        gs2:AddText("This warm-up activity is an excellent opportunity to review nested and chained conditionals. You may wish to briefly remind students what each of these is prior to the warm-up activity. Students should verify that one another’s solutions are valid and make proper use of chained and nested conditionals.")
        bodyDiv:Add(gs2)
        bodyDiv:Add(break)
        UnorderedList gs3
        gs3:AddText("<b>Pseudocode</b>")
        bodyDiv:Add(gs3)
        UnorderedList gs4
        gs4:AddText("Students will be writing their solutions in pseudocode, which is a useful and important skill. Highlight that their syntax need not be perfect but that their pseudocode should be clear and reflect the actual programming structures they have encountered.")
        bodyDiv:Add(gs4)

        bodyDiv:AddHeading("Instructions for the Teacher",4)
        bodyDiv:AddParagraph("Distribute the first page of 'U5L9 Worksheet - Compound Conditionals' and ask students to work together on the questions on the first sheet. Hold off on distributing the rest of the worksheet, since it shows an example solution to each of the problems from the first page.")
        bodyDiv:AddParagraph("Have students share their answers with their neighbors and compare to determine if they had the same solutions. Students can use the following questions to drive their conversations.")
        UnorderedList gs5
        gs5:AddListItem("Is my partner's solution correct?")
        gs5:AddListItem("Is my partner's solution different from my own in any way?")
        gs5:AddListItem("Are there ways we could improve our solutions?")
        bodyDiv:Add(gs5)
        bodyDiv:AddParagraph("You may wish to demonstrate possible solutions to each question, but they will also be found later on in that same worksheet.")



        bodyDiv:AddHeading("Activity", 2)
        bodyDiv:AddParagraph("Nested and chained conditionals are important tools when designing boolean conditions in our programs. In fact, every boolean condition can be expressed in some way using nesting and chained conditionals. That said, often when we write out these solutions they are long or force us to write redundant code. Today were are going to learn some new tools that won't let us write any new conditions, but WILL allow us to write many complex conditions much more clearly.")
        bodyDiv:AddParagraph("Much like the previous lesson, students will complete a series of short exercises to write code into " + dq + "toy" + dq + " programs to get practice using if-else-if constructs and the logical operators AND, OR, and NOT.")



//        bodyDiv:AddHeading("Teacher's Tips",4)
//        bodyDiv:AddParagraph("NOTE: If you want to break up the lesson into a few parts - the 'U5L9 Worksheet - Compound Conditionals' contains many problems and activities that students can do on paper.")
//        UnorderedList act1
//        act1:AddListItem("Using it is optional, but you might use it to reinforce concepts (or even introduce them if you like).")
//        act1:AddListItem("You don't have to use the whole thing. You may want to point students to individual pages for practice with certain things.")
//        act1:AddListItem("You could use and re-visit it at several points during this lesson as gathering-point activities.")
//        bodyDiv:Add(act1)



        bodyDiv:AddHeading("Activity 1: Chained if-elseif statement", 4)
        studentInstruction:AddParagraph("Not all conditions you want to check have only two possible outcomes. However a computer can only check <i>one true/false condition at a time</i>.")
        UnorderedList act2
        act2:AddListItem("You add an else-if clause to an if statement when you have another condition you want to check.")
        act2:AddListItem("You can add as many else-ifs as you want.")
        act2:AddListItem("Each condition in an if-else-if is <b>checked in order from top to bottom</b> and the final else clause is executed if all the previous conditions evaluated to false.")
        studentInstruction:Add(act2)

        studentInstruction:AddHeading("How It Works",4)
        studentInstruction:AddParagraph("As an example, the code is as follows")
        studentInstruction:Add(preformatter:GeneratePreformattedCode(  "text textAge = input(" + dq + "How old are you?" + dq + ")               //Step 1" + cr
                                                        +   "integer intAge = cast(integer, textAge)                //Step 2" + cr
                                                        +   "" + cr
                                                        +   "   if intAge >= 17                                     //Step 3" + cr
                                                        +   "       output “You can go to an R movie alone.”      " + cr
                                                        +   "   elseif intAge >= 13                                 //Step 4" + cr
                                                        +   "       output “You can go to a PG-13 movie alone.”       "  + cr
                                                        +   "   elseif intAge >= 5                                  //Step 5" + cr
                                                        +   "       output “You can go to a G or PG movie alone.”     " + cr
                                                        +   "   else                                                //Step 6" + cr
                                                        +   "       output " + dq + "Uh. You're too young for most things." + dq + "" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "output " + dq + "Thanks for verifying your age!" + dq + "                //Step 7"))      

        studentInstruction:AddParagraph("The corresponding steps are:")
        UnorderedList act3
        act3:AddListItem("<b>Step 1</b>: Ask the user to enter their age.")
        act3:AddListItem("<b>Step 2</b>: Cast into an integer, the age that the user put in.")
        act3:AddListItem("<b>Step 3</b>: First check to determine if the age is 17 or over. If it is they can go to an R-rated movie.")
        act3:AddListItem("<b>Step 4</b>: If we reach this condition it means that the previous condition was false. So now let's check if the age is 13 or over and display a message.")
        act3:AddListItem("<b>Step 5</b>: To reach this statement means that, so far, the previous conditions we've checked have come up false. So now let's check if the age is 5 or over and display a message.")
        act3:AddListItem("<b>Step 6</b>: If we reach the final else clause it means all the previous conditions came up false. So this is what gets displayed.")
        act3:AddListItem("<b>Step 7</b>: Execution picks up on the first line after the <i>if-elseif</i> block. This " + dq + "thank you" + dq + " message at the end will display no matter what.")
        studentInstruction:Add(act3)
        bodyDiv:Add(studentInstruction)



        bodyDiv:AddHeading("What Can Go Wrong?",4)
        bodyDiv:AddParagraph("When writing if-elseif there are two common mistakes and thus two things to pay attention to:")
        UnorderedList act4
        act4:AddListItem("The order of the conditions matters!")
        act4:AddListItem("Without a final else clause it's possible that the whole structure can be skipped.")
        bodyDiv:Add(act4)



        bodyDiv:AddHeading(dq + "Quiz Grade" + dq + " Challenge",4)
        Paragraph quiz
                quiz:AddText("This challenge will reinforce the idea of if-elseif 
                    statements by building a console app that determines the letter grade of 
                    a student based on the percentage of the quiz score that the student 
                    receives. Let's say a student takes a quiz and receives a numeric 
                    percentage of the score (100% being a perfect score). The student needs to 
                    type in his/her score in this app to find out what letter grade he/she 
                    receives.")
                bodyDiv:Add(quiz)



        UnorderedList ist
        studentInstruction1:Add(ist)
        UnorderedList ist1
                ist1:AddText("Pretend that you are the teacher who is programming this app for the students. 
                    Your program needs to have the following functions:")
        studentInstruction1:Add(ist1)
        studentInstruction1:Add(break)
            UnorderedList quizList
                quizList:AddListItem("A chance for a student to type in his/her score")
                quizList:AddListItem("An internal mechanism to determine the letter grade for the score(s)")
                quizList:AddListItem("Output the letter grade for the student.")
        studentInstruction1:Add(quizList)
        studentInstruction1:Add(break)
            UnorderedList quiz1
                quiz1:AddText("As the teacher of the class, you have decided 
                    to apply the following scale to determine the letter grade: 
                    A is greater than 90%, B+ is 86% to 90%, B is 80% to 85%, C+ is 76% to 80%, 
                    C is 70% to 75%, D+ is 66% to 70%, D is 60% to 65%, and F is less than 60%.")
        studentInstruction1:Add(quiz1)
        studentInstruction1:Add(break)
            UnorderedList quiz2
                quiz2:AddText("One of the easiest ways to write this 
                    program is to use the " + dq + "chained if-elseif statement" + dq + ". The following block 
                    of code shows the pattern that you can follow to complete this code 
                    (The code block only determines the A, B+ and B) for any score.")
        studentInstruction1:Add(quiz2)
        studentInstruction1:Add(break)
        studentInstruction1:Add(preformatter:GeneratePreformattedCode(  "text userScore = input(" + dq + "Enter you quiz score." + dq + ")" + cr
                                                        +   "integer intScore = cast(integer, userScore)" + cr
                                                        +   "" + cr
                                                        +   "   if intScore > 90" + cr
                                                        +   "       output " + dq + "A" + dq + "" + cr
                                                        +   "   elseif intScore >= 86" + cr
                                                        +   "       output " + dq + "B+" + dq + ""  + cr
                                                        +   "   elseif intScore >= 80" + cr
                                                        +   "       output " + dq + "B" + dq + "" + cr
                                                        +   "   end"))
        studentInstruction1:Add(break)

            UnorderedList quiz3
                quiz3:AddText("In this code example, we used the flow of 
                    the code execution (top to bottom) to eliminate the need to 
                    set the highest score for each letter grade.")
        studentInstruction1:Add(quiz3)

        SideBySideIDE addStatementIDE
        addStatementIDE:SetUniqueIdentifier("CodingChallenge36")
        addStatementIDE:GetIDETitle():AddText("Coding Challenge 36: Quiz Grade")
        addStatementIDE:GetIDESubtitle():AddText("")
        addStatementIDE:SetGameEnvironment(true)
        addStatementIDE:Setup()
        studentInstruction1:Add(addStatementIDE)
        studentInstruction1:Add(addStatementIDE:GetGameCanvas())

        bodyDiv:Add(studentInstruction1)


//            Paragraph chlg36
//                chlg36:AddText("Now, ask the students to complete the pattern 
//                of the " + dq + "chained if-elseif statement" + dq + " above in 
//                their code so that they can give full range of grade to the students. ")
//        bodyDiv:Add(chlg36)
//        bodyDiv:AddParagraph("Remind students that " + dq + "else" + dq + " means everything else. ")



        bodyDiv:AddHeading("" + dq + "Guess the Secret Number" + dq + " Challenge", 4)

        studentInstruction2:AddParagraph("This is a new game that asks the user to guess a number.")
        studentInstruction2:AddParagraph("The game runs in the following order:")
            OrderedList guessList
                guessList:AddListItem("The game will generate the random integer between 1 and 20 behind the scene.")
                guessList:AddListItem("The game will ask the user to guess " + dq + "what number the computer came up with?" + dq)
                guessList:AddListItem("The game also tells the user that he/she has only 5 times to guess. If the user can get the right number within the 5 trials, the user wins. If the user does not, the computer wins.")
                guessList:AddListItem("Every time the user input the guessed number (which may or may not be correct), the computer will give the user the hints. this part will be explained in detail in the next section.")
                guessList:AddListItem("The computer will give the user the 5 trials regardless of the user wins or not. Consequently, if the user keeps playing the game after wining, the game will tell the user he/she lost the game at the end. <i>(This is due to the limitation of knowledge we have so far about " + dq + "repeat syntax" + dq + ")</i>. The goal for the user is to win the game within this 5 trials.")
        studentInstruction2:Add(guessList)
        studentInstruction2:Add(break)


        studentInstruction2:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Compute.Random" + cr
                                                        +   "Random ran" + cr
                                                        +   "integer computerInteger = ran:RandomIntegerBetween(1, 20)" + cr
                                                        +   "" + cr
                                                        +   "text welcomeScreen = input(" + dq + "welcome to the number guessing game. I have just came up with one number between 1 and 20. Can you guess what the number is? You have 5 chances to guess. Press [enter] to continue." + dq + ")" + cr
                                                        +   "" + cr
                                                        +   "integer counter = 0" + cr
                                                        +   "" + cr
                                                        +   "repeat 6 times" + cr
                                                        +   "   if counter < 5" + cr
                                                        +   "       text userInput = input("+dq+"Type your guess and press [enter]"+dq+")" + cr
                                                        +   "       integer userInteger = cast(integer, userInput)" + cr
                                                        +   "" + cr
                                                        +   "       counter = counter + 1" + cr
                                                        +   "   else" + cr
                                                        +   "       output "+dq+"You lost the game. The number was "+dq+" + computerInteger"+ cr
                                                        +   "   end" + cr
                                                        +   "end" + cr))

        studentInstruction2:Add(break)
        studentInstruction2:AddParagraph("Copy and paste the code above into the IDE below. Run the code and check if you understand what is going on")
        SideBySideIDE CSP_U5L09
        CSP_U5L09:SetUniqueIdentifier("CSP_U5L09")
        CSP_U5L09:GetIDETitle():AddText("Guess the Number Template")
        CSP_U5L09:SetGameEnvironment(false)
        CSP_U5L09:GetIDEInputArea():AddText("")
        CSP_U5L09:Setup()
        studentInstruction2:Add(CSP_U5L09)


 
        bodyDiv:Add(studentInstruction2)


//       bodyDiv:AddParagraph("The primary goal for this part is to make sure the students understand the code block above.")

        bodyDiv:AddHeading("Finishing Up the " + dq + "Guess the Secret Number" + dq + " Challenge", 4)

                studentInstruction3:AddParagraph("Your program needs to give the user the hints when he/she input the incorrect guess - based on how much off the target the user's guess is. There should be four patterns of hints. Your program gives the user the hints:")

            UnorderedList guess4List
                guess4List:AddListItem("Output <b>" + dq + "The number is higher" + dq + "</b> when the user input the number smaller than the two numbers below the correct guess. ")
                guess4List:AddListItem("Output <b>" + dq + "Close! A little higher" + dq + "</b> when the user input the number smaller than the correct guess- yet within the two number value difference. ")
                guess4List:AddListItem("Output <b>" + dq + "The number is lower" + dq + "</b> when the user input the number larger than two number above the correct guess. ")
                guess4List:AddListItem("Output <b>" + dq + "Close! A little lower" + dq + "</b> when the user input the number larger than the correct guess - yet within the two number value difference.")
                guess4List:AddListItem("Output <b>" + dq + "You win!" + dq + "</b> when the user input the correct integer.")
        studentInstruction3:Add(guess4List)
        studentInstruction3:Add(break)

        studentInstruction3:AddParagraph("As an example, let's assume the correct guess is 10. So your program should output:")

            UnorderedList guess4_1List
                guess4_1List:AddListItem("Output <b>" + dq + "The number is higher" + dq + "</b> when the user input is less than 8.")
                guess4_1List:AddListItem("Output <b>" + dq + "Close! A little higher" + dq + "</b> when the user input is larger than 7 and less than 10.")
                guess4_1List:AddListItem("Output <b>" + dq + "The number is lower" + dq + "</b> when the user input is larger than 12.")
                guess4_1List:AddListItem("Output <b>" + dq + "Close! A little lower" + dq + "</b> when the user input is larger than 10 and less than 13.")
                guess4_1List:AddListItem("Output <b>" + dq + "You win!" + dq + "</b> when the user input 10.")
        studentInstruction3:Add(guess4_1List)

        SideBySideIDE CSP_U5L09_1
        CSP_U5L09_1:SetUniqueIdentifier("CSP_U5L09_1")
        CSP_U5L09_1:GetIDETitle():AddText("Guess the Number")
        CSP_U5L09_1:SetGameEnvironment(false)
        CSP_U5L09_1:GetIDEInputArea():AddText("")
        CSP_U5L09_1:Setup()
        studentInstruction3:Add(CSP_U5L09_1)
        bodyDiv:Add(studentInstruction3)

//            Paragraph guess5
//                guess5:AddText("The students might find this challenge a little easier after introducing them to the 
//                elimination logic.")
//        bodyDiv:Add(guess5)

//        bodyDiv:AddParagraph("The elimination logic can be better explained knowing the structure of the number line.")
        bodyDiv:AddHeading("Elimination Logic", 4)
//            Paragraph guess6
//                guess6:SetClassAttribute("cool-box")
//                guess6:AddText("The graphics are explained in detail in the description if you are using a screen reader.")
//        bodyDiv:Add(guess6)

        bodyDiv:AddImage("/files/code/Unit5/number line.png", "The numberline extends to infinity to the positive and negative. There are three points idicated. The center point is at 0. This indicates the origine of the computer generated number. To the left of the center point is the point with -2. To the right of the center point is the point with +2.")


        Paragraph guess7
                guess7:AddText("The following steps will explain how to " + dq + "think" + dq + " when constructing this " + dq + "if-elseif statement" + dq + ":")
        bodyDiv:Add(guess7)
            OrderedList guessList2
                guessList2:AddListItem("Write an " + dq + "if statement" + dq + " that eliminate the possibility the userInteger being lower number than the <b>(computerInteger - 2)</b>. This will eliminate the possibility of any number below <b>(computerInteger - 2)</b>.")
                guessList2:AddListItem("In the " + dq + "elseif" + dq + " statement, we can just check if the <b>userInteger</b> is less than the <b>computerInteger</b> because we already eliminated the condition of the userInteger smaller than <b>(computerInteger - 2)</b> in the first " + dq + "if statement" + dq + " line, so this " + dq + "elseif statement" + dq + " 
                is actually evaluating if the <b>userInteger</b> would fall into between the <b>computerInteger</b> and <b>(computerInteger - 2)</b>.")
                guessList2:AddListItem("We can apply the same thinking process for the <b>userInteger</b> that is higher than the <b>computerInteger</b>.")
                guessList2:AddListItem("The only number that does not have any boolean condition above is the " + dq + "correct" + dq + " <b>computerInteger</b>.")
        bodyDiv:Add(guessList2)



        bodyDiv:AddHeading("Activity 2: AND and OR Operators",4)
//        bodyDiv:AddHeading("Video: Conditionals - Part 3 " + dq + "And & Or Operators" + dq, 4)
        InlineFrame inlineFrame1
                inlineFrame1:SetHeight("480")
                inlineFrame1:SetWidth("854")
                inlineFrame1:SetAddress("https://www.youtube.com/embed/kyFdniI-ZZs")
        bodyDiv:Add(inlineFrame1)

        UnorderedList vid1
            vid1:AddListItemLink("CS Principles: Conditionals - Part 3 And & Or Operators", "https://www.youtube.com/watch?v=kyFdniI-ZZs")
        bodyDiv:Add(vid1)
        bodyDiv:Add(break)



        bodyDiv:AddHeading("Boolean operators " + dq + "and," + dq + " " + dq + "or," + dq + " and " + dq + "not" + dq + "", 3)
        UnorderedList bp1
        bodyDiv:Add(bp1)
            UnorderedList compBoo
                compBoo:AddText("The logical operators -- also known as the Boolean Operators -- AND (and), OR (or) and NOT (not) allow you to compare the results of more than one Boolean operation at a time.")
        bodyDiv:Add(compBoo)
        bodyDiv:Add(break)
        UnorderedList bp   
        bp:AddText("<b>Example</b>:")
        bodyDiv:Add(bp)

            UnorderedList compBoo1
                compBoo1:AddText("The " + dq + "and" + dq + " operator (called " + dq + "AND" + dq + ") lets you check whether two conditions are both true at the same time. Consider the statement below:")
        bodyDiv:Add(compBoo1)
        bodyDiv:Add(break)

        bodyDiv:Add(preformatter:GeneratePreformattedCode("     if age >= 13 and age < 21" + cr))
        bodyDiv:Add(break)

        UnorderedList bp2
        bp2:AddText("This says: <i>" + dq + "True or false: is it the case that BOTH age >= 13 AND age < 21?" + dq + "</i>")
        bodyDiv:Add(bp2)
        bodyDiv:Add(break)
            UnorderedList compBoo2
                compBoo2:AddText("If both of expression 1 (age >= 13) and expression 2 (age < 21) return true then the larger compound boolean expression returns true. You can replace expression 1 and expression 2 in that statement with anything that evaluates to true/false.")
        bodyDiv:Add(compBoo2)



        bodyDiv:AddHeading("Truth Tables: AND, OR, and NOT", 4)
        bodyDiv:AddParagraph("The " + dq + "and" + dq + " operator: <b>(boolean expression 1)</b> <i>and</i> <b>(boolean expression 2)</b>")
            UnorderedList compBooList
                AddListItemWithBoldAtFront(compBooList, "(true) and (true)", " - returns true")
                AddListItemWithBoldAtFront(compBooList, "(true) and (false)", " - returns false")
                AddListItemWithBoldAtFront(compBooList, "(false) and (true)", " - returns false")
                AddListItemWithBoldAtFront(compBooList, "(false) and (false)", " - returns false")
        bodyDiv:Add(compBooList)
        bodyDiv:AddParagraph("The " + dq + "or" + dq + " operator: <b>(boolean expression 1)</b> <i>or</i> <b>(boolean expression 2)</b>")
            UnorderedList compBooList1
                AddListItemWithBoldAtFront(compBooList1, "(true) or (true)", " - returns true")
                AddListItemWithBoldAtFront(compBooList1, "(true) or (false)", " - returns true")
                AddListItemWithBoldAtFront(compBooList1, "(false) or (true)", " - returns true")
                AddListItemWithBoldAtFront(compBooList1, "(false) or (false)", " - returns false")
        bodyDiv:Add(compBooList1)
        bodyDiv:AddParagraph("The " + dq + "not" + dq + " operator: <i>not</i> <b>(boolean expression)</b>")
            UnorderedList compBooList2
                AddListItemWithBoldAtFront(compBooList2, "not (true)", " - returns false")
                AddListItemWithBoldAtFront(compBooList2, "not (false)", " - returns true")
        bodyDiv:Add(compBooList2)



        bodyDiv:AddHeading("AND operator", 4)
        bodyDiv:AddParagraph("Example 1:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "age = 17" + cr
                                                        +   "(age >= 13) and (age < 21)" + cr))
            Paragraph compBoo3
                compBoo3:AddText("The entire expression: " + dq + "age >= 13 and age < 21" + dq + " will end up as a single true/false value depending on what the value of age is. But it's computed one step at a time. This expression has 3 steps to it:")
        bodyDiv:Add(compBoo3)
            UnorderedList compBooList3
                AddListItemWithBoldAtFront(compBooList3, "Step 1", " - evaluate the first expression encountered (age >= 13). It becomes true.")
                AddListItemWithBoldAtFront(compBooList3, "Step 2", " - evaluate the next expression in the statement (age < 21). It becomes true.")
                AddListItemWithBoldAtFront(compBooList3, "Step 3", " - we can apply the rules of " + dq + "and" + dq + " to the values calculated in steps 1 and 2. This entire expression returns true.")
        bodyDiv:Add(compBooList3)
        bodyDiv:AddParagraph("Example 2:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "age = 25" + cr
                                                        +   "(age >= 13) and (age < 21)" + cr))
        bodyDiv:Add(break)
            UnorderedList compBooList4
                AddListItemWithBoldAtFront(compBooList4, "Step 1", " - evaluate the first expression encountered (age >= 13). It becomes true.")
                AddListItemWithBoldAtFront(compBooList4, "Step 2", " - evaluate the next expression in the statement (age < 21). It becomes false.")
                AddListItemWithBoldAtFront(compBooList4, "Step 3", " - we can apply the rules of " + dq + "and" + dq + " to the values calculated in steps 1 and 2. This entire expression returns false.")
        bodyDiv:Add(compBooList4)
        bodyDiv:Add(break)
        bodyDiv:AddHeading("OR operator", 4)
        bodyDiv:AddParagraph("Example 1:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "day = " + dq + "Thursday" + dq + "" + cr
                                                        +   "(day = " + dq + "Tuesday" + dq + ") or (day = " + dq + "Thursday" + dq + ")" + cr))
        bodyDiv:Add(break)
            UnorderedList compBooList5
                AddListItemWithBoldAtFront(compBooList5, "Step 1", " - evaluate the first expression encountered (day = " + dq + "Tuesday" + dq + "). It becomes false.")
                AddListItemWithBoldAtFront(compBooList5, "Step 2", " - evaluate the next expression in the statement (day = " + dq + "Thursday" + dq + "). It becomes true.")
                AddListItemWithBoldAtFront(compBooList5, "Step 3", " - we can apply the rules of " + dq + "and" + dq + " to the values calculated in steps 1 and 2. This entire expression returns true.")
        bodyDiv:Add(compBooList5)

        bodyDiv:AddParagraph("Example 2:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "day = " + dq + "Wednesday" + dq + "" + cr
                                                        +   "(day = " + dq + "Tuesday" + dq + ") or (day = " + dq + "Thursday" + dq + ")" + cr))
        bodyDiv:Add(break)
            UnorderedList compBooList6
                AddListItemWithBoldAtFront(compBooList6, "Step 1", " - evaluate the first expression encountered (day = " + dq + "Tuesday" + dq + "). It becomes false.")
                AddListItemWithBoldAtFront(compBooList6, "Step 2", " - evaluate the next expression in the statement (day = " + dq + "Thursday" + dq + "). It becomes false.")
                AddListItemWithBoldAtFront(compBooList6, "Step 3", " - we can apply the rules of " + dq + "and" + dq + " to the values calculated in steps 1 and 2. This entire expression returns false.")
        bodyDiv:Add(compBooList6)

        bodyDiv:AddHeading("Misconceptions", 4)
        bodyDiv:AddParagraph("Here are some of the common problems that you might encounter.")
        bodyDiv:AddHeading("Syntax Problems", 4)
            Paragraph compBoo4
                compBoo4:AddText("It's common to forget that you need to state a full Boolean expression on each side of the logical operator. This happens because of the way we state conditions in English. For example in speaking English you might say:")
        bodyDiv:Add(compBoo4)
            Paragraph compBoo5
                compBoo5:SetClassAttribute("cool-box")
                compBoo5:AddText("" + dq + "If the day is Saturday or Sunday" + dq + "")
        bodyDiv:Add(compBoo5)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "day = " + dq + "Saturday" + dq + " or " + dq + "Sunday" + dq + "" + cr))
            Paragraph compBoo6
                compBoo6:AddText("This is incorrect because " + dq + "Sunday" + dq + " by itself is not a boolean expression - it isn't true or false. So the correct version is a bit more verbose but one the computer can process:")
        bodyDiv:Add(compBoo6)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "day = " + dq + "Saturday" + dq + " or day = " + dq + "Sunday" + dq + "" + cr))
            Paragraph compBoo7
                compBoo7:AddText("Just remember that each side of a boolean operator needs to evaluate to true or false.")
        bodyDiv:Add(compBoo7)
        bodyDiv:AddHeading("Logic Problems", 4)
            Paragraph compBoo8
                compBoo8:AddText("There are logical misconceptions because the way we use " + dq + "and" + dq + " and " + dq + "or" + dq + " when speaking in English which is sometimes ambiguous. Take these two statements which if you heard them in regular English mean the same thing:")
        bodyDiv:Add(compBoo8)
            Paragraph compBoo9
                compBoo9:SetClassAttribute("cool-box")
                compBoo9:AddText("" + dq + "Patrons under the age of 12 and over the age of 65 get a discount" + dq + "")
        bodyDiv:Add(compBoo9)
            Paragraph compBoo10
                compBoo10:SetClassAttribute("cool-box")
                compBoo10:AddText("" + dq + "Patrons who are under 12 or over 65 get a discount" + dq + "")
        bodyDiv:Add(compBoo10)
            Paragraph compBoo11
                compBoo11:AddText("One statement uses and and the other one or. If you're writing code, which should it be? Does it matter? It turns out: yes.")
        bodyDiv:Add(compBoo11)
        UnorderedList inc
        inc:AddText("<b>Incorrect</b>")
        bodyDiv:Add(inc)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "       age < 13 and age > 65" + cr))
        UnorderedList inc1
        inc1:AddText("<b>Correct</b>")
        bodyDiv:Add(inc1)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "       age < 13 or age > 65" + cr))
            Paragraph compBoo12
                compBoo12:AddText("The expression with AND is incorrect because the logical AND means that both of these expressions must evaluate to true at the same time for the whole statement to be true. In fact, there is no value of age that will make this statement true! -- a person cannot be both under 13 and over 65 at the same time. The correct expression is the one with OR because we want one of two things to be true: either the age is under 13 OR the age is over 65. This example shows that English may mislead you if you're not careful. So after you write an expression, clear your mind, imagine that you are a dumb logical computer and test it by applying the truth tables to make sure.")
        bodyDiv:Add(compBoo12)


        bodyDiv:AddHeading("Using the compound expression in " + dq + "if-statement" + dq + "", 4)
            Paragraph compBoo13
                compBoo13:AddText("Since compound boolean expressions eventually evaluate down to a single true/false value, we can use them in an if statement. The whole expression evaluates to determine whether or not execute a section of code. Here is a simple example for the students to read through:")
        bodyDiv:Add(compBoo13)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "text userAge = input(" + dq + "How old are you?" + dq + ")" + cr
                                                        +   "integer userInteger = cast(integer, userAge)" + cr
                                                        +   "" + cr
                                                        +   "if age < 13 or age > 65" + cr
                                                        +   "   output " + dq + "You get a discount" + dq + "" + cr
                                                        +   "else" + cr
                                                        +   "   output " + dq + "Sorry, NO discount" + dq + "" + cr
                                                        +   "end" + cr))



        bodyDiv:AddHeading("Activity 3: How Compound Boolean Expressions Work", 4)
            Paragraph workedComp
                workedComp:AddText("<b>Concept</b>: Since compound boolean expressions evaluate to true or false, 
                    we can also use compound boolean expressions within other compound boolean 
                    expressions to make an even more sophisticated statement. In fact, 
                    there is no limit to how many boolean expressions you can embed within a 
                    single statement. For example:")
        bodyDiv:Add(workedComp)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "((expr1 or (expr2 and expr3)) and expr4) and ((expr5 and expr6) or (expr7 or expr8))" + cr))
           Paragraph workedComp1
                workedComp1:AddText("** Note: We usually use parentheses to cluster expression so we know which should be evaluated together.")
        bodyDiv:Add(workedComp1)

        bodyDiv:AddHeading("An Example to Work Through With Students", 4)
            Paragraph workedComp2
                workedComp2:AddText("In English, we are trying to express:")
        bodyDiv:Add(workedComp2)
            Paragraph workedComp3
                workedComp3:AddText("" + dq + "If it's a Tuesday or a Thursday, or the person is between the ages of 13 and 21 (including 13 but not 21), then they should get a discount." + dq + "")
        bodyDiv:Add(workedComp3)
        bodyDiv:AddParagraph("Here is the entire compound boolean expression in an if-statement:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "if (day = " + dq + "Tuesday" + dq + " or day = " + dq + "Thursday" + dq + ") or (age >= 13 and age < 21)" + cr
                                                        +   "   output " + dq + "You get a discount!" + dq + "" + cr
                                                        +   "else" + cr
                                                        +   "   output " + dq + "You pay full price." + dq + "" + cr
                                                        +   "end" + cr))

        bodyDiv:AddParagraph("Walk through the code when <b>day = " + dq + "Wednesday," + dq + " age = 21</b>. When the user input these data, the computer goes through the step by step boolean evaluation in the following order:")
            UnorderedList workedCompList
                AddListItemWithBoldAtFront(workedCompList, "Step 1:  day = " + dq + "Tuesday" + dq + "", " - returns false")
                AddListItemWithBoldAtFront(workedCompList, "Step 2:  day = " + dq + "Thursday" + dq + "", "  - returns false")
                AddListItemWithBoldAtFront(workedCompList, "Step 3:  (day = " + dq + "Tuesday" + dq + " or day = " + dq + "Thursday" + dq + ")", " - returns false")
                AddListItemWithBoldAtFront(workedCompList, "Step 4:  age >= 13", " - returns true")
                AddListItemWithBoldAtFront(workedCompList, "Step 5:  age < 21", " - returns false")
                AddListItemWithBoldAtFront(workedCompList, "Step 6:  (age >= 13 and age < 21)", " - returns false")
                AddListItemWithBoldAtFront(workedCompList, "Step 7:  (day = " + dq + "Tuesday" + dq + " or day = " + dq + "Thursday" + dq + ") or (age >= 13 and age < 21)", " - returns false")
        bodyDiv:Add(workedCompList)            
            Paragraph workedComp5
                workedComp5:AddText("This is the correct result. Since it was a Wednesday, it wasn't the right day for a discount. And because the user was 21, but our statement says you have to be under 21, they also don't qualify on age.")
        bodyDiv:Add(workedComp5)



        bodyDiv:AddHeading("Museum Price Challenge", 4)
        bodyDiv:AddParagraph("The problem statement is as follows:")
            UnorderedList chlg38
                chlg38:AddText("Let's assume that we have a museum that has the following policy for the admission price:")
        bodyDiv:Add(chlg38)
            UnorderedList chlg38List
                chlg38List:AddListItem("The museum is closed on Mondays.")
                chlg38List:AddListItem("Everyone gets half price discount on Tuesday and Thursdays.")
                chlg38List:AddListItem("If you are age between 13 and 20 (including min-max), you will get the discount on Wednesdays.")
                chlg38List:AddListItem("If you are younger than 6, or older than 65, your admission if free.")
                chlg38List:AddListItem("If you are age between 6 and 12 (including min-max), your admission is half price on the  Weekend (Saturday and Sunday).")
        bodyDiv:Add(chlg38List)
        bodyDiv:Add(break)
            UnorderedList chlg38_1
                chlg38_1:AddText("Build the program that gives the user to input the day of the week and his/her age, then gives the user information about the pricing for him/her. Your program should only have three patterns of output 1.) " + dq + "We are closed on Monday," + dq + " 2.) " + dq + "You get half price discount!" + dq + ", 3.) " + dq + "You pay full price." + dq + " ")
        studentInstruction4:Add(chlg38_1)

        SideBySideIDE addStatementIDE1
        addStatementIDE1:SetUniqueIdentifier("CodingChallenge38")
        addStatementIDE1:GetIDETitle():AddText("Coding Challenge 38: Putting All Together")
        addStatementIDE1:GetIDESubtitle():AddText("")
        addStatementIDE1:SetGameEnvironment(true)
        addStatementIDE1:Setup()
        studentInstruction4:Add(addStatementIDE1)
        studentInstruction4:Add(addStatementIDE1:GetGameCanvas())
        bodyDiv:Add(studentInstruction4)



        bodyDiv:AddHeading("Activity: AP Practice Response - Score the Response",4)
        bodyDiv:AddParagraph("One component of the <b>AP Create Performance Task</b> is selecting and describing an algorithm that you developed.")
        UnorderedList app
        app:AddText("<b>2. Written Responses</b>")
        bodyDiv:Add(app)
        UnorderedList app1
        app1:AddText("2c. Capture and paste a program code segment that implements an algorithm (marked with an <b>oval</b> in <b>section 3</b> below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. (Must not exceed 200 words)")
        bodyDiv:Add(app1)
        bodyDiv:AddParagraph("The scoring guide for this question is shown in the picture.")
        bodyDiv:AddImage("/files/code/Unit5/APScore.png","AP Scoring Guide for algorithm implementation")
        bodyDiv:AddParagraph("Now, score the following response:")
        UnorderedList app2
        app2:AddText("<b>Written Response</b>: '<i>My algorithm controls the log-in for the app. This piece of my program is important because the data included in my app needs to be secure. The algorithm makes sure only users with the correct password get in to the app to use it.'</i>")
        bodyDiv:Add(app2)
        bodyDiv:AddParagraph("The program code is as follows:")
        bodyDiv:AddImage("/files/code/Unit5/U5L9APProgram.png","Program Code that implements an algorithm")
        bodyDiv:Add(break)
        bodyDiv:Add(break)
        bodyDiv:Add(break)
        bodyDiv:Add(break)
        bodyDiv:Add(break)




        bodyDiv:AddHeading("Wrap Up", 2)

        bodyDiv:AddParagraph("" + dq + "What's the trickiest logical statement you encountered in this lesson? What made it tricky?" + dq + "")
        UnorderedList wu1
        wu1:AddText("<b>Ideas to discuss with the students</b>:")
        bodyDiv:Add(wu1)
            UnorderedList wrapup
                wrapup:AddText("We often use " + dq + "and" + dq + " and " + dq + "or" + dq + " in English in imprecise ways, or at least in ways that could have multiple meanings. In programming logic, AND and OR have very precise meanings and they don't always map directly to English.")
                bodyDiv:Add(wrapup)
        bodyDiv:Add(break)
        UnorderedList wu1_1
        wu1_1:AddText("<b>An example using OR</b>")
        bodyDiv:Add(wu1_1)
            UnorderedList wrapup2
                wrapup2:AddText("In English, we sometimes use OR in the same way it's used in programming - to mean either or both. " + dq + "Do you want cream or sugar in your coffee?" + dq + " But we often use OR to mean exactly one thing or the other, not both. " + dq + "Is the elevator going up or down?" + dq + " The programming-logic answer to that question is: yes. Because it is the case that the elevator is either going up or it's going down.")
        bodyDiv:Add(wrapup2)
        bodyDiv:Add(break)
            UnorderedList wrapup3
                wrapup3:AddText("AND can get really tricky because in English we sometimes use the word " + dq + "or" + dq + " to convey a logical AND. For example: In English you might say: " + dq + "If it's not Saturday or Sunday, then it's a weekday." + dq + " In programming you might express this as:")
        bodyDiv:Add(wrapup3)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "       not(day = " + dq + "Saturday" + dq + " or day = " + dq + "Sunday" + dq + ")" + cr))
        bodyDiv:Add(break)
            UnorderedList wrapup4
                wrapup4:AddText("In other words: " + dq + "It is not the case that the day is Saturday or Sunday." + dq + " But you might also express the same condition in code as:")
        bodyDiv:Add(wrapup4)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "       (day not= " + dq + "Saturday" + dq + " and day not= " + dq + "Sunday" + dq + ")" + cr))
        bodyDiv:Add(break)

            UnorderedList wrapup5
                wrapup5:AddText("In other words: " + dq + "It is the case that BOTH the day is not Saturday AND the day is also not Sunday." + dq + "")
        bodyDiv:Add(wrapup5)

        bodyDiv:AddHeading("Prompt:",4)
        bodyDiv:AddParagraph("" + dq + "True or False: the Boolean operators AND, OR and NOT, enable us to express boolean conditions that we couldn't before?" + dq + "")
        UnorderedList wu2
        wu2:AddText("<b>Ideas to discuss with the students</b>:")
        bodyDiv:Add(wu2)
            UnorderedList wrapup1
                wrapup1:AddText("False. Anything that you can express with AND, OR and NOT, can be expressed with a chain or nesting of if-else statements. Certainly, it allows us to expression complex boolean conditions more succinctly, and makes our code MUCH easier to read. But in terms of program logic, we can do everything with just if-else statements.")
        bodyDiv:Add(wrapup1)



        bodyDiv:AddHeading("Logic can get tricky", 4)
            Paragraph wrapup8
                wrapup8:AddText("Because logic can get convoluted and tricky, even professionals mess it up. However, as a programmer, you can take steps to make sure you" + dq + "ve got it right by testing your code thoroughly to make sure you get expected results. ")
        bodyDiv:Add(wrapup8)
        bodyDiv:AddParagraph("Because the boolean operators essentially take binary values (T/F) as input, you can easily figure out how many possible inputs there are for any complex boolean expression and test them all. For example if you have a statement like:")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "if (expr1 and expr2 or expr3)" + cr))
            Paragraph wrapup9
                wrapup9:AddText("There are 3 expressions there, and each can be either true or false, so there are 8 possible ways to assign true or false to expr1, expr2 and expr3 -- (TTT, TTF, TFT, TFF, FTT, FTF, FFT, FFF). You can test all 8 to make sure you get the right outputs.")
        bodyDiv:Add(wrapup9)



        bodyDiv:AddHeading("Extended Learning", 2)
            Paragraph ext
                ext:AddText("<b>Connection to logic gates in hardware</b>: These AND, OR, and NOT logic operators can be very useful in directing the flow of your programs. They also represent a fundamental part of your computer's hardware. Computer engineers uses logic gates such as these to do computations and direct the flow of information. Remember, inside your computer, you have electricity flowing; " + dq + "true" + dq + " is indicated by a high voltage and " + dq + "false" + dq + " is indicated by a low voltage.")
        bodyDiv:Add(ext)
            UnorderedList extList
                AddListItemWithBoldAtFront(extList, "AND gate:", " Two wires are attached to one side of an AND gate, and one is attached to the other. If both input wires have a high voltage, the AND gate will give a high voltage to the output wire.")
                AddListItemWithBoldAtFront(extList, "OR gate:", " Two wires are attached to one side of an OR gate, and one is attached to the other. If either input wire has a high voltage, the OR gate will give a high voltage to the output wire.")
                AddListItemWithBoldAtFront(extList, "NOT gate:", " One wire is attached to one side of a NOT gate, and one is attached to the other. If the input wire has a high voltage, the output wire will have a low voltage and vice versa.")
        bodyDiv:Add(extList)

        bodyDiv:AddHeading("Collaborative programming", 4)
            OrderedList extList1
                extList1:AddListItem("Form teams of three students.")
                extList1:AddListItem("Assign one to write a description of a real-life situation that requires multiple conditions.")
                extList1:AddListItem("When finished, the first person passes the description to the second person, who is tasked with drawing the flowchart or pseudocode for the scenario.")
                extList1:AddListItem("The paper with the description and flowchart or pseudocode is then passed to a third person, who writes code for the event. They may rely upon imaginary functions if necessary (e.g., <b>is_raining()</b>)")
        bodyDiv:Add(extList1)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.1 (C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (J)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.5.1 (E, G)")
        bodyDiv:Add(list)

/* Completed 5/26/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn the 'if-else-if' and Conditional Logic"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 9: ('if-else-if' and Conditional Logic)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 9"
    end
    action GetShortDescription returns text
        return "Learn the 'if-else-if' and Conditional Logic"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson9A.html"
    end

end

 
    
