use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit5Lesson11A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 11: Repeat While and Repeat Until")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 11: Repeat While and Repeat Until", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("This lesson demonstrates how a slight manipulation of a conditional statement can allow for the creation of a new and powerful tool in constructing programs, the " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " loops. Students are introduced to " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " loops by analyzing real-life scenarios in which tasks are repeated until they are completed based on conditional statements. They will design their own scenarios to represent a real-world situation that could be represented through " + dq + "repeat while" + dq + " and/or " + dq + "repeat until" + dq + " loops, and will also learn how to recognize common looping mistakes, most notably " + dq + "infinite loops." + dq + " Students will then move to an IDE, creating a " + dq + "loop structure" + dq + " that runs exactly some predetermined number of times. While learning about creating " + dq + "loop structures," + dq + " students will be introduced to many of the common mistakes early programmers make with loops, and will be introduced to debugging concepts. As they become accustomed to the logical process of the " + dq + "repeat while structure," + dq + " students will be introduced to the " + dq + "repeat until structure," + dq + " which uses the opposite logical process.  Students will finally progress to putting conditional if statements inside a " + dq + "repeat while" + dq + " loop to count the number of times an event occurs while repeating the same action. This activity will also remind students of the need for counter variables and foreshadow their further use in the following lessons.")
        bodyDiv:Add(ov1)
            

        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
//                AddListItemWithBoldAtFront(voc, "Loop: ", "a programming construct used to repeat a set of commands (loop) as long as (while) a boolean condition is true.")
                AddListItemWithBoldAtFront(voc, "Iterate: ", "to repeat in order to achieve, or get closer to, a desired goal.")
//                AddListItemWithBoldAtFront(voc, "Infinite Loop: ", "a condition that a programmer created often by mistake. In this condition, the boolean expression is stated ina way it is inpossible to meet. Therefore, the computer repeat the code inside of the loop infinitely.")
                AddListItemWithBoldAtFront(voc, "While Loop: ", "a programming construct used to repeat a set of commands (loop) as long as (while) a boolean condition is true.")
        bodyDiv:Add(voc)


        bodyDiv:AddHeading("Goals", 2)
            bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Explain that a while loop continues to run while a boolean condition remains true.")
                goalList:AddListItem("Translate a real-life activity with repeated components into a form that could be represented by a while loop.")
                goalList:AddListItem("Analyze a loop to determine if the initial condition will be met, how many times the loop will run, and if the loop will ever terminate.")
                goalList:AddListItem("Write programs that use while loops in a variety of contexts.")
        bodyDiv:Add(goalList)


        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The " + dq + "repeat while" + dq + " and the " + dq + "repeat until" + dq + " loops allow us to set a certain conditional for the loop to either continue repeating or to stop repeating. Thus, both loops use boolean expressions to determine if they will run and how many times. One of the biggest problems a programmer can run into with " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " loops is the creation of an infinite loop. As such, there are several defensive programming strategies introduced in this lesson to help prevent creating infinite loops.")
        bodyDiv:Add(purpose)


        bodyDiv:AddHeading("Resources", 2)
            UnorderedList resources
                resources:AddListItemLink("Repeat While Activity Guide, rtf", "/files/code/Unit5/Unit5Lesson11 - ActivityGuide-RepeatWhile.rtf")
        bodyDiv:Add(resources)


        bodyDiv:AddHeading("Introduced Code", 2)
            UnorderedList code
                AddListItemWithBoldAtFront(code, "repeat while", "")
                AddListItemWithBoldAtFront(code, "repeat until", "")
        bodyDiv:Add(code)


        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("This is an optional unplugged activity. You may skip to the Activity if you don't think it would be useful. It may also be something worth returning to after writing code to reinforce the concepts behind loops.")
        bodyDiv:Add(getStart)

        bodyDiv:AddParagraph("Distribute the " + dq + "Repeat While Activity Guide" + dq + " to students. This worksheet gives a few real-life examples of while loops, as well several templates for students to create their own real-life scenarios.")

            Paragraph getStart1
                getStart1:AddText("If possible, pair students together for this activity. Once they have created their own real-life " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " scenarios, have them share their scenario with their work partner and ask themselves the following questions:")
        bodyDiv:Add(getStart1)
            UnorderedList getStartList
                getStartList:AddListItem("Are both types of loops properly structured?")
                getStartList:AddListItem("What does each type of loop accomplish?")
                getStartList:AddListItem("How many times will each loop run? (It might not be possible to know exactly)")
        bodyDiv:Add(getStartList)
            Paragraph getStart2
                getStart2:AddText("Discuss the results of this exchange as a class, keeping the primary focus on whether or not students are properly structuring their loops. These early activities are primarily designed to get students familiar with the structure of the " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " loops. Common misconceptions include:")
        bodyDiv:Add(getStart2)
            UnorderedList getStartList1
                getStartList1:AddListItem("Writing the condition on which the " + dq + "repeat while" + dq + " should stop rather than continue.")
                getStartList1:AddListItem("Not including steps in the " + dq + "repeat while statement" + dq + " that will make the condition false at some point (i.e., creating an infinite loop).")
        bodyDiv:Add(getStartList1)

       
        bodyDiv:AddHeading("Activity", 2)
        
        bodyDiv:AddParagraph("In this activity, students will complete a series of Coding Challenges that introduce them to " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " loops. The lesson begins with the general form of the " + dq + "repeat while" + dq + " loop. Next, the concepts of counter variables and " + dq + "infinite loops" + dq + " are introduced. Then, the subsequent Coding Challenge demonstrates how the " + dq + "repeat until" + dq + " loop works. The activity then gives an example of Defensive Loop Conditions: conditionals that catch more cases than you think you need, helping to avoid infinite loops. Finally, the activity gives us an idea of how loops can become more complex by incorporating if-statements within a loop.")

        bodyDiv:AddHeading("Student Instructions", 3)

            Paragraph loopW
                loopW:AddText("The " + dq + "repeat while" + dq + " loop uses a boolean condition to repeatedly run a block of code. It checks the expression, and if it is TRUE it runs the block of code contained within it. This process of checking the condition and running the block of code is repeated as long as the boolean condition remains TRUE. Once the boolean expression becomes FALSE it will stop.")
        bodyDiv:Add(loopW)
            Paragraph loopW1
                loopW1:AddText("We are going to start exploring a " + dq + "repeat while" + dq + " by modifying the condition on which a " + dq + "repeat while" + dq + " runs and using output statements to ensure it is correctly evaluating its condition. ")
        bodyDiv:Add(loopW1)

        bodyDiv:AddHeading("Repeat While loop structure", 4)

            Paragraph act1
                act1:AddText("Add the line of code below in three different places in the code; First - outside of the " + dq + "repeat while" + dq + " structure, after the " + dq + "end," + dq + " Second - inside of the structure below the " + dq + "counter = counter + 1," + dq + " Third - inside of the structure right below the " + dq + "repeat while counter < 10." + dq)
        bodyDiv:Add(act1)

        bodyDiv:Add(preformatter:GeneratePreformattedCode("output counter" + cr))

        SideBySideIDE addStatementIDE
        addStatementIDE:SetUniqueIdentifier("Repeat While loop structure")
        addStatementIDE:GetIDETitle():AddText("Repeat While loop structure")
        addStatementIDE:GetIDESubtitle():AddText("")
        addStatementIDE:SetGameEnvironment(true)
        addStatementIDE:GetIDEInputArea():AddText("integer counter = 0" + cr + cr
            +   "repeat while counter < 10" + cr
            +   "   counter = counter + 1" + cr
            +   "end" + cr + cr
            +   "output " + dq + "The repeat while structure ran 10 times while the counter is between 0 and 9." + dq + cr)
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)
        bodyDiv:Add(addStatementIDE:GetGameCanvas())

        bodyDiv:AddHeading("Creating an Infinite Loop", 4)
            Paragraph act1_1
                act1_1:AddText("Create a " + dq + "repeat while" + dq + " statement that is logically impossible to ever become true by modifying the " + dq + "repeat while" + dq + " statement or by modifying the counter calculation. Close the tab for the output screen when you find the program does not to stop.")
        bodyDiv:Add(act1_1)

        SideBySideIDE addStatementIDE1
        addStatementIDE1:SetUniqueIdentifier("Creating an Infinite Loop")
        addStatementIDE1:GetIDETitle():AddText("Creating an Infinite Loop")
        addStatementIDE1:GetIDESubtitle():AddText("")
        addStatementIDE1:SetGameEnvironment(true)
        addStatementIDE1:GetIDEInputArea():AddText("integer counter = 0" + cr + cr
            +   "repeat while counter < 10" + cr
            +   "   counter = counter + 1" + cr
            +   "end" + cr + cr
            +   "output " + dq + "The repeat while structure ran 10 times while the counter is between 0 and 9." + dq + cr)
        addStatementIDE1:Setup()
        bodyDiv:Add(addStatementIDE1)
        bodyDiv:Add(addStatementIDE1:GetGameCanvas())

        bodyDiv:AddHeading("Counters and Infinite Loops", 4)
            Paragraph infLoop
                infLoop:AddText("The two exercises you just completed are designed to demonstrate two common concepts in the computer programming:")
        bodyDiv:Add(infLoop)
            UnorderedList infList
                AddListItemWithBoldAtFront(infList, "Counters:", " Counters are variables that count how many times a loop has run, also called iterators, can be used to control the number of times a loop runs.")
                AddListItemWithBoldAtFront(infList, "Infinite Loops:", " An infinite loop is a set of commands that the computer will cycle through forever, because the " + dq + "repeat while" + dq + " condition is always true. Infinite loops are almost always undesirable, but they can be deceptively easy to create by mistake. ")
        bodyDiv:Add(infList)

        bodyDiv:AddHeading("Repeat Until loop structure", 4)
            Paragraph loopU
                loopU:AddText("The " + dq + "repeat until" + dq + " uses a boolean condition to repeatedly run a block of code. It checks the expression, and if it is FALSE it runs the block of code contained within it. This process of checking the condition and running the block of code is repeated as long as the boolean condition remains FALSE. Once the boolean expression becomes TRUE it will stop. Almost always, " + dq + "repeat while structure" + dq + " can be re-written by " + dq + "repeat until structure." + dq + " The previous example for the " + dq + "repeat while" + dq + " can be re-written in the following way, and both loops do the same thing. Do the same modification you did in the first exercise to the code block below, and observe how the counter works in this case.")
        bodyDiv:Add(loopU)

        SideBySideIDE addStatementIDE2
        addStatementIDE2:SetUniqueIdentifier("Repeat Until loop structure")
        addStatementIDE2:GetIDETitle():AddText("Repeat Until loop structure")
        addStatementIDE2:GetIDESubtitle():AddText("")
        addStatementIDE2:SetGameEnvironment(true)
        addStatementIDE2:GetIDEInputArea():AddText("integer counter = 0" + cr
                                                        +   "" + cr
                                                        +   "repeat until counter >= 10" + cr
                                                        +   "   counter = counter + 1" + cr
                                                        +   "end" + cr
                                                        +   "" + cr
                                                        +   "output " + dq + "The repeat until structure ran 10 times while the counter is between 0 and 9." + dq + cr)
        addStatementIDE2:Setup()
        bodyDiv:Add(addStatementIDE2)
        bodyDiv:Add(addStatementIDE2:GetGameCanvas())

//            Paragraph loopU2
//                loopU2:AddText("For further leaning and practice, visit the following Quorum web pages")
//        bodyDiv:Add(loopU2)
//
//        bodyDiv:AddLink("Tutorial: Repeat", "https://quorumlanguage.com/tutorials/language/repeat.html")
//        bodyDiv:AddLink("Lab 3.2: Loops", "https://quorumlanguage.com/lessons/chapter3/lab3_2.html")

//        bodyDiv:AddHeading("Debugging Mode 1 (Only available in offline IDE):  Why do we need the debugging mode?", 2)
//            Paragraph debug
//                debug:AddText("We have briefly discussed debugging in the previous lessons. There are two types of debugging - debugging " + dq + "syntax errors" + dq + " and debugging " + dq + "logical errors" + dq + ". In this section, we will focus solely on debugging " + dq + "logical errors" + dq + ".")
//        bodyDiv:Add(debug)
//            Paragraph debug1
//                debug1:AddText("One mind set we - the programmers - should have in the hefty task of debugging logic erors is that only " + dq + "we" + dq + " can find this type of errors. " + dq + "We" + dq + " means the programmers who know the ins and outs of this particular program code - how it is written, how it is structured, and how it supposed to work. The computer cannot really help us in " + dq + "finding" + dq + " the exact logical error. It certainly cannot fix them for us. The only thing the computer can do is to make it somewhat easier for us to find the " + dq + "logical error" + dq + ". The way computer helping us is called " + dq + "Debugging Mode" + dq + " in our off-line IDE " + dq + "Sodbeans/Netbeans" + dq + ". We will use a simple code block with " + dq + "repeat while" + dq + " structure to show you how this Debugging Mode works. ")
//        bodyDiv:Add(debug1)
//            Paragraph debug2
//                debug2:AddText("When we write the most basic computer program, without any " + dq + "if structure" + dq + ", " + dq + "repeat structure" + dq + " and/or " + dq + "action structure" + dq + ",  the computer executes our code from top to bottom with line-by-line fashion. This is the case like the one we experienced earlier with the Quorum Turtle Module in Unit 3. The code is strictly written in linear order, and the computer executed the code exactly the same order the code was written. With that kind of simple code, it is very easy for us to find the mistake we made. We could watch the " + dq + "Turtle" + dq + " move step-by-step and find where the " + dq + "Turtle" + dq + " is not moving in the way it supposed to move. That is the exact location of our mistake in the code.")
//        bodyDiv:Add(debug2)
//            Paragraph debug3
//                debug3:AddText("When we start adding structures that can redirect the computer" + dq + "s order of code execution however,, the computer would skip around our code based on the conditional statement. If we add the element of " + dq + "Event Driven Programming" + dq + ", the computer would really jump around our code based on the user created condition as well.")
//        bodyDiv:Add(debug3)
//            Paragraph debug4
//                debug4:AddText("When executing our program,  the computer reads our code with incredible speed - close to the speed of light!. So when it execute our logical errors, it runs the code as it written like nothing has happened, then move its focus to the next section of the code. By the time we - the programmers, also humans - notice the logical error by observing the unexpected behavior, the computer might have run entire code and ended the program. This fact makes it very difficult for us to find the coding mistake we might have made - " + dq + "and we always do" + dq + " - in our own code.")
//        bodyDiv:Add(debug4)
//            Paragraph debug5
//                debug5:AddText("The Debugging Mode in the off-line IDE gives us a tool that can run and " + dq + "pause" + dq + " the computer" + dq + "s execution of our code one line at a time.  With this functionality, we - the programers - can observe which part of the code the computer is executing with the speed we can keep up with. Therefore, we can pin point the line of code where we create the logical error.")
//        bodyDiv:Add(debug5)
//
//        bodyDiv:AddHeading("Debugging Mode 2 (Only available in offline IDE): Basic Procedure", 2)
//        bodyDiv:AddHeading("Setting " + dq + "Breakpoint" + dq + "", 4)
//            Paragraph debug6
//                debug6:AddText("In order for us to use the debugging mode, we need to set the breakpoint in the editing filed of the offline IDE " + dq + "Sodbeans/Netbeans" + dq + ". You can accomplish this simply by using the arrow keys to move to the line, then press  [command] + [fn] + [F8].  if you prefer, clicking on the number that  is displayed to the left side of the line would do the same The Picture below shows the breakpoint:")
//        bodyDiv:Add(debug6)
//
//        bodyDiv:AddImage("/files/code/Unit5/breakpoint.png", "A pciture showing the breakpoint with pink hi-lighted line")
//
//            Paragraph debug7
//                debug7:AddText("Normally we set the breakpoint at the beginning of structures such as " + dq + "if-statement" + dq + ", " + dq + "nested if-statement" + dq + ", " + dq + "repeat statement" + dq + ", " + dq + "nested repeat statement" + dq + ", " + dq + "action statement" + dq + ", etc. In that way we can examine the inside of each structure carefully to find any fraud in the logic. It is also helpful if we already know which part of the program function is behaving in an unexpected way. Then we can set the breakpoint at the beginning of the structure that involves the code that suppose to take care of the function in question.")
//        bodyDiv:Add(debug7)
//
//        bodyDiv:AddHeading("Coding Challenge 42 (Offline IDE)", 4)
//            Paragraph debug8
//                debug8:AddText("Let" + dq + "s use the 6-line-code below in the offline IDE, then set the breakpoint on line 3 - " + dq + "repeat while counter < 10" + dq + "")
//        bodyDiv:Add(debug8)
//
//        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "integer counter = 0" + cr
//                                                        +   "" + cr
//                                                        +   "repeat while counter < 10" + cr
//                                                        +   "   output counter" + cr
//                                                        +   "   counter = counter + 1" + cr
//                                                        +   "end" + cr))
//
//        bodyDiv:AddHeading("Running the code in debugging mode", 4)
//            Paragraph debug9
//                debug9:AddText("Once you have at least one breakpoint, you can start running the code in debugging mode. The following is the general process:")
//        bodyDiv:Add(debug9)
//            OrderedList debugList
//                debugList:AddListItem("You can press [control] + [fn] +  [F5 ] to start debugging mode. If you prefer you can click on the button that is to the right of the " + dq + "run button" + dq + " - (picture shown below)")
//                debugList:AddListItem("The IDE starts running your code, then announce " + dq + "breakpoint is hit at line (number)." + dq + " On the visual side, the iDE changes the hi-light color of the breakpoint from pink to green when the order of the code execution hits the breakpoint. ")
//                debugList:AddListItem("Once the IDE hits the breakpoint, it pauses the execution of the code at the breakpoint line. At this point you can press [fn] + [F7] to activate " + dq + "Step Into" + dq + "  function of the debugging mode. The " + dq + "step into" + dq + " means that you step into the structure line by line. If you prefer, you can click on the step into icon at the top (picture shown below)")
//                debugList:AddListItem("" + dq + "Step into" + dq + " ([fn] + [F7]) moves the coed execution indicator - hi-lighted line one line per one press. The IDE read the line of code the execution indicator is moved to. When you move the indicator to the next line, the IDE execute the code the indicator just left. ")
//                debugList:AddListItem("Press [fn] + [shift] + [F5] to end the debugging session if you like to end the program without running it" + dq + "s entirety.  Or Click on the " + dq + "Stop button" + dq + " (picture shown below)")
//        bodyDiv:Add(debugList)
//
//        bodyDiv:AddHeading("Debugging Mode Start Button", 5)
//        bodyDiv:AddImage("/files/code/Unit5/StartDebug.png", "Graphics: Debugging Mode Start Button")
//        bodyDiv:AddHeading("Breakpoint Hit", 5)
//        bodyDiv:AddImage("/files/code/Unit5/breakpoint-hit.png", "Graphics: Breakpoint Hit")
//        bodyDiv:AddHeading("Step-Into BUtton", 5)
//        bodyDiv:AddImage("/files/code/Unit5/StepInto.png", "Graphics: Step-Into BUtton")
//        bodyDiv:AddHeading("Stop Debugging Mode Button", 5)
//        bodyDiv:AddImage("/files/code/Unit5/StopDebug.png", "Graphics: Stop Debugging Mode Button")
//
//        bodyDiv:AddHeading("Coding Challenge 43 (Offline IDE)", 4)
//            Paragraph debug10
//                debug10:AddText("On the code we used for the Coding Challenge 42, practice using the " + dq + "Step Into" + dq + " function. Observe the order the computer execute your code. Pay attention to the output window of the offline IDE as it output the current value of the counter at given moment. Notice the execution indicator goes back to line 3 once it hit the " + dq + "end" + dq + ". it will happen for the times that you specified by your " + dq + "repeat while" + dq + " statement. The counter will give you a chance to keep track of the number of the repetition. Trying the debugging process on the same code with the line " + dq + "output counter" + dq + " in different position, may give you an insight on how to use this iterator in the real program construction.")
//        bodyDiv:Add(debug10)
//
//        bodyDiv:AddHeading("Coding Challenge 44: Writing a Loop From English (Offline IDE)", 4)
//            Paragraph debugComp
//                debugComp:AddText("This problem involves a " + dq + "repeat until" + dq + " loop problem. Take this statement in English and translate it into code:")
//        bodyDiv:Add(debugComp)
//            Paragraph debugComp1
//                debugComp1:AddText(dq + "Write a program that simulates the rolling of two dice. Keep rolling the dice UNTIL the sum of the dice is either a 7 OR an 11." + dq)
//        bodyDiv:Add(debugComp1)
//            Paragraph debugComp2
//                debugComp2:AddText("Your program should display the results of each roll so that you can determine if your code functions as expected. Here is a sample output:")
//        bodyDiv:Add(debugComp2)
//
//        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Rolled 5 and 5, sum is 10" + cr
//                                                        +   "Rolled 3 and 3, sum is 6" + cr
//                                                        +   "Rolled 1 and 4, sum is 4" + cr
//                                                        +   "Rolled 5 and 5, sum is 10" + cr
//                                                        +   "Rolled 4 and 1, sum is 5" + cr
//                                                        +   "Rolled 1 and 6, sum is 11" + cr
//                                                        +   "Done" + cr))

        bodyDiv:AddHeading("Defensive Loop Conditions", 4)
            Paragraph defCon
                defCon:AddText("Review the following code.")
        bodyDiv:Add(defCon)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "integer counter = 0" + cr
                                                        +   "" + cr
                                                        +   "repeat until counter = 30" + cr
                                                        +   "   counter = counter + 4" + cr
                                                        +   "   output counter" + cr
                                                        +   "end" + cr))

            Paragraph defCon1
                defCon1:AddText("This code will run into a significant problem. Can you understand why?")
        bodyDiv:Add(defCon1)
            Paragraph defCon2
                defCon2:AddText("We wanted to stop counting at 30, but when you count by 4's you will actually never hit 30. It would go... 24, 28, 32, 36... What we really want to do is stop when the number is greater than 30. This leads to an important defensive programming strategy: making the conditional catch more cases than you think you need, so that if something does not go exactly as planned the loop will hit the stop condition. This helps avoid creating an infinite loop.")
        bodyDiv:Add(defCon2)

        bodyDiv:AddHeading("Defense Conditioning", 4)

            Paragraph defCon3
                defCon3:AddText("Change the mathematical operator in the line " + dq + "repeat until counter = 30" + dq + " so that this code does not create an infinite loop.")
        bodyDiv:Add(defCon3)

        SideBySideIDE addStatementIDE3
        addStatementIDE3:SetUniqueIdentifier("Defense Conditioning")
        addStatementIDE3:GetIDETitle():AddText("Defensive Conditioning")
        addStatementIDE3:GetIDESubtitle():AddText("")
        addStatementIDE3:SetGameEnvironment(true)
        addStatementIDE3:GetIDEInputArea():AddText("integer counter = 0" + cr
                                                        +   "" + cr
                                                        +   "repeat until counter = 30" + cr
                                                        +   "   counter = counter + 4" + cr
                                                        +   "   output counter" + cr
                                                        +   "end" + cr)
        addStatementIDE3:Setup()
        bodyDiv:Add(addStatementIDE3)
        bodyDiv:Add(addStatementIDE3:GetGameCanvas())

        bodyDiv:AddHeading("Using an " + dq + "if-statement" + dq + " in a Loop", 4)
            Paragraph ifInLoop
                ifInLoop:AddText("As we have learned throughout this lesson, we can control how many times the loop would repeat by using a counter variable. This is a very common way to use an " + dq + "iterator." + dq)
        bodyDiv:Add(ifInLoop)
            Paragraph ifInLoop1
                ifInLoop1:AddText("Scenario: If you roll a pair of dice, rolling a 12 (two sixes) is rare. How rare? If you were to roll a pair of dice 1,000 times, on average, how many times would it come up as 12?")
        bodyDiv:Add(ifInLoop1)

        bodyDiv:AddHeading("Conditionals in a Loop", 4)
            Paragraph ifInLoop2
                ifInLoop2:AddText("To figure this out, we could write code to run an experiment. It would go something like this: declare another counter that counts the occurrences of a sum of 12 (and initialize it to 0). Make a loop that simulates rolling a pair of dice 1,000 times. Inside the loop, add an if statement: if die1 + die2 = 12, then add 1 to the " + dq + "sum12Counter." + dq + " * Display the result after the loop, as displaying it for each iteration of the loop could print the result up to 1,000 times, depending on luck.")
        bodyDiv:Add(ifInLoop2)

        Paragraph hint
            hint:SetClassAttribute("cool-box")
            Bold bold
            bold:AddText("Hint: ")
            hint:Add(bold)
            hint:AddText(" You will need to include the use statement of " + dq + "use Libraries.Compute.Random" + dq + " to create a variable of type " + dq + "Random," + dq + " and then simulate the roll of each individual die using " + dq + "random:RandomIntegerBetween(1, 6)." + dq)
        bodyDiv:Add(hint)

        SideBySideIDE addStatementIDE4
        addStatementIDE4:SetUniqueIdentifier("Conditionals in a Loop")
        addStatementIDE4:GetIDETitle():AddText("Conditionals in a Loop")
        addStatementIDE4:GetIDESubtitle():AddText("")
        addStatementIDE4:SetGameEnvironment(true)
        addStatementIDE4:Setup()
        bodyDiv:Add(addStatementIDE4)
        bodyDiv:Add(addStatementIDE4:GetGameCanvas())

//        bodyDiv:AddHeading("Exemplar Solution", 4)
//        bodyDiv:AddLink("Unit5Lesson11-ExemplarSolution.rtf", "/files/code/Unit5/Unit5Lesson11-ExemplarSolution.rtf")

        bodyDiv:AddHeading("Wrap Up", 2)

        bodyDiv:AddParagraph("After students finish the activity, start a class dicussion using the following prompt.")

            Paragraph wrapup
                wrapup:AddText("In your own words, describe how a " + dq + "repeat while" + dq + " and/or a " + dq + "repeat until" + dq + " works. Explain two things to pay attention to when creating these. In your response, justify why the name " + dq + "repeat while" + dq + " and " + dq + "repeat until" + dq + " accurately describes the behavior of these new programming constructs. Also think of some tips that help us to construct a " + dq + "valid" + dq + " loop structure, but does not negatively impact the code.")
        bodyDiv:Add(wrapup)
        bodyDiv:AddHeading("Sample Responses", 4)
            UnorderedList response
                response:AddListItem("It repeats a set of commands.")
                response:AddListItem("It continues to run " + dq + "while" + dq + " a boolean expression is true.")
                response:AddListItem("It is called a loop because it " + dq + "loops through" + dq + " a set of commands.")
                response:AddListItem("Something inside the while loop has to update the variable in the condition so the while loop will stop.")
                response:AddListItem("The " + dq + "repeat while" + dq + " may never run if the condition begins as false.")
                response:AddListItem("The " + dq + "repeat while" + dq + " loops become infinite loops if the condition will never be false.")
                response:AddListItem("Off-by-one errors are common with " + dq + "repeat while" + dq + " loops.")
        bodyDiv:Add(response)

        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","3.1.1 (A)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","4.1.1 (A, B, C, D, H)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","4.1.2 (A, B, C, D, E, F, G)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.2.1 (A, B, C, D, I, J, K)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.4.1 (B, E, F, G, H, K, L, M)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.5.1 (D, E, F, G)")
            bodyDiv:Add(list)

/* Completed 5/26/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn the use of Repeat While and Repeat Until"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 11: (Repeat While and Repeat Until)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 11"
    end
    action GetShortDescription returns text
        return "Learn the use of Repeat While and Repeat Until"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson11A.html"
    end

end

 
    
