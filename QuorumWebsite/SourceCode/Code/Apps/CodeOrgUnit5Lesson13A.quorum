use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit5Lesson13A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 13: Introduction to Arrays")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 13: Introduction to Arrays", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("This lesson introduces arrays as a means of storing lists of information within a program. The class begins by highlighting the difficulties that arise when trying to store lists of information in a variable. Students will then watch a short video introducing arrays and a subset of the operations that can be performed with them. They will work in the online or offline IDE for the remainder of the class as they practice using arrays in their programs. At the conclusion of the sequence, students build a simple app which can be used to store and cycle through a list of their favorite things. In the next lesson, they will continue working with a version of this app that can display and cycle through images, not just text strings.")
        bodyDiv:Add(ov1)
            

        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Array: ", "a data structure in JavaScript used to represent a list.")
                AddListItemWithBoldAtFront(voc, "List: ", "a generic term for a programming data structure that holds multiple items.")
//                AddListItemWithBoldAtFront(voc, "Index position.", " - A position/location in a array that contains one information")
        bodyDiv:Add(voc)


        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Identify an array as a data structure used to store lists of information in programs.")
                goalList:AddListItem("Create arrays and access information stored within them using an index.")
                goalList:AddListItem("Manipulate an array using the append, insert, and remove operations.")
                goalList:AddListItem("Account for the fact that Quorum Programming Language's arrays are zero-indexed when using them in a program.")
       bodyDiv:Add(goalList)


        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Some sort of list data structure is a component of almost all programming languages. A list allows large amounts of information to be easily referenced and passed around a program, and the use of a numeric index allows individual items in a list to be accessed. Historically a list would have literally been a single contiguous chunk of memory and the index or address was used to know how far into that chunk a relevant piece of information was stored. In many modern languages, however, it is more likely that the items in an array are stored at many locations on your computer's hard drive, and the index is only useful to help the programmer identify different components. In this way, a Quorum Programming Language's array is actually another example of abstraction. We know that it is holding a list of related information, but we don't need to think about the actual implementation details.")
        bodyDiv:Add(purpose)


        bodyDiv:AddHeading("Introduced Code", 2)
            UnorderedList code
                AddListItemWithBoldAtFront(code, "Array&lt;integer&gt; arrayOfIntegers", "")
                AddListItemWithBoldAtFront(code, "arrayOfIntegers:Add(100)", "")
                AddListItemWithBoldAtFront(code, "value = arrayOfInteger:Get(1)", "")
                AddListItemWithBoldAtFront(code, "output arrayOfInteger:Get(1)", "")
                AddListItemWithBoldAtFront(code, "ArrayOfIntegers:Get(2 + 3)", "")
                AddListItemWithBoldAtFront(code, "ArrayOfIntegers:Get(X + 4)", "")
                AddListItemWithBoldAtFront(code, "ArrayOfIntegers:Get(random:RandomIntegerBetween(0, 9))", "")
                AddListItemWithBoldAtFront(code, "value = arrayOfIntegers:Get(0) + arrayOfIntegers:Get(9)", "")
                AddListItemWithBoldAtFront(code, "arrayOfIntegers:Add(4, 20)", "")
                AddListItemWithBoldAtFront(code, "arrayOfIntegers:RemoveAt(4)", "")
        bodyDiv:Add(code)


        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("Today we're going to start examining how we can use lists in programs, but before we dive into that, let's think about why we would want to in the first place. What are the benefits of creating lists? Why is it helpful to keep information in lists?")
        bodyDiv:Add(getStart)
            UnorderedList startList
                startList:AddListItem("Lists help us organize information.")
                startList:AddListItem("Lists help us collect all the relevant information in one place.")
                startList:AddListItem("Lists show that a lot of ideas are related.")
                startList:AddListItem("Lists help us order or prioritize ideas.")
                startList:AddListItem("Lists help us think about the big picture.")
        bodyDiv:Add(startList)

        bodyDiv:AddParagraph("There are a lot of benefits to keeping lists of information in real life. Since we use programming to solve a lot of similar problems, we would like to keep lists of information in our programs, too.  Right now, the only way we know how to store information in our programs is with a variable, but each variable can only store a single piece of information.  Today we'll be learning about a new programming construct that will allow us to hold as many pieces of information as we want within a single list.")

        bodyDiv:AddParagraph("The following video explains several properties of lists that will be explored in this lesson's programming exercises.")

        InlineFrame inlineFrame
        inlineFrame:SetAddress(" https://www.youtube.com/embed/KFy7u3Rhozs")
        inlineFrame:SetHeight("480")
        inlineFrame:SetWidth("854")
        bodyDiv:Add(inlineFrame)

        UnorderedList vid
            vid:AddListItemLink("Video Link: Introduction to Lists", " https://www.youtube.com/watch?v=KFy7u3Rhozs")
        bodyDiv:Add(vid)


        bodyDiv:AddHeading("Activity", 2)

        bodyDiv:AddParagraph("This lesson's programming exercises are designed to introduce students to Arrays. The first exercise introduces how indexing works with Arrays. Next, students use an Array to perform arithmetic between values at different indexes. The subsequent exercise teaches students how to remove a value from an index in an Array. Then students are walked through an example of code that demonstrates how to insert values into an Array at a certain index. Finally, students learn how to use the " + dq + "Size" + dq + " action of an Array to get the number of elements contained inside it.")
        bodyDiv:AddParagraph("After learning how to use Arrays, students conclude this activity by creating the " + dq + "My Favorite Things" + dq + " App, a program that uses an Array of text variables and allows user input to retrieve the data stored at a specific index, or to insert new data at an index.")

        bodyDiv:AddHeading("Student Instructions", 3)

            Paragraph array
                array:AddText("Arrays have many features which make them different from variables and/or objects, but most of what you've learned about variables and/or objects also applies to arrays. For example:")
        bodyDiv:Add(array)
            UnorderedList arrayList
                arrayList:AddListItem("Arrays should be given a descriptive and meaningful name.")
                arrayList:AddListItem("Arrays are created, using the general process of OPP (Object Oriented Programming).")
                arrayList:AddListItem("You place the use statement for the Array class at the beginning of your program.")
                arrayList:AddListItem("You instantiate an object(s) for an Array(s).")
                arrayList:AddListItem("You need to specify what type of data/value will be stored into the array.")
                arrayList:AddListItem("You call a specific action on the Array object to make use of the array.")
        bodyDiv:Add(arrayList)

        bodyDiv:AddHeading("Creating an Array, and Adding Data in the Array", 4)
        bodyDiv:AddParagraph("Consider the following code.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Containers.Array" + cr
                                                        +   "Array&lt;integer&gt; arrayOfIntegers" + cr
                                                        +   "" + cr
                                                        +   "arrayOfIntegers:Add(100)" + cr
                                                        +   "arrayOfIntegers:Add(250)" + cr
                                                        +   "arrayOfIntegers:Add(500)" + cr))

            Paragraph array1
                array1:AddText("We specified this array to contain integer type values, and called it " + dq + "arrayOfIntegers." + dq + " We called the action " + dq + "Add(integer)" + dq + " to add integer values to this array. This array contains 3 values: 100, 250, 500.")
        bodyDiv:Add(array1)

        bodyDiv:AddHeading("Retrieving data from an Array", 4)
            Paragraph array2
                array2:AddText("In Quorum, you can get specific data stored in an Array. Let's use the array that we created in the example above. In this array, we have three index positions: 0, 1 and 2. The index position in an array always starts from " + dq + "0." + dq + " In this array the index " + dq + "0" + dq + " contains the integer 100, " + dq + "1" + dq + " contains 250, and " + dq + "2" + dq + " contains 500.")
        bodyDiv:Add(array2)
            Paragraph array3
                array3:AddText("There are several actions we can use to retrieve data from an array in the Quorum Programming Language. In this section, we will learn how to retrieve a value from a specific index position.")
        bodyDiv:Add(array3)

            Paragraph array4
                array4:AddText("Let's use the array we created in the code example above, and retrieve the data in position " + dq + "1." + dq)
        bodyDiv:Add(array4)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "integer value = 0" + cr
                                                        +   "value = arrayOfInteger:Get(1)" + cr
                                                        +   "output value" + cr
                                                        +   "" + cr
                                                        +   "//(Or, just simply:)" + cr
                                                        +   "output arrayOfInteger:Get(1)" + cr))

            Paragraph array5
                array5:AddText("When you run this code, you will get the output " + dq + "250," + dq + " because the index " + dq + "1" + dq + " contains the integer 250.")
        bodyDiv:Add(array5)

            Paragraph array6
                array6:AddText("Create an array that contains the integers from 1 to 10 in the first ten index positions (0 - 9). Retrieve the data from a specific index to check that your array is working. Run the code several times while changing the index position.")
        bodyDiv:Add(array6)

        SideBySideIDE addStatementIDE
        addStatementIDE:SetUniqueIdentifier("Retrieving data from an index position")
        addStatementIDE:GetIDETitle():AddText("Retrieving data from an index position")
        addStatementIDE:GetIDESubtitle():AddText("")
        addStatementIDE:SetGameEnvironment(true)
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)
        bodyDiv:Add(addStatementIDE:GetGameCanvas())

        bodyDiv:AddHeading("Expressions as Indexes: Using Variables", 4)
            Paragraph array7
                array7:AddText("We can use any expression that evaluates to a number as an index in an array. Here are some examples:")
        bodyDiv:Add(array7)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "ArrayOfIntegers:Get(2 + 3)" + cr
                                                        +   "ArrayOfIntegers:Get(X + 4)" + cr
                                                        +   "ArrayOfIntegers:Get(random:RandomIntegerBetween(0, 9))" + cr))

            Paragraph array8
                array8:AddText("You can reference locations in arrays within arithmetic expressions, just like you might with a variable.")
        bodyDiv:Add(array8)
            Paragraph array9
                array9:AddText("You will be modifying the code in your program (from the previous exercise) that calculates the sum of the values in the array. Let's say you would like your program to add the data at index " + dq + "0" + dq + " and index " + dq + "9." + dq + " There are several ways to do this, but one example is:")
        bodyDiv:Add(array9)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "value = arrayOfIntegers:Get(0) + arrayOfIntegers:Get(9)" + cr
                                                        +   "output value" + cr))

        bodyDiv:AddHeading("Array Arithmetic", 4)
            Paragraph array10
                array10:AddText("Try creating other types of Arithmetic calculation using arrays.")
        bodyDiv:Add(array10)

        SideBySideIDE addStatementIDE2
        addStatementIDE2:SetUniqueIdentifier("Array Arithmetic")
        addStatementIDE2:GetIDETitle():AddText("Array Arithmetic")
        addStatementIDE2:GetIDESubtitle():AddText("")
        addStatementIDE2:SetGameEnvironment(true)
        addStatementIDE2:Setup()
        bodyDiv:Add(addStatementIDE2)
        bodyDiv:Add(addStatementIDE2:GetGameCanvas())

        bodyDiv:AddHeading("Removing a Value from an Array", 4)
            Paragraph array11
                array11:AddText("You can also remove an existing value from a specific index position. When you do this, however, remember that the value inside the same index position is replaced by the value that previously followed it. This means that you are shortening the length of array by one when you remove one value. For example, when we have the following code segment:")
        bodyDiv:Add(array11)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "integer value = 0" + cr
                                                        +   "value = arrayOfIntegers:RemoveAt(4)" + cr
                                                        +   "output value" + cr
                                                        +   "" + cr
                                                        +   "output arrayOfIntegers:Get(9)" + cr))

            Paragraph array11_1
                array11_1:AddText("This code will give you an error saying something like " + dq + "There is no such index position in your array." + dq + " You need to change the " + dq + "Get(9)" + dq + " action call to " + dq + "Get(8)," + dq + " to retrieve the expected value of 10.  This is because, after the " + dq + "RemoveAt(4)" + dq + " action call, the resulting array contains the list of  (1, 2, 3, 4, 6, 7, 8, 9, 10)")
        bodyDiv:Add(array11_1)

            Paragraph array12
                array12:AddText("Go ahead and try removing a value in a index, then retrieve a value in newly refreshed index position.")
        bodyDiv:Add(array12)

        SideBySideIDE addStatementIDE3
        addStatementIDE3:SetUniqueIdentifier("Removing a value from an Array")
        addStatementIDE3:GetIDETitle():AddText("Removing a value from an Array")
        addStatementIDE3:GetIDESubtitle():AddText("")
        addStatementIDE3:SetGameEnvironment(true)
        addStatementIDE3:Setup()
        bodyDiv:Add(addStatementIDE3)
        bodyDiv:Add(addStatementIDE3:GetGameCanvas())

        bodyDiv:AddHeading("Inserting a value at given index position", 4)
            Paragraph array13
                array13:AddText("Now, assuming you have tried the previous exercises, we will now learn how to place a new value in any index position, thus extending the length of index by one. We start the process with observing the following code:")
        bodyDiv:Add(array13)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Containers.Array" + cr
                                                        +   "Array&lt;integer&gt; arrayOfIntegers" + cr
                                                        +   "" + cr
                                                        +   "arrayOfIntegers:Add(1)" + cr
                                                        +   "arrayOfIntegers:Add(2)" + cr
                                                        +   "//(Keep adding the consecutive number up to 10)" + cr
                                                        +   "" + cr
                                                        +   "integer value = 0" + cr
                                                        +   "value = arrayOfIntegers:RemoveAt(4)" + cr
                                                        +   "output value" + cr
                                                        +   "" + cr
                                                        +   "output arrayOfIntegers:Get(8)" + cr
                                                        +   "arrayOfIntegers:Add(4, 20)" + cr
                                                        +   "output arrayOfIntegers:Get(9)" + cr
                                                        +   "output arrayOfIntegers:Get(4)" + cr))

            Paragraph array14
                array14:AddText("When you run this code, you should get the output:")
        bodyDiv:Add(array14)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "5" + cr
                                                        +   "10" + cr
                                                        +   "10" + cr
                                                        +   "20" + cr))

            Paragraph array15
                array15:AddText("This means that you array now have the list of (1, 2, 3, 4, 20, 6, 7, 8, 9, 10).")
        bodyDiv:Add(array15)

        bodyDiv:AddHeading("Creating an action that replaces a value in a specific index position", 4)
            Paragraph arrayAction
                arrayAction:AddText("Quorum Programming Language has a special function that allows a programmer to write a simple code without establishing formal code structure in the code. Up to this point in this lesson, we have been taking advantage of this function of the language to make our learning easier for the topic of arrays. When we start creating actions, however, the Quorum language will require us to establish a structure in the code. The following code example shows how to structure our code, as well as how we can create an action for replacing the value at specific index position in an array.")
        bodyDiv:Add(arrayAction)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Containers.Array" + cr
                                                        +   "class Main" + cr
                                                        +   "   Array&lt;integer&gt; arrayOfIntegers" + cr
                                                        +   "" + cr
                                                        +   "   action Main" + cr
                                                        +   "       arrayOfIntegers:Add(1)" + cr
                                                        +   "       arrayOfIntegers:Add(2)" + cr
                                                        +   "       // (Keep adding the number up to 10)" + cr
                                                        +   "" + cr
                                                        +   "       ReplacingValueAt(4, 20)" + cr
                                                        +   "       output arrayOfIntegers:Get(4)" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "   action ReplacingValueAt(integer index, integer value)" + cr
                                                        +   "       arrayOfIntegers:RemoveAt(index)" + cr
                                                        +   "       arrayOfIntegers:Add(index, value)" + cr
                                                        +   "   end" + cr
                                                        +   "end" + cr))

            Paragraph arrayAction1
                arrayAction1:AddText("We have encountered this kind of structure so many times already in the previous lessons, even back to Unit 3. The first and most important idea of formal structuring is " + dq + "A program needs to have a class 'Main' that has an action 'Main' inside of it." + dq)
        bodyDiv:Add(arrayAction1)
            Paragraph arrayAction2
                arrayAction2:AddText("When we have this base structure to start with, then we can write another action outside of the action " + dq + "Main," + dq + " and call the action in the action " + dq + "Main." + dq + " The computer only executes whatever appears in the action " + dq + "Main." + dq)
        bodyDiv:Add(arrayAction2)
            Paragraph arrayAction3
                arrayAction3:AddText("The rest of this code should be relatively self explanatory. We just created the action " + dq + "ReplacingValueAt(integer index, integer value)" + dq + " that calls a couple of actions (we have learned previously) inside. Then we called this action in the action " + dq + "Main" + dq + " so that the computer will execute the action with the specified parameters.")
        bodyDiv:Add(arrayAction3)

        bodyDiv:AddHeading("Arrays Can Hold Other Variables", 4)
            Paragraph arrayAction4
                arrayAction4:AddText("So far we have been using arrays to hold integers, but each location in an array could hold other type of values instead. The following are examples:")
        bodyDiv:Add(arrayAction4)

        bodyDiv:AddHeading("Array of Numbers ", 4)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Containers.Array" + cr
                                                        +   "" + cr
                                                        +   "Array&lt;number&gt; arrayOfNumbers" + cr
                                                        +   "" + cr
                                                        +   "arrayOfNumbers:Add(2.04)" + cr
                                                        +   "arrayOfNumbers:Add(3.45)" + cr
                                                        +   "arrayOfNumbers:Add(12.67)" + cr))

        bodyDiv:AddHeading("Array of Text", 4)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "Array&lt;text&gt; arrayOfTexts" + cr
                                                        +   "" + cr
                                                        +   "arrayOfTexts:Add(" + dq + "John" + dq + ")" + cr
                                                        +   "arrayOfTexts:Add(" + dq + "Alexis" + dq + ")" + cr
                                                        +   "arrayOfTexts:Add(" + dq + "Michael" + dq + ")" + cr))

//        bodyDiv:AddHeading("Processing Lists", 4)
//
//        InlineFrame inlineFrame1
//        inlineFrame1:SetAddress("https://www.youtube.com/embed/RQ6GJt9f2vg")
//        inlineFrame1:SetHeight("480")
//        inlineFrame1:SetWidth("854")
//        bodyDiv:Add(inlineFrame1)
//
//        UnorderedList vid1
//            vid1:AddListItemLink("Video: Processing Lists", "https://www.youtube.com/watch?v=RQ6GJt9f2vg")
//        bodyDiv:Add(vid1)

        bodyDiv:AddHeading("Array Size", 4)
            Paragraph length
                length:AddText("As we saw in the previous exercise, there are many strange behaviors that can result from referencing array indexes that are less than 0 or greater than the highest index in your array. To help avoid these kinds of errors, it is useful to know how long your array is, especially since we know that arrays can grow and shrink during the course of our program.")
        bodyDiv:Add(length)
            Paragraph length1
                length1:AddText("You can always check the current length of your array by calling the action " + dq + "GetSize" + dq + " on an array object. It evaluates to a number indicating how many items are in your array.")
        bodyDiv:Add(length1)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "output arrayOfIntegers:GetSize()" + cr))

            Paragraph length2
                length2:AddText("Remember: this is NOT THE INDEX NUMBER. This is the size. If the size is (10), your array has indexes from 0 to 9.")
        bodyDiv:Add(length2)

            Paragraph length3
                length3:AddText("Copy your code from the previous exercise into the below IDE. Place the line of code above at the end of action " + dq + "Main" + dq + " in your ongoing code to check the size of your array.")
        bodyDiv:Add(length3)

        SideBySideIDE addStatementIDE4
        addStatementIDE4:SetUniqueIdentifier("Array Size")
        addStatementIDE4:GetIDETitle():AddText("Array Size")
        addStatementIDE4:GetIDESubtitle():AddText("")
        addStatementIDE4:SetGameEnvironment(true)
        addStatementIDE4:Setup()
        bodyDiv:Add(addStatementIDE4)
        bodyDiv:Add(addStatementIDE4:GetGameCanvas())

        bodyDiv:AddHeading("Expressions as Indexes: arrayOfInteger:GetSize() - 1", 4)
            Paragraph length4
                length4:AddText("We have been accessing information in an array by using numbers, but we can actually use any expression that evaluates to a number as an index in our array. The first example of this we will explore is accessing the last item in our array.")
        bodyDiv:Add(length4)
            Paragraph length5
                length5:AddText("Arrays are zero-indexed, which means that the first index is 0. Therefore an array with a length of 3 will have indexes 0, 1, and 2. Notice that the last index is 1 less than the length. This will always be the case, and so we can use this expression to access the last element in any array:")
        bodyDiv:Add(length5)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "arrayOfIntegers:Get(arrayOfInteger:GetSize() - 1)" + cr))

        bodyDiv:AddHeading(dq + "My Favorite Things" + dq + " App", 3)
            Paragraph myFav
                myFav:AddText("Check out this simple app for creating a collection of your favorite things. We're going to be working towards building this app over the next several exercises. As you might expect, this application uses an array to store and organize information.")
        bodyDiv:Add(myFav)
            Paragraph myFav1
                myFav1:AddText("Use the " + dq + "My Favorite Things" + dq + " app and try to predict how arrays are used to create the functionality you observe. Some features to notice are:")
        bodyDiv:Add(myFav1)
            UnorderedList myFavList
                myFavList:AddListItem("The app keeps track of a list of your favorite things.")
                myFavList:AddListItem("The current entry and total number of entries are indicated at the top.")
                myFavList:AddListItem("You may add a new entry at the current location in your list.")
        bodyDiv:Add(myFavList)

        bodyDiv:AddHeading("Create Your Array", 4)
            Paragraph myFav2
                myFav2:AddText("Let's create an Array of text variables, and then add five text values in it. Your code should be similar to this:")
        bodyDiv:Add(myFav2)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Containers.Array" + cr + cr
                                                        +   "Array&lt;text&gt; myFavorite" + cr
                                                        +   "" + cr
                                                        +   "   myFavorite:Add("+dq+"Succor"+dq+")" + cr
                                                        +   "   myFavorite:Add("+dq+"Video Game"+dq+")" + cr
                                                        +   "   myFavorite:Add("+dq+"Eating Out"+dq+")" + cr
                                                        +   "   myFavorite:Add("+dq+"Drawing"+dq+")" + cr
                                                        +   "   myFavorite:Add("+dq+"Jogging"+dq+")" + cr))

        bodyDiv:AddHeading("Create a mechanism that allows the user to input the index position, then cast it to the calculable integer value.", 4)
            Paragraph myFav3
                myFav3:AddText("You have learned all the coding syntax required to create this mechanism. This part of the code should be something like this:")
        bodyDiv:Add(myFav3)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "text userInput = input("+dq+"Enter the index number to retrieve the information. The current highest index number is " +dq+" + (myFavorite:GetSize() - 1) + "+dq+". If you would like to add new information in the current index position, type in '-1'."+dq+")" + cr
                                                        +   "" + cr
                                                        +   "integer userChoice = cast(integer, userInput)" + cr))

        bodyDiv:AddHeading("Create the code block that allows the user to add new information at the current index position", 4)
            Paragraph myFav4
                myFav4:AddText("We need to use some new sytax for this part. You need to call an action from the Array class on your array object. The action is " + dq + "Add(index, value)." + dq + " That part of the code should be something like this:")
        bodyDiv:Add(myFav4)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "integer currentIndex = 0 //This variable needs to be declared before any structure." + cr
                                                        +   "" + cr
                                                        +   "text newInput = input("+dq+"Add a new value at the current index"+dq+")" + cr
                                                        +   "myFavorite:Add(currentIndex, newInput)" + cr))

        bodyDiv:AddHeading("Create the mechanism that keeps the user input within your array's size boundary.", 4)
            Paragraph myFav5
                myFav5:AddText("This is a tricky one, but we will use the if-elseif-else statement structure to create this mechanism. For the purpose of this code, we will have the user input any negative number to give them a chance to input new information. So, the " + dq + "if" + dq + " part would be:")
        bodyDiv:Add(myFav5)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "if userChoice < 0" + cr))

            Paragraph myFav6
                myFav6:AddText("Now, for the " + dq + "elseif," + dq + " we will use the (Size - 1) expression so that the user input does not go beyond the size of the array. So, the code would be:")
        bodyDiv:Add(myFav6)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "elseif userChoice <= (myFavorite:GetSize() - 1)" + cr))

            Paragraph myFav7
                myFav7:AddText("For the " + dq + "else," + dq + " we will output a warning to the user that the number is exceeded the boundary of the array. The code should be something like:")
        bodyDiv:Add(myFav7)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "else" + cr
                                                        +   "   output "+dq+"The index number does not exist at this point."+dq+ cr
                                                        +   "end" + cr))

            Paragraph myFav8
                myFav8:AddText("Finally, if you just use this if-elseif-else statement, you need to re-run the program each time you want to determine  how it works. So, for the purpose of your observation, let's enclose this if-statement inside of a " + dq + "repeat 5 times" + dq + " loop. Thus, the empty structure of this code should be something like:")
        bodyDiv:Add(myFav8)

        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "// (use statement)" + cr
                                                        +   "// (Instantiating an array object)" + cr
                                                        +   "// (Adding Initial data in the array)" + cr
                                                        +   "" + cr
                                                        +   "integer currentIndex = 0" + cr
                                                        +   "" + cr
                                                        +   "repeat 5 times" + cr
                                                        +   "   //(Getting the user input and casting goes in here)" + cr
                                                        +   "   " + cr
                                                        +   "   if userChoice  <  0" + cr
                                                        +   "       //(Getting new information from the user goes in here.)" + cr
                                                        +   "   elseif userChoice <= (myFavorite:GetSize() - 1)" + cr
                                                        +   "      //(outputting current array size, current index, and the information at the index goes in here)" + cr
                                                        +   "       currentIndex = userChoice " + cr
                                                        +   "   else" + cr
                                                        +   "       output "+dq+"The index number does not exist at this point" +dq+ cr
                                                        +   "   end" + cr
                                                        +   "end" + cr))

        bodyDiv:AddHeading("Putting it all together", 4)
            Paragraph myFav9
                myFav9:AddText("Using the template above as a guideline, put the previous code blocks (after the heading " + dq + "My Favorite Things" + dq + " App) together to complete the app. Test the app several times to observe and learn how the array works in the active program. If you are using the online IDE below, note that you will be prompted all five inputs before the output is reflected on the screen.")
        bodyDiv:Add(myFav9)

        SideBySideIDE addStatementIDE5
        addStatementIDE5:SetUniqueIdentifier(dq + "My Favorite Things" + dq + " App")
        addStatementIDE5:GetIDETitle():AddText(dq + "My Favorite Things" + dq + " App")
        addStatementIDE5:GetIDESubtitle():AddText("")
        addStatementIDE5:SetGameEnvironment(true)
        addStatementIDE5:Setup()
        bodyDiv:Add(addStatementIDE5)
        bodyDiv:Add(addStatementIDE5:GetGameCanvas())

        bodyDiv:AddHeading("Keep Going!", 3)
            Paragraph myFav10
                myFav10:AddText("Your app should now be fully functional - nice job! There are, of course, plenty of new pieces of functionality that can be added. If you have time, feel free to make any improvements you wish. Here are some ideas:")
        bodyDiv:Add(myFav10)
            UnorderedList myFavList1
                myFavList1:AddListItem("Give the user the ability to remove the item at the current index.")
                myFavList1:AddListItem("Allow user to replace the value at current index position.")
        bodyDiv:Add(myFavList1)

        bodyDiv:AddHeading("Wrap Up", 2)
            Paragraph wrapup
                wrapup:AddText("Students now know how to store information in both variables and arrays. The following prompts should synthesize their new knowledge by trying to develop a rule for when to use a variable vs. an array.")
        bodyDiv:Add(wrapup)
            Paragraph wrapup1
                wrapup1:AddText("Your app needs to store the following information. Decide whether you should use an array or a variable to store it.")
        bodyDiv:Add(wrapup1)
            UnorderedList wrapupList
                wrapupList:AddListItem("All the messages a user has sent")
                wrapupList:AddListItem("The highest score a user has ever reached on the app")
                wrapupList:AddListItem("A username and password to unlock the app")
        bodyDiv:Add(wrapupList)
            Paragraph wrapup2
                wrapup2:AddText("In general, when do you think you should store information in an array, and when should you use a variable?")
        bodyDiv:Add(wrapup2)
            UnorderedList wrapupList1
                wrapupList1:AddListItem("Variables store single pieces of information, while arrays store many.")
                wrapupList1:AddListItem("An array can grow in size to accommodate more information.")
                wrapupList1:AddListItem("Arrays are slightly more complex to use than variables. If you are only going to be storing a small and fixed amount of information, it is probably appropriate to use multiple variables.")
        bodyDiv:Add(wrapupList1)
            Paragraph wrapup4
                wrapup4:AddText("We are going to keep exploring arrays in the coming lessons. Encourage students to consider some of the distinctions we just discussed, and to keep thinking about how they might want to use arrays in applications of their own.")
        bodyDiv:Add(wrapup4)

        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","1.1.1 (B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.1.2 (A)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.3.1 (A, B, C, K, L)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.5.1 (H, I, J)")
            bodyDiv:Add(list)

/* Completed 5/26/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn the concept of Arrays'"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 13: (Introduction to Arrays)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 13"
    end
    action GetShortDescription returns text
        return "Learn the concept of Arrays"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson13A.html"
    end

end

 
    
