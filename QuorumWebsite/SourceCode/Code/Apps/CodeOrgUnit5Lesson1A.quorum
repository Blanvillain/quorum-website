use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame
use Libraries.Web.Page.Link

class CodeOrgUnit5Lesson1A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 1: Introduction to Event-Driven Programming")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 1: Introduction to Event-Driven Programming", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box
        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")

        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")


        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

            Paragraph note
                note:SetClassAttribute("cool-box")
                note:AddText("Note - This Unit has an optional Lesson at the end of it which requires students to have access to the code they've written for previous Lessons. If you would like to do this optional Lesson, have students save their work in a text editor. Alternatively, students can create a Quorum account and save their projects to the website.")
        bodyDiv:Add(note)

        bodyDiv:AddHeading("Overview", 2)
            
            Paragraph ov1
                ov1:AddText("In this lesson students will learn how to create User 
                Interface (UI) elements and add <b>event-handlers</b> to a program. 
                Students also explore some common errors that come up in 
                event-driven programming and will learn some important skills for debugging programs. ")
                //ov1:AddText("In this lesson we are learning the basic concept and one of the way to write 'Event Driven Program' in Quorum Programming Language. In the process you will be introduced to 'Quorum Game Engine', and will learn the basics structure of the engine. The actual use of the engine may not be clear in this lesson. You will learn every part of of the engine and how to write you code in the part step by step in the following lessons. you will be also introduced to the concept of 'Debugging' in this lesson Throughout this lesson we will use the familiar Quorum Turtle Module(QTM) to make it easier for you to understand the 'Event Driven Programming'. However, this lesson will be the last lesson we use the QTM - as we will go into more basics and detail of the computer programming with Quorum Language in the rest of the lessons in Unit 5.")
        bodyDiv:Add(ov1)
//        bodyDiv:Add(break)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Callback function: ", "a function specified as part of an event listener; it is written by the programmer but called by the system as the result of an event trigger.")
                AddListItemWithBoldAtFront(voc, "Event: ", "an action that causes something to happen.")
                AddListItemWithBoldAtFront(voc, "Event-driven program: ", "a program designed to run blocks of code or functions in response to specified events (e.g. a mouse click)")
                AddListItemWithBoldAtFront(voc, "Event handling: ", "an overarching term for the coding tasks involved in making a program respond to events by triggering actions.")
                AddListItemWithBoldAtFront(voc, "Event listener: ", "a command that can be set up to trigger an action when a particular type of event occurs on a particular UI element.")
                AddListItemWithBoldAtFront(voc, "User Interface (UI): ", "the visual elements of a program through which a user controls or communicates with the application. Often abbreviated UI.")
                AddListItemWithBoldAtFront(voc, "UI Elements: ", "on-screen objects, like buttons, images, text boxes, pull-down menus, screens and so on.")
        bodyDiv:Add(voc)
//        bodyDiv:Add(break)
//        bodyDiv:Add(break)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Understand the structure of the Quorum Game Engine.")
                goalList:AddListItem("Create a simple event-driven program using &quotKeyboard Handling&quot")
                //goalList:AddListItem("Understanding basic idea of the technical term 'object', and understanding the basic idea of Object Oriented Programming")
                goalList:AddListItem("Recognize and respond to error messages by &quotdebugging&quot - an important step in developing a program.")
                goalList:AddListItem("Debug simple issues related to event-driven programming")
        bodyDiv:Add(goalList)
//        bodyDiv:Add(break)
//        bodyDiv:Add(break)



       bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Most modern applications are interactive, responding 
                to when users press a key on a keyboard, click buttons, type in a text-box, 
                tilt the screen, swipe between screens, etc. In every instance, the user's 
                action is generating some kind of event and the program responds by running 
                an associated block of code. Programming a modern application is therefore 
                typically an exercise in creating a user interface and then defining what 
                will happen when the user interacts with that interface.")
        bodyDiv:Add(purpose)
            Paragraph purpose2
                purpose2:AddText("The &quotevent-driven&quot mindset of programming can take a 
                little getting used to. Often when learning, you write sequential programs 
                that run from the start (usually the first line of the program) to the end, or 
                to some point when the program terminates. In an event-driven program your 
                code must always be ready to respond to user events, like clicking 
                a button, which may happen at any time, or not at all. More complex 
                event-driven programs require interplay and coordination between so-called 
                &quotevent handlers&quot - which are actions that the programmer writes, but are 
                triggered by the system in response to certain events. This lesson is a first 
                step toward getting into this mindset.")
        bodyDiv:Add(purpose2)

        //bodyDiv:AddHeading("Background", 2)
            Paragraph bg
                bg:AddText("Modern programming is often event-driven rather than sequential. 
                Sequential programs start at a beginning point and progress to the end 
                point in a way that can be perfectly predicted when the program begins 
                running. Event-driven programs on the other hand do not progress in a predictable order. 
                User-generated events (e.g. mouse clicks, button press, key presses, etc.) 
                are each handled individually. For 
                example, a program may have two buttons, one to start a timer and one to stop the
                timer. In the program's code each button would have a different block of code to implement the separate and
                different action that the user expects the button to produce. Event-driven 
                programs like these are dynamic, but also bring challenges since you don't 
                know the order in which user-events may occur. This can lead to unpredictable 
                program execution and another set of challenges.")
        bodyDiv:Add(bg)

        /*bodyDiv:AddHeading("Introduced Code", 2)
            UnorderedList code
                AddListItemWithBoldAtFront(code, "use Libraries.Interface.Events.KeyboardEvent", " - With this line you are telling the computer that you will be using one of the supporting class files from the Quorum Standard Library - called 'KeyboardEvent' class. In other language this type of statement is called 'import'.")
                AddListItemWithBoldAtFront(code, "use Libraries.Interface.Events.KeyboardListener", " - This statement uses(imports) the 'KeyboardListener' class for you project. Because of the support from this class, your program will have a chance to respond to the UI, intros case 'Keyboard Input'.")
                AddListItemWithBoldAtFront(code, "action PressedKey(KeyboardEvent event)", " - This action is called PressedKey() and it takes a parameter of type KeyboardEvent called event. This action responds to a KeyboardEvent where the user pressed a key. ")
                AddListItemWithBoldAtFront(code, "event:keyCode = event:UP", " - This is a pattern of code expression you can use inside of the action 'PressedKey()' It is a boolean expression comparing two events one called keyCode the other called Up. This comparison is useful to determine which key was pressed.")
                AddListItemWithBoldAtFront(code, "if, elseif, end", " - One of the essential conditional structure we used in most programming languages. An 'if else end' statement uses comparisons to make choices. In this lesson, this structure is used only as a template.")
        bodyDiv:Add(code)*/
//        bodyDiv:Add(break)






        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddHeading("What events do familiar apps use to be interactive?", 4)
            Paragraph getStart
                getStart:AddText("Ask students to think of a favorite app and make
                a quick list of everything in that app that they would &quotinteract&quot
                with as a user. Then have your students write down one action-and-reaction
                of the app; one thing you do, and how the app responds. Likely events will
                include things like: ")
        bodyDiv:Add(getStart)
            UnorderedList list1
                list1:AddListItem("clicking a button")
                list1:AddListItem("swiping a screen")
                list1:AddListItem("dragging your finger")
                list1:AddListItem("tilting a phone or tablet")
                list1:AddListItem("pressing a key, etc.")
        bodyDiv:Add(list1)
        bodyDiv:AddParagraph("Modern apps are interactive because they can respond
        to this and other forms of user input (i.e., human-generated events). 
        We may not understand all the technical details yet, but it 
        seems clear that most applications we use respond to events 
        of some kind. Whether we're clicking a button or pressing a 
        key, the computer is sensing events that we generate in order 
        to determine how the application should run. Today, we're 
        going to start exploring how event-driven programming makes 
        this possible.")
                /*
                getStart:AddText("Apps have elements(eg. buttons or text labels) on 
                the screen that you can interact with (i.e. causing user-generated 
                events). Apps respond to these events in various ways. The program 
                'listens' for types of events we can program with like: mouse click 
                or movement, typing keys on the keyboard, etc. in combination with 
                types of screen elements you can perform those actions on like: 
                buttons, menus, text fields, images, etc.")
                */
        bodyDiv:AddHeading("Teaching Tip: ", 4)
        Paragraph tip1
            tip1:SetClassAttribute("cool-box")
            tip1:AddText("Technical knowledge of how modern applications work is not 
            necessary to run this discussion, and the conversation itself should avoid 
            being overly technical. For now, the point is to get the language of 
            <b>events</b> out in the open. " )
            tip1:AddText("Apps have elements on the screen that you can interact with 
            (i.e. cause user-generated events) and respond to these <b>events</b> 
            in various ways. " )
            tip1:AddText("You want to be on the lookout for <b>types of events</b> we can 
            program with like: mouse click or movement, typing keys on the 
            keyboard, etc. in combination with <b>types of screen elements</b> 
            you can perform those actions on like: buttons, menus, text 
            fields, images, etc.")
        bodyDiv:Add(tip1)


//        bodyDiv:Add(break)
//        bodyDiv:Add(break)







        bodyDiv:AddHeading("Activity", 2)
        bodyDiv:AddParagraph("For this activity students will be using the Quorum Turtle Module within the Quorum Game Engine to 
        experience &quotEvent-Driven Programming&quot first hand. Students will learn the common types of errors that come up in 
        programming and how to find and fix those problems using a technique called &quotDebugging.&quot Understanding that 
        debugging is part of the problem solving process is an important step in becoming a better computer programmer. ")
            //Paragraph pTip2
               // pTip2:AddText("Understanding that debugging is part of the problem solving process is a key understanding and behavior we want to see from all programers. Many early programmers express frustration when code they write doesn't work the first time, or report that the 'computer hates me!'. Or that if they write a program that doesn't work or has problems that they are 'dumb' or that I'll never get it. This is exactly the wrong attitude to have. Writing a program is not like solving some big problem with blinders on and then checking at the end to see if you were right. It's a process of writing and making adjustments.")
        //bodyDiv:Add(pTip2)
        
            //UnorderedList ptDebugList
                //AddListItemWithBoldAtFront(ptDebugList, "Syntax Errors ", "are the kinds of problems that show errors in the console. In the grand scheme of things syntax errors are easy problems to solve because the computer is telling you it can't understand something, you just have to find out what it is.")
                //AddListItemWithBoldAtFront(ptDebugList, "Logic Errors ", "can be much harder to solve because the computer doesn't report anything wrong at all. The program just doesn't do what you think it should or want it to. Tracking down these kinds of errors is much harder, and requires some practice to get used to it. We suggest some techniques in the levels that follow.")
        //bodyDiv:Add(ptDebugList)


        bodyDiv:AddHeading("Introduction to The Quorum Game Engine", 4)
            Paragraph welcome
                welcome:AddText("The Quorum Game Engine (QGE) creates an environment 
                for events and event listeners. The Quorum Game Engine (QGE) looks, on the programmers 
                side, like a simple preset template. It is actually supported by hundreds - if not 
                thousands - of files (called &quotclasses&quot) in the Quorum Standard Libraries 
                which run in the background. Although we call it a &quotgame&quot engine, 
                this engine can be used to create a variety of event-driven programs seen on the screens 
                of computers, tablets, mobile phones, etc. ")
        bodyDiv:Add(welcome)
        //bodyDiv:AddHeading("Student Instructions: ", 3)
        bodyDiv:AddHeading("Event Driven Programming", 4)
            Paragraph eventDP
                eventDP:AddText("Quorum Game Engine apps work by adding code to respond to
                certain <b>events</b> that occur in a program. It's a way of saying &quotHey! 
                Something just happened!&quot Your code can then respond to each of these
                events. Collectively, the coding tasks involved in making your app respond to
                events by triggering actions are called <b>Event Handlers</b>. Any user input - such
                as clicking buttons, swiping the screen, tilting the device, etc. are &quotevents.&quot
                In this lesson we will have our program respond to a common form of user input - the keyboard - using Keyboard Events (if a user pushes a 
                specified button, the program will execute the associated block of code). ")
            bodyDiv:Add(eventDP)
            /*Paragraph par2
                par2:AddText("In computer programming the word 'Event' has many different 
                meanings. For example, when you look at a web page and find the link to a 
                different web page, it is up to you - the user - to decide if you want 
                to click on the link or not. If you choose to do so, that is a big 
                'event' for the computer system and the application program that made 
                it possible for you to view the page on the screen in the first place. 
                It is a big 'event' because the computer system and application program 
                need to respond to your choice of going to the different web page and 
                display the page on your computer screen. Any user input - that is 
                usually based on the user's decision making - such as clicking buttons, 
                swiping the screen, tilting the device etc. are 'events'. In this lesson 
                we will use the most basic user input - keyboard input - for us to get 
                the grasp of &quotEvent Driven Programming&quot.  In order to make this learning 
                somewhat familiar to you, we will use the Quorum Turtle Module that you 
                used throughout the Unit 3.")
        bodyDiv:Add(par2)*/
/*
        SideBySideIDE addStatementIDE
        addStatementIDE:SetUniqueIdentifier("CSP_U5L01")
        addStatementIDE:GetIDETitle():AddText("Using Keyboard Events")
        addStatementIDE:SetGameEnvironment(false)
        addStatementIDE:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color
use Libraries.Interface.Events.KeyboardListener
use Libraries.Interface.Events.KeyboardEvent

class Main is Game, KeyboardListener
    Drawable circle         
    Color color 
    Color red = color:Red() 

    action Main
        StartGame()
    end

    action CreateGame
       circle:LoadFilledCircle(20, red)     
       circle:SetPosition(350, 500)         
       Add(circle)                                                  

       AddKeyboardListener(me)              
    end

    action Update(number seconds)
    end

    
    action PressedKey(KeyboardEvent event) 
        if event:keyCode = event:UP                   
            circle:MoveY(10)        
        elseif event:keyCode = event:LEFT 

        elseif event:keyCode = event:RIGHT 

        elseif event:keyCode = event:DOWN 

        end
    end

end")
        addStatementIDE:Setup()
        bodyDiv:Add(addStatementIDE)
*/
/*
        bodyDiv:AddHeading("Get Started on Quorum Game Engine", 4)
        bodyDiv:AddLink("Tutorial: Getting Started", "https://quorumlanguage.com/tutorials/language/gettingStarted.html")
            Paragraph startQGE
                startQGE:AddText("In order for you the get started on the Quorum Game Engine in the off-line IDE 'Sodbeans', you would go to the menu bar, 'file menu', then choose 'New Project'. On the dialogue box that opens up, you would choose 'Quorum' for the Categories, and 'Game Application' for the Projects. Then press [enter] key or click 'next button'. On the next dialogue box, you give your project a name then press [enter] or click 'finish' button. Soon after this, your new project opens up in the 'Project Pane' of the Sodbeans. Your main source file 'main.quorum' should also open in the 'Edit Pane' of the IDE. If not, you would need to go to the 'Source Code' folder under your new project in the 'Project Pane' then open the 'main.quorum' file. If you are not yet familiar with the operation of the 'Sodbeans', visit the following link.")
        bodyDiv:Add(startQGE)

            Paragraph online
                online:AddText("We have the information on 'how to use the on-line IDE' in the following section.")
        bodyDiv:Add(online)

        bodyDiv:AddHeading("Understanding the Quorum Game Engine", 4)
            Paragraph gameTemp
                gameTemp:AddText("The main class/file - main.quorum - of QGE is the starting point for the most programmers to write their code. This class has three parts - 'action Main', 'action CreateGame' and 'action Update'. Each section has specific and different purpose for a programmer to write codes that controls the different aspect and phase of the any screen display oriented program - that include computer games. The template below describes the main purpose of each section.")
        bodyDiv:Add(gameTemp)


            Paragraph gameTemp2
                gameTemp2:AddText("It would be a little overwhelming to understand how each section works at this point of the unit. Don't worry, we will work you through step by step how we use this engine to create screen oriented programs as we proceed in this unit. If you would like to know a little more about the template right now, you can find further information by visiting the following linked page.")
        bodyDiv:Add(gameTemp2)

        bodyDiv:AddLink("Tutorial: Getting Started with Games", "https://quorumlanguage.com/tutorials/games/gamesStarted.html")

            Paragraph gameTemp3
                gameTemp3:AddText("For those of you who are using the off-line IDE 'Sodbeans', this is exactly the way the main.quorum looks like in your newly created blank Game Application. For those of you who are using on-line IDE, you would like to copy and paste this entire template into the on-line IDE to set up your development environment.")
        bodyDiv:Add(gameTemp3)

        bodyDiv:AddHeading("Review on the on-line off-line IDEs", 2)
            Paragraph reviewIDE
                reviewIDE:AddText("Let's review quickly about the use of IDEs (Integrated Development Environments). Throughout the course of this Unit 5, you will have choice of using either on-line IDE like the one below or the off-line IDE 'Sodbeans'. The following is the quick review of the use of both IDEs:")
        bodyDiv:Add(reviewIDE)

        bodyDiv:AddHeading("On-line IDE", 4)
            Paragraph onIDE
                onIDE:AddText("With the on-line IDE, you would write your code in the edit box then activate the 'build' button at the bottom to see if the code is grammatically correct, or activate the 'run' button to run the program. When you run the program, it would open another tab in your web browser to display the output (result) of your code. Make sure to close this display tab after checking the output each time. Otherwise, you would have so many display tabs open after a while, and you would not know which one is the one for the code you just made a correction.")
        bodyDiv:Add(onIDE)
            Paragraph onIDE2
                onIDE2:AddText("On-line IDE is the easier one to use with the disadvantage of not having so much helper type options. If you use the on-line IDE, you are expected to know how to write most of the code because it does not have 'code completion function' that is offered in the off-line IDE. The on-line IDE does not have 'on-time error detection function' either. This function is very useful in the off-line IDE because it detects the 'syntax error (described in the later in this lesson)' for us. When you are doing debugging (explained later) for example, you would need to 'build' or 'run' the code several times to find if you made a small mistake like misspelling. ")
        bodyDiv:Add(onIDE2)

        bodyDiv:AddHeading("Account Creation and Saving Project in Quorum web-site ", 4)
            Paragraph tTip3
                tTip3:AddText("In order for you to save your code on-line, you need to create your account for Quorum web page.")
        bodyDiv:Add(tTip3)
        OrderedList listTip3
            listTip3:AddListItemLink("Go to the home page of Quorum website. Open this link in a new tab.", "https://quorumlanguage.com/")
            listTip3:AddListItem("Find the 'Log in'  link at the top of the page and activate it, This will make a dialogue box pop up.")
            listTip3:AddListItem("Find the 'Sign up for an account' link in the dialogue box and activate it. This will take you to the sign up page.")
            listTip3:AddListItem("Fill in the required information, and submit the request. Your account should be created instantaneously. ")
        bodyDiv:Add(listTip3)
            Paragraph tTip4
                tTip4:AddText("Once you are in your account, you have option to save the code that you have written - with or without the preset code such as the Quorum Turtle Module. You can also load the code you have written in the past In order for you to do this:")
        bodyDiv:Add(tTip4)
        OrderedList listTip4
            listTip4:AddListItem("Find the 'save' button/link above the online IDE editing area and activate it. This will bring up a save dialogue box.")
            listTip4:AddListItem("Give the name for your project, then activate the 'save' button/link in the dialogue box.")
            listTip4:AddListItem("To load the previously saved project, find an on-line IDE (with or without preset code).")
            listTip4:AddListItem("Find the 'load' button/link above the editing area, and activate it. This will bring up a dialogue box with the list of project you have saved.")
            listTip4:AddListItem("Find the one to load and activate the 'load' button/link in the dialogue box.")
        bodyDiv:Add(listTip4)

        bodyDiv:AddHeading("Off-line IDE 'Sodbeans'", 4)
            Paragraph offIDE
                offIDE:AddText("The off-line IDE 'Sodbeans' is a powerful IDE that offers many useful functions such as 'code completion', 'on-time error detection', and 'debugging mode'. Only downside of using this IDE would be that you would need to spend a little more time to learn how to use the IDE, compared to the time you would sped on the on-line IDE. You would find the information on how to use the 'Sodbeans' in the Unit 3 Lesson 4. Or you can visit the linked page below to find further information.")
        bodyDiv:Add(offIDE)

        bodyDiv:AddLink("Tutorial: Getting Started", "https://quorumlanguage.com/tutorials/language/gettingStarted.html")


        bodyDiv:AddHeading("Event Driven Programming", 2)
            Paragraph eventDP1
                eventDP1:AddText("In computer programming the word 'Event' has many different meaning. For example, when you look at a web page and find the link to a different web page, it is up to you - an user - if you want to click on the link or not. If you choose to do so, that is a big 'event' for the computer system and the application program that made it possible for you to view the page on the screen in the first place. It is a big 'event' because the computer system and application program needs to respond to your choice of going to the different web page and display the page on your computer screen. Any user input - that is usually based on the user's decision making - such as clicking buttons, swiping the screen, tilting the device etc. are 'events'. In this lesson we will use the most basic user input - keyboard input - for us to get the grasp of the 'Event Driven Programming.'  In order to make this learning somewhat familiar to you, we will use the Quorum Turtle Module that you used throughout the Unit 3. ")
        bodyDiv:Add(eventDP1)
*/

        studentInstruction:AddHeading("Student Instructions",4)
        studentInstruction:AddParagraph("We can use the Quorum Turtle Module that was introduced in Unit 3 to learn event-driven programming.")
            Paragraph setQTM
                setQTM:AddText("In order to make the Quorum Turtle Module an Event Driven Program, we need to add some code to tell it when and how to respond to certain events - in this cause user input from the keyboard. The template below provides a layout that we can build from.")
        studentInstruction:Add(setQTM)

        studentInstruction:AddHeading("&quotuse&quot Statements", 4)
            Paragraph useState
                useState:AddText("At the top of the code above, notice the <b>use Libraries.Interface.Events.KeyboardEvent</b> and 
                <b>use Libraries.Interface.Events.KeyboardListener</b>. Each of these 
                lines makes it possible for you to use a specified file (called a class) in 
                Quorum Programming Language's Standard Libraries.")
        studentInstruction:Add(useState)
        studentInstruction:AddParagraph(" In order for us to make 
                our program an &quotEvent Driven Program,&quot we need to use the two classes - KeyboardEvent 
                and KeyboardListener. The KeyboardEvent class allows the programmer 
                to create an &quotaction&quot that can make use of the keyboard input. We 
                use the KeyboardListener class to have the program itself keep track of which 
                keys are pressed or released on the keyboard.")
       
        studentInstruction:AddHeading("&quotaction PressedKey(KeyboardEvent event)&quot", 4)
            Paragraph press
                press:AddText("Because we have included the <b>KeyboardEvent</b> and <b>KeyboardListener</b> classes
                 the <b>action PressedKey(KeyboardEvent event)</b> becomes available for us to 
                use in our program. Since it is an action with a parameter, we 
                need to specify the type of parameter this action takes (KeyboardEvent) and give the parameter 
                a name (event). In this case the <b>KeyboardEvent</b> is the type of parameter, and 
                <b>event</b> is the name for the KeyboardEvent. Since this is a separate action we will need 
                to use an <b>end</b> statement to specify which part of the code is associated with this action.")
        studentInstruction:Add(press)

            Paragraph ifState
                ifState:AddText("In the PressedKey action code block, we use the &quotif-statement structure&quot to control the &quotKeyboardEvent - event&quot. 
                The &quotif-statement structure&quot will be explained in detail throughout this unit. For now, we will just describe 
                what each line of the &quotif-statement structure&quot does to <i>our</i> program: ")
        studentInstruction:Add(ifState)
        UnorderedList ifState1
            AddListItemWithBoldAtFront(ifState1, "if event:keyCode = event:UP", " - says <i>if</i> the event of &quotthe UP key being pressed&quot takes place, then execute the block of code associated with the &quotif-statement&quot.")
            AddListItemWithBoldAtFront(ifState1, "MoveForward()", " - specifies the direction that the turtle will move &quotif&quot the UP key is being pressed.")
        studentInstruction:Add(ifState1)

            Paragraph ifState2
                ifState2:AddText("This block of code is essential for us to transform the Quorum Turtle Module into an 
                &quotEvent Driven Program&quot. In the following activities, we will be adding lines of code 
                below each &quotelseif&quot statement which will give our turtle options to move in different 
                directions in response to specific keyboard events (such as the UP arrow being pressed).")
        studentInstruction:Add(ifState2)
        SideBySideIDE CSP_U5L1_1
        CSP_U5L1_1:SetUniqueIdentifier("CSP_U5L1_1")
        CSP_U5L1_1:GetIDETitle():AddText("Quorum Turtle Module with Event Driven Programming")
        CSP_U5L1_1:SetGameEnvironment(false)
        CSP_U5L1_1:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardEvent
class Main is TurtleGame
    action Main
        StartGame()
    end

    action TurtleCommands
        SetStartingCoordinates(5,4)        //setting the starting position
                                           //of the turtle
    end

    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP
            MoveForward()
        elseif event:keyCode = event:LEFT

        elseif event:keyCode = event:RIGHT
 
        elseif event:keyCode = event:DOWN

        end
    end
end
")
        CSP_U5L1_1:Setup()
        studentInstruction:Add(CSP_U5L1_1)
        bodyDiv:Add(studentInstruction)

//        bodyDiv:Add(break)
//        bodyDiv:Add(break)
//        bodyDiv:Add(break)

        bodyDiv:AddHeading("Adding Keyboard Events", 3)
        bodyDiv:AddHeading("Coding Challenge 1: Complete the code", 4)

        studentInstruction1:AddHeading("Student Instructions",4)
   
        studentInstruction1:AddParagraph("Here are the commands that the turtle can follow:")
            UnorderedList chlgList
                chlgList:AddListItem("TurnLeft()")
                //chlgList:AddListItem("TurnByDegree(integer degree) - the value of degree must be 90, 180, or 270")
                chlgList:AddListItem("MoveForward()")
            studentInstruction1:Add(chlgList)

            studentInstruction1:AddParagraph("In the <b>PressedKey</b> action, each &quotelseif&quot statement corresponds to a specific key being pressed on the keyboard. 
            Remember that the turtle will turn based on the direction in which the turtle is facing at the time - not based of the 
            direction of the screen. Here is an example of what should be included in the code block in the &quotevent&quot
            that the LEFT arrow key is pressed.")  
        studentInstruction1:Add(preformatter:GeneratePreformattedCode(  "       elseif event:keyCode = event:LEFT" + cr
                                                        +   "           TurnLeft()" + cr
                                                        +   "           MoveForward()"))


        SideBySideIDE CSP_U5L1_2
        CSP_U5L1_2:SetUniqueIdentifier("Coding Challenge 1")
        CSP_U5L1_2:GetIDETitle():AddText("Quorum Turtle Module with Event Driven Programming")
        CSP_U5L1_2:SetGameEnvironment(false)
        CSP_U5L1_2:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardEvent
class Main is TurtleGame
    action Main
        StartGame()
    end

    action TurtleCommands
        SetStartingCoordinates(5,4)        //setting the starting position
                                           //of the turtle
    end

    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP
            MoveForward()
        elseif event:keyCode = event:LEFT

        elseif event:keyCode = event:RIGHT
 
        elseif event:keyCode = event:DOWN

        end
    end
end
")
        CSP_U5L1_2:Setup()
        studentInstruction1:Add(CSP_U5L1_2)

            Paragraph chlg1_1
                chlg1_1:AddText("After you have added in all of the missing code blocks under each &quotelseif&quot statement, try running your program. 
                Does each key press work in the way you predicted that it would? If not, don't worry, this is common in computer programming and leads us to the 
                topic of &quotDebugging&quot - the art of finding and fixing problems in your code.")
        studentInstruction1:Add(chlg1_1)

        //bodyDiv:AddLink("Tutorial: Input and Events in Quorum", "https://quorumlanguage.com/tutorials/games/events.html")

        studentInstruction1:AddHeading("What is Debugging?", 3)
        studentInstruction1:AddHeading("Learning How to Debug Programs", 4)
            Paragraph debug1
                debug1:AddText("Debugging is a skill and an art. With practice, you'll 
                learn how to write relatively bug-free code and more importantly you'll 
                learn about yourself and the kinds of errors you typically make. But 
                learning how to debug takes some time and getting used to, and you 
                will learn about the different kinds of things that can go wrong 
                when you write programs.")
        studentInstruction1:Add(debug1)
        bodyDiv:Add(studentInstruction1)

        bodyDiv:AddParagraph("Remind students that:")
        UnorderedList debugList
            ListItem debugListA
                debugListA:AddText("Debugging is part of the problem-solving process of programming.")
                UnorderedList debugA
                    debugA:AddListItem("Rarely does code work exactly the way you want the first time.")
                    debugA:AddListItem("If you write some code and need to work out a few bugs that does not mean you are a bad programmer - actually the opposite might be true.")
                debugListA:Add(debugA)
        debugList:Add(debugListA)
            ListItem debugListB
                debugListB:AddText("Be a pro! Even professionals do not expect to write bug-free code on the first pass.")
                UnorderedList debugB
                    debugB:AddListItem("Instead they get in the habit of running their code, checking their assumptions, and making changes as needed. Programming isn't a fixed set of steps")
                    debugB:AddListItem("It's a creative and continuous cycle of writing, testing, and improving code.")
                debugListB:Add(debugB)
        debugList:Add(debugListB)
            ListItem debugListC
                debugListC:AddText("Don't worry, we will practice!")
                UnorderedList debugC
                    debugC:AddListItem("With practice you eventually stop making certain kinds of errors that beginners run into, but there's always something around the corner that needs to be worked out.")
                debugListC:Add(debugC)
        debugList:Add(debugListC)
        bodyDiv:Add(debugList)
           
        bodyDiv:AddHeading("Common Types of Errors", 4)
            Paragraph commonBugs
                commonBugs:AddText("In the next few sections we'll practice debugging a few common types of errors. They generally fall in two categories:")
        bodyDiv:Add(commonBugs)
        
        UnorderedList bugs
            AddListItemWithBoldAtFront(bugs, "Syntax Errors: ", "are the kinds of problems that 
            show errors in the console. In the grand scheme of things <i>syntax errors are 
            easy problems to solve</i> because the computer is telling you it can't understand 
            something, you just have to find out what it is. </br>")
            AddListItemWithBoldAtFront(bugs, "Logic Errors: ", "can be <i>much harder to solve</i> because 
            the computer doesn't report anything wrong at all. The program just doesn't do what 
            you think it should or want it to. Tracking down these kinds of errors is much harder, 
            and requires some practice to get used to. We will suggest some techniques in the levels 
            that follow.")
        bodyDiv:Add(bugs)
        /*bodyDiv:AddHeading("Syntax errors", 5)
            UnorderedList bug1
                bug1:AddListItem("Things you misspelled or wrote in such a way that the computer doesn't understand what you're trying to say")
                bug1:AddListItem("Usually the computer spits out an error message of some kind that is a clue as to what it can't understand (e.g. the line number where it &quotthinks&quot you made an error) ")
                bug1:AddListItem("Fix these by carefully rereading the lines that have errors")
        bodyDiv:Add(bug1)

        bodyDiv:AddHeading("Logic errors", 5)
            UnorderedList bug2
                bug2:AddListItem("The program runs but doesn't do what you think it should.")
                bug2:AddListItem("Can be tricky to fix because there might not be an error message")
                bug2:AddListItem("Fix by retracing your steps, being humble, and trying to understand why the computer is interpretting what you wrote the way it is.")
        bodyDiv:Add(bug2)
        */

        /* Removed Visual Component
        bodyDiv:AddHeading("Metaphor for Debugging", 4)
            Paragraph pTip1
            pTip1:SetClassAttribute("cool-box")
                pTip1:AddText("Programming and debugging is like getting dressed up to go out. </br> </br>
                You put on some clothes that you think will look good but then you have to look in the mirror, make some adjustments and decisions, maybe even realize you need to go a different direction entirely, and so on -- you are debugging your outfit. </br> </br>
                Writing a program initially is like throwing on some clothes, and running the program is like looking in the mirror for the first time. You do it to see what it looks like, knowing that you're going to have to make some adjustments. </br> </br>
                But looking in the mirror frequently to see what everything looks like together actually speeds up the process. Getting ready to go out, putting on makeup or combing your hair without looking in the mirror would not only slow things down, it's foolish. </br> </br>
                The <b>Run. Test. Debug.</b> pattern of behavior is part of the programming process, just like using a mirror is part of making yourself presentable.")
        bodyDiv:Add(pTip1)
        */
        bodyDiv:Add(break)
        bodyDiv:Add(break)
        bodyDiv:Add(break)


        bodyDiv:AddHeading("Coding Challenge 2: Common Syntax Errors", 4)


        studentInstruction2:AddHeading("Student Instructions", 3)
            Paragraph chlg2
                chlg2:AddText("There is (are) syntax error(s) in the Quorum Turtle Module code block below. Can you find them? Remember a Syntax error is when your computer can't understand something, like a misspelled word or a missing end statement.")
        studentInstruction2:Add(chlg2)

               studentInstruction2:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Curriculum.TurtleProgram.TurtleGame" + cr
                + "use Libraries.Interface.Events.KeyboardEvent" + cr
                                                        +   "use Libraries.Interface.Events.KeyboardListener" + cr
                                                        +   "" + cr
                                                        +   "class Main is TurtleGame" + cr
                                                        +   "   action Main" + cr
                                                        +   "       StartGame()" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "   action TurtleCommands" + cr
                                                        +   "" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "   action PressedKey(KeyboardEvent event)" + cr
                                                        +   "       if event:keyCode = event:UP" + cr
                                                        +   "           Forward()" + cr
                                                        +   "       elseif event:keyCode = event:LEFT" + cr
                                                        +   "" + cr
                                                        +   "       elseif event:keyCode = evnt:RIGHT" + cr
                                                        +   "" + cr
                                                        +   "       elseif event:keyCode = event:DOWN" + cr
                                                        +   "" + cr
                                                        +   "   end" + cr

                                                        +   "end"))
        studentInstruction2:AddParagraph("If you try to build and run this code, the IDE will find the errors, and display the lines where it &quotthinks&quot that the error occurred in the output area. 
        However, the computer doesn't recognize which block of code is missing the corresponding &quotend statement&quot it only knows that overall there is a missing &quotend statement&quot and applies that &quoterror&quot to the end of your program. With experience in debugging you will eventually get used to how the computer logically analyzes your code and you will quickly be able to pinpoint your syntax errors by remembering the pattern of error messages.")
        bodyDiv:Add(studentInstruction2)

//        bodyDiv:Add(break)
//        bodyDiv:Add(break)
//        bodyDiv:Add(break)

        bodyDiv:AddHeading("Coding Challenge 3: Logical Errors", 4)
        studentInstruction3:AddHeading("Student Instructions",3)
        studentInstruction3:AddParagraph("To understand a new piece of code good programmers often try to <b>first make
                a prediction about what will happen before running the program</b>. By forcing yourself to make a prediction
                first (it doesn't matter if you are right or not) you are immediately alerted to any <b>unusual or unexpected behavior</b> and
                you can ask yourself <i>&quotHuh? Why did it do that? Was that supposed to happen?&quot</i>. It might not be an
                error, but you gain invaluable insight and actually learn faster.") 
        studentInstruction3:AddParagraph("<b>Predict:</b> For the code below, what will happen when the
                DOWN arrow key is pressed?")

        UnorderedList chlg3A
            AddListItemWithBoldAtFront(chlg3A, "Study the code - ", "Which direction is the turtle going to move when the corresponding key is pressed?")
            AddListItemWithBoldAtFront(chlg3A, "Force yourself to make a prediction! - ", "&quotI don't know&quot is not a prediction.")
        studentInstruction3:Add(chlg3A)
        studentInstruction3:AddParagraph("Here are some options to think about:")
        UnorderedList chlg3B
            chlg3B:AddListItem("There will be an error in the console immediately after hitting run")
            chlg3B:AddListItem("There will be an error in the console, but not until a key is pressed")
            chlg3B:AddListItem("The program won't do anything")
            chlg3B:AddListItem("The turtle will only move forward")
            chlg3B:AddListItem("The turtle will only turn left")
            chlg3B:AddListItem("The turtle will turn left and then move forward")
            chlg3B:AddListItem("The turtle will move forward and then turn left")
            chlg3B:AddListItem("Something else?")
        studentInstruction3:Add(chlg3B)
    studentInstruction3:AddParagraph("<b>Observe: </b> Once you have made a prediction, run the program to observe what happens.")


        SideBySideIDE CSP_U5L1_3
        CSP_U5L1_3:SetUniqueIdentifier("Coding Challenge 3")
        CSP_U5L1_3:GetIDETitle():AddText("Quorum Turtle Module with Event Driven Programming")
        CSP_U5L1_3:SetGameEnvironment(false)
        CSP_U5L1_3:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardEvent

class Main is TurtleGame
   action Main
       StartGame()
   end

   action TurtleCommands
       SetStartingCoordinates(5,4)
   end

   action PressedKey(KeyboardEvent event)
       if event:keyCode = event:UP
           MoveForward()
       elseif event:keyCode = event:LEFT
           MoveForward()
           TurnLeft()
       elseif event:keyCode = event:RIGHT
           TurnLeft()
           MoveForward()
       elseif event:keyCode = event:DOWN
           MoveForward()
           TurnLeft()
       end
   end
end
")
        CSP_U5L1_3:Setup()
        studentInstruction3:Add(CSP_U5L1_3)

    studentInstruction3:AddParagraph("<b>Reflect: </b>Was your prediction correct? If not what about your mental model might need to change? Talk about it with a classmate and experiment with the code to make sure you understand what is happening.")
    studentInstruction3:AddParagraph("Sometimes you can write a program that generates no errors but still does not work as intended. This is the result of <b>logical errors</b> in your code, and making a prediction can help find these kind of bugs too.")
    bodyDiv:Add(studentInstruction3)



/*            Paragraph chlg3_1
                chlg3_1:AddText("To understand a new piece of code good programmers often try to <b>first make
                a prediction about what will happen before running the program</b>. By forcing yourself to make a prediction
                first (it doesn't matter if you are right or not) you are immediately alerted to any <b>unusual or unexpected behavior</b> and
                you can ask yourself <i>&quotHuh? Why did it do that? Was that supposed to happen?&quot</i>. It might not be an
                error, but you gain invaluable insight and actually learn faster.") The logical error in the code block above may not be easy to distinguish until you try
                running the program and notice that the turtle is not moving in the way you would expect it to move
                when pressing the DOWN arrow key. The computer does not recognize this as an error because ")
                chlg3_1:AddText("The most difficult logical error to understand in the above challenge
                 is the one found on the line 'TurnByDegree(95)'. This action only 
                takes a parameter of 90, 180, or 270. In this case the computer only checks to make sure that
                the parameter is of the correct &quottype&quot (in this case an integer), not that your integer is 
                a correct value. Logical errors can be difficult to find because the computer may not even recognize that an
                error exists, rather the user will recognize that a problem exists through testing their program and comparing
                what they expect to happen versus what is actually happening.")
        bodyDiv:Add(chlg3_1)
*/
//        bodyDiv:AddHeading("More on Debugging", 4)
//            Paragraph pTipDebug
//            pTipDebug:SetClassAttribute("cool-box")
//                pTipDebug:AddText("Many IDEs support a mode called &quotDebugging Mode&quot in 
//                which a programmer can write their code as usual, and then pause the running 
//                sequence of their code by setting a &quotbreak point&quot. You can set as many 
//                &quotbreak points&quot as you want or need, normally placing the break point 
//                at the beginning of a logical code block - such as the beginning of the 
//                &quotaction&quot, &quotrepeat&quot, or &quotif-statement&quot 
//                block.")
//        bodyDiv:Add(pTipDebug)
        

//        bodyDiv:Add(break)
//        bodyDiv:Add(break)
        bodyDiv:AddHeading("Wrap Up", 2)
        //bodyDiv:AddHeading("Exemplar Solution:", 4)
          //  Paragraph sol
            //    sol:AddText("Following is the one example/possibility of the coding solution for the Challenges above")
        //bodyDiv:Add(sol)
            //UnorderedList solList
               // solList:AddListItemLink("Exemplar Solution: for Challenge 1-3", "files/code/Unit3/Unit5Chlg1-solution.rtf")
       // bodyDiv:Add(solList)
            Paragraph wrapUp1
                wrapUp1:AddText("Today we were actually introduced to two tools that will help us build increasingly complex applications. 
                The first was Quorum Game Engine, and hopefully it was quickly apparent how powerful this tool is for creating 
                appealing and intuitive user interfaces without cluttering up your code. The second tool was KeyboardEvent 
                handling which is the one of the actions that can handle user input elements in Quorum programming language.")
        bodyDiv:Add(wrapUp1)
            Paragraph wrapUp2
                wrapUp2:AddText("Event-driven programs are an important concept in programming, but we've just gotten our feet wet. 
                In the next lesson we'll learn a little more of the basic knowledge that is required to write an Event-Driven Program from scratch!")
        bodyDiv:Add(wrapUp2)
//               bodyDiv:Add(break)
//        bodyDiv:Add(break)

        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CL.L2:4")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L2:5, CPP.L3A:3, CPP.L3A:4, CPP.L3A:5")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L2:12, CT.L3A:1, CT:L3A:3")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.1.1 (B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.2.1 (A, B, E)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.1 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (J)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (A, C, D, E, F, H, K, M)")
        bodyDiv:Add(list)

/* Completed 3/31/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn the concept of 'Event Driven Programming' and how to create it in Quorum Programming Language'"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 1 (Introduction to Event-Driven Programming)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 1"
    end
    action GetShortDescription returns text
        return "Learn about Event Driven Programming"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson1A.html"
    end

end

 
 
