use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit3Lesson5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 5: The Need for Programming Languages")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
       //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Intro to App Design - Lesson 5: The Need for Programming Languages", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Intro to App Design - Lesson 5: The Need for Programming Languages")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)

        section_intro:AddParagraph("In this lesson students explore the challenges of clearly communicating instructions. They build a small arrangement of blocks (e.g. LEGO&trade; pieces or paper cutouts) and then create text instructions a classmate could follow to construct the same arrangement. Groups then trade instructions to see if they were clear enough to allow reconstruction of the original arrangement. The wrap-up discussion is used to highlight the inherent ambiguities of human language and call out the need for the creation of a programming language which leaves no room for interpretation.")

         AddHeading(section_intro, "Preparation", 3)
        UnorderedList prep
        prep:AddListItem("Prepare either a small set of LEGO&trade; blocks or paper cutouts for each pair of students")
        section_intro:Add(prep)

        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList goalList
        goalList:AddListItem("Justify the existence of programming languages to precisely communicate instructions")
        goalList:AddListItem("Explain the qualities that differentiate natural languages and programming languages")
        section_intro:Add(goalList)

         AddHeading(section_intro, "Purpose", 3)
        section_intro:AddParagraph("This lesson is students' first introduction to the concept of a programming language. It helps them understand why programming languages exist by giving them a first-hand experience with the problems that programming languages are designed to address. Natural language is usually too ambiguous for giving precise instructions that can be followed correctly 100% of the time. We need to create more structured and precise programming languages in order to accomplish this.")


                    Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
              AddHeading(section_gettingStarted, "Remarks", 3)            
        UnorderedList startingRemarks
        startingRemarks:AddListItem("Today we're going to look at what it takes to write " + dq + "good" + dq + " instructions. We all use instructions all the time, whether it's directions to get somewhere, instructions to fill out a form, or even instructions from teachers. To help us get started, let's brainstorm what " + dq + "bad" + dq + " instructions look like.")
        section_gettingStarted:Add(startingRemarks)

        section_gettingStarted:AddParagraphBoldFront("Discuss:"," Write down three different reasons you would call a set of instructions " + dq + "bad" + dq + ". Be ready to share with a neighbor.")

        Division startingGoals = AddDisscussionGoal(section_gettingStarted)
        startingGoals:AddParagraphBoldFront("Discussion Goal:"," Aim to hear a few different students share reasons that instructions are " + dq + "bad" + dq + ". The point here is just to get students thinking and there's no specific answer you're driving towards. Some possible ideas, however, might include:")
        UnorderedList badInstructions
        badInstructions:AddListItem("Instructions are not clear on what to do")
        badInstructions:AddListItem("Instructions use confusing words")
        badInstructions:AddListItem("Instructions don't actually accomplish what they're supposed to")
        startingGoals:Add(badInstructions)

        UnorderedList transition
        transition:AddListItem("Alright, so we have an idea of what " + dq + "bad" + dq + " instructions look like. Let's see if we can use this brainstorm to help us write good instructions in the next activity!")
        section_gettingStarted:Add(transition)

        
                      Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (30 minutes)", 2)
        AddHeading(section_activity, "Remarks", 3)
        section_activity:AddParagraphBoldFront("Group:"," Place students in groups of two, optionally forming a group of three.")
        section_activity:AddParagraphBoldFront("Distribute:"," Give each group a small set of blocks (either LEGO&trade; or paper cutouts). Also have each group use a blank sheet of paper or a blank page in a journal.")

         AddHeading(section_activity, "Step 1: Design", 3)
        
        section_activity:AddParagraphBoldFront("Activity:"," Give students a couple minutes to create their design following these rules. (Keep this quick since the bigger focus should be on the instructions.)")
        OrderedList rules
        rules:AddListItem("Put 5-6 pieces together")
        rules:AddListItem("All pieces must be connected")
        section_activity:Add(rules)

         AddHeading(section_activity, "Step 2: Record", 3)
 
        section_activity:AddParagraphBoldFront("Activity:"," Either have students sketch their design or take a picture. Make sure the image is on a separate piece of paper or the back side of a sheet of paper.")

         AddHeading(section_activity, "Step 3: Write Instructions", 3)
        
        section_activity:AddParagraphBoldFront("Activity:"," This is the most important step and should be given about 5 minutes. Encourage students to be as clear as possible while only using words (no drawings, diagrams, or pictures). Encourage them to think about their brainstorm of " + dq + "bad" + dq + " instructions this morning to see if it can inspire them to make " + dq + "good" + dq + " ones.")

         AddHeading(section_activity, "Step 4: Trade", 3)
        
        section_activity:AddParagraphBoldFront("Activity:"," Have students take apart their design, and then trade instructions with another group. Make sure they keep their recording of the design hidden.")


         AddHeading(section_activity, "Step 5: Build", 3)
        
        section_activity:AddParagraphBoldFront("Activity:"," Give students 3 minutes to follow the instructions from another group.")


         AddHeading(section_activity, "Step 6: Compare", 3)
        
        section_activity:AddParagraphBoldFront("Activity:"," Give students 2 minutes to compare what they built with the picture of the actual target. In their groups they should discuss what they think went wrong or anything they're surprised worked out.")


        AddHeading(section_activity, "Step 7: Repeat", 3)
    
        section_activity:AddParagraphBoldFront("Activity:"," Depending on how much time you have, encourage students to trade with one or two other groups. Make sure to save time for the wrap up.")
      

        Division buildingTips = AddTeachingTip(section_activity)
        buildingTips:AddParagraphBoldFront("Make it a Gallery Walk:"," Depending on your room set-up you may be able to have students run this activity in a more open-ended way. Students should leave their unconstructed blocks and instructions at their table with the target image face down. They can then make their way to a few different groups' instructions over the course of 10-15 minutes. ")
        buildingTips:AddParagraphBoldFront("Mark What's Confusing:"," You may optionally have students leave suggestions on instructions when they use them explaining where they were confused or wanted more detail. This is a good way to practice giving and receiving feedback. It also forces groups to think more clearly about what is causing their confusion since they'll have to leave it in writing.")
    

                          Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap up (10 Minutes)", 2)
        section_wrap:AddParagraphBoldFront("Discuss:"," When you or your classmates made mistakes following instructions today what " + dq + "went wrong" + dq + "? Try to be as specific as possible.")
        
        Division promptGoals = AddDisscussionGoal(section_wrap)
        promptGoals:AddParagraph("This wrap up includes two sets of prompts and should be run as back-to-back discussions. The first set helps students synthesize the challenges they encountered during the main activity. The second set prompts students to think about how they might design a new language that avoids these challenges.")
        promptGoals:AddParagraph("When running the first discussion ask students to share specific experiences during the lesson and prompt them to think about what went wrong. They might say things like " + dq + "if we'd just been more clear" + dq + " or " + dq + "we just need to include more detail" + dq + ". This might be true, but eventually you should point out that human language is often ambiguous. In other words, it's not their fault! It's hard to do a good job with bad tools!")
        promptGoals:AddParagraph("When running the second discussion push students to think about what a language designed for giving instructions would look like. While specific answers aren't important, you should push them to build on their experiences in the main activity. For example, if they saw that words having two meanings was confusing in the main activity, they should suggest redesigning the language so each word has a single well-understood meaning. ")
   

        AddHeading(section_wrap, "Remarks", 3)
        UnorderedList closingRemarks1
        closingRemarks1:AddListItem("Even trying to be as clear as possible we struggled to write clear instructions. There are things we could do to improve, but the core challenge here is that everyday human language is bad for giving clear instructions. Words can have two or three meanings! Instructions that seem clear turn out to be vague when we actually go follow them. If we want to give clear instructions, we need to fundamentally change the language we use. We need to create a new kind of language.")
        section_wrap:Add(closingRemarks1)

        section_wrap:AddParagraphBoldFront("Discuss:"," Imagine we were going to redesign human language to be really good for giving clear instructions. What types of changes would we need to make?")

        UnorderedList closingRemarks2
        closingRemarks2:AddListItem("Today we talked a lot about instructions because soon we're going start programming your apps. When you write a program you're just giving instructions to a computer for what it should do to run your app. As you'll see, the programming language we use to give these instructions sometimes looks like English, but then has a lot of weird (and sometimes confusing) differences. This is because it needs to be more precise and unambiguous than normal human language. We'll dive into this more next time we meet!")
        section_wrap:Add(closingRemarks2)
   
                     Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

        AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

        AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph(" What is the difference between a programming language and natural (every-day) language? ")


     Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ", "2-AP-17, 3A-AP-13, 3A-AP-21, 3A-AP-22, 3A-AP-23")         
        section_standards:Add(list)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Explore how natural languages can be ambiguous, and why we need different language for programming"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 5 (The Need for Programming Languages)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 5"
    end
    action GetShortDescription returns text
        return "Learn about why we need programming languages"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson5.html"
    end

        action GetLinkName returns text
        return "The Need for Programming Languages"
    end

    action GetSectionName returns text
        return "Intro to App Design"
    end
end
