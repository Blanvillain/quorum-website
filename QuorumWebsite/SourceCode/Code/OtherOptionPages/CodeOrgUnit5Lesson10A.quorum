use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

/***********************************
Need to still edit IDE identifier
names, as well as the "Standards
Alignment" section.
***********************************/

class CodeOrgUnit5Lesson10A is Lesson
    text iText = ""
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 10: Building the Game of Choice")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 10: Building the Game of Choice", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")

        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")

        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")

        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")

        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

        Division studentInstruction6
        studentInstruction6:SetClassAttribute("cool-box")

        Division studentInstruction7
        studentInstruction7:SetClassAttribute("cool-box")

        Division studentInstruction8
        studentInstruction8:SetClassAttribute("cool-box")

        Division studentInstruction9
        studentInstruction9:SetClassAttribute("cool-box")

        Division studentInstruction10
        studentInstruction10:SetClassAttribute("cool-box")

        Division studentInstruction11
        studentInstruction11:SetClassAttribute("cool-box")

        Division studentInstruction12
        studentInstruction12:SetClassAttribute("cool-box")

        Division studentInstruction13
        studentInstruction13:SetClassAttribute("cool-box")

        Division studentInstruction14
        studentInstruction14:SetClassAttribute("cool-box")
        //Division box


//GOAL: to have a creative process for the students

        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("This lesson attempts to walk you through the iterative 
                development process of building an app (basically) from scratch that involves 
                the use of <i>if statements</i>. ")
        bodyDiv:Add(ov1)

            Paragraph ov3
                ov3:AddText("At the conclusion of the lesson there are three practice
                Create PT-style questions as well as resources explaining the connection 
               between this lesson and the actual Create PT. Depending on how you use these 
               materials they can easily add an additional day to this lesson.")
        bodyDiv:Add(ov3)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Boolean Expression: ", "in programming, an expression that evaluates to True or False.")
                AddListItemWithBoldAtFront(voc, "Conditionals: ", "Statements that only run under certain conditions.")
                AddListItemWithBoldAtFront(voc, "If-Statement: ", "The common programming structure that implements " + dq + "conditional statements." + dq)
                AddListItemWithBoldAtFront(voc, "Selection: ", "A generic term for a type of programming statement (usually an if-statement) that uses a Boolean condition to determine, or select, whether or not to run a certain block of statements.")
                AddListItemWithBoldAtFront(voc, "Encapsulation: ", "Similar to " + dq + "abstraction." + dq + " The programmers would encapsulate the block of code into an action so to manage the complexity of the code as well as to reuse the code block easily throughout the entire coding.")
                AddListItemWithBoldAtFront(voc, "Comment out: ", "A technique programmers use to temporarily transform a line of code into a comment by placing " + dq + "//" + dq + " in front of it. In this way, the programmer can let the computer skip the execution of that line of code. To &quotComment Out&quot a block of code you can use the " + dq + "/*" + dq + " at the beginning of the code block and the " + dq + "*/" + dq + " at the end of the code block that you wish to temporarily &quotComment Out.&quot")
                //AddListItemWithBoldAtFront(voc, "RGB-A value: ", "The values that control the projection of the colored light to the computer screen at the microscopic pixel level. Any color on the computer screen is produced by a mixture of these three lights with different values. " + dq + "R" + dq + " stands for red, " + dq + "G" + dq + " stands for green, and " + dq + "B" + dq + " stands for blue. The last " + dq + "A" + dq + " stands for transparency level.")
                //AddListItemWithBoldAtFront(voc, "Audio Balance: ", "The balance of how much of one audio segment is played on the left side speaker and the right side speaker on the stereo audio system")
        bodyDiv:Add(voc)
                bodyDiv:Add(break)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Write code to implement solutions to problems from pseudocode or description")
                goalList:AddListItem("Follow the iterative development process of a collaboratively created program")
                goalList:AddListItem("Develop and write code for conditional expressions to incorporate into an existing program")
                goalList:AddListItem("Write a large program from scratch when given directions for each step")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The purpose here is for students to see how 
                &quotexperts&quot would approach writing an app from scratch when all 
                you have to start out with is a sketch on paper of some idea. Research has shown that what novices often need is an expert walk-through to explain the rationale behind certain decisions and to see the kinds of problems they anticipate and solve. There are a few key things that happen in this lesson that we hope students see and take to heart:")
        bodyDiv:Add(purpose)
            UnorderedList purposeList
                purposeList:AddListItem("There is no one &quotcorrect&quot way to approach writing a program")
                purposeList:AddListItem("You don't write programs &quotin order&quot from top to bottom - you write in pieces and organize the code into sections and functions")
                purposeList:AddListItem("Start with a small problem to solve - solve it and move to the next one")
                purposeList:AddListItem("Use a buddy or &quotthought partner&quot to talk things through")
                purposeList:AddListItem("Sketch out pseudocode on paper to get your thoughts straight")
                purposeList:AddListItem("If you get stuck, there is always something small you can do to make progress")
        bodyDiv:Add(purposeList)

        bodyDiv:AddHeading("Note to Teacher", 4)
            Paragraph purpose1
                purpose1:AddText("After this lesson students are prepared to complete the AP Create PT. If you have more time in your year you may continue through Unit 5 Chapter 2 before beginning the task. When you decide to begin the task use the materials in the AP Create PT Prep unit to further prepare students. For more details refer to pages 32 and 33 of the ")
                purpose1:AddLink("CSP Curriculum Guide - Teal Book", "https://code.org/files/CSP_CurriculumGuide_2017_forWeb.pdf")
                purpose1:AddText(".")
        bodyDiv:Add(purpose1)



        bodyDiv:AddHeading("Resources", 2)
        UnorderedList reso
//            reso:AddListItemLink("CSP Curriculum Guide - Teal Book", "https://code.org/files/CSP_CurriculumGuide_2017_forWeb.pdf")
            //reso:AddListItemLink("Color-Sound Sleuth Quorum Game Engine Project (Empty)", "/files/code/Unit5/Unit5Lesson10-ColorSoundSleuth-EmptyQGE.zip")
            //reso:AddListItemLink("Color-Sound Sleuth and the AP Create PE", "https://docs.google.com/document/d/1V3fS8FKixvspuDg2WRrBCGIwWlgJQ3XVdsjremCNxTU/edit")
            reso:AddListItemLink("AP Digital Portfolio Student Guide - College Board Handout", "https://secure-media.collegeboard.org/digitalServices/pdf/ap/computer-science-principles-digital-portfolio-student-guide.pdf")
            //reso:AddListItemLink("Color-Sound Sleuth Empty Template for Offline IDE", "/files/code/Unit5/Unit5Lesson10-ColorSoundSleuth-EmptyQGE.zip")
        bodyDiv:Add(reso)



        bodyDiv:AddHeading("Getting Started", 2)
           Paragraph project
                project:AddText("This game is a walkthrough that hopefully reinforce the idea of a creative programming process and the need to reference the standard libraries and ask others for help.")
        bodyDiv:Add(project)



        studentInstruction1:AddHeading("Student Instructions",3)
            Paragraph project1
                project1:AddText("This project is similar to the " + dq + "Counter Game" + dq + " in Unit 5 Lesson 5. Except now, all four arrows will allow the users to choose between colors and shapes.")
        studentInstruction1:Add(project1)
        //studentInstruction1:AddParagraph("The default screen looks like:")
        //studentInstruction1:AddImage("/files/code/Unit5/U5L10 Introduction Screen.png", "This is the default screen of the game. There are four arrows: up, down, left, and right and a center button. The default shape that is displayed to the user is a blue square above the arrows.")
        studentInstruction1:AddParagraph("When the user presses up and down arrows, they can select between different colors of the same shape. When the user presses left or right, they can select between different shapes of the same color.")

        bodyDiv:Add(studentInstruction1)

        bodyDiv:AddParagraph("Allow the students to discuss among themselves of what they are worrying about for this project.")
        bodyDiv:AddParagraph("The students might mention the following for " + dq + "Worried about:" + dq)
            UnorderedList getStartList1
                getStartList1:AddListItem("How to switch between colors and shapes")
                getStartList1:AddListItem("How to make the game accessible?")
        bodyDiv:Add(getStartList1)

            Paragraph getStart1
                getStart1:AddText("Remind students that almost anything is possible, start with things they know rather than things they're worried about.")
        bodyDiv:Add(getStart1)
        

        bodyDiv:AddHeading("Activity", 2)
        bodyDiv:AddParagraph("In this Activity, students will create an application that changes a Drawable's shape and its color in response to user's inputs. This project will focus on having students use what they've learned about KeyboardEvents and conditional if-else statements.")


/*
        studentInstruction:AddParagraph("To help you with the project, we have provided a template for you to start with.")
        studentInstruction:AddParagraph("Think about something that you already know how to do based on the description.")
        studentInstruction:AddParagraph("Because we have gone through adding Drawable objects to the screen we are familiar with how shapes are built and added to the screen.")
        studentInstruction:AddParagraph("As a reminder the action call for creating a color-filled square is: </br>LoadFilledRectangle(integer width, integer height, Libraries.Game.Graphics.Color color)")
        studentInstruction:AddParagraph("Your task would be to add code that displays the default shape with a default color (a blue square) to the screen.")
        SideBySideIDE CSP_U5L10_1
        CSP_U5L10_1:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 1")
        CSP_U5L10_1:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 1")
        CSP_U5L10_1:SetGameEnvironment(false)
        CSP_U5L10_1:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color


class Main is Game, KeyboardListener
    Drawable upArrow
    Drawable downArrow
    Drawable leftArrow 
    Drawable rightArrow 
    Drawable centerButton

    Drawable userChoiceShape

    text gameInstruction = &quotPlease use the up and down arrows to choose the desired color and the left and right arrows to choose the desired shape.&quot 

    Color color
    Color red = color:Red()
    Color blue = color:Blue()
    Color userChoiceColor = color:Blue()

    integer shapeCode = 0  //0: square, 1: rectangle, 2: triangle, 3: circle
    integer colorCode = 0  //0: blue, 1: black, 2: green, 3: red, 4: pink

    action Main
        StartGame()
    end

    action CreateGame
        upArrow:LoadFilledTriangle(350, 250, 400, 250, 375, 300, blue)
        Add(upArrow)

        centerButton:LoadFilledRectangle(45, 45, red)
        centerButton:SetCenter(375, 175)
        Add(centerButton)
        AddKeyboardListener(me)


        say &quotWelcome to the Game of Choice.&quot
        say gameInstruction 
        say &quotThe default choice is a blue square.&quot
    end

    action Update(number seconds)
    end
end

")

        CSP_U5L10_1:Setup()
        studentInstruction:Add(CSP_U5L10_1)
*/       

        bodyDiv:Add(break)

        studentInstruction:AddHeading("Student Instructions", 3)
        studentInstruction2:AddHeading("Adding the default shape to the screen", 4)
        studentInstruction2:AddParagraph("To help you with the project, we have provided a template for you to start with.")
        studentInstruction2:AddParagraph("Because we have gone through adding Drawable objects to the screen we are familiar with how shapes are built and added to the screen.")
        studentInstruction2:AddParagraph("As a reminder the action call for creating a color-filled square is: </br>LoadFilledRectangle(integer width, integer height, Libraries.Game.Graphics.Color color)")
        studentInstruction2:AddParagraph("The action call for setting the center (x, y) coordinate for a Drawable object is: </br>SetCenter(number setX, number setY)")
        studentInstruction2:AddParagraph("Your task would be to add code that displays the default shape filled with the default color (a blue square) to the screen.")
        studentInstruction2:AddParagraph("The dimension of the square should be 100 by 100 centered at the coordinate (325, 350)")
        studentInstruction2:AddParagraph("Think about what actions you can use from the <b>Drawable</b> library in Quorum")
        studentInstruction2:AddParagraph("To help other people or yourself understand your code, you can use comments as follows:")
        studentInstruction2:Add(preformatter:GeneratePreformattedCode(  "//here is what I did" + cr))
        bodyDiv:Add(studentInstruction2)

        SideBySideIDE CSP_U5L10_1
        CSP_U5L10_1:SetUniqueIdentifier("Selecting Favorite Color and Shape: Adding the Default Shape and Color")
        CSP_U5L10_1:GetIDETitle():AddText("Selecting Favorite Color and Shape: Adding the Default Shape and Color")
        CSP_U5L10_1:SetGameEnvironment(false)
        CSP_U5L10_1:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color


class Main is Game, KeyboardListener

    Drawable userChoiceShape

    text gameInstruction = &quotPlease use the up and down arrows to choose the 
    desired color and the left and right arrows to choose the desired shape.&quot 

    Color color
    Color red = color:Red()
    Color blue = color:Blue()
    Color userChoiceColor = color:Blue()

    integer shapeCode = 0  //0: square, 1: rectangle, 2: triangle, 3: circle
    integer colorCode = 0  //0: blue, 1: black, 2: green, 3: red, 4: pink

    action Main
        StartGame()
    end

    action CreateGame
        AddKeyboardListener(me)


        say &quotWelcome to the Game of Choice.&quot
        say gameInstruction 
        output gameInstruction
        say &quotThe default choice is a blue square.&quot

        //Add your code here to load the blue square to the screen


    end

    action Update(number seconds)
    end
end

")

        CSP_U5L10_1:Setup()
        studentInstruction2:Add(CSP_U5L10_1)
        bodyDiv:Add(break)

/*
        SideBySideIDE CSP_U5L10_2
        CSP_U5L10_2:SetUniqueIdentifier("Selecting Favorite Color and Shape: Adding the Default Shape and Color")
        CSP_U5L10_2:GetIDETitle():AddText("Selecting Favorite Color and Shape: Adding the Default Shape and Color")
        CSP_U5L10_2:SetGameEnvironment(false)
        CSP_U5L10_2:GetIDEInputArea():AddText("")
        CSP_U5L10_2:Setup()
        studentInstruction2:Add(CSP_U5L10_2)
        bodyDiv:Add(break)
*/


        studentInstruction3:AddHeading("Remove the default shape", 4)
        studentInstruction3:AddParagraph("Using the template below, which includes a template for the action named <b>PressedKey</b>, add the code that you came up with to add the default shape (blue square). Finally, add the line <b>Remove(userChoiceShape)</b> so that when the user presses the left key, the default blue square will disappear.")
        studentInstruction3:AddParagraph("Finally, add the line <b>Add(userChoiceShape)</b> so that when the user presses the right key, the default shape will appear again.")

        SideBySideIDE CSP_U5L10_3
        CSP_U5L10_3:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 3 Removing the Default Shape")
        CSP_U5L10_3:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 3 Removing the Default Shape")
        CSP_U5L10_3:SetGameEnvironment(false)
        CSP_U5L10_3:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color


class Main is Game, KeyboardListener

    Drawable userChoiceShape

    text gameInstruction = &quotPlease use the up and down arrows to choose the 
    desired color and the left and right arrows to choose the desired shape.&quot 

    Color color
    Color userChoiceColor = color:Blue()

    integer shapeCode = 0  //0: square, 1: rectangle, 2: triangle, 3: circle
    integer colorCode = 0  //0: blue, 1: black, 2: green, 3: red, 4: pink

    action Main
        StartGame()
    end

    action CreateGame
        AddKeyboardListener(me)


        say &quotWelcome to the Game of Choice.&quot
        say gameInstruction 
        output gameInstruction
        say &quotThe default choice is a blue square.&quot
    end

    action Update(number seconds)
    end


    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP

        elseif event:keyCode = event:DOWN

        elseif event:keyCode = event:LEFT 

        elseif event:keyCode = event:RIGHT 

        elseif event:keyCode = event:SPACE 

        elseif event:keyCode = event:ENTER

       end
    end
end

")
        CSP_U5L10_3:Setup()
        studentInstruction3:Add(CSP_U5L10_3)
        bodyDiv:Add(studentInstruction3)
        bodyDiv:Add(break)



        studentInstruction4:AddHeading("Speak out the choices", 4)
        studentInstruction4:AddParagraph("Given the template code below, add the code that you wrote to add the default blue square. Then, read the newly added action called <b>sayUserChoices()</b>. Answer the following:")
        UnorderedList I4
        I4:AddListItem("what does the variable <b>colorCode</b> represent")
        I4:AddListItem("what does the variable <b>shapeCode</b> represent")
        I4:AddListItem("does the comment inside the action help you and (if necessary) how would modify the comments")
        I4:AddListItem("why did we add the actions <b>sayUserChoices()</b> when the right, left, up, and down arrow keys are pressed")
        studentInstruction4:Add(I4)
        SideBySideIDE CSP_U5L10_4
        CSP_U5L10_4:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 4 Speak User Choices")
        CSP_U5L10_4:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 4 Speak User Choices")
        CSP_U5L10_4:SetGameEnvironment(false)
        CSP_U5L10_4:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color


class Main is Game, KeyboardListener
    Drawable userChoiceShape

    text gameInstruction = &quotPlease use the up and down arrows to choose the 
    desired color and the left and right arrows to choose the desired shape.&quot 

    Color color
    Color userChoiceColor = color:Blue()

    integer shapeCode = 0  //0: square, 1: rectangle, 2: triangle, 3: circle
    integer colorCode = 0  //0: blue, 1: black, 2: green, 3: red, 4: pink

    action Main
        StartGame()
    end

    action CreateGame
        AddKeyboardListener(me)


        say &quotWelcome to the Game of Choice.&quot
        say gameInstruction 
        output gameInstruction
        say &quotThe default choice is a blue square.&quot
    end

    action Update(number seconds)
    end


    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP
            say &quotUp&quot
            sayUserChoices()
        elseif event:keyCode = event:DOWN
            say &quotDown&quot
            sayUserChoices()
        elseif event:keyCode = event:LEFT 
            say &quotLeft&quot
            sayUserChoices()
        elseif event:keyCode = event:RIGHT 
            say &quotRight&quot
            sayUserChoices()
        elseif event:keyCode = event:SPACE 

        elseif event:keyCode = event:ENTER

       end
    end

    action sayUserChoices()
        //say the right color
        if colorCode = 0
            say &quotblue&quot
        elseif colorCode = 1
            say &quotblack&quot
        elseif colorCode = 2
            say &quotgreen&quot
        elseif colorCode = 3
            say &quotred&quot
        elseif colorCode = 4
            say &quotpink&quot
        end

        //say the right shape 
        if shapeCode = 0
            say &quotsquare&quot
        elseif shapeCode = 1
            say &quotrectangle&quot
        elseif shapeCode = 2
            say &quottriangle&quot
        elseif shapeCode = 3
            say &quotcircle&quot
        end
    end
end

")
        CSP_U5L10_4:Setup()
        studentInstruction4:Add(CSP_U5L10_4)
        bodyDiv:Add(studentInstruction4)
        bodyDiv:Add(break)



        studentInstruction5:AddHeading("Allowing the users to change shape and color", 4)
        studentInstruction5:AddParagraph("Given that we know how to notify the user of their current choice, now, we need to find a way to allow the user to change their choices using the arrow keys.")
        studentInstruction5:AddParagraph("Think about how you can add to or subtract from the <b>colorCode</b> variable and the <b>shapeCode</b> variables to allow the user to have different choices.")
        studentInstruction5:AddParagraph("Key things to remember:")

        UnorderedList I5
        I5:AddListItem("For <b>colorCode</b>, 0: blue, 1: black, 2: green, 3: red, 4: pink")
        I5:AddListItem("when the user presses the <b>up</b> key, add 1 to colorCode")
        I5:AddListItem("we want to be able to cycle through the colors, for example, pink should go back to blue")
        I5:AddListItem("when the user presses the <b>down</b> key, subtract 1 to colorCode")
        I5:AddListItem("blue should go to pink")
        I5:AddListItem("For <b>shapeCode</b>, 0: square, 1: rectangle, 2: triangle, 3: circle")
        I5:AddListItem("when the user presses the <b>right</b> key, add 1 to shapeCode, where adding one from the circle means the user choose square")
        I5:AddListItem("when the user presses the <b>left</b> key, subtract 1 to shapeCode, where subtracting one from the square means the user choose circle")
        studentInstruction5:Add(I5)

        SideBySideIDE CSP_U5L10_5
        CSP_U5L10_5:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 5 User Choices")
        CSP_U5L10_5:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 5 User Choices")
        CSP_U5L10_5:SetGameEnvironment(false)
        CSP_U5L10_5:GetIDEInputArea():AddText("
use Libraries.Game.Game
use Libraries.Interface.Events.KeyboardEvent
use Libraries.Interface.Events.KeyboardListener
use Libraries.Game.Graphics.Drawable
use Libraries.Game.Graphics.Color


class Main is Game, KeyboardListener
    Drawable userChoiceShape

    text gameInstruction = &quotPlease use the up and down arrows to choose the 
desired color and the left and right arrows to choose the desired shape.&quot 

    Color color
    Color userChoiceColor = color:Blue()

    integer shapeCode = 0  //0: square, 1: rectangle, 2: triangle, 3: circle
    integer colorCode = 0  //0: blue, 1: black, 2: green, 3: red, 4: pink

    action Main
        StartGame()
    end

    action CreateGame
        AddKeyboardListener(me)


        say &quotWelcome to the Game of Choice.&quot
        say gameInstruction 
        output gameInstruction
        say &quotThe default choice is a blue square.&quot
    end

    action Update(number seconds)
    end


    action PressedKey(KeyboardEvent event)
        if event:keyCode = event:UP
            say &quotUp&quot
            sayUserChoices()
        elseif event:keyCode = event:DOWN
            say &quotDown&quot
            sayUserChoices()
        elseif event:keyCode = event:LEFT 
            say &quotLeft&quot
            sayUserChoices()
        elseif event:keyCode = event:RIGHT 
            say &quotRight&quot
            sayUserChoices()
        elseif event:keyCode = event:SPACE 

        elseif event:keyCode = event:ENTER

       end
    end

    action sayUserChoices()
        //say the right color
        if colorCode = 0
            say &quotblue&quot
        elseif colorCode = 1
            say &quotblack&quot
        elseif colorCode = 2
            say &quotgreen&quot
        elseif colorCode = 3
            say &quotred&quot
        elseif colorCode = 4
            say &quotpink&quot
        end

        //say the right shape 
        if shapeCode = 0
            say &quotsquare&quot
        elseif shapeCode = 1
            say &quotrectangle&quot
        elseif shapeCode = 2
            say &quottriangle&quot
        elseif shapeCode = 3
            say &quotcircle&quot
        end
    end
end
")
        CSP_U5L10_5:Setup()
        studentInstruction5:Add(CSP_U5L10_5)
        bodyDiv:Add(studentInstruction5)
        bodyDiv:Add(break)



        studentInstruction6:AddHeading("Changing Shape and Color", 4)
        studentInstruction6:AddParagraph("After you have acknowledged that the user has changed colors and shapes. Find a way that <i>first</i> changes the <b>userChoiceColor</b>; second, remove the shape that is currently displaying. Finally, change the shape of <b>userChoiceShape</b> and display the right shape. Think about if you have to repeat this process over and over again and what you should do if that is the case.")
        studentInstruction6:AddParagraph("Think back on how you removed and added the default blue square before as a hint.")
        studentInstruction6:AddParagraph("Below is the code segment to use to display the desired square at the right location:")
        studentInstruction6:Add(preformatter:GeneratePreformattedCode("userChoiceShape:LoadFilledRectangle(100,100,userChoiceColor)" + cr
            + "userChoiceShape:SetPosition(325, 350)"))
        studentInstruction6:AddParagraph("Below is the code segment to use to display the desired rectangle at the right location:")
        studentInstruction6:Add(preformatter:GeneratePreformattedCode("userChoiceShape:LoadFilledRectangle(200,100,userChoiceColor)" + cr
            + "userChoiceShape:SetPosition(275, 350)"))
        studentInstruction6:AddParagraph("Below is the code segment to use to display the desired triangle at the right location:")
        studentInstruction6:Add(preformatter:GeneratePreformattedCode("userChoiceShape:LoadFilledTriangle(325, 350, 425, 350, 375,450,userChoiceColor)" + cr
            + "userChoiceShape:SetPosition(0,0)"))
        studentInstruction6:AddParagraph("Below is the code segment to use to display the desired circle at the right location:")
        studentInstruction6:Add(preformatter:GeneratePreformattedCode("userChoiceShape:LoadFilledCircle(50,userChoiceColor)" + cr
            + "userChoiceShape:SetPosition(325, 350)"))

        SideBySideIDE CSP_U5L10_6
        CSP_U5L10_6:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 6 Displaying User Choices")
        CSP_U5L10_6:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 6 Displaying User Choices")
        CSP_U5L10_6:SetGameEnvironment(false)
        CSP_U5L10_6:GetIDEInputArea():AddText("")
        CSP_U5L10_6:Setup()
        studentInstruction6:Add(CSP_U5L10_6)
        bodyDiv:Add(studentInstruction6)
        bodyDiv:Add(break)



        studentInstruction7:AddHeading("Final Touches",4)
        studentInstruction7:AddParagraph("Add to your existing code the following:")
        UnorderedList I7
        I7:AddListItem("When the user presses the <b>Enter</b> key, given an audio feedback using <b>say</b> to notify the user that they have confirmed their choice of a certain color and shape.")
        I7:AddListItem("When the user wants to be reminded of the game instruction, they can press the <b>Space</b> key to repeat the instructions to the game.")
        studentInstruction7:Add(I7)
        SideBySideIDE CSP_U5L10_7
        CSP_U5L10_7:SetUniqueIdentifier("Selecting Favorite Color and Shape: Part 7 Final Touches")
        CSP_U5L10_7:GetIDETitle():AddText("Selecting Favorite Color and Shape: Part 7 Final Touches")
        CSP_U5L10_7:SetGameEnvironment(false)
        CSP_U5L10_7:GetIDEInputArea():AddText("")
        CSP_U5L10_7:Setup()
        studentInstruction7:Add(CSP_U5L10_7)
        bodyDiv:Add(studentInstruction7)
        bodyDiv:Add(break)



        bodyDiv:AddHeading("Wrap Up", 2)

        bodyDiv:AddParagraph("Make sure the students understand the following:")
        UnorderedList wu1
        wu1:AddListItem("<b>How and why writing code is a creative process</b>.")
        wu1:AddListItem("<b>There is no one correct way to do things</b>")
        wu1:AddListItem("<b>There may not always be a smooth path to a solution</b>")
        bodyDiv:Add(wu1)


        bodyDiv:AddHeading("Connections to the AP Create Performance Task", 4)
        bodyDiv:AddParagraph("After completing this lesson students will have the minimum skills they need to complete the AP Create PT. Time permitting you should continue through Unit 5 Chapter 2 and get as far as you can before starting the Create PT - the more programming students have under their belts the better.")
        bodyDiv:AddParagraph("When you do opt to begin it, students should use the materials in the AP Create PT Unit to prepare. ")
        UnorderedList wu
        wu:AddListItem("You could optionally have students practice writing responses to the real AP Create Task writing prompts using this document as a guide.")
        wu:AddListItem("Optionally pull out the " + dq + "AP Digital Portfolio Student Guide - College Board Handout" + dq + " so that you can have it on hand to review the different components of the Create PT.")
        bodyDiv:Add(wu)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("AP Practice - Create PT - Abstraction",4)
        studentInstruction12:AddHeading("Student Instructions",4)
        studentInstruction12:AddParagraph("One component of the AP Create Performance Task is describing an abstraction within your program.")
        UnorderedList el
        el:AddText("2. <b>Written Responses</b>")
        studentInstruction12:Add(el)
        UnorderedList el1
        el1:AddText("2d. Capture and paste a program code segment that contains an abstraction you developed individually on your own (marked with a <b>rectangle</b> in <b>section 3</b> below). This abstraction must integrate mathematical and logical concepts. Explain how your abstraction helped manage the complexity of your program. (Must not exceed 200 words)")
        studentInstruction12:Add(el1)
        studentInstruction12:AddParagraph("Here's one row of the scoring guide for this question")
        studentInstruction12:AddImage("/files/code/Unit5/U5L10AP1.png","Row 8 of the scoring guide")
        studentInstruction12:AddParagraph("Using the code selection below (taken from the Color-sound Sleuth Activity), <b>describe how this abstraction manages complexity</b>.")
        bodyDiv:Add(studentInstruction12)
        bodyDiv:Add(break)
        bodyDiv:Add(break)


        bodyDiv:AddHeading("AP Practice - Identify the Algorithm",4)
        studentInstruction13:AddHeading("Student Instructions",4)
        studentInstruction13:AddParagraph("One component of the AP Create Performance Task is selecting an algorithm that you developed.")
        UnorderedList el2
        el2:AddText("3. <b>Program Code</b>")
        studentInstruction13:Add(el2)
        UnorderedList el3
        el3:AddText("Mark with an oval the segment of program code that implements the algorithm you created for your program that integrates other algorithms and integrates mathematical and/or logical concepts.")
        studentInstruction13:Add(el3)
        studentInstruction13:AddParagraph("Here's the scoring guide for this question:")
        studentInstruction13:AddImage("/files/code/Unit5/U5L10AP3.png","Row 4, 5, 6 of the scoring guide")
        studentInstruction13:AddParagraph("Given the code below, decide which of the choices (A, B, or C) best meets the criteria as a student-developed algorithm. Explain your answer using the criteria in the scoring guide.")
        studentInstruction13:AddParagraph("<b>Choice A</b>:")
        studentInstruction13:Add(preformatter:GeneratePreformattedCode("action sayUserChoices()" + cr
    +"    //say the right color" + cr
    +"    if colorCode = 0" + cr
    +"        say " + dq + "blue" + dq + cr
    +"    elseif colorCode = 1" + cr
    +"        say " + dq + "black" + dq + cr
    +"    elseif colorCode = 2" + cr
    +"        say " + dq + "green" + cr
    +"    elseif colorCode = 3" + cr
    +"        say " + dq + "red" + dq + cr
    +"    elseif colorCode = 4" + cr
    +"        say " + dq + "pink" + dq + cr
    +"    end" + cr
    + " " + cr
    +"    //say the right shape " + cr
    +"    if shapeCode = 0" + cr
    +"        say " + dq + "square" + dq + cr
    +"    elseif shapeCode = 1" + cr
    +"        say " + dq + "rectangle" + dq + cr
    +"    elseif shapeCode = 2" + cr
    +"        say " + dq + "triangle" + dq + cr
    +"    elseif shapeCode = 3" + cr
    +"        say " + dq + "circle" + dq + cr
    +"    end" + cr
    +"end"))

        studentInstruction13:AddParagraph("<b>Choice B</b>:")
        studentInstruction13:Add(preformatter:GeneratePreformattedCode("userChoiceShape:LoadFilledRectangle(100,100,userChoiceColor)"))
   
        studentInstruction13:AddParagraph("<b>Choice C</b>:")
        studentInstruction13:Add(preformatter:GeneratePreformattedCode("action CreateGame" + cr
    +"    upArrow:LoadFilledTriangle(350, 250, 400, 250, 375, 300, blue)" + cr
    +"    Add(upArrow)" + cr
    +"        " + cr
    +"    centerButton:LoadFilledRectangle(45, 45, red)" + cr
    +"    centerButton:SetCenter(375, 175)" + cr
    +"    Add(centerButton)" + cr
    +"    AddKeyboardListener(me)" + cr
    + " " + cr

    +"    say " + dq + "Welcome to the Game of Choice." + dq + cr
    +"    say gameInstruction " + cr
    +"    say " + dq + "The default choice is a blue square." + dq + cr
    +"end"))

        bodyDiv:Add(studentInstruction13)
        bodyDiv:Add(break)
        bodyDiv:Add(break)


        bodyDiv:AddHeading("AP Practice - Create PT - Algorithm",4)
        studentInstruction14:AddHeading("Student Instructions",4)
        studentInstruction14:AddParagraph("One component of the AP Create Performance Task is selecting an algorithm that you developed.")
        UnorderedList el4
        el4:AddText("2. <b>Written Responses</b>")
        studentInstruction14:Add(el4)
        UnorderedList el5
        el5:AddText("2c. Capture and paste a program code segment that implements an algorithm (marked with an oval in section 3 below) and that is fundamental for your program to achieve its intended purpose. This code segment must be an algorithm you developed individually on your own, must include two or more algorithms, and must integrate mathematical and/or logical concepts. Describe how each algorithm within your selected algorithm functions independently, as well as in combination with others, to form a new algorithm that helps to achieve the intended purpose of the program. (Must not exceed 200 words)")
        studentInstruction14:Add(el5)
        studentInstruction14:AddParagraph("Here's the scoring guide for this question:")
        studentInstruction14:AddImage("/files/code/Unit5/U5L10AP5.png","Row 5, 6 of the scoring guide")
        studentInstruction14:AddParagraph("Given the following program, write response 2c describing the algorithm. Make sure you include:")
        UnorderedList el6
        el6:AddListItem("Name your main algorithm and each of the two sub-algorithms")
        el6:AddListItem("Explain what each sub-algorithm does and how the code of each actually works")
        el6:AddListItem("Explain how the main algorithm works and how it helps achieve the purpose of the program")
        studentInstruction14:Add(el6)
        //studentInstruction14:AddImage("/files/code/Unit5/U5L10AP6.png","Sample code")
        bodyDiv:Add(studentInstruction14)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.1.1 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.2.1 (A, B, C, D, E)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.2.3 (A, C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.2.4 (A, C, D, E, F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "1.2.5 (D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.1 (A)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.1 (A, C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.1.2 (G)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.1 (A, B, C, D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (A, B, C, D, E, F, G, H, I, J)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.3 (A, B, C, D, E, F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.2.1 (A, B, C, D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.3.1 (A, B, C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (C, D, E, F, G)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.5.1 (D, E)")
        bodyDiv:Add(list)

/* Completed 5/26/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn the concept of the thisnking process to build an Event Driven App with if-statements"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 Lesson 10: (Building an App: Color-Sound Sleuth)"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 10: Building an App: Color-Sound Sleuth"
    end
    action GetShortDescription returns text
        return "Learn the thinking process to build an Event Driven App with if-statements"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson10A.html"
    end

end

 
    
