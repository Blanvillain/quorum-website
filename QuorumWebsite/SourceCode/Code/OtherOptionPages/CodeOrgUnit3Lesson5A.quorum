use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson5A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 5: Creating Actions")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 5: Creating Actions", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        //Division box

        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")

        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

        Division studentInstruction6
        studentInstruction6:SetClassAttribute("cool-box")

        Division studentInstruction7
        studentInstruction7:SetClassAttribute("cool-box")

        Division studentInstruction8
        studentInstruction8:SetClassAttribute("cool-box")

        Division studentInstruction9
        studentInstruction9:SetClassAttribute("cool-box")




        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("In this lesson, the students will learn to define 
                            and call procedures (in the Quorum Language, these procedures are called 
                            " + dq + "actions" + dq + "; but in JavaScript, procedures are called " + dq + "functions" + dq + "). 
                            This will help the students create and give a name to 
                            a group of commands for easy and repeated use in their code. 
                            They will be introduced to functions as a form of ")
                ov1:AddLink("abstraction", "https://stackoverflow.com/questions/21220155/what-does-abstraction-mean-in-programming")
                ov1:AddText(" that enables them to write code in larger chunks 
                            and focus on what the function does, rather than how the 
                            function does something. 
                            As they explore the use of functions through a sequence of activities here, 
                            they will be asked to think about where they can identify the 
                            need for functions and how these functions can make 
                            their code clearer or more concise. 
                            At the end of the lesson they will review the concept of abstraction and are introduced to elements of the ")
                ov1:AddLink("Create Performance Task", "https://apcentral.collegeboard.org/courses/ap-computer-science-principles/exam#")
                ov1:AddText(", (required for the AP Computer Science exam)
                            in preparation for the Practice Performance Task at the end of Unit 3.")
        bodyDiv:Add(ov1)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Abstraction: ", "a simplified representation of something more complex. Abstractions allow you to hide details to help you manage complexity, focus on relevant concepts, and reason about problems at a higher level.")
                AddListItemWithBoldAtFront(voc, "Action (Function):", " a named group of programming instructions. Functions are reusable abstractions that reduce the complexity of writing and maintaining programs")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Recognize functions in programs as a form of abstraction.")
                goalList:AddListItem("Write a program that solves a turtle drawing problem using multiple levels of abstraction (i.e. functions that call other functions within your code).")
                goalList:AddListItem("Explain why and how functions can make code easier to read and maintain.")
                goalList:AddListItem("Define and call simple functions that solve turtle drawing tasks.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("Programming languages must necessarily define 
                        the meaning of a set of commands which are generally useful 
                        and applicable. In order to extend their functionality, nearly 
                        all programming languages provide a means for defining and 
                        calling new commands which programmers design to fit the needs 
                        of the problems they are trying to solve. Defining functions is 
                        an example of how computer scientists use abstraction to solve 
                        problems. A programmer will design a solution to a small, well-defined 
                        portion of the task and then give a name to the associated code. 
                        Whenever that problem arises again, the programmer can invoke the 
                        new function by name, without having to solve the problem again. 
                        This ability to refer to complex functionality by simple, meaningful 
                        names allows for programs to be written in more intuitive ways that 
                        reflect the relationships between different blocks of code.")
        bodyDiv:Add(purpose)
            

        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip1
                tTip1:SetClassAttribute("cool-box")
                tTip1:AddText("In this Quorum CSP curriculum, we will use 
                    the word " + dq + "Action" + dq + " in place for the " + dq + "Function" + dq + " that is 
                    used in the Code.org CSP curriculum.")
        bodyDiv:Add(tTip1)



        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddHeading("New Code", 4)
            UnorderedList code
                AddListItemWithBoldAtFront(code, "Define an action - ", "action MyAction")
                AddListItemWithBoldAtFront(code, "Call an action - ", "MyAction()")
        bodyDiv:Add(code)
            Paragraph getStart
                getStart:AddText("In the previous lesson, students created 
                    simple turtle drawings using only four commands. At some point they 
                    probably wished that more commands were available to them. Ask them to describe 
                    a command they wanted to be able to use and explain why they wanted 
                    to use it.")
        bodyDiv:Add(getStart)
            Paragraph getStart2
                getStart2:AddText("Programming languages will always have some 
                    commands that are already defined, but there will be many 
                    instances when the exact command that the students want isn't available. 
                    Today the students are going to start exploring a powerful feature 
                    of most programming languages that will allow them to overcome 
                    this issue and create commands of their own. They have been 
                    solving turtle challenges with a limited set of commands. 
                    They can create these new commands themselves, using the 
                    original turtle commands as building blocks. They may 
                    like to add the following commands:")
        bodyDiv:Add(getStart2)

            UnorderedList gsList
                gsList:AddListItem("A command that turns the turtle to the right")
                gsList:AddListItem("A command that moves forward more than one space")
                gsList:AddListItem("A command that creates a repeated pattern or shape")
        bodyDiv:Add(gsList)



        bodyDiv:AddHeading("Activity 1: Defining and Calling an " + dq + "action" + dq + " in the Quorum Programming Language", 2)
        bodyDiv:AddHeading("Pre-Activity: Video " + dq + "Introduction to Functions" + dq, 3)

        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip2
                tTip2:SetClassAttribute("cool-box")
                tTip2:AddText("In the following video, the concept of " + dq + "Functions" + dq + " 
                    is described with the example of " + dq + "Turtle Programming" + dq + "  
                    tool used in the Code.org curriculum. While the Code.org Turtle 
                    Programming tool primarily uses a " + dq + "block language" + dq + " 
                    (a language that could be written by combining picture 
                    blocks on the computer screen), the " + dq + "Quorum Turtle Module" + dq + " 
                    uses a " + dq + "text language." + dq + " Although the style of the coding is 
                    different between the two languages, the concept that supports 
                    the execution of the code/command is very similar. 
                    Therefore, viewing this video before you start the 
                    activity is still beneficial for your learning.")
        bodyDiv:Add(tTip2)
       
            InlineFrame inlineFrame
                inlineFrame:SetHeight("480")
                inlineFrame:SetWidth("854")
                inlineFrame:SetAddress("https://www.youtube.com/embed/yPWQfa4CHbw")
        bodyDiv:Add(inlineFrame)
            UnorderedList vid
                vid:AddListItemLink("Turtle Programming - Video", "https://www.youtube.com/watch?v=yPWQfa4CHbw")
        bodyDiv:Add(vid)
        //bodyDiv:AddHeading("Activity", 3)
            Paragraph quorumAction
                quorumAction:AddText("In order to " + dq + "<b>define an action</b>" + dq + " in Quorum Language, 
                    there are a few simple rules and suggestions students should follow when they code. 
                    When the students define an " + dq + "action," + dq + " they should write the word " + dq + "action" + dq + " 
                    (with lower case) first in the line, then type one blank 
                    space and the name of the action. The most important thing 
                    when defining an action is that they need to write the 
                    " + dq + "end" + dq + " a few lines below to indicate the end of the particular 
                    action. They would write what the action does on the lines 
                    in-between the lines showing the name of the action and the 
                    line showing the corresponding " + dq + "end." + dq)
        bodyDiv:Add(quorumAction)
        
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "action NameOfTheAction" + cr
                                            +   "   //what the action does" + cr
                                            +   "end"))

            Paragraph quorumAction2
                quorumAction2:AddText("When they give a name to the action - <b>declaring the action</b>, 
                    it is a good idea to give it a name that makes sense to describe 
                    what the " + dq + "action" + dq + " does. It is also recommended in the Quorum 
                    Language that the students start the name of the action with uppercase 
                    letter. If the name is long, they would use the convention called 
                    " + dq + "<b>Pascal Naming Convention</b>" + dq + " - also called " + dq + "Camel convention." + dq + " With 
                    Pascal Convention, they would capitalize the beginning letter of 
                    the each word used in the action. For example, if they are creating 
                    the action that makes the " + dq + "turtle" + dq + " to spin three times, they would 
                    write the line in the following manner:")
        bodyDiv:Add(quorumAction2)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "action SpinThreeTimes" + cr
                                                        +   "" + cr
                                                        +   "end"))
            Paragraph quorumAction3
                quorumAction3:AddText("When they are <b>calling this action</b> in 
                    Quorum Language, they would add opening and closing parenthesis 
                    right after the name of the action, and write it outside 
                    of the action. The following is an example.")
        bodyDiv:Add(quorumAction3)
        bodyDiv:Add(preformatter:GeneratePreformattedCode(  "SpinThreeTimes()"))
        bodyDiv:AddParagraph("In summary, the students should be aware of the following:")
            UnorderedList ptList
                AddListItemWithBoldAtFront(ptList, "CamelCase: ", "action names are written in the CamelCase. " + dq + "Camel Case" + dq + " refers to a stylized way of writing compound words or phrases. This means that multi-word action names are made a single word which begins in uppercase and uses uppercase letters to indicate the start of a new word. For example: <b>CamelCaseAction()</b>")
                AddListItemWithBoldAtFront(ptList, "action Definitions at Bottom: ", "action definitions appear at the bottom of the program. This is done so that the first line of the program is the first line of code actually run. The opposite format is also very common.")
                AddListItemWithBoldAtFront(ptList, "actions Names Can't Start with Numbers: ", "In most programming languages, including JavaScript, action names are not allowed to begin with numbers or most symbols. Underscores, however, is allowed.")
        bodyDiv:Add(ptList)


        bodyDiv:Add(break)
        bodyDiv:Add(break)
        bodyDiv:AddHeading("Challenge 4: Turn the turtle around", 3)
        studentInstruction:AddHeading("Student Instructions",4)
            Paragraph chlg4
                chlg4:AddText("Start the turtle on the dot named <b>(5, 5)</b>. Then, define an action called TurnAround which turns 
                    the turtle around. Then, move the turtle forward one space.")
        studentInstruction:Add(chlg4)


        SideBySideIDE CSP_U3L05_c4
        CSP_U3L05_c4:SetUniqueIdentifier("CSP_U3L05_c4")
        CSP_U3L05_c4:GetIDETitle():AddText("Quorum Turtle Module: Challenge 4")
        CSP_U3L05_c4:SetGameEnvironment(false)
        CSP_U3L05_c4:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c4:Setup()
        studentInstruction:Add(CSP_U3L05_c4)
        bodyDiv:Add(studentInstruction)


            Paragraph chlg4_1
                chlg4_1:AddText("This time the students will write their action code in the area outside the <b>TurtleCommands</b> region and inside the <b>Main</b> region. Once they have defined the 
                    action, they have to call it in inside the <b>TurtleCommands</b> region. Typically, someone will call an action in lines of code above the <b>action 
                    definition</b> - this might make the students feel like they are working in reverse, 
                    since they first write the code to define the action and then add a line to call it.")
        bodyDiv:Add(chlg4_1)

/*
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
          StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(5,5)
        TurnAround()
        MoveForward()
     end

     action TurnAround
        TurnLeft()
        TurnLeft()
     end
end
*/

        bodyDiv:AddHeading("Challenge 5: Draw a " + dq + "Plus Sign" + dq, 3)
            Paragraph chlg5
                chlg5:AddText("This challenge allows the students to get some more practice calling an action by using 
                    <b>TurnAround()</b> along with the <b>MoveForward()</b> action.")
        bodyDiv:Add(chlg5)

        studentInstruction1:AddHeading("Student Instructions",4)
        studentInstruction1:AddParagraph("Start the turtle at <b>(6, 5)</b>. Create a plus sign around the turtle's first position. 
                    The turtle should end where it started, which is the middle 
                    of the plus sign, facing up. Each of the four segments of the plus sign 
                    are one <b>MoveForward()</b> long.")
        studentInstruction1:AddImage("/files/code/Unit3/U3L5_Challenge5.png","Turtle at position (6,5) on a plus sign")
        SideBySideIDE CSP_U3L05_c5
        CSP_U3L05_c5:SetUniqueIdentifier("CSP_U3L05_c5")
        CSP_U3L05_c5:GetIDETitle():AddText("Quorum Turtle Module: Challenge 5")
        CSP_U3L05_c5:SetGameEnvironment(false)
        CSP_U3L05_c5:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c5:Setup()
        studentInstruction1:Add(CSP_U3L05_c5)


        bodyDiv:Add(studentInstruction1)


//New lines begin: . New lines begin: (5, 5) to (6, 5) to (7, 5). End of lines. New lines begin: (6, 4) to (6, 5) to (6, 6). End of lines
            Paragraph chlg5_1
                chlg5_1:AddText("Students should refer to the following lines: (5, 5) to (6, 5) to (7, 5); (6, 4) to (6, 5) to (6, 6) 
                    (The order would depend on how the students wrote their code.)")
        bodyDiv:Add(chlg5_1)

        bodyDiv:AddHeading("Tips", 4)
            Paragraph pTip
                pTip:AddText("The exemplar programs have been written in the 
                    style that will be favored in this curriculum. These choices do not 
                    affect the functionality of a program but may affect the clarity with 
                    which a program can be read. In practice, so long as a consistent style 
                    is used, programs will be easier to read and write.")
        bodyDiv:Add(pTip)


        bodyDiv:AddHeading("Challenge 6: Draw a Rectangle", 3)

        studentInstruction2:AddHeading("Student Instructions",4)
            Paragraph chlg6
                chlg6:AddText("Let the turtle start on the dot <b>(6, 5)</b>. Create an action called <b>TurnRight()</b>. Start by adding code inside the action 
                    definition that will turn the turtle to the right (by turning 
                    left three times) when called. Then use this action in some 
                    code to draw a rectangle. Make sure the turtle 
                    ends facing the same direction and in the same location it started. 
                    As an example, try to make a rectangle that is 2 moveForwards tall and 1 moveForward wide.")
        studentInstruction2:Add(chlg6)

        SideBySideIDE CSP_U3L05_c6
        CSP_U3L05_c6:SetUniqueIdentifier("CSP_U3L05_c6")
        CSP_U3L05_c6:GetIDETitle():AddText("Quorum Turtle Module: Challenge 6")
        CSP_U3L05_c6:SetGameEnvironment(false)
        CSP_U3L05_c6:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c6:Setup()
        studentInstruction2:Add(CSP_U3L05_c6)


        bodyDiv:Add(studentInstruction2)


            Paragraph chlg6_1
                chlg6_1:AddText("The turtle starts on dot E5. When the students have finished running their code, 
                    ask them to check the lines drawn by using the <b>OutputLines()</b> command. 
                    The following is an example the lines that should be drawn: 
                    (5, 4) to (5, 5) to (5, 6) to (6, 6) to (6, 5) to (6, 4) to (5, 4).")
        bodyDiv:Add(chlg6_1)

//New lines begin: . New lines begin: (5, 4) to (5, 5) to (5, 6) to (6, 6) to (6, 5) to (6, 4) to (5, 4). End of lines


        bodyDiv:AddHeading("Activity 2: Coding Challenges - Part 2", 2)
        bodyDiv:AddHeading("Prerequisite for the Activity: Abstraction - Managing Complexity", 3)
        bodyDiv:AddHeading("What is an abstraction?", 4)
        bodyDiv:AddHeading("Using abstractions in daily life", 5)
            Paragraph abst
                abst:AddText("Modern life is filled with complex systems. 
                    For example, consider a train system. It's theoretically possible 
                    to know the exact dimensions and turns of every rail on the system, 
                    what trains are used to take us to our destination, and how much fuel 
                    the train would need. If we just want to get from one place to another, 
                    however, these details are useless and even distracting.") 
        bodyDiv:Add(abst)
        bodyDiv:AddParagraph("We need 
                    simpler representations of this complex metro system, like a map. Since all of the details of the dimensions of the rail, 
                    what kind of train, and how much fuel is needed is taken care of the company 
                    that provide the train rides, we only need to know the surface of 
                    how to use the train system. And " + dq + "how to use the train system" + dq + " is 
                    summarized on the map, where the map is the abstraction of the train system.")

        bodyDiv:AddHeading("Description of an Image", 5)
            Paragraph imgDesc
                imgDesc:SetClassAttribute("cool-box")
                imgDesc:AddText("The image below shows a simplified map 
                    of a train route system in a metropolitan area. 
                    The map shows multiple colored lines, intersecting 
                    each other. It also shows hundreds of train stops on 
                    each line with their names.")
        bodyDiv:Add(imgDesc)

        bodyDiv:AddImage("/files/code/Unit3/TrainMap.jpg", "Train Route Map")
        
        bodyDiv:AddHeading("Abstractions and Computer Science", 3)
        bodyDiv:AddHeading("What it means in programming", 4)
            Paragraph abCS2
                abCS2:AddText("Programs are complex systems. Individual 
                    commands may be easy to understand, but it can quickly become difficult 
                    to understand the logic and relationships connecting them. We need 
                    abstractions in our program's code to let us " + dq + "box up" + dq + " these details 
                    so that we can focus on the bigger problem we're trying to solve.")
        bodyDiv:Add(abCS2)
        bodyDiv:AddHeading("Procedures (functions) are abstractions that we make", 4)
            Paragraph abCS3
                abCS3:AddText("Procedures 
                    are abstractions that the students will create in this lesson. For example, by writing a function 
                    called <b>drawRectangle()</b>, they can " + dq + "box up" + dq + " and name the code necessary 
                    to draw a rectangle. Once they have tested that function and it works, 
                    they don't need to worry about the details of how it works anymore.")
        bodyDiv:Add(abCS3)
            Paragraph tTipab
                tTipab:SetClassAttribute("cool-box")
                tTipab:AddText("The same concept applies in the Quorum 
                    Programming Language. Instead of " + dq + "boxing up" + dq + " as a block language would do, 
                    the students will give the starting point of the action on one line by defining the 
                    action - such as " + dq + "action DrawBox." + dq + " Then they should put " + dq + "end" + dq + " on the 
                    line that defines where action stops.")
        bodyDiv:Add(tTipab)
           
        bodyDiv:AddHeading("Abstraction, Unit 3, and the AP Exam", 3)
        bodyDiv:AddParagraph("This unit is largely about 
                    teaching the students:")
            UnorderedList abAPlist
                abAPlist:AddListItem("to use abstraction as a problem solving technique")
                abAPlist:AddListItem("to create and use abstractions in programs you write")
                abAPlist:AddListItem("to communicate about how abstraction helps you manage complexity")
        bodyDiv:Add(abAPlist)
        Paragraph breaking
            breaking:AddText(" ")
            bodyDiv:Add(breaking)
         //add a line break
        bodyDiv:AddHeading("Abstraction and AP Computer Science Principles", 4)
            OrderedList abOlist
                abOlist:AddListItem("Abstraction is one of the seven big ideas of AP Computer Science Principles.")
                abOlist:AddListItem("For the <i>AP Create Performance Task</i> the students need 
                    to..." + dq + "[identify] a code segment that contains an abstraction you 
                    developed...[and]...explain how the abstraction helped manage the 
                    complexity of your program." + dq)
        bodyDiv:Add(abOlist)



        bodyDiv:AddHeading("Challenge 7: Making the previous code into Action", 3)
        studentInstruction3:AddHeading("Student Instructions",4)
            Paragraph chlg7
                chlg7:AddText("Take your code from previous challenges that draws the rectangle 
                    and move into a new action called <b>DrawRectangle()</b>. The 
                    first line of the code inside <b>TurtleCommands</b> should be a single call to 
                    <b>DrawRectangle()</b>. The rest of the code should just be 
                    action definitions.")
        studentInstruction3:Add(chlg7)

        SideBySideIDE CSP_U3L05_c7
        CSP_U3L05_c7:SetUniqueIdentifier("CSP_U3L05_c7")
        CSP_U3L05_c7:GetIDETitle():AddText("Quorum Turtle Module: Challenge 7")
        CSP_U3L05_c7:SetGameEnvironment(false)
        CSP_U3L05_c7:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c7:Setup()
        studentInstruction3:Add(CSP_U3L05_c7)

        bodyDiv:Add(studentInstruction3)

        bodyDiv:AddParagraph("NOTE: the program will still do the 
                    same thing. We are just changing the way it is written to 
                    demonstrate to the students that they can use functions that they have already written 
                    as building blocks in new functions.")
                    bodyDiv:Add(break)


        bodyDiv:AddHeading("Challenge 8: Drawing a Diamond - Step 1: Introduction", 3)
            Paragraph chlg8
                chlg8:AddText("This is the introduction to the " + dq + "Drawing a Diamond" + dq + " series of challenges 
                        that shows the students the benefit of thinking about programming tasks 
                        in terms of writing functions. The goal of this introduction is to facilitate discussion in class.")
        bodyDiv:Add(chlg8)

        bodyDiv:AddImage("/files/code/Unit3/diamond1.png", "Turtle at position (4,0) on the corner of a jagged diamond")

            Paragraph chlg8_1
                chlg8_1:AddText("Discuss the following:")
            bodyDiv:Add(chlg8_1)
            UnorderedList chlg8List
                chlg8List:AddListItem("Over the next 3 challenges we are going 
                    to write a program that draws the figure shown below which sort of 
                    looks like a jagged diamond shape. ")
                chlg8List:AddListItem("When inspecting this image you 
                    might recognize elements that repeat: this is a 4-sided figure, 
                    and each side is made up of some zig-zag steps.")
                chlg8List:AddListItem("We're going to break the programming 
                    down into usable parts and then use those parts as building blocks 
                    to make this more complex drawing.")
                chlg8List:AddListItem("First let's define a function 
                    that draws just one of these zig-zag steps. In one of the previous challenges, you wrote an action called <b>TurnRight()</b>. 
                    This action will come in handy for this series of challenges.")
        bodyDiv:Add(chlg8List)
        bodyDiv:Add(break)


        studentInstruction4:AddHeading("Student Instructions",4)
            Paragraph chlg8_2
                chlg8_2:AddText("Start the turtle at the location <b>(0, 4)</b>. Define an action named action <b>DrawStep()</b> that 
                    makes the turtle move forward and left, and then turns itself 
                    to the position facing up. ")
                    
        studentInstruction4:Add(chlg8_2)
        SideBySideIDE CSP_U3L05_c8
        CSP_U3L05_c8:SetUniqueIdentifier("CSP_U3L05_c8")
        CSP_U3L05_c8:GetIDETitle():AddText("Quorum Turtle Module: Challenge 8")
        CSP_U3L05_c8:SetGameEnvironment(false)
        CSP_U3L05_c8:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c8:Setup()
        studentInstruction4:Add(CSP_U3L05_c8)

        bodyDiv:Add(studentInstruction4)


//New lines begin: . New lines begin: (4, 0) to (4, 1) to (3, 1)
        bodyDiv:AddParagraph("After they test their code, their code should draw the following lines: (4, 0) to (4, 1) to (3, 1).")
                    bodyDiv:Add(break)

        bodyDiv:AddHeading("Tips: MISCONCEPTION - Defining one action inside another", 4)
            UnorderedList pTip2
                pTip2:AddListItem("Be careful not to enclose one action 
                        definition within the other. When an instruction says something like: 
                        " + dq + "Make sure to make a call to <b>TurnRight()</b> inside the <b>DrawStep()</b> action," + dq + "  
                        some of the students might think to place the definition for <b>TurnRight()</b> 
                        inside the definition of <b>DrawStep()</b>. This code will not work because even 
                        though <b>TurnRight</b> is defined it is never called. ")
                bodyDiv:Add(preformatter:GeneratePreformattedCode(  "//this is an example of a mistake" + cr
                                                        + "action DrawStep" + cr
                                                        +   "   action TurnRight    //this is an action definition, but you are not calling the action" + cr
                                                        +   "       " + cr
                                                        +   "   end"    + cr
                                                        +   "end"))

                bodyDiv:Add(preformatter:GeneratePreformattedCode(  "//this is an example of a correct implementation" + cr
                                                        + "action DrawStep" + cr
                                                        +  "    //some other code that you want to add" + cr
                                                        +  "    TurnRight()   //this calls the TurnRight action" + cr
                                                        +  "    //some other code that you want to add" + cr
                                                        +   "end" + cr
                                                        +  " " + cr
                                                        +   "action TurnRight" + cr
                                                        +   "   //define how you are going to turn right" + cr
                                                        +   "end"))
                pTip2:AddListItem("There is another problem too -- while 
                    technically defining a action within another action 
                    definition is allowed in Quorum Programming Language, 
                    it is odd and we will never have a construction like this in our course. 
                    The intention is for each action definition to stand on its own. 
                    And for other code to call those actions.")
        bodyDiv:Add(pTip2)



        bodyDiv:AddHeading("Challenge 9: Drawing a Diamond - Step 2", 3)
            Paragraph chlg9
                chlg9:AddText("The students are going to continue to build 
                    up towards a diamond by defining a action that draws one side of the diamond. 
                    If we refer to the whole image we are trying to draw, we'll notice that each of 
                    4 sides is compromised of 3 calls to <b>DrawStep()</b>, plus a few extra moves. 
                    Right now we'll write the code for one of those sides.")
        bodyDiv:Add(chlg9)
        studentInstruction5:AddHeading("Student Instructions",4)
        studentInstruction5:AddParagraph("Start the turtle on <b>(4, 0)</b>, then:")
            OrderedList chlg9List
                chlg9List:AddListItem("Define a new action named <b>DrawSide()</b> which makes three calls in a row to <b>DrawStep()</b> followed by a <b>MoveForward()</b> and <b>TurnRight()</b>.")
                chlg9List:AddListItem("Replace the original action call to <b>DrawStep()</b> with a call to the newly defined <b>DrawSide()</b> action.")

        studentInstruction5:Add(chlg9List)
        SideBySideIDE CSP_U3L05_c9
        CSP_U3L05_c9:SetUniqueIdentifier("CSP_U3L05_c9")
        CSP_U3L05_c9:GetIDETitle():AddText("Quorum Turtle Module: Challenge 9")
        CSP_U3L05_c9:SetGameEnvironment(false)
        CSP_U3L05_c9:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c9:Setup()
        studentInstruction5:Add(CSP_U3L05_c9)
        bodyDiv:Add(studentInstruction5)


        bodyDiv:AddParagraph("The turtle should start from position (4, 0) [<b>SetStartCoordinate(4,0)</b>]. 
                    When the students are successful on their code, 
                    their code should draw the following lines 
                    in the exact order: (4, 0) to (4, 1) to (3, 1); (3, 1) to (3, 2) to (2, 2); (2, 2) to (2, 3) to (1, 3).")
//New lines begin: . New lines begin: (4, 0) to (4, 1) to (3, 1). New lines begin: (3, 1) to (3, 2) to (2, 2). New lines begin: (2, 2) to (2, 3) to (1, 3)

        bodyDiv:AddHeading("Challenge 10: Drawing a Diamond - Step 3", 3)
            Paragraph chlg10
                chlg10:AddText("Now the students are finally ready to make the diamond! ")

                    
        bodyDiv:Add(chlg10)
        studentInstruction6:AddHeading("Student Instructions",4)
        studentInstruction6:AddParagraph("Start the turtle on <b>(4, 0)</b>. Define a action named action <b>DrawDiamond()</b> that calls <b>DrawSide()</b> 
                    multiple times in order to draw a diamond. Your final solution 
                    should be triggered by a single call to <b>DrawDiamond()</b>. ")

        SideBySideIDE CSP_U3L05_c10
        CSP_U3L05_c10:SetUniqueIdentifier("CSP_U3L05_c10")
        CSP_U3L05_c10:GetIDETitle():AddText("Quorum Turtle Module: Challenge 10")
        CSP_U3L05_c10:SetGameEnvironment(false)
        CSP_U3L05_c10:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L05_c10:Setup()
        studentInstruction6:Add(CSP_U3L05_c10)
        bodyDiv:Add(studentInstruction6)


                    bodyDiv:AddParagraph("The code should draw the following lines in the exact 
                    order: (4, 0) to (4, 1) to (3, 1); (3, 1) to (3, 2) to (2, 2); (2, 2) to (2, 3) to (1, 3) to (1, 4); 
(1, 4) to (2, 4) to (2, 5); 
(2, 5) to (3, 5) to (3, 6); 
(3, 6) to (4, 6) to (4, 7) to (5, 7); 
(5, 7) to (5, 6) to (6, 6); 
(6, 6) to (6, 5) to (7, 5); 
(7, 5) to (7, 4) to (8, 4) to (8, 3); 
(8, 3) to (7, 3) to (7, 2); 
(7, 2) to (6, 2) to (6, 1); 
(6, 1) to (5, 1) to (5, 0) to (4, 0).")

//New lines begin: . New lines begin: (4, 0) to (4, 1) to (3, 1). 
//New lines begin: (3, 1) to (3, 2) to (2, 2). 
//New lines begin: (2, 2) to (2, 3) to (1, 3) to (1, 4). 
//New lines begin: (1, 4) to (2, 4) to (2, 5). 
//New lines begin: (2, 5) to (3, 5) to (3, 6). 
//New lines begin: (3, 6) to (4, 6) to (4, 7) to (5, 7). 
//New lines begin: (5, 7) to (5, 6) to (6, 6). 
//New lines begin: (6, 6) to (6, 5) to (7, 5). 
//New lines begin: (7, 5) to (7, 4) to (8, 4) to (8, 3). 
//New lines begin: (8, 3) to (7, 3) to (7, 2). 
//New lines begin: (7, 2) to (6, 2) to (6, 1). 
//New lines begin: (6, 1) to (5, 1) to (5, 0) to (4, 0)


//a4b4, b3b4, b3c3, c2c3, c2d2, d1d2, d1e1, e1e2, e2f2, f2f3, f3g3, g3g4, g4h4, h4h5, g5h5, g5g6, f6g6, f6f7, e7f7, e7e8, d8e8, d7d8, c7d7, c6c7, b6c6, b5b6, a5b5, a4a5.")
        bodyDiv:AddHeading("Notes:", 4)
            Paragraph note
                note:AddText("In the end the students will have 4 actions defined:")
        bodyDiv:Add(note)
            UnorderedList noteList
                noteList:AddListItem("DrawDiamond()")
                noteList:AddListItem("DrawSide()")
                noteList:AddListItem("DrawStep()")
                noteList:AddListItem("TurnRight()")
        bodyDiv:Add(noteList)
            Paragraph note2
                note2:AddText("These 4 actions work sort of like a 
                    hierarchy of top-down design. At the top is <b>DrawDiamond()</b> 
                    which makes calls to <b>DrawSide()</b>, which makes calls to 
                    <b>DrawStep()</b> and <b>TurnRight()</b>.")
        bodyDiv:Add(note2)



       bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddHeading("Introducing Create PT", 4)
            Paragraph pt
                pt:AddText("Review pages 9-11 which introduces the 
                    Create PT from the document below with the students. Activate the link 
                    to download the document.")
        bodyDiv:Add(pt)
            UnorderedList ptDoc
                ptDoc:AddListItemLink("AP Computer Science Principles: ASSESSMENT OVERVIEW AND PERFORMANCE TASK DIRECTIONS FOR STUDENTS", "/files/code/Unit3/ap-csp-student-task-directions.pdf")
//We may need to make this doc accessible
        bodyDiv:Add(ptDoc)
            Paragraph pt2
                pt2:AddText("The class will be doing a Practice Create PT that mimics 
                    most components of the AP Create PT later. So for this lesson, the class should quickly 
                    review those components now, but the class will have opportunities to 
                    review and practice them in the next few lessons as well. 
                    For right now the students don't need to understand all the details, 
                    just the big picture.")
        bodyDiv:Add(pt2)
            UnorderedList pt2List
                pt2List:AddListItem("Page 9: The Create PT has 3 major components, 1. video, 2. written responses 3. program code")
                pt2List:AddListItem("Pages 10-11: Skim the submission requirements and give the students time to read prompts 2a - 2d")
                pt2List:AddListItem("Highlight prompt 2d which references abstraction, the theme of this lesson and a focus of this unit")
        bodyDiv:Add(pt2List)

        bodyDiv:AddHeading("Reflection on abstraction and managing complexity ", 4)
            UnorderedList ref
                ref:AddListItem("List the benefits of being able to define and call functions in a program. Who specifically gets to enjoy those benefits?")
                ref:AddListItem("How is the use of a function an example of abstraction?")
        bodyDiv:Add(ref)

        bodyDiv:AddHeading("Reflection and Abstraction Goals", 4)
            Paragraph ref2
                ref2:AddText("Benefits of functions -- Possible responses:")
        bodyDiv:Add(ref2)
            UnorderedList ref2List
                ref2List:AddListItem("Programs are easier to read and write")
                ref2List:AddListItem("Functions remove the need to repeat large chunks of code")
                ref2List:AddListItem("Functions break the program into logical chunks")
                ref2List:AddListItem("Functions are a way to give concise human-readable names to complex sections of code")
                ref2List:AddListItem("Important to note: functions do not make the program easier (or harder) for the computer to run or understand -- it must still run all of the same commands as before")
        bodyDiv:Add(ref2List)
            Paragraph ref2_1
                ref2_1:AddText("Functions are examples of Abstraction -- Possible responses:")
        bodyDiv:Add(ref2_1)
            UnorderedList ref2_1List
                ref2_1List:AddListItem("Abstractions simplify the representation of something more complex. A function gives a simple name to what might be a complex chunk of code.")
                ref2_1List:AddListItem("Writing a function is a way to compartmentalize an idea.")
                ref2_1List:AddListItem("Abstraction helps manage complexity - so do functions because they let you break a problem into smaller parts.")
                ref2_1List:AddListItem("Writing a function is a way to solve and then ignore lower-level, nitty-gritty problems in your program so you can focus on higher level problems.")
        bodyDiv:Add(ref2_1List)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Choose Two: True Statements about Functions", 4)
            UnorderedList assess1
                assess1:AddListItem("A.) Meaningful function names help people better understand programs.")
                assess1:AddListItem("B.) Meaningful function names help computers better understand programs.")
                assess1:AddListItem("C.) Functions in programming are useful mathematical tools for doing complex computations.")
                assess1:AddListItem("D.) Functions in programming are named groupings of programming instructions.")
        bodyDiv:Add(assess1)
        bodyDiv:AddHeading("Multiple Choice: False Statements about Functions - Which of the following is NOT a true statement about functions?", 4)
            UnorderedList assess2
                assess2:AddListItem("A.) Functions are reusable programming abstractions.")
                assess2:AddListItem("B.) Functions help reduce the complexity of writing and maintaining programs.")
                assess2:AddListItem("C.) Functions help break a problem into logical chunks.")
                assess2:AddListItem("D.) Once defined, a function can be called many times from different parts of a program.")
                assess2:AddListItem("E.) Functions cannot make calls to other functions written by the same programmer.")
        bodyDiv:Add(assess2)
        bodyDiv:AddHeading("Reflection: Why Functions?", 4)
            Paragraph assess3
                assess3:AddText("In your own words, explain at least one reason why programming languages have functions. Include an example of something you did in this lesson that demonstrates the reason you describe.")
        bodyDiv:Add(assess3)

        bodyDiv:AddHeading("Challenge 11", 4)
            Paragraph chlg11
                chlg11:AddText("In this lesson, the students learned about top-down design 
                    for building up solutions to larger programming problems. 
                    Ask the students to plan the code that they would use to draw this image below. 
                    Also, ask them to describe each of the actions that they would create. 
                    They should not write all the code, only the names of 
                    the actions that they would create with a brief description 
                    of what each action would do. Ask them to write their plan using the following 
                    the format:")
        bodyDiv:Add(chlg11)
            UnorderedList chlg11List
                chlg11List:AddListItem("Name of action - description of what it does")
                chlg11List:AddListItem("Name of action 2 - description of what it does")
        bodyDiv:Add(chlg11List)

        bodyDiv:AddHeading("Image Description", 4)
            Paragraph tTip3
                tTip3:SetClassAttribute("cool-box")
                tTip3:AddText("The image shown below consist of five plus signs. One plus sign is pace at the center. On each arm end of this center plus sign, one plus sign is connected at with its own arm end.")
        bodyDiv:Add(tTip3)
        
        bodyDiv:AddImage("/files/code/Unit3/RadioAntena1.png", "Turtle at position (5, 4) on a plus sign connected to 4 other plus signs")



        bodyDiv:AddHeading("Extended Learning", 2)
        bodyDiv:AddHeading("Share and Compare",4)
        Paragraph extL
        extL:AddText("If students complete the diamond challenge early, ask them to compare their solution with another group. They should then try to create the version of the program that they believe is best with an associated justification. Challenge students to think about potential tradeoffs between efficiency and readability.")
        bodyDiv:Add(extL)

        bodyDiv:AddHeading("Keeping Going!",4)
        Paragraph extL2
        extL2:AddText("Groups that finish early can continue working with their functions to make more complex figures. Ask groups to continue building functions they think are generally useful for drawing.")
        bodyDiv:Add(extL2)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CL.L2:3") 
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L1:6-06") 
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L2:4, CPP.L2:5") 
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L3A:3, CPP.L3A:4") 
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L2:1, CT.L2:4, CT.L2:6, CT.L2:12") 
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L3A:1, CT.L3A:4") 
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.1 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "2.2.2 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.3.1 (A, B, C, L)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (A, B, C, D)")
        bodyDiv:Add(list)

/* Completed 2/16/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn to write actions in the Quorum Programming Language"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 5 (Creating Actions)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 5"
    end
    action GetShortDescription returns text
        return "Learn how to create actions"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson5A.html"
    end

end
