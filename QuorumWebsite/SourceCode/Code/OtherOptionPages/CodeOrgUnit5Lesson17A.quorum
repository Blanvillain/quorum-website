use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit5Lesson17A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 5 Lesson 17: Building an App: Soundboard")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Building Apps - Lesson 17: Building an App: Soundboard", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("In this lesson, students will create a " + dq + "Soundboard" + dq + " App. This application will allow users to create a " + dq + "song" + dq + " by pressing the number keys to add a " + dq + "note." + dq + " Through this app, students will utilize almost all of coding concepts they have learned throughout this Unit, as well as the new techniques of nested loops and relative indexing.")
        bodyDiv:Add(ov1)
            
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Combine the coding concepts learned throughout this Unit")
                goalList:AddListItem("Learn what " + dq + "Nested Loops" + dq + " and " + dq + "Relative Indexing" + dq + " are and how to use them")

       bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("This lesson is designed with the primary purpose of bringing together all the concepts that students have learned throughout this Unit. In particular, the application makes great use of repeat while loops, Arrays, and KeyboardEvents. The app incorporates the techniques that students have already learned, but also builds upon them by introducing slightly more complicated uses. These new techniques, nested loops and relative indexing, are based on the basic concepts that students already know, but simply push them a little further.")
        bodyDiv:Add(purpose)

        bodyDiv:AddHeading("Getting Started", 2)

        bodyDiv:AddParagraph("Since this application uses many concepts from throughout the Unit, it is a good idea to quickly review them. Don't take too long covering any one of these topics though, but simply remind students of the general usage or format. Below are the most crucial topics that you should consider for review.")
            UnorderedList conceptList
                conceptList:AddListItem("Repeat While Loops")
                conceptList:AddListItem("Arrays")
                conceptList:AddListItem("Using KeyboardEvents for user interaction")
        bodyDiv:Add(conceptList)

        bodyDiv:AddHeading("Activity", 2)

        bodyDiv:AddParagraph("In this Activity, students will bring together everything they've learned throughout the Unit to create a new application. To start, they will make a simple " + dq + "Soundboard" + dq + " app which lets the user input up to 10 notes, play the stored song, and clear the stored song so they can input a new one. This simple version requires students to use KeyboardEvents, conditional if-statements, Arrays, and repeat while (or repeat until) loops. Next, students refactor the simple version of the app to allow unlimited length songs, as well as an action to calculate the median frequency stored in the song. These new features will introduce the concepts of nested loops and relative indexing to the students. Nested loops are simply loops that are within another loop, and thus these inner loops run through a full set of iterations each time the outer loop runs. Relative indexing is a way to access items stored in an Array by a position relative to another variable, such as using " + dq + "array:Get(counter + 10)" + dq + " or " + dq + "array:Get(counter / 2)" + dq + " instead of simply " + dq + "array:Get(counter)." + dq)

        bodyDiv:AddHeading("Student Instructions", 3)

        bodyDiv:AddParagraph("For today's lesson, we'll be creating a " + dq + "Soundboard" + dq + " app, which will let users create a " + dq + "song" + dq + " by adding " + dq + "notes" + dq + " one by one using the number keys. Below is a template for this program, which contains the blank actions of " + dq + "PressedKey," + dq + " " + dq + "PlaySong," + dq + " and " + dq + "ClearSong." + dq + " We have already completed the " + dq + "Main" + dq + " and " + dq + "CreateGame" + dq + " actions for you. We will add more actions later, but for now we'll focus on getting a simple version up and running. As with Lesson 14, we recommend that you write your code in a text editor so you can save your work and follow each step without having to scroll up and down repeatedly. Then you can simply copy your code into the online IDEs when it comes time to test the program.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("use Libraries.Compute.Math" + cr
            + "use Libraries.Containers.Array" + cr
            + "use Libraries.Sound.Audio" + cr
            + "use Libraries.Sound.AudioSamples" + cr
            + "use Libraries.Game.Game" + cr
            + "use Libraries.Interface.Events.KeyboardEvent" + cr
            + "use Libraries.Interface.Events.KeyboardListener" + cr
            + "use Libraries.Curriculum.AudioGame.Song" + cr
            + "use Libraries.Curriculum.AudioGame.AudioGame" + cr + cr
            + "class Main is AudioGame, KeyboardListener" + cr
            + "    Song song" + cr + cr
            + "    action Main" + cr
            + "        StartGame()" + cr
            + "    end" + cr + cr
            + "    action CreateGame()" + cr
            + "        AddKeyboardListener(me)" + cr
            + "    end" + cr + cr
            + "    action PressedKey(KeyboardEvent event)" + cr + cr
            + "    end" + cr + cr
            + "    action PlaySong" + cr + cr
            + "    end" + cr + cr
            + "    action ClearSong" + cr + cr
            + "    end" + cr
            + "end"))

        bodyDiv:AddParagraph("As shown from the template above, we have also provided you a class variable: " + dq + "Song song." + dq + " This variable is of a special type created specifically for this lesson, which creates, stores, and plays up to a ten-second long song. We'll explain how this type is used as we use it, so don't worry about not knowing the ins and outs of how it functions.")

        bodyDiv:AddHeading("The " + dq + "PressedKey" + dq + " action", 4)

        bodyDiv:AddParagraph("For this action, we need to write code that creates a sound of different frequency based on the key that was pressed, as well as keys for playing and clearing the song. To start, we'll set up the frequency input.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list1
                list1:AddListItem("Create a number variable to store the frequency, and initialize it to 0")
                list1:AddListItem("Create a series of if and elseif statements comparing event:keyCode to event:NUM_1 through event:NUM_0")
                list1:AddListItem("Inside each if/elseif, set the frequency variable equal to 100 for event:NUM_1, 200 for event:NUM_2, 300 for event:NUM_3, and so on (for NUM_0, set frequency equal to 1000)")
            bodyDiv:Add(list1)

        bodyDiv:AddParagraph("Next, we need to add a note through the " + dq + "sound" + dq + " class variable. To do so, we can use the " + dq + "GenerateSound" + dq + " action, which accepts a frequency. However, we also need to make sure that we only call GenerateSound if the user actually pressed a number key. Since frequency starts at 0 before the if/elseif statements, we can check if frequency is still 0 after the if/elseif statements to determine if one of the number keys was pressed. Finally, we need to make sure that the " + dq + "sound" + dq + " variable is not already full, since each ConvenientSound object can only hold 10 sounds at once. We can check if it's full through the " + dq + "IsFull" + dq + " action, which returns true if it's full, and false if it is not.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list2
                list2:AddListItem("Add an if-statement for when the frequency variable is not equal to 0")
                list2:AddListItem("Add a nested if-statement inside the previous one to check that " + dq + "song" + dq + " is not full with " + dq + "not song:IsFull()" + dq)
                list2:AddListItem("Within the nested if-statement, call the GenerateSound action with " + dq + "song:GenerateSound(frequency)" + dq)
            bodyDiv:Add(list2)

        SideBySideIDE ide1
        ide1:SetUniqueIdentifier("Test Your Code - " + dq + "PressedKey" + dq + " action")
        ide1:GetIDETitle():AddText("Test Your Code - " + dq + "PressedKey" + dq + " action")
        ide1:GetIDESubtitle():AddText("")
        ide1:SetGameEnvironment(true)
        ide1:Setup()
        bodyDiv:Add(ide1)
        bodyDiv:Add(ide1:GetGameCanvas())

        bodyDiv:AddHeading("The " + dq + "PlaySong" + dq + " action", 4)

        bodyDiv:AddParagraph("While testing your code so far, you were limited to simply playing the sound you were adding only when first creating it. At this stage, we can hardly call it a song. As such, we'll next work on the " + dq + "PlaySong" + dq + " action, which will play through all notes stored within the " + dq + "song" + dq + " class variable.")
        
        bodyDiv:AddParagraph("Before we tackle the PlaySong action, we need to explain a few more things about the " + dq + "Song" + dq + " class. Each Song object has an Array of AudioSamples, which can be obtained from the value-returning action of " + dq + "GetAudioArray." + dq + " These AudioSamples can be loaded into an Audio object and then played. Once we obtain the Array of AudioSamples, we can simply use a repeat while loop to play each AudioSample.")
        
        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list3
                list3:AddListItem("Create an Audio object")
                list3:AddListItem("Create a counter for the repeat while loop and initialize it to 0")
                list3:AddListItem("Create an Array of AudioSamples and initialize it with " + dq + "song:GetAudioArray()" + dq)
                list3:AddListItem("Make a repeat while loop using your counter and the " + dq + "GetSize()" + dq + " action of your Array of AudioSamples")
                list3:AddListItem("Finally, inside of the loop, use the following three lines of code to load, play, and reset the Audio object:")
            bodyDiv:Add(list3)

        bodyDiv:Add(break)
        bodyDiv:Add(preformatter:GeneratePreformattedCode("Audio audio" + cr
            + "audio:Load(arrayOfAudioSamples:Get(counter))" + cr
            + "QueueAudio(audio)"))

        bodyDiv:AddParagraph("Now that we have finished the PlaySong action, we need to set up a way for users to call it. To do so, we will return to the " + dq + "PressedKey" + dq + " action, where we'll simply add another elseif to the first conditional to call the PlaySong action when the user presses the spacebar.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list4
                list4:AddListItem("Add an elseif comparing event:keyCode to event:SPACE")
                list4:AddListItem("Call the PlaySong action inside of the new elseif")
            bodyDiv:Add(list4)

        bodyDiv:AddParagraph("Note that you don't need to alter the second conditional where we add a note to the " + dq + "song" + dq + " variable. This is because we don't change the value of the frequency variable, so it remains at 0 if the spacebar is pressed, and the second conditional is not taken.")
        
        SideBySideIDE ide2
        ide2:SetUniqueIdentifier("Test Your Code - " + dq + "PlaySong" + dq + " action")
        ide2:GetIDETitle():AddText("Test Your Code - " + dq + "PressedKey" + dq + " action")
        ide2:GetIDESubtitle():AddText("")
        ide2:SetGameEnvironment(true)
        ide2:Setup()
        bodyDiv:Add(ide2)
        bodyDiv:Add(ide2:GetGameCanvas())

        bodyDiv:AddHeading("The " + dq + "ClearSong" + dq + " action", 4)

        bodyDiv:AddParagraph("At this point, users should be able to input notes into a song, and then press the spacebar to play the stored song. However, what if the user makes a mistake, inputting the wrong note? It's annoying to have to restart the program to start over, so next we'll write the " + dq + "ClearSong" + dq + " action. Fortunately, this action is very easy; in fact, it's only one line. To clear the song, we simply need to call the " + dq + "Clear" + dq + " action of the " + dq + "song" + dq + " class variable. You may think it's silly to have an action for this one line of code, but we will edit it later when we make our application more complicated.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list5
                list5:AddListItem("Call the Clear action using " + dq + "song:Clear()" + dq)
            bodyDiv:Add(list5)

        bodyDiv:AddParagraph("Don't forget, we also need to set up a way for the user to call the ClearSong action while running the program. To do so, we will once again return to the " + dq + "PressedKey" + dq + " action and add another elseif to the first conditional to call the ClearSong action when the user presses the escape key.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list6
                list6:AddListItem("Add an elseif comparing event:keyCode to event:ESCAPE")
                list6:AddListItem("Call the ClearSong action inside of the new elseif")
            bodyDiv:Add(list6)

        SideBySideIDE ide3
        ide3:SetUniqueIdentifier("Test Your Code - " + dq + "ClearSong" + dq + " action")
        ide3:GetIDETitle():AddText("Test Your Code - " + dq + "ClearSong" + dq + " action")
        ide3:GetIDESubtitle():AddText("")
        ide3:SetGameEnvironment(true)
        ide3:Setup()
        bodyDiv:Add(ide3)
        bodyDiv:Add(ide3:GetGameCanvas())

        bodyDiv:AddHeading("Unlimited Length Songs", 4)

        bodyDiv:AddParagraph("Although we now have a version up and running, you may have noticed that it's rather limited. In particular, we can only have up to 10 notes at any one time. So, instead of having just one Song object, let's make an Array of them. This will require a bit of refactoring to make our current code work again.")

        bodyDiv:AddParagraph("To start, directly under the line of " + dq + "class Main is AudioGame, KeyboardListener," + dq + " replace the single Song object with an Array of Song objects.")

        bodyDiv:AddParagraph("Next, we need to change the conditional where we call the " + dq + "GenerateSound" + dq + " action in the " + dq + "PressedKey" + dq + " action. In particular, we need to set up when to add a new Song object to the Array.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list7
                list7:AddListItem("Create an integer outside of the conditional and set it equal to the Song Array's size")
                list7:AddListItem("Remove the nested conditional that used to check if the " + dq + "song" + dq + " class variable is full")
                list7:AddListItem("Introduce a new nested if-statement, which checks if the size variable is 0 or if the Song Array's last element is full")
                list7:AddListItem("Hint: remember that the last element in the Song Array is indexed by " + dq + "size + 1" + dq + " and that you can use the " + dq + "IsFull()" + dq + " action to check if the Song is full")
                list7:AddListItem("Inside the nested if-statement, create a new Song object, add it to the Array of Songs, and increment the size variable by one")
                list7:AddListItem("Lastly, inside the first if-statement but after the nested if-statement, call the " + dq + "GenerateSound" + dq + " action on the Array of Song's last element")
            bodyDiv:Add(list7)

        bodyDiv:AddParagraph("Now that we have fixed the PressedKey action, we need to refactor the PlaySong action. To do so, we will need to make use of a new technique called " + dq + "nested loops." + dq + " Just like nested conditionals, nested loops are a loop contained within a loop. However, nested loops are a bit more complicated, mostly because of the counter. Since this is a new technique, we've written the action out for you below and will explain how it works (don't worry, you'll get a chance to try it out for yourself soon). Much of this action should look familiar to you, as the nested loop is almost the same as the loop in the original PlaySong action we wrote.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("integer outerCounter = 0" + cr + cr
            + "repeat while outerCounter < arrayOfSongs:GetSize()" + cr
            + "    integer innerCounter = 0" + cr
            + "    Song currentSong = arrayOfSongs:Get(outerCounter)" + cr
            + "    Array<AudioSamples> arrayOfAudioSamples = currentSong:GetAudioArray()" + cr + cr
            + "    repeat while innerCounter < arrayOfAudioSamples:GetSize()" + cr
            + "        Audio audio" + cr
            + "        audio:Load(arrayOfAudioSamples:Get(innerCounter))" + cr
            + "        QueueAudio(audio)" + cr + cr
            + "        innerCounter = innerCounter + 1" + cr
            + "    end" + cr + cr
            + "    outerCounter = outerCounter + 1" + cr
            + "end"))

        bodyDiv:AddParagraph("The first thing to notice is that we have two counters: one for the outside loop, and one for the inside loop. Notice how the declaration for the " + dq + "innerCounter" + dq + " is inside of the outside loop. This means that, for every iteration of the outside loop, the " + dq + "innerCounter" + dq + " is set to 0, the inner loop runs from 0 to the size of the " + dq + "arrayOfAudioSamples," + dq + " and then increments the " + dq + "outerCounter" + dq + " by one before running the next iteration of the outer loop. Thus, nested loops tend to run through many more iterations than they may seem to, but it is easily calculated through multiplication. For example, consider that we have 3 Song objects in the " + dq + "arrayOfSongs"+ dq + " and that each of those Song objects is full (so the " + dq + "arrayOfAudioSamples" + dq + " will have 10 elements for all three). On the first iteration of the outside loop with the first Song, the inner loop runs through 10 iterations, one for each element in the AudioSamples Array. The second iteration of the outer loop will have the inner loop go through another 10 iterations, and then the third iteration of the outer loop will have the inner loop go through yet another 10 iterations of the inner loop, for 30 iterations total.")

        bodyDiv:AddParagraph("Finally, the last bit of refactoring we need to do is in the " + dq + "ClearSong" + dq + " action. We need to rewrite this action entirely, but that's not saying much considering it was only one line. Now that we have an Array of Songs, we can actually clear it without using the " + dq + "Clear" + dq + " action. Instead we can simply remove all the items from the Array by repeatedly calling the " + dq + "RemoveFromFront" + dq + " action.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list8
                list8:AddListItem("Create an integer to be a counter and set it equal to 0")
                list8:AddListItem("Create another integer and set it equal to the arrayOfSongs' size")
                list8:AddListItem("Create a repeat while loop for while the counter variable is less than the size variable")
                list8:AddListItem("Call the " + dq + "RemoveFromFront()" + dq + " action on the Song Array")
            bodyDiv:Add(list8)

        bodyDiv:AddParagraph("Now your program should be completely refactored, and can now our songs can have as many notes as you want. Test your code below and ensure it is working properly. As a side note, be careful about how many individual notess you add to your song. While we have the functionality to have as many notes as we want, it could take a long time for the song to play, and you are locked out from doing anything until the song is finished when you try to play it.")

        SideBySideIDE ide4
        ide4:SetUniqueIdentifier("Test Your Code - Unlimited Length Songs")
        ide4:GetIDETitle():AddText("Test Your Code - Unlimited Length Songs")
        ide4:GetIDESubtitle():AddText("")
        ide4:SetGameEnvironment(true)
        ide4:Setup()
        bodyDiv:Add(ide4)
        bodyDiv:Add(ide4:GetGameCanvas())

        bodyDiv:AddHeading("Finding the Median Frequency", 4)

        bodyDiv:AddParagraph("The final functionality we will add to our app is an action to find the Median frequency. This action will put the frequency of each note in the Array of Song into an Array of numbers, sort it, and then calculate the middle value, or median. To start, we'll focus on putting the frequencies into a single Array.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list9
                list9:AddListItem("Create an Array of numbers to hold all frequencies")
                list9:AddListItem("Create two repeat while loops, one nested in the other")
                list9:AddListItem("Hint: the structure of these loops is very similar to those in the PlaySong action, except using an Array of numbers instead of an Array of AudioSamples")
                list9:AddListItem("Make the outer loop go while the outerCounter is less than the Array of Song's size")
                list9:AddListItem("Inside the outer loop but before the inner loop, create an innerCounter and set it to 0, create a temporary Song object and set it equal to the Song indexed by the outerCounter, and create a temporary Array of numbers to hold the (up to) 10 frequencies in the temporary Song object, using the " + dq + "GetFrequencyArray()" + dq + " action")
                list9:AddListItem("Make the inner loop go while the innerCounter is less than the size of the temporary Array of numbers")
                list9:AddListItem("Inside the inner loop, get the frequency indexed by the innerCounter in the temporary Array of numbers, and then add that frequency to the Array of frequency we made in the first step above")
            bodyDiv:Add(list9)

        bodyDiv:AddParagraph("After those two loops, we should have our Array of frequency filled with all of the frequencies in the song. However, to obtain the median, we need to sort the frequencies in order. Fortunately, we can easily do this by calling the " + dq + "Sort" + dq + " action, as shown in the following line of code.")

        bodyDiv:Add(preformatter:GeneratePreformattedCode("arrayOfAllFrequencies:Sort()"))

        bodyDiv:AddParagraph("Finally, we simply need to get the middle value. This is very easy using a concept called " + dq + "relative indexing." + dq + " When accessing items in an Array, we've been using variables like counters and the Array's size, but we can also perform computataions during the " + dq + "Get" + dq + " action. For example, suppose you had " + dq + "array:Get(counter + 10)." + dq + " In this case, we access the Array element located 10 indexes higher than the counter. You can do any other calculations as well, such as subtraction, multiplication, division, and modulo. While relative indexing is extremely helpful or even essential for certain problems, you need to be careful not to try and obtain an element that doesn't exist. Using the previous example, if our Array had 20 elements in it, then using " + dq + "Get(counter + 10)" + dq + " would cause an error for any counter greater than 10, since the last index would be 19. At the same time, a counter of -10 would actually work, as -10 plus 10 gives the valid index of 0.")

        bodyDiv:AddParagraph("For this problem, we want the median of our sorted Array of frequencies, so we want to use a variable equal to our Array's size, and then use relative indexing to get the middle value. There are two cases we need to consider: when there are an even number of elements in the Array, and when there are an odd number of elements in the Array. We can determine whether the size variable is even or odd using the modulo operator, which returns the remainder after dividing two numbers. In this case, we'll want to use " + dq + "size mod 2," + dq + " which will equal 0 when size is even and will equal 1 when size is odd. When size is even, we'll need to add together the middle two elements and average them, and when size is odd, we'll need to simply get the middle element.")

        bodyDiv:AddHeading("Do This", 4)
            UnorderedList list10
                list10:AddListItem("Create an integer and set it equal to the Array of frequency's size")
                list10:AddListItem("Create a number to store the median within, and initialize it to 0")
                list10:AddListItem("Create an if-elseif statement to check if the size variable is even or odd")
                list10:AddListItem("In the even conditional, create two numbers and assign the middle two values to them")
                list10:AddListItem("Hint: remember that the size variable is the number of elements, not the last index (consider the case of size = 4, where the indexes are 0, 1, 2, and 3, and the two middle indexes are 1 and 2)")
                list10:AddListItem("Set the median variable equal to the average of the two middle values of the Array ((frequency1 + frequency2) / 2)")
                list10:AddListItem("In the odd conditional, simply assign the middle value in the Array to the median variable")
                list10:AddListItem("After the conditionals, output the median frequency")
            bodyDiv:Add(list10)

        bodyDiv:AddParagraph("Lastly, we need to return to the " + dq + "PressedKey" + dq + " action and map a key to call the Median action. We'll do this by simply adding another elseif to the conditional that compares event:keyCode to event:ENTER. However, within this elseif, we need to add in a nested if statement to see if the " + dq + "arrayOfSongs" + dq + " has at least one element in it. It wouldn't make sense to calculate a median on an empty list, after all, so we'll simply avoid making the action call in this case. You should also add an else statement to output an informative error message for the user that the song is empty, and thus has no median. Error messages like this are standard coding practice, since other people running your program probably don't know how it works and would otherwise be confused by unexpected results or program crashes.")

        bodyDiv:AddParagraph("And with that, our app is complete! Test it out thoroughly in the IDE below, and feel free to add any additional features, such as other statistics.")

        SideBySideIDE ide5
        ide5:SetUniqueIdentifier("Test Your Code - Final")
        ide5:GetIDETitle():AddText("Test Your Code - Final")
        ide5:GetIDESubtitle():AddText("")
        ide5:SetGameEnvironment(true)
        ide5:Setup()
        bodyDiv:Add(ide5)
        bodyDiv:Add(ide5:GetGameCanvas())

        bodyDiv:AddHeading("Wrap Up", 2)

        bodyDiv:AddParagraph("If students have had time to brainstorm or create additional features for the app, give them an opportunity to share. Brainstorm other ways that this stored data could be processed, and the types of effects that could be produced as a result. Some students may wish to extend this project on the Practice Create Performance Task they will complete in the next lesson.")

        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","1.2.1 (A, B, C, D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","1.3.1 (C, D, E)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","2.2.1 (A, B, C)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","2.2.2 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","4.1.1 (A, B, C, D)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","4.1.2 (A, B, C, G, I)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.1.1 (A, B, C, D, E)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.1.2 (A, B, C, J)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.3.1 (A, B, C, D, E, F, G, J, K, L)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.4.1 (A, B, C, D, E, F, G, H, L, M, N)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ","5.5.1 (D, E, F, G, H, I, J)")
            bodyDiv:Add(list)

/* Completed 6/22/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how to create an App with many skills we have learned in the Unit"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 5 LLesson 17: Building an App: Soundboard"
    end
    action GetName returns text
        return "Code.Org Unit 5 Lesson 17"
    end
    action GetShortDescription returns text
        return "Learn how to create an App with many skills we  have learned"
    end
    action GetLocation returns text
        return "lessons/code/BuildingApps/Lesson17A.html"
    end

end
