use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit3Lesson4A is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 3 Lesson 4: Using Simple Commands")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Intro to Programming - Lesson 4: Using Simple Commands", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")


        Division studentInstruction
        studentInstruction:SetClassAttribute("cool-box")


        Division studentInstruction1
        studentInstruction1:SetClassAttribute("cool-box")


        Division studentInstruction2
        studentInstruction2:SetClassAttribute("cool-box")


        Division studentInstruction3
        studentInstruction3:SetClassAttribute("cool-box")

        Division studentInstruction4
        studentInstruction4:SetClassAttribute("cool-box")


        Division studentInstruction5
        studentInstruction5:SetClassAttribute("cool-box")

        Division studentInstruction6
        studentInstruction6:SetClassAttribute("cool-box")

        Division studentInstruction7
        studentInstruction7:SetClassAttribute("cool-box")

        Division studentInstruction8
        studentInstruction8:SetClassAttribute("cool-box")

        Division studentInstruction9
        studentInstruction9:SetClassAttribute("cool-box")

        //Division box
        bodyDiv:AddHeading("Overview", 2)
            Paragraph ov1
                ov1:AddText("This lesson will be the students' first exposure to programming 
                        in the IDE (Integrated Development Environment). The IDE is a platform program 
                        that many programmers use to write their own projects. There are many IDEs for 
                        today's programmers. Some common IDEs include but not limited to: NotePad++, 
                        Eclipse,  Netbeans, etc. All IDEs have special function to " + dq + "compile" + dq + " the program 
                        written in its environment and " + dq + "run" + dq + " the program. In addition to this critical 
                        function, many IDEs have supportive functions to point out some simple mistakes 
                        that programmers make. Some IDEs may include the function of an " + dq + "auto-complete" + dq + " 
                        that helps the programmers to write many lines of code easily and faster. ")

                bodyDiv:Add(ov1)
            Paragraph ov2
                ov2:AddText("In a way, all IDEs work like a word processor program. 
                        Just like a word processor program - such as MS Word or Apple's Pages - 
                        helps the writer with spell and grammar checks for the English language, 
                        IDEs provide programmers with checks for the particular 
                        programming language they are using at the time.")
                bodyDiv:Add(ov2)
            bodyDiv:AddParagraph("There are two IDEs that students can use with Quorum: the online IDE and an offline IDE. There are subtle differences in using online IDE 
                        in the Quorum website and using the offline IDE, which is called Sodbeans.")
            Paragraph ov3
                ov3:AddText("The advantage of using 
                        ‘Sodbeans’ is that it provides students with the rich programming experience of 
                        professional programmers with useful functions such as ‘Auto-Complete’, 
                        ‘Tabulation of a code block to create an easy to read cascaded coding structure’, 
                        ‘Ability of ‘Debugging’’, etc. The extra work when the students use this method is 
                        that the students have to download the installation file from the Quorum website. Then install 
                        the IDE on their computers. The students will need to learn how to use it first as well. It is 
                        not difficult to learn. Once the students have learned this method, it would 
                        become much easier for the students to do the lessons in the following units - 
                        especially in Unit 5. ")
                bodyDiv:Add(ov3)
            Paragraph ov3_5
                ov3_5:AddText("On the other hand, the advantage of using ‘online IDE’ 
                        in Quorum website is that it provides students with the ability to compile and run 
                        simple code without the installation process, nor with the concern for their 
                        computer’s capacity to use the IDE. Refer to the resources tab for where to download Sodbeans and instructions on how to use Sodbeans.")
                bodyDiv:Add(ov3_5)



        bodyDiv:AddHeading("Vocabulary", 2)
            UnorderedList voc
                AddListItemWithBoldAtFront(voc, "Turtle Programming - ", "a 
                    classic method for learning programming with commands to control 
                    movements and drawings of an on-screen robot called the " + dq + "turtle." + dq + " The 
                    name turtle hearkens back to early implementations where children 
                    programmed a physical robot whose dome-like shape was reminiscent 
                    of a turtle.")
        bodyDiv:Add(voc)



        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
            UnorderedList goalList
                goalList:AddListItem("Solve simple programming challenges when the set of allowed commands is constrained.")
                goalList:AddListItem("Explain considerations that go into " + dq + "efficiency" + dq + " of a program.")
                goalList:AddListItem("Use the IDE to write programs that create simple drawings with " + dq + "turtle graphics." + dq)
                goalList:AddListItem("Work with a partner to program a turtle task that requires about 50 lines of code.")
                goalList:AddListItem("Justify or explain choices made when programming a solution to a turtle task.")
        bodyDiv:Add(goalList)



        bodyDiv:AddHeading("Purpose", 2)
            Paragraph purpose
                purpose:AddText("The main purpose of this lesson is to start students 
                    on their programming journey in such a way that the focus is more on 
                    problem-solving rather than learning the syntax. Like the previous lessons about 
                    algorithms, by stripping down the available commands to only a few 
                    forces the students to think about the most efficient way to 
                    solve the problem and come up with creative ways of doing it.")
        bodyDiv:Add(purpose)
            Paragraph purpose2
                purpose2:AddText("A reason to learn this way is because at its 
                    core, a computer can really only do a few simple things: load a 
                    number from memory, store a number in memory, add two numbers 
                    together, etc. Everything the computer can do is the result of 
                    combining these simple instructions to do more and more sophisticated 
                    things. ")
        bodyDiv:Add(purpose2)
            Paragraph purpose3
                purpose3:AddText("Big picture: when programming at any 
                    level of expertise, we are always limited by the constraints 
                    of the programming language that we choose to use. Whether the 
                    language gives us thousands of commands and libraries with 
                    which to control various things or only a few, we always 
                    have to use those as building blocks to get the computer to 
                    do what we want. In 
                    this lesson, we simplify things dramatically for students by only providing 
                    4 turtle drawing commands (namely <b>MoveForward()</b>, <b>TurnLeft()</b>, <b>PenUp()</b> 
                    and <b>PenDown()</b>) to produce simple line drawings. In fact, 
                    the problems can be solved using only move <b>MoveForward()</b> and <b>TurnLeft()</b>!")
        bodyDiv:Add(purpose3)
        bodyDiv:AddHeading("Teacher's Tip", 4)
            Paragraph tTip1
                tTip1:SetClassAttribute("cool-box")
                tTip1:AddText("In this Quorum Computer Science Principles curriculum page, 
                    we have created the " + dq + "Turtle Programming" + dq + " to be accessible for 
                    the users who does not have a benefit of accessing the computer 
                    screen visually.")
        bodyDiv:Add(tTip1)



        bodyDiv:AddHeading("Getting Started", 2)
            Paragraph getStart
                getStart:AddText("The students have been preparing to learn how to program 
                    by doing some activities using the " + dq + "Human Machine Language" + dq + " with cards. 
                    Today the students will start programming for " + dq + "real." + dq + " ")
        bodyDiv:Add(getStart)
        bodyDiv:AddParagraph("Ask the students to think back to the 
                    algorithms activities, what do they anticipate will be the same about 
                    those activities vs. the " + dq + "real" + dq + " thing? Some topics to guide the discussion include:")
            UnorderedList gsList
                gsList:AddListItem("Creating processes to do things")
                gsList:AddListItem("Multiple ways to solve a problem")
                gsList:AddListItem("Understanding exactly what commands mean")
                gsList:AddListItem("Reasoning about solutions by testing them repeatedly or acting them out")
                gsList:AddListItem("Creatively applying the limited set of commands")
        bodyDiv:Add(gsList)
            Paragraph getStart2
                getStart2:AddText("The students are about to start a unit on computer 
                    programming, in which they will write instructions for a computer 
                    to execute. Computers are machines. So if they invent an instruction 
                    or command for a computer to execute, then it should be unambiguous 
                    how the computer will interpret or attempt to execute that instruction; 
                    so at the very least, as a group, we can expect that the machine's behavior is repeatable, 
                    so that the students can run some tests until they understand what the computer is doing and 
                    why. Remind them that the challenge - and fun - of programming is 
                    to understand how to use and combine those machine instructions to make 
                    the computer do what they want or to solve a problem.")
        bodyDiv:Add(getStart2)

        bodyDiv:AddHeading("On to programming! How we will learn.", 4)
            Paragraph howTo
                howTo:AddText("In this course, and in computer science in general, 
                    all of the complexity we encounter on a computer is actually just the composition 
                    (the combining and recombining) of a few simple elements. To learn about programming, they are going to solve 
                    problems with only a few primitive commands. They will learn how they can 
                    build up very complex computer programs from only a few simple computer commands.")
        bodyDiv:Add(howTo)



        bodyDiv:AddHeading("Activity", 2)
        bodyDiv:AddHeading("Pre-Activity: Video " + dq + "Turtle Programming" + dq, 4)
            InlineFrame inlineFrame
                inlineFrame:SetHeight("480")
                inlineFrame:SetWidth("854")
                inlineFrame:SetAddress("https://www.youtube.com/embed/i2KHYUhtOlM")
        bodyDiv:Add(inlineFrame)
            UnorderedList vid
                vid:AddListItemLink("Video: Turtle Programming", "https://www.youtube.com/watch?v=i2KHYUhtOlM")
        bodyDiv:Add(vid)



        bodyDiv:AddHeading("Activity", 3)
        studentInstruction:AddHeading("Student Instructions",4)
        studentInstruction:AddParagraph("For the activities in this lesson, you will be using the Quorum Turtle Module, where you can control how a turtle moves by giving the turtle the following 4 commands:")

        //bodyDiv:AddHeading("Commands that Students Can Give to the Turtle", 4)
            UnorderedList commands
                AddListItemWithBoldAtFront(commands, "MoveForward() - ", "Moves the turtle forward for preset distance (one block)")
                AddListItemWithBoldAtFront(commands, "TurnLeft() - ", "Turns the turtle 90 degree to relative to the direction the turtle is facing at a time.")
                AddListItemWithBoldAtFront(commands, "PenDown() - ", "Makes the turtle draw a line for the preset length (block) while moving.")
                AddListItemWithBoldAtFront(commands, "PenUp() - ", "Makes the turtle NOT draw a line while moving.")
        studentInstruction:Add(commands)
            
        studentInstruction:AddParagraph("The template of the Quorum Turtle Module is as follows:")
        //bodyDiv:Add(studentInstruction)
        /*studentInstruction:Add(preformatter:GeneratePreformattedCode(  "use Libraries.Curriculum.TurtleProgram.TurtleGame" + cr
                                                        +   "class Main is TurtleProgram" + cr
                                                        +   "   action Main" + cr
                                                        +   "       StartGame()" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "   action TurtleCommands" + cr
                                                        +   "       //give turtle commands here" + cr
                                                        +   "" + cr
                                                        +   "   end" + cr
                                                        +   "" + cr
                                                        +   "   //write your own actions here" + cr
                                                        +   "end"))*/

        SideBySideIDE CSP_U3L04_template
        CSP_U3L04_template:SetUniqueIdentifier("CSP_U3L04_0")
        CSP_U3L04_template:GetIDETitle():AddText("Quorum Turtle Module Template")
        CSP_U3L04_template:SetGameEnvironment(false)
        CSP_U3L04_template:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        //give turtle commands here
     end

     //write your own actions here
end
")
        CSP_U3L04_template:Setup()
        studentInstruction:Add(CSP_U3L04_template)

        studentInstruction:AddParagraph("You can click on <b>Run Program</b> to discover what happens. There are three places that you need to be aware of.")
            UnorderedList tTip2List
                tTip2List:AddListItem("First, the <b>StartGame()</b> command inside <i>action Main ... end</i> creates the turtle character and the grid that the turtle character moves on.")//<b>'//**** SET THE STARTING POSITION HERE ****'</b>. In this area, only thing the students need to do is to change the numbers (called the parameters) inside of the parenthesis of the code " + dq + "<b>SetStartCoordinate(parameter1, parameter2)</b>" + dq + ".")
                tTip2List:AddListItem("Second, the place inside <i>action TurtleCommands ... end</i> is where you can give the turtle the four commands that we introduced before.")// <b>'//**** MAIN CODING AREA STARTS HERE ****'</b>. This is where the students write their code that actually " + dq + "do" + dq + " some action (ex. make the turtle move or make the turtle draw).")
                tTip2List:AddListItem("Third, the place marked with <i>//write your own actions here</i> is where you can write your commands for the turtle to follow. And we will start to do that in the next lesson.")//  <b>'//**** ACTION CODING AREA STARTS HERE ****'</b>. This is where the students will write the actions they want to create.")
        studentInstruction:Add(tTip2List)
        bodyDiv:Add(studentInstruction)

        Paragraph tTip3
                tTip3:AddText("Ask the students to run the 
                    Quorum Turtle Module program, their screen will show 11 rows by 11 columns 
                    of blue dots. There is a main 
                    character " + dq + "the Turtle" + dq + " on one of the intersection of the grids (there is an image below that allows the students to match up the intersection of the grids with the name of the position that the turtle is in, where the intersections are signified by dots).")
        bodyDiv:Add(tTip3)

        studentInstruction1:AddHeading("Student Instructions",4)
        studentInstruction1:AddParagraph("The grid that the turtle walks on is shown below with the location of each dot signified by <b>(...,...)</b> with the name of each dot.")
        studentInstruction1:AddImage("/files/code/Unit3/QTMGrid.png", "Quorum Turtle Module - Grid with each coordinate and name labeled on each position")
        studentInstruction1:AddParagraph("Description of the Image")
        UnorderedList dots
        dots:AddListItem("The rows are named alphabetically from bottom row " + dq + "A" + dq + " to top 
                    row " + dq + "K." + dq)
        dots:AddListItem("The columns are named numerically from very left column " + dq + "0" + dq + " to the 
                    very right column " + dq + "10." + dq)
        dots:AddListItem("The dots are named according to its row position and 
                    the column position, such as A0, B2, J9, etc.")

        studentInstruction1:Add(dots)
        studentInstruction1:AddParagraph("By default, the turtle starts at <b>(0, 0)</b>, which is the dot named a0")
        studentInstruction1:AddImage("/files/code/Unit3/QTM-Blank.png", "Quorum Turtle Module - Blank Grid with Turtle at starting position")
        studentInstruction1:AddParagraph("Try to change the coordinate that the turtle starts at by changing the values inside the <b>SetStartingCoordinates</b> action to <b>(1, 0)</b> for example.")
        SideBySideIDE CSP_U3L04_1_0
        CSP_U3L04_1_0:SetUniqueIdentifier("CSP_U3L04_1_0")
        CSP_U3L04_1_0:GetIDETitle():AddText("Quorum Turtle Module: SetStartingCoordinates(0,0)")
        CSP_U3L04_1_0:SetGameEnvironment(false)
        CSP_U3L04_1_0:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        SetStartingCoordinates(0, 0)
     end
end
")
        CSP_U3L04_1_0:Setup()
        studentInstruction1:Add(CSP_U3L04_1_0)
        studentInstruction1:AddParagraph("Let's try the <b>MoveForward()</b> command by running the below program. Notice that the turtle will move forward one grid and the turtle will leave a trail behind. Also notice that the <b>MoveForward()</b> command is given to the turtle by inserting <b>MoveForward</b> inside the action <b>TurtleCommands</b>.")
        SideBySideIDE CSP_U3L04_1
        CSP_U3L04_1:SetUniqueIdentifier("CSP_U3L04_1")
        CSP_U3L04_1:GetIDETitle():AddText("Quorum Turtle Module: MoveForward()")
        CSP_U3L04_1:SetGameEnvironment(false)
        CSP_U3L04_1:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        MoveForward()
     end
end
")
        CSP_U3L04_1:Setup()
        studentInstruction1:Add(CSP_U3L04_1)
        studentInstruction1:AddParagraph("Now, if you have the <b>PenUp()</b> command before you ask the turtle to <b>MoveForward()</b>, you will notice that the turtle will move without leaving a trail behind. Think about where you can insert this command and try it in the IDE below.")
        SideBySideIDE CSP_U3L04_1_1
        CSP_U3L04_1_1:SetUniqueIdentifier("CSP_U3L04_1_1")
        CSP_U3L04_1_1:GetIDETitle():AddText("Quorum Turtle Module: PenUp()")
        CSP_U3L04_1_1:SetGameEnvironment(false)
        CSP_U3L04_1_1:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        MoveForward()
     end
end
")
        CSP_U3L04_1_1:Setup()
        studentInstruction1:Add(CSP_U3L04_1_1)

        studentInstruction1:AddParagraph("If you issued the <b>PenDown()</b> command to the turtle after you have issued the <b>PenUp()</b> command to the turtle already, the turtle will start to leave a trail again when it moves.")// before you ask the turtle to <b>MoveForward()</b>, you will notice that the turtle will move without leaving a trail behind. Think about where you can insert this command and try it in the IDE below.")
        studentInstruction1:AddParagraph("Think about where you can add the <b>PenDown()</b> and <b>PenUp()</b> commands to the code below for the turtle to draw a dashed line.")
        studentInstruction1:AddParagraph("After you have successfully drawn the dashed line, you can check the path that the turtle has taken by adding a <b>OutputLines()</b> command inside the <b>TurtleCommands</b> section.")
        SideBySideIDE CSP_U3L04_1_2
        CSP_U3L04_1_2:SetUniqueIdentifier("CSP_U3L04_1_2")
        CSP_U3L04_1_2:GetIDETitle():AddText("Quorum Turtle Module: PenDown()")
        CSP_U3L04_1_2:SetGameEnvironment(false)
        CSP_U3L04_1_2:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands
        PenUp()
        MoveForward()
        MoveForward()
        MoveForward()
        MoveForward()
     end
end
")
        CSP_U3L04_1_2:Setup()
        studentInstruction1:Add(CSP_U3L04_1_2)

        studentInstruction1:AddParagraph("Finally, the <b>TurnLeft()</b> command will allow the turtle to turn left from the turtle's perspective.")
        bodyDiv:Add(studentInstruction1)

        bodyDiv:AddHeading("Challenge 1", 3)
        studentInstruction2:AddHeading("Student Instructions",4)
        studentInstruction2:AddParagraph("Start the turtle on the dot named <b>a1</b>, then try to draw a 1 x 1 square to the front 
                        and left of the turtle as efficiently as possible. The program should 
                        stop with turtle in its original position, facing its original direction.")
        SideBySideIDE CSP_U3L04_c1
        CSP_U3L04_c1:SetUniqueIdentifier("CSP_U3L04_c1")
        CSP_U3L04_c1:GetIDETitle():AddText("Quorum Turtle Module: Challenge 1")
        CSP_U3L04_c1:SetGameEnvironment(false)
        CSP_U3L04_c1:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L04_c1:Setup()
        studentInstruction2:Add(CSP_U3L04_c1)
        bodyDiv:Add(studentInstruction2)
//New lines begin: (1, 0) to (1, 1) to (0, 1) to (0, 0) to (1, 0). End of lines
        bodyDiv:AddParagraph("The most efficient way to draw this square makes the turtle go around 
                    in a counter-clockwise manner. Therefore the lines shown in the output box should 
                    say: " + dq + "New lines begin: (1, 0) to (1, 1) to (0, 1) to (0, 0) to (1, 0). End of lines." + dq)



        bodyDiv:AddHeading("Challenge 2", 3)
        studentInstruction3:AddHeading("Student Instructions",4)
            Paragraph warmUp3
                warmUp3:AddText("Start the turtle at the dot named <b>a2</b>. This time, draw a 1 x 1 square to the 
                    front and right of the turtle as efficiently as possible. 
                    Notice that there is no command to turn right! The program should stop with turtle in its original 
                    position, facing its original direction.")
        studentInstruction3:Add(warmUp3)
        SideBySideIDE CSP_U3L04_c2
        CSP_U3L04_c2:SetUniqueIdentifier("CSP_U3L04_c2")
        CSP_U3L04_c2:GetIDETitle():AddText("Quorum Turtle Module: Challenge 2")
        CSP_U3L04_c2:SetGameEnvironment(false)
        CSP_U3L04_c2:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L04_c2:Setup()
        studentInstruction3:Add(CSP_U3L04_c2)

        bodyDiv:Add(studentInstruction3)
        bodyDiv:AddParagraph("The students will need to 
                    figure out how to draw this by only turning left and moving 
                    forward. ")
            Paragraph warmUp4
                warmUp4:AddText("
                    The most efficient way to draw this square makes the turtle go around 
                    in a clockwise manner. Therefore the line drawn in the output box should say: 
                    " + dq + "New lines begin: (2, 0) to (2, 1) to (3, 1) to (3, 0) to (2, 0). End of lines." + dq)
        bodyDiv:Add(warmUp4)
//New lines begin: (2, 0) to (2, 1) to (3, 1) to (3, 0) to (2, 0). End of lines



        bodyDiv:AddHeading("Challenge 3", 3)
        studentInstruction4:AddHeading("Student Instructions",4)
            Paragraph warmUp5
                warmUp5:AddText("Start the turtle at the dot named <b>a0</b>. Draw a 3x3 grid to the front and right 
                    of the turtle as efficiently as possible. The turtle should 
                    end at its original location, facing its original direction. ")
                studentInstruction4:Add(warmUp5)

        studentInstruction4:AddImage("/files/code/Unit3/3x3 grid.png", "Quorum Turtle Module - Full Grid with a 3x3 Grid drawn with bottom left corner at (0, 0)")
        SideBySideIDE CSP_U3L04_c3
        CSP_U3L04_c3:SetUniqueIdentifier("CSP_U3L04_c3")
        CSP_U3L04_c3:GetIDETitle():AddText("Quorum Turtle Module: Challenge 3")
        CSP_U3L04_c3:SetGameEnvironment(false)
        CSP_U3L04_c3:GetIDEInputArea():AddText("
use Libraries.Curriculum.TurtleProgram.TurtleGame
class Main is TurtleGame
     action Main
        StartGame()
     end

     action TurtleCommands

     end
end
")
        CSP_U3L04_c3:Setup()
        studentInstruction4:Add(CSP_U3L04_c3)

        bodyDiv:Add(studentInstruction4)





            Paragraph warmUp6
                warmUp6:AddText("There 
                    are several correct solutions for this challenge, though 
                    some solutions are more efficient than others. This is the 
                    very nature of computer programming. Since they started the " + dq + "turtle" + dq + " at 
                    dot A0, the most common solution would draw the following lines 
                    (though not necessarily in the order shown below; the order would depend on the solution):")
        bodyDiv:Add(warmUp6)
            UnorderedList wu6List
                wu6List:AddListItem("Lines in the row A: (3, 0) to (2, 0) to (1, 0) to (0, 0)")
                wu6List:AddListItem("Lines in the row B: (3, 1) to (2, 1) to (1, 1) to (0, 1)")
                wu6List:AddListItem("Lines in the row C: (3, 2) to (2, 2) to (1, 2) to (0, 2)")
                wu6List:AddListItem("Lines in the row D: (3, 3) to (2, 3) to (1, 3) to (0, 3)")
                wu6List:AddListItem("Lines in the column 0: (0, 0) to (0, 1) to (0, 2) to (0, 3)")
                wu6List:AddListItem("Lines in the column 1: (1, 0) to (1, 1) to (1, 2) to (1, 3)")
                wu6List:AddListItem("Lines in the column 2: (2, 0) to (2, 1) to (2, 2) to (2, 3)")
                wu6List:AddListItem("Lines in the column 3: (3, 0) to (3, 1) to (3, 2) to (3, 3)")
        bodyDiv:Add(wu6List)


//New lines begin: (0, 0) to (1, 0) to (2, 0) to (3, 0) to (3, 1) to (3, 2) to (3, 3) to (2, 3) to (1, 3) to (0, 3) to (0, 2) to (0, 1) to (0, 0). End of lines. New lines begin: (2, 0) to (2, 1) to (2, 2) to (2, 3). End of lines. New lines begin: (1, 3) to (1, 2) to (1, 1) to (1, 0). End of lines. New lines begin: (3, 2) to (2, 2) to (1, 2) to (0, 2). End of lines. New lines begin: (0, 1) to (1, 1) to (2, 1) to (3, 1). End of lines. End of lines
        bodyDiv:AddHeading("Tips", 4)
            UnorderedList pTip
                pTip:AddListItem("The students will need some time to work on the 3x3 
                        grid problem; it is more challenging than it appears at first. ")
                pTip:AddListItem("Remind the students to ask themselves: Can I do 
                        it with fewer commands? If not, can I prove that 
                        it's impossible to do with fewer?")
                pTip:AddListItem("Questions like these are the kinds that 
                        programmers ask each other all the time. And programmers 
                        usually work with each other to reach a solution. ")
        bodyDiv:Add(pTip)



        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddHeading("Discussion: What does " + dq + "efficiency" + dq + " mean when programming?", 4)
        studentInstruction5:AddHeading("Prompt for the students:",4)
            UnorderedList wrapup
                wrapup:AddListItem("What strategies or reasoning did you use to identify possible solutions?")
                wrapup:AddListItem("Is the solution that you or another group found the most efficient? How do you know?")
                wrapup:AddListItem("Today's activity challenged us to find the most efficient solution to a problem. We care about efficiency when we don't want to waste something valuable, like money, time, or space. We measured the efficiency of our programs in terms of lines of code, but there are other ways to think about efficiency when talking about code or programs that run on a computer. When we try to create efficient programs, what other valuable resources might we be concerned about conserving?")
        studentInstruction5:Add(wrapup)
        bodyDiv:Add(studentInstruction5)
        bodyDiv:Add(break)
                bodyDiv:AddParagraph("Consider listing the things that students came up with and posting them somewhere that can be read by the class. These can be used to motivate portions of the next and future lessons.")
        UnorderedList wu4
        wu4:AddText("<b>Goal</b>")
        bodyDiv:Add(wu4)
        UnorderedList wu5
                wu5:AddText("The point of this discussion is to highlight the 
                        fact that " + dq + "efficiency" + dq + " can mean different things depending on the context. 
                        Potential answers to this question can include the time they take 
                        to run on a computer, the time or number of people they require to create, 
                        the number of resources they require to run, etc. ")
        bodyDiv:Add(wu5)
        bodyDiv:Add(break)

        studentInstruction6:AddHeading("Prompt for the students:",4)
        studentInstruction6:AddParagraph("Think of an example outside of computer science in which you have heard 
                    the term " + dq + "efficiency" + dq + " and compare it to the ways we talked about efficiency 
                    in programming. In what ways is the meaning of " + dq + "efficiency" + dq + " the same? 
                    In what ways is it different?")
        bodyDiv:Add(studentInstruction6)
        bodyDiv:Add(break)

        bodyDiv:AddHeading("Discussion: Why Limit to 4 Commands?", 4)
            Paragraph freeRes2
                freeRes2:AddText("Today we solved a series of problems with a 
                    limited set of commands (only 4). ")
        bodyDiv:Add(freeRes2)

        studentInstruction7:AddHeading("Prompt for the students:",4)
        studentInstruction7:AddParagraph("Give at least one reason 
                    why it's useful to learn how to solve and program solutions 
                    with a limited set of commands.")
        bodyDiv:Add(studentInstruction7)

        bodyDiv:Add(break)
            UnorderedList pTip2
                pTip2:AddText("<b>Tips</b>")
        bodyDiv:Add(pTip2)

        UnorderedList pTip2_2
                pTip2_2:AddText("Remind students that whether they know 4 commands of a language 
                    or hundreds, they will always be constrained by the programming language. 
                    The reason they need to learn how to program is because there isn't 
                    a command to do every little thing: they have to understand the set 
                    of things that a programming language can do, and then use their 
                    creativity and problem-solving skills to get the computer to do 
                    what they want.")
        bodyDiv:Add(pTip2_2)
        bodyDiv:Add(break)
        UnorderedList pTip2_4
        pTip2_4:AddText("Also remind students that collaboration is a huge help when solving problems with programming. It's helpful to work through problems with a partner.")
        bodyDiv:Add(pTip2_4)
        bodyDiv:Add(break)

        bodyDiv:AddHeading("Discussion: How about a rectangle?", 4)
        studentInstruction8:AddHeading("Prompt for the students:",4)
        studentInstruction8:AddParagraph("In this lesson, you wrote code to make the 
                    turtle draw squares. Describe how the code for drawing a rectangle 
                    would be different than drawing a square.")
        bodyDiv:Add(studentInstruction8)
        bodyDiv:Add(break)

        UnorderedList gs1
        gs1:AddText("<b>Tips</b>")
        bodyDiv:Add(gs1)
        UnorderedList gs1_1
        gs1_1:AddText("The answers will vary but should demonstrate 
                    that the student understands the concept of repetition. 
                    For example, with a square you can repeat 4 times moving the turtle 
                    forward + turning right (or left). With a rectangle, you might repeat 2 
                    times the drawing of a long side + a short side.")
        bodyDiv:Add(gs1_1)


        bodyDiv:AddHeading("Discussion: Summarize", 4)
            Paragraph pTip4
                pTip4:AddText("Ask the students to summarize their experience with this first IDE lesson by answering the following questions.")
        bodyDiv:Add(pTip4)

        studentInstruction9:AddHeading("Prompt for the students:",4)
            UnorderedList pt4List
                pt4List:AddListItem("What surprised you about programming with such a small set of basic commands?")
                pt4List:AddListItem("Were you able to be creative with such a limited set of tools?")
                pt4List:AddListItem("What was most frustrating about this activity? If you could add one additional simple command, what would it be and why?")
        studentInstruction9:Add(pt4List)
        bodyDiv:Add(studentInstruction9)



        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Criteria for good code", 4)
            UnorderedList goodCode
                goodCode:AddListItem("The program draws the desired figure.")
                goodCode:AddListItem("The turtle is returned to its starting location and is pointed in the correct direction.")
                goodCode:AddListItem("The figure is located in the correct position, relative to the starting position of the turtle.")
                goodCode:AddListItem("The program only makes use of the " + dq + "building block" + dq + " commands provided.")
                goodCode:AddListItem("The program is reasonably efficient in its execution.")
        bodyDiv:Add(goodCode)



        bodyDiv:AddHeading("Extended Learning",2)
        Paragraph extL
        extL:AddText("Ask students to propose ways they could prove that their solution to the 3x3 grid problem is the most efficient. Note that an actual proof is very challenging.")
        bodyDiv:Add(extL)



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CL.L2:3")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L2:4, CPP.L2:8")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CPP.L3A:3, CPP.L3A:4")
                AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L2:1, CT.L2:3, CT.L2:6") 
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.2 (A, I)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.1.3 (B, C, D, F)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.2.1 (A, B)")
                AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "5.4.1 (A, D, E, I)")
        bodyDiv:Add(list)

/* Completed 2/11/18 by Ko */

        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn simple commands in the Quorum Programming Language"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 3 Lesson 4 (Using Simple Commands)"
    end
    action GetName returns text
        return "Code.Org Unit 3 Lesson 4"
    end
    action GetShortDescription returns text
        return "Learn simple programming commands"
    end
    action GetLocation returns text
        return "lessons/code/Algorithm-Programming/Lesson4A.html"
    end

end
