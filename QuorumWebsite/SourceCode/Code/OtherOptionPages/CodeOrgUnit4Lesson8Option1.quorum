use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.InlineFrame

class CodeOrgUnit4Lesson8Option1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()

    Preformatter preformatter //helper


    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 4 Lesson 8 Optional 1: Hard Problems - Traveling Salesperson Problem")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Big Data and Privacy - Optional Lesson: Hard Problems - Traveling Salesperson Problem", 1)
        headDiv:AddText("")
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")
        

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("In this lesson, students examine a classic problem in computer science, 
        the Traveling Salesperson Problem (TSP). Students solve small instances of the problem, try to 
        formulate algorithms to solve it, and discuss why these algorithms take a long time for computers 
        (and humans) to compute. Students learn how the TSP grows in size much faster than the problem of 
        adding characters to a password. Even though we use encryption to motivate a desire to learn about 
        computationally hard problems, they are valuable to know about, in and of themselves. This lesson 
        covers some territory about how we reason formally and mathematically about algorithms and figuring 
        out how “hard” something is for a computer to do.")
        bodyDiv:Add(break)







        bodyDiv:AddHeading("Vocabulary", 2)
        UnorderedList vocab1
            AddListItemWithBoldAtFront(vocab1, "Computationally hard: ","a problem for which there is no proven algorithm for solving in a reasonable time. The larger the problem set, the harder it is to solve by any means. The algorithm to solve must have exponential growth, one unit larger problem multiplies the number of answers to check by n. Sometimes these problems are called " + dq + "intractable." + dq + " The goal in many of these problems is to find the best -- most optimal -- solution.")
        bodyDiv:Add(vocab1)



        bodyDiv:AddHeading("Goals",2)
        bodyDiv:AddParagraph("Students will be able to:")
        UnorderedList goals
        goals:AddListItem("Describe the TSP")
        goals:AddListItem("Explain why TSP is computationally hard")
        goals:AddListItem("Solve the TSP on small graphs")
        goals:AddListItem("Connect the properties of computationally hard problems with desirable properties for encryption")
        bodyDiv:Add(goals)



        bodyDiv:AddHeading("Purpose",2)
        bodyDiv:AddParagraph("In this final algorithm detour, students are introduced to the Traveling Salesperson Problem, a classic problem in computer science for which there is no known algorithm to solve it, other than brute force. The number of possible solutions grows extremely fast, even for small inputs, and quickly becomes " + dq + "unreasonable" + dq + " to solve, making it a computationally hard problem. The ideas of computationally hard problems are leveraged for encryption to make ciphers that take an unreasonable amount of time to crack (as in thousands of trillions of years), but computationally hard problems are also important in their own right. There are many problems for which we wish we had reasonable algorithmic solutions - especially in medical fields - and we're still on the hunt to find them. No one has yet mathematically proven whether or not the problems we currently think are " + dq + "hard" + dq + " actually are.")


      
        bodyDiv:AddHeading("Resources", 2)
        UnorderedList resos
        resos:AddListItemLink("Activity Guide: The Traveling Salesperson Problem (Google Drive)","https://docs.google.com/document/d/1hSuSothXeTbKRRZeXx8CSL-DXl6BmnKzDnIYdM_lpDA/edit")
        resos:AddListItemLink("Video: Traveling Salesperson Problem (Optional, highly-visual)", "https://www.youtube.com/watch?v=SC5CX8drAtU")
        bodyDiv:Add(resos)

        InlineFrame inlineFrame
        inlineFrame:SetAddress("https://www.youtube.com/embed/SC5CX8drAtU")
        inlineFrame:SetHeight("480")
        inlineFrame:SetWidth("854")
        bodyDiv:Add(inlineFrame)



        bodyDiv:AddHeading("Getting Started", 2)
        bodyDiv:AddParagraph("Remind the students the following as a recall:")
        UnorderedList gs
        gs:AddText("In a previous lesson we reviewed the problem of trying to crack passwords and learned it would take a computer a very long time to try every possible combination of letters. We learned that the longer a password is, the harder it is to crack. This is because every character you add multiplies the number of possible passwords by the number of possibilities for that character. That’s pretty fast growth.")
        bodyDiv:Add(gs)
        bodyDiv:Add(break)
        bodyDiv:AddParagraph("Now, introduce today's lesson to the students:")
        UnorderedList gs1
        gs1:AddText("Computationally Hard Problems are problems that force a computer to run through many possibilities to find the right answer. In cryptography, our desire is to have an encryption function that is easy compute if you have the key, but really hard if you don’t.")
        gs1:AddText("Today we’re going to learn about one of the most famous problems that is thought to be computationally hard. We’ll determine if we can find an algorithm to solve it, and along the way, we’ll get a better sense of what “computationally hard” really means.")
        bodyDiv:Add(gs1)



        bodyDiv:AddHeading("Activity", 2)
        bodyDiv:AddParagraph("After distributing The Traveling Salesperson Problem Activity Guide,")
        UnorderedList act
        act:AddListItem("Give individual students time to work on finding the shortest routes for the small examples in the worksheet.")
        act:AddListItem("Make sure that students compare their answers. If two partners disagree, they should test one another's work to find the shortest tour.")
        bodyDiv:Add(act)
        bodyDiv:AddParagraph("If you ask students how they arrived at their solutions they might say, " + dq + "I tried a bunch of different paths and kept track of the shortest." + dq + " Or some form of greedy algorithm: " + dq + "I want to avoid that large edge" + dq + " or " + dq + "I want to use that small edge." + dq + " These are good strategies, but they can always be thwarted with the question, " + dq + "How do you know for sure it's the shortest?" + dq + "")
        bodyDiv:AddHeading("Tips",4)
        UnorderedList act2
        act2:AddText("This problem at first might seem like the Shortest Path problem we reviewed in a previous lesson, but it’s actually a much, much harder problem to solve with an algorithm. In fact there is no known algorithm to solve the TSP, other than by “brute force” -- trying every single possible tour of the nodes and then picking the one that gives the shortest possible tour.")
        bodyDiv:Add(act2)

        bodyDiv:AddHeading("Discuss",4)
        bodyDiv:AddParagraph("The goal of the discussion is to bring out the fact that this would be a much harder problem for computers to solve than the shortest path problem or minimum spanning tree problem. " + dq + "Hard" + dq + " means that there is no known way to find the correct answer without generating ALL possible answers. Connect this problem to our desire to understand problems that are computationally hard for computers for encryption.")
        bodyDiv:AddParagraph("Here are some of the questions you can ask the students:")
        UnorderedList act3
        act3:AddListItem("What makes this problem harder than the shortest path problem?")
        act3:AddText("<b>Sample Response:</b> First of all you need to make a closed path (route) of all vertices without revisiting vertices. This is a harder thing to do than just finding a path from one vertex to another. Just constructing a valid route is difficult. Second, you don't know where to start. Any edge could be part of the shortest tour. And once you pick an edge to start with, you still have no way to choose the next one. There is no way to eliminate possibilities from the start or as you go.")
        bodyDiv:Add(act3)
        bodyDiv:Add(break)
        UnorderedList act4
        act4:AddListItem("What kinds of algorithms did you think about in trying to solve the problem?")
        act4:AddText("Students might suggest strategies that leverage what they know about solving the minimum spanning tree and shortest path problems from previous lessons, such as starting with the least-cost edge in the graph, and then " + dq + "greedily" + dq + " connecting nodes by picking subsequent least-cost edges.")
        act4:AddText(" This is a good heuristic and might yield a tour that is better than the worst possible tour, but there is no guarantee it's the best.")
        act4:AddText(" The only algorithm that is known to find the absolute shortest tour every time is brute force, generating every possible tour and comparing them.")
        bodyDiv:Add(act4)



        bodyDiv:AddHeading("Wrap Up", 2)
        bodyDiv:AddParagraph("This is a fairly extended Wrap Up that asks the teacher to lead students through some reasoning about the traveling salesperson problem. Some preparation is recommended.")
        bodyDiv:AddHeading("Introduce How Hard Traveling Salesperson Problem Is",4)
        bodyDiv:AddParagraph("Many people for many years have tried to design an algorithm that works in all cases to find the exact optimum route for the traveling salesperson problem, with no success. So there is currently no algorithm to find the exact answer besides " + dq + "brute force," + dq + " trying all the possibilities.")
        bodyDiv:AddParagraph("Since we have to calculate the distances of all the tours anyway, we might as well count how many tours there are in the first place, just so we know how many calculations we have to perform.")
        bodyDiv:AddParagraph("For this demonstration, let's also consider a version of the problem faced by, say, an airline. For an airline, there are cities all over the world, and you can fly from any one directly to any other. So for an airline, there is a possible path that connects every possible node; we say the graph is " + dq + "fully connected." + dq + "")
        bodyDiv:AddParagraph("Show the students how the problem grows very quickly, by constructing all the possible tours for larger and larger numbers of nodes.")
        bodyDiv:AddParagraph("Starting with <b>3 nodes</b>, there is only one possible tour as shown in the image below.")
        bodyDiv:AddImage("/files/code/3 nodes.png","3 nodes")
        bodyDiv:Add(break)
        bodyDiv:AddParagraph("With <b>4 nodes</b>, there are 3 possible tours as shown in the image below.")
        bodyDiv:AddImage("/files/code/4 nodes.png","4 nodes")
        bodyDiv:Add(break)
        bodyDiv:AddParagraph("With <b>5 nodes</b>, there are 12 possible tours as shown in the image below. The way shown in the image is one way to reason through the different tours that 5 nodes can take: a 5th node could be added between each pair of nodes for every possible 4-node tour. Here, the actual distances don't matter because we're just trying to count the number of tours.")
        bodyDiv:AddImage("/files/code/5 nodes.png","5 nodes")
        bodyDiv:AddParagraph("A different way to reason through the possible tours of 5 nodes is to " + dq + "break" + dq + " one of the edges, connecting it to the new 5th node.")
        bodyDiv:AddImage("/files/code/5 nodes version 2.png","5 nodes version 2")
        bodyDiv:Add(break)
        bodyDiv:AddParagraph("Without having to draw pictures, we can reason about <b>6 nodes</b>: add a node to every possible edge of the 12 solutions 5-node solutions. Since each of 12 solutions above has 5 edges, it means we have 12*5 = 60 tours!")
        bodyDiv:AddParagraph("We can see how fast this grows: between a graph with 3 nodes and a graph of 6 nodes, our total number of possible tours grew from 1 to 60. This problem grows very quickly!")
        bodyDiv:AddParagraph("With just 10 nodes, this grows to about 181,440 possible tours.")
        bodyDiv:AddParagraph("With just 26 nodes, this grows to a 25-digit number: 7,755,605,021,665,492,992,000,000. (By comparison, the width of the entire observable universe(!!!!) in miles is roughly a 25-digit number.)")
        bodyDiv:AddParagraph("With 100 nodes you're up to a roughly a 155-digit number.")
        bodyDiv:AddParagraph("The math: With n nodes there are (n-1)!/2 (" + dq + "n-1 factorial divided by 2" + dq + ") possible tours. n! (or " + dq + "n factorial" + dq + ") is n(n-1)(n-2)(n-3)...(2)(1). So for example 10! = 10 * 9 * 8 * 7 * 6 * 5 * 4 * 3 * 2 * 1. You can confirm the formula with the examples above: 5 nodes = (5-1)! / 2 = 12.")

        bodyDiv:AddHeading("Reasonable or Unreasonable Time",4)
        bodyDiv:AddParagraph("Discuss the following with the students.")
        bodyDiv:AddParagraph("Computers work fast, but they have limits. In computer science, we have an actual mathematical hard line between reasonable and unreasonable runtimes.")
        bodyDiv:AddParagraph("<b>Reasonable</b> means the number of things the computer has to do is proportional to the size of the input to the problem. For example, the Minimum Spanning Tree and Shortest Path Problems are " + dq + "reasonable" + dq + " because they had algorithms that solved them by considering every edge in the graph once. The amount of time it takes is proportional to the number of edges. If the number of edges is n, even if there was an algorithm that had to look at the edge n^2 times, or n^3 times, that's still reasonable.")
        bodyDiv:AddParagraph("<b>Unreasonable</b> means the number of things the computer has to do grows as an exponent of the size of the input. So if you discovered that an algorithm made the computer do 2^n things, that's not reasonable, because it means every time the size of the input (n) gets bigger, the solution gets massively further out of reach. n! is another running time that is considered unreasonable. In real life, " + dq + "unreasonable" + dq + " problems would take a modern computer trillions and trillions of years to churn through all the possibilities.")
        bodyDiv:AddParagraph("So the brute force solution to TSP is unreasonable -- at least as far as we know! In fact, it's an open question how to solve this problem efficiently. If anyone finds a solution that runs in a reasonable time, a lot of security and encryption algorithms are in trouble, because many are based on the fact that this (and related problems) are unreasonable to solve.")
        bodyDiv:AddParagraph("Hard problems like this one can be used to create public keys that are tough for computers to crack.")

        bodyDiv:AddParagraph("Ask the students to think about the following: If the TSP is unsolvable for finding an exact solution, how do you think package delivery companies optimize their delivery routes?")

        

        bodyDiv:AddHeading("Assessment", 2)
        bodyDiv:AddHeading("Q1: Describe what it means for a problem to be " + dq + "computationally hard." + dq + "",4)
        bodyDiv:AddHeading("Q2: What strategies do people use to solve large computationally hard problems?",4)
        bodyDiv:AddHeading("Q3: Why are computationally hard problems important in encryption strategies?", 4)     



        bodyDiv:AddHeading("Extended Learning", 2)
        bodyDiv:AddParagraph("Do a quick Google search on the Traveling Salesperson Problem, and explore the many many interesting resources you can find.")



        bodyDiv:AddHeading("Standards Alignment", 2)
            UnorderedList list
            AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards: ", "CT.L3B:1, CT.L3B:2, CT.L3B:3, CT.L3B:4")
            AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.1 (A, B, C, D)")
            AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.3 (A)")
            AddListItemWithBoldAtFront(list, "Computer Science Principles: ", "4.2.4 (A, B, C)")
            bodyDiv:Add(list)



        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end


    action GetMetaDescription returns text
        return "Traveling Salesperson"
    end

    action GetSummaryName returns text
        return "CSP Unit 4 Lesson 8"
    end
    action GetName returns text
        return "CSP Unit 4 Lesson 8 Hard Problems - Traveling Salesperson Problem"
    end
    action GetShortDescription returns text
        return "Hard Problems - Traveling Salesperson Problem"
    end
    action GetLocation returns text
        return "lessons/code/BigDataAndPrivacy/Lesson8o1.html"
    end
end
