use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame
use Libraries.Web.Page.BoxTip
use Libraries.Web.Page.TableBody
use Libraries.Web.Page.TableHeader
use Libraries.Web.Page.TableData
use Libraries.Web.Page.WebList

class CodeOrgUnit7Lesson1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Parameters and Return Explore")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Parameters, Return, and Libraries - Lesson 1: Parameters and Return Explore", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("Students work with envelopes and paper to model functions with parameters and return values. Students create their own physical function envelope for drawing a house that takes in different parameters, and then build another function to calculate and return the cost of building that house.")
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
        UnorderedList goalList
        goalList:AddListItem("Use appropriate vocabulary to describe parameters and return values.")
        goalList:AddListItem("Remove specifics from a function so that it can be used in a variety of situations")
        bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Purpose", 2)
        bodyDiv:AddParagraph("In this Explore lesson, students follow a presentation and use manipulatives to understand the basics of creating a function with parameters and return values.")

        bodyDiv:AddHeading("Resources", 2)
        bodyDiv:AddParagraphBoldFront("Supplemental Code.org material", "")
        bodyDiv:AddParagraph("For the students")
        UnorderedList reso
        reso:AddListItemLink("Code.org CSP Unit 7 Presentation Slides (Optional)", "https://docs.google.com/presentation/d/1J5SBGz5EXZH1BQu_3FoARNNLadq9osgjr-IrgPuhEsw/edit?usp=sharing")
        reso:AddListItemLink("Activity Guide - Function Houses", "https://docs.google.com/document/d/1SdMlqfeAFtIVh3BKjRDQguOL5d4jC2nsvtdNAi0x-ts/view")
        bodyDiv:Add(reso)


        bodyDiv:AddHeading("Preparation", 2)
        bodyDiv:AddParagraph("If you want to use physical manipulatives for this lesson, you'll need to prepare the following:")
        UnorderedList prepList
            prepList:AddListItem("Collect various sizes of sticky notes. Small sticky notes are particularly useful for this activity.")
            prepList:AddListItem("Two envelopes per group")
            prepList:AddListItem("Pencils/pens")
            prepList:AddListItem("One baggy for a teacher demonstration (optional)")
            prepList:AddListItem("Print out copies of the Activity Guide for students")
            prepList:AddListItem("If you are using the slides, review Unit 7 Lesson 1 slides")
        bodyDiv:Add(prepList)

        bodyDiv:AddHeading("Getting Started (5 mins)", 2)
        bodyDiv:AddHeading("Preview Parameterized Functions", 3)
        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList startRemarks
            startRemarks:AddListItem("Up to this point, we've learned the basics of programming: variables, conditionals, functions, lists, loops, and traversals. As you grow in your programming skills, you'll start to notice ways that you can organize your code so that it is easier to work with. That's what this unit is all about!")
        bodyDiv:Add(startRemarks)
        bodyDiv:AddParagraphBoldFront("Prompt: ", " Why would you want to make your code easier to work with or read?")

        BoxTip startDiscussGoal
        startDiscussGoal:AddHeading("Discussion Goal", 3)
        startDiscussGoal:AddParagraphBoldFront("Goal: ", "This is a good time to remind students that when we write code, we aren't just writing for a computer - we are also writing for humans who will need to understand our code. Better organization can help others quickly understand our code so they can help debug or build upon the code.")
        bodyDiv:Add(startDiscussGoal)



        bodyDiv:AddHeading("Activity (30 mins)", 2)
        bodyDiv:AddHeading("Functions with Parameters and Return", 3)
        
        Paragraph activityStart
        
        activityStart:AddText(AddStrongTag("Guided Activity:") + " Today's activity introduces students to functions with paramerters and return. As a visual aid, you can use ")
        activityStart:AddLink("Code.org's presentation slides for Unit 7, Lesson 1: Parameters and Return Explore", "https://docs.google.com/presentation/d/1ZQLXktxB2DkyqqmCRjKnVRQKHrAv42_5rkjlEjH8af0/copy")
        activityStart:AddText(". These slides include animations. The notes below describe when to move to the next slide or click through an animation -- if you aren't using the slides, you can ignore these prompts.")
        bodyDiv:Add(activityStart)

        LessonTable activityWebTable
        activityWebTable:Setup("A table representing speaker notes", "Speaker Notes table") // Definitely call Setup explicitly first
        
        Paragraph leftCol1Paragraph
        leftCol1Paragraph:AddText(AddStrongTag("Slide: ") + "You and your partner should have")
        activityWebTable:AddLeft(leftCol1Paragraph)
        UnorderedList slide1List
            slide1List:AddListItem("Small sticky notes")
            slide1List:AddListItem("Regular sized sticky notes")
            slide1List:AddListItem("Pen/Pencil")
            slide1List:AddListItem("Envelopes")
        activityWebTable:AddLeft(slide1List)
        
        Paragraph rightCol1Paragraph
        
        rightCol1Paragraph:AddText(AddStrongTag("Distribute: ") + "large and small sticky notes and envelopes. Hold off on distributing the Activity Guide until later in the activity.")
        activityWebTable:AddRight(rightCol1Paragraph)
        
        activityWebTable:NextRow() // Table Break? Line Break? Next Row.

        
        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "<code> makeCake tiers flavor </code>")
        
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Let's pretend that I want to make a cake. I need to decide how many tiers the cake will have, and what flavor the cake will be. I've decided to make a 3 tiered cake.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        activityWebTable:AddRightParagraph("<code> makeCake 3 "+dq+"lemon"+dq+" </code>")

        
        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "If I flip over the envelope, and open it up there's a recipe inside. This recipe is going to tell me how to make the cake I've specified.")

        
        activityWebTable:NextRow()
        

        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "")
        activityWebTable:AddLeft(preformatter:GeneratePreformattedCode(
"makeCake 3 "+dq+"lemon"+dq+"
repeat tiers times:
    Bake a flavor cake
    Ice the cake.
Assemble tiers layers into one cake.
Put in box."))

        activityWebTable:AddRightParagraphBoldFront("Say: ", "To do this, I'm going to replace <code>tiers</code> with <code>3</code> and <code>flavor</code> with <code>lemon</code>, every time those words show up in the recipe. But notice - this recipe is pretty general. I could use it to make lots of different types and sizes of cake.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        activityWebTable:AddRight(preformatter:GeneratePreformattedCode(
"makeCake 3 "+dq+"lemon"+dq+"
repeat 3 times:
    Bake a "+dq+"lemon"+dq+" cake
    Ice the cake.
Assemble 3 layers into one cake.
Put in box."))
        activityWebTable:AddRightParagraphBoldFront("Do This: ", "Read through the recipe as a class. Make sure everyone understands how it works before moving on.")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "")
        activityWebTable:AddLeft(preformatter:GeneratePreformattedCode(
"//instructions for baking a cake
makeCake 3 "+dq+"lemon"+dq+"
repeat 3 times:
    Bake a "+dq+"lemon"+dq+" cake
    Ice the cake.
Assemble 3 layers into one cake.
Put in box."))
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Ok, let's make our cake. Remember, each time I come across tiers or flavor, I'm going to replace that word with the appropriate value. Once I'm done, I will have baked a 3 layer lemon cake!")
        activityWebTable:AddRightParagraphBoldFront("Click for animation: ", "There are several steps to click through here. Take it slow so students can see each part.")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "<code> makeCake 3 "+dq+"lemon"+dq+" </code>")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "This is a function! It should look familiar, but it has a few extra parts. This function has parameters. Parameters are used as placeholders for values that will be passed through the function.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")

        
        activityWebTable:NextRow()
        
        
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Those values passed to the parameter are called arguments.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "<code> makeCake tiers flavor</code>")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Let's think through how changing the arguments affects the output. Now I want a four layer chocolate cake. With a partner, discuss what my arguments will look like.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")  
        activityWebTable:AddRightParagraphBoldFront("Say: ", "I pass through the arguments <code>4</code> and <code>chocolate</code> to the parameters <code>tiers</code> and <code>flavor</code>. Then my function is ready. What will my cake look like?")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        activityWebTable:AddRightParagraph("<code> makeCake 4 "+dq+"chocolate"+dq+"</code>")


        activityWebTable:NextRow()


        //bodyDiv:AddParagraphBoldFront("Slide: ", "")
        activityWebTable:AddRightParagraphBoldFront("Do This: ", "Distribute Activity Guides and direct students to Challenge #1. Students will create their own function envelopes and write a simple function that uses parameters which can be used to draw a house. When students are finished building their function envelopes, a partner tests out the code and draws the house on a spare sticky note.")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "Let's look at another function, this time one that calculates the cost of making a cake.")
        activityWebTable:AddLeftParagraph("<code>costCake tiers flavor</code>")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Here's another function. This function is used to calculate the total cost of making a cake. Take note again of the arguments and parameters.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")


        activityWebTable:NextRow()


        //bodyDiv:AddParagraphBoldFront("Slide: ", "")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Let's open the envelope and check out how this function works.")


        activityWebTable:NextRow()
        

        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "")
        activityWebTable:AddLeft(preformatter:GeneratePreformattedCode(
"//Cost for making a cake
var flavorCost
var toal
If flavor equals "+dq+"chocolate"+dq+":
    flavorCost = 5
If flavor equals "+dq+"lemon"+dq+":
    flavorCost = 4
If flavor equals "+dq+"vanilla"+dq+":
    flavorCost = 3
total = flavorCost multiplied by tiers
return total"))
        activityWebTable:AddRightParagraphBoldFront("Say: ", "There are a few new things here. First, we've created two local variables. Remember, the local variables are contained within the function and can't be updated or accessed outside of the function. We learned about this when we discussed variable scope.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        
        
        activityWebTable:NextRow()        
        
        
        activityWebTable:AddRightParagraph("From Slide: Create two new local variables, " + AddStrongTag("flavorCost") + " and " + AddStrongTag("total."))
        activityWebTable:AddRightParagraph("In this function, a decision (in this case, how much to charge per flavor) is made based on the argument passed through the parameter.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        
        
        activityWebTable:NextRow()        
        
        
        activityWebTable:AddRightParagraph("From Slide: Determine the value of <b>flavorCost</b> based on the <u>argument</u> passed through the flavor paramter.")
        activityWebTable:AddRightParagraph("Finally, the total is returned, but returned where? What does that mean?")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")
        

        activityWebTable:NextRow()        
        
        
        activityWebTable:AddRightParagraph("From Slide: Calculate <b>total</b> using <b>flavorCost</b> and the <u>argument</u> passed through the tiers paramter.")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "After running this what does flavorCost equal? What does total equal?")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Before we talk more about that return, let's calculate the total cost of our original cake.")
        activityWebTable:AddRightParagraphBoldFront("Do This: ", "With a partner, determine what <code>flavorCost</code> and <code>total</code> equal after the function is run.")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "What does it mean to <b>return total?</b>")
        activityWebTable:AddLeftParagraph("A return does two things: ")
        UnorderedList returnList
            returnList:AddListItem("It stops the flow of the function. If a return is inside of a conditional, if that condition is met the function ends there.")
            returnList:AddListItem("It " + AddStrongTag("returns") + " a value to the place where the function was called.")
        activityWebTable:AddLeft(returnList)
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Now let's think about the return. If the program hits a return at any point in running a function, it will stop and a value will be "+dq+"returned"+dq+". Where is it returned? To the place in the program where the function was called.")


        activityWebTable:NextRow()

        
        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "We've called the cakeCost function. It has returned the value " + AddStrongTag("12") + ".")
        activityWebTable:AddLeftParagraph("But what happens to that value?")
        activityWebTable:AddLeftParagraph("How is it stored?")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "So to get back to our example, the value 12 is returned, but where is it returned to? Where is it stored?")
        activityWebTable:AddRightParagraphBoldFront("Do This: ", "Take a moment to brainstorm with a partner.")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "Let's return to variable baggies!")
        activityWebTable:AddLeftParagraph("A function " + AddStrongTag("return") + " value can be stored in a variable.")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "Let's return to variable baggies! A function return value can be stored in a variable. Notice how the envelope is placed inside of a baggie. That means that the function would be evaluated and whatever is returned would be stored in the variable <code>cakeCalculator</code>")
        activityWebTable:AddRightParagraphBoldFront("Click for animation", "")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "<code>var cakeCalculator = cakeCost(3, "+dq+"lemon"+dq+");</code>")
        activityWebTable:AddLeftParagraph("After the expression is evaluated, " + AddStrongTag("cakeCalculator") + " stores the value " + AddStrongTag("12") + ".")
        activityWebTable:AddRightParagraphBoldFront("Say: ", " Here's how this looks in JavaScript. It's ok if it's a little confusing. For now, notice how the statement is set up. A variable is set up with the name <code>cakeCalculator</code>. This gets the value that is returned from the function <code>cakeCost</code> which has two arguments <code>3</code> and <code>lemon</code> passed through the parameters. After the function is evaluated, <code>cakeCalculator</code> now stores the value 12.")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "In Quorum, the code looks similar. The biggest difference is that the variable must be of the correct type. Return types will be covered later.")
        activityWebTable:AddRightParagraph("<code>integer cakeCalculator = CakeCost(3, "+dq+"lemon"+dq+")</code>")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "<code>console.log("+dq+"Cake cost: "+dq+" + cakeCost(3, "+dq+"lemon"+dq+"));</code>")
        activityWebTable:AddRightParagraphBoldFront("Say: ", "We can also print to the console like so.")
        
        
        activityWebTable:AddRightParagraphBoldFront("Say: ", "In Quorum you can use output")
        activityWebTable:AddRightParagraph("<code>output "+dq+"Cake cost: "+dq+" + CakeCost(3, "+dq+"lemon"+dq+") </code>")


        activityWebTable:NextRow()


        activityWebTable:AddLeftParagraphBoldFront("Slide: ", "Create a cost calculator function for building the house you created a function for earlier.")
        activityWebTable:AddRightParagraphBoldFront("Do This: ", "Direct students to complete Challenge #2 in their Activity Guides. Students create a new envelope function which calculates the cost of the house from Challenge #1. After students are finished, they share the envelopes with a partner who tests the code.")

        bodyDiv:Add(activityWebTable) // End Table

        bodyDiv:AddHeading("Wrap Up (10 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Takeaways: ","Review with the class")
        WebList takeaways
            takeaways:AddListItem("Functions with parameters and return values help us simplify our code")
            takeaways:AddListItem("Functions can only return one value at a time")
            takeaways:AddListItem("A function can have:")
            takeaways:AddListItem(2,"No parameters and no return values")
            takeaways:AddListItem(2,"Parameters, but no return values")
            takeaways:AddListItem(2,"Return values, but no parameters")
            takeaways:AddListItem(2,"Parameters and return values")
        bodyDiv:AddNestedTag(takeaways)

        bodyDiv:AddParagraphBoldFront("Journal: ", "Students should add the following words and definitions to their journals: parameter, argument, return.")

        UnorderedList wrapUpList
        wrapUpList:AddListItem(AddItalicFront("Parameter: ", "a variable in a function definition. Used as a placeholder for values that will be passed through the function. "))
        wrapUpList:AddListItem(AddItalicFront("Argument: ", "the value passed to the parameter"))
        wrapUpList:AddListItem(AddItalicFront("Return: ", "used to return the flow of control to the point where the procedure (also known as a function) was called and to return the value of expression.
"))
        bodyDiv:Add(wrapUpList)

        bodyDiv:AddHeading("Assessment: Check For Understanding", 2)

        bodyDiv:AddParagraphBoldFront("For Students:"," Open a word doc or google doc and copy/paste the following question.")

        bodyDiv:AddParagraphBoldFront("Question: ", "Read through the code and choose the correct answer.")
        bodyDiv:Add(preformatter:GeneratePreformattedCode(
"output Numbers(3,2)

action Numbers(number num1, number num2) returns number
    number answer
    answer = num1 + num2
    answer = answer + num1
    return answer * num2
end
"))
        bodyDiv:AddParagraph("<ol type="+ dq +"a" + dq + ">
                            <li>15</li>
                            <li>16</li>
                            <li>21</li>
                            <li>18</li>
                            </ol>")


        bodyDiv:AddHeading("Standards Alignment", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ","2-AP-14")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-3.A.1, AAP-3.A.3, AAP-3.B.4, AAP-3.B.5, AAP-3.B.6")
        bodyDiv:Add(list)


        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Develop a mental model for how functions can be generalized using parameters and return values."
    end

    action GetSummaryName returns text
        return "Code.Org Unit 7 Lesson 1: Parameters and Return Explore"
    end

    action GetName returns text
        return "Code.Org Unit 7 Lesson 1"
    end

    action GetShortDescription returns text
        return "Learn about parameters and return"
    end

    action GetLocation returns text
        return "lessons/code/ParametersReturnLibraries/Lesson1.html"
    end

end
