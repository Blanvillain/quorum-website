use Libraries.Web.Page.all
use Libraries.Containers.Array

class CodeOrgUnit7Lesson2 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Parameters and Return Investigate")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Parameters, Return, and Libraries - Lesson 2: Parameters and Return Investigate", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Parameters, Return, and Libraries - Lesson 2: Parameters and Return Investigate")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)

        section_intro:AddParagraph("In this lesson students work with partners to investigate two different apps that use parameters and return values. Students are also introduced to the mod operator as part of one of the apps that they use.")
        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Identify situations in which a function with a parameter or return value would be necessary")
        goalList:AddListItem("Explain the benefits of using a function with a parameter or return value in the context of a specific program")
        goalList:AddListItem("Modify programs that use functions with parameters and return")
        goalList:AddListItem("Use the modulus operator in a program")
        section_intro:Add(goalList)

        AddHeading(section_intro, "Purpose", 3)
        section_intro:AddParagraph("As with all Investigate lessons, this is an opportunity for students to dig into programs that use a new concept, in this case parameters and return, in the context of working apps. Encourage students to read the code carefully, discuss their findings with classmates, make connections to the Explore activity from the day before, and start making simple modifications to the program. Students will not leave this lesson as experts in writing programs with parameters and return, but they should understand the high level context and know they can refer back to the code in these investigate projects when they need help getting unstuck in the coming Practice and Make lessons.")

       AddHeading(section_intro, "Resources", 3)
        UnorderedList resources
        resources:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        resources:AddListItemLink("CSP-Widgets repository", "https://github.com/qorf/CSP-Widgets")
        section_intro:Add(resources)

               Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
        AddHeading(section_gettingStarted, "Who is Clean Code For?", 3)
       
        section_gettingStarted:AddParagraphBoldFront("Prompt: ", "Are clean and organized programs more useful for computers or people? Why? Try to give examples from programs you've written or seen in this class.")
        section_gettingStarted:AddParagraphBoldFront("Discuss: ", "Have students silently journal their response, then discuss with a partner, and finally share with the class.")

        Division startDiscussGoal = AddDisscussionGoal(section_gettingStarted)
        startDiscussGoal:AddParagraphBoldFront("Goal: ", "Parameters and return values allow students to write programs that are more organized and cleaner. Naming functions helps students write programs that read more like descriptions of what they do, and they also help students reuse code.")
        startDiscussGoal:AddParagraph("This quick discussion sets up many of these realizations. Students will not leave this lesson able to "+dq+"do more"+dq+" than previously. Instead they'll be able to write programs that are cleaner, better organized, and better able to be used elsewhere. Long term, writing programs like this will actually help students write more complex code, but because they as programmers will better be able to understand their programs and reuse the code they write. This quick prompt does not need to cover all of those points and should just be a reminder of things they've already seen. Clean code is for humans, but in the long term it helps them write better programs.")
       
        AddHeading(section_gettingStarted, "Remarks", 3)
  
        UnorderedList startRemarks
        startRemarks:AddClassAttribute("list-disc list-outside pl-8")
            startRemarks:AddListItem("Clean programs may sometimes run "+dq+"better"+dq+" but usually they're just helpful for us as we read them and write them. In other words, clean code is for people, but in the long run writing good code can help us write larger and more complicated programs because we can just read them and understand what they're doing.")
            startRemarks:AddListItem("Today we're going to learn more about parameters and return values. Something important to notice is that they might not actually change the way that your programs run, but they definitely will change the way we read and write programs. In general they'll make programs cleaner and easier to understand, but let's go look at some examples.")
        section_gettingStarted:Add(startRemarks)

        Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (35 minutes)", 2)
        section_activity:AddParagraphBoldFront("Do This: ", "Take a few minutes to review the takeaways from the previous lesson.")
        section_activity:AddParagraphBoldFront("Group: ", "Place students with partners")
        section_activity:AddParagraphBoldFront("Do This: ","Students navigate to <b>Lesson2_App1</b> and read and respond to the questions there. If students have extra time, they can try the modify activity.")
        Division timeTeachTip = AddTeachingTip(section_activity)
      
        timeTeachTip:AddParagraph("Make sure you leave time to bring the class back together for discussion and code walkthroughs. There's a lot to dig into with these Investigations.")
   

        UnorderedList doThisList
        doThisList:AddClassAttribute("list-disc list-outside pl-8")
            doThisList:AddListItem("How does <code>Calculate()</code> work?")
            doThisList:AddListItem("What are the arguments passed through the parameter in <code>Calculate()</code> when it is called?")
            doThisList:AddListItem("What types of data does the parameter require in the <code>Calculate()</code> function? Where can you find that information?")
            doThisList:AddListItem("What is returned? What type of data?")
        section_activity:Add(doThisList)
        section_activity:AddParagraphBoldFront("Discuss: ","As a class, walk through the questions and the code. Make sure students understand the parts of the function.")
        Division modTeachTip = AddTeachingTip(section_activity)
       
        modTeachTip:AddParagraph("Students need to know how the MOD operator works for the AP CSP exam. The explanations here are enough to help them answer those questions.")
        modTeachTip:AddParagraph("There are many wonderful and interesting uses of MOD in apps, but students are not expected or required to use the operator themselves when programming apps for this course.")
       
        section_activity:AddParagraphBoldFront("Do This:"," Now look together at lines 64-70. Students discuss with a partner how they think the MOD operator works.")
        section_activity:AddParagraphBoldFront("Do This:"," The MOD operator is just like any other operator - it takes two numbers, processes them, and then returns a value. Click through the animations one by one as students give answers to each arithmetic statement.")
        section_activity:AddParagraphBoldFront("Do This:"," Give students a few minutes to practice using the MOD operator with a partner, solving the problem on the screen. Then click through to see the answer.")
        section_activity:AddParagraphBoldFront("Remarks", "")
        UnorderedList lastRemarks
        lastRemarks:AddClassAttribute("list-disc list-outside pl-8")
            lastRemarks:AddListItem("MOD can be a little tricky, but here's what you need to remember: it's the remainder that is left after a number is divided by another number.")
            lastRemarks:AddListItem("Why is this useful? A common usage is to determine if a number is even or odd. If you divide any number by two and there is no remainder, the number is even! You can also use MOD to determine if a number is divisible by another number.")
            lastRemarks:AddListItem("Now let's get back to another app investigation with functions with parameters and return values.")
        section_activity:Add(lastRemarks)
        section_activity:AddParagraphBoldFront("Do This:"," Students navigate to <b>Lesson2_App2</b>, read lines 37-43 and lines 160-164 and discuss with their partner what's happening in these lines.")
        section_activity:AddParagraphBoldFront("Discuss:"," Read through the lines together as a class, and clear up any misconceptions.")
        section_activity:AddParagraphBoldFront("Do This:"," Students carefully read the function on lines 45-69 before explaining to their partners how it works. If students have extra time, they can try the modify activity.")
        section_activity:AddParagraphBoldFront("Discuss:"," Talk through the app together as a class. Make sure students understand all the parts of the function and understand where to look in the comments for information.")

                Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap Up (5 minutes)", 2)
        section_wrap:AddParagraphBoldFront("Review:"," Discuss the takeaways.")
        AddHeading(section_wrap, "Takeaways", 3)
        WebList takeaways
        takeaways:AddClassAttribute("list-disc list-outside pl-8")
            takeaways:AddListItem("Extracting shared features to generalize functionality is known as <b>procedural abstraction</b>.")
            takeaways:AddListItem("Using parameters allows the functions (also called procedures) to be generalized.")
            takeaways:AddListItem("Using procedural abstraction helps improve code readability.")
            takeaways:AddListItem("Procedural abstraction manages complexity by allowing for code reuse.")
            takeaways:AddListItem(3,"For example: the function <code>move(id, direction)</code> could be used to move an element in any direction, rather than writing separate functions for each direction. ")
        section_wrap:AddNestedTag(takeaways)


               Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

            AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

        AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph(" What are the benefits of writing functions that use parameters and return? Try to list at least two.")


       Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)

        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ","2-AP-14, 3B-AP-23")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.C.3, AAP-3.B.4, AAP-3.B.5, AAP-3.B.6")
        section_standards:Add(list)



        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Investigate and modify sample apps that use parameters and return values."
    end

    action GetSummaryName returns text
        return "Code.Org Unit 7 Lesson 2: Parameters and Return Investigate"
    end

    action GetName returns text
        return "Code.Org Unit 7 Lesson 2"
    end

    action GetShortDescription returns text
        return "Learn about parameters and return"
    end

    action GetLocation returns text
        return "lessons/code/ParametersReturnLibraries/Lesson2.html"
    end
    action GetLinkName returns text
        return "Parameters and Return Investigate"
    end

    action GetSectionName returns text
        return "Parameters, Return, and Libraries"
    end   
end
