use Libraries.Web.Page.all
use Libraries.Containers.Array
class CodeOrgUnit7Lesson5 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Libraries Explore")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
       Array<Division> divs = InitializeTutorialPage()
        Division bodyDiv = divs:Get(1)
        Division onPageDiv = divs:Get(2)


        //page header
        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        Heading h_heading = headDiv:AddHeading("Parameters, Return, and Libraries - Lesson 5: Libraries Explore", 1)
        h_heading:AddClassAttribute("text-3xl font-bold")
        h_heading:AddAttribute("data-text", "Parameters, Return, and Libraries - Lesson 5: Libraries Explore")
        AddToHeadingArray(h_heading)

       bodyDiv:Add(headDiv)

        
        Section section_intro
        section_intro:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_intro)
        AddHeading(section_intro, "Overview", 2)


        section_intro:AddParagraph("Students learn the basics of libraries while building upon the envelope model of a function with a folder to represent a library.")
        AddHeading(section_intro, "Goals", 3)
        section_intro:AddParagraph("Students will be able to:")
        UnorderedList goalList
        goalList:AddClassAttribute("list-disc list-outside pl-8")
        goalList:AddListItem("Use appropriate vocabulary to describe libraries")
        goalList:AddListItem("Explain the process of preparing a function to be added to a library")
        goalList:AddListItem("Clearly write documentation for functions in a library")
        section_intro:Add(goalList)

        AddHeading(section_intro, "Purpose", 3)
        section_intro:AddParagraph("The mental model of a folder containing a group of functions is used to introduce the concept of a library. Throughout this lesson student explore the requirements for working with libraries and documentation.")

        AddHeading(section_intro, "Resources", 3)
        UnorderedList reso
        reso:AddClassAttribute("list-disc list-outside pl-8 underline text-quorum-blue-150")
        reso:AddListItemLink("Code.org CSP Unit 7 Presentation Slides (Optional)", "https://docs.google.com/presentation/d/1J5SBGz5EXZH1BQu_3FoARNNLadq9osgjr-IrgPuhEsw/edit?usp=sharing")
        section_intro:Add(reso)

        Section section_gettingStarted
        section_gettingStarted:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_gettingStarted)
        AddHeading(section_gettingStarted, "Getting Started (5 minutes)", 2)
         AddHeading(section_gettingStarted, "Preview Libraries", 3)
        section_gettingStarted:AddParagraphBoldFront("Prompt: ", "How could you share a function with another person so they could use it in their own program?")

        Division startDiscussGoal = AddDisscussionGoal(section_gettingStarted)
        
        startDiscussGoal:AddParagraphBoldFront("Goal: ", "Guide student answers towards possible answers like these -")
        UnorderedList discussGoalList
        discussGoalList:AddClassAttribute("list-disc list-outside pl-8")
            discussGoalList:AddListItem("email code to each other")
            discussGoalList:AddListItem("used a shared document")
            discussGoalList:AddListItem("copy/paste functions from one tab to another")
        startDiscussGoal:Add(discussGoalList)


         AddHeading(section_gettingStarted, "Remarks", 4)
        UnorderedList startRemarks
        startRemarks:AddClassAttribute("list-disc list-outside pl-8")
            startRemarks:AddListItem("Today we are going to learn a new way to share code.")
        section_gettingStarted:Add(startRemarks)

        Section section_activity
        section_activity:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_activity)
        AddHeading(section_activity, "Activity (35 minutes)", 2)
        Paragraph activityStart
        activityStart:AddText(AddTextBoldFront("Guided Activity:"," Today's activity introduces students to libraries. As a visual aid, you can use "))
        activityStart:AddLink("Code.org's presentation slides for Unit 7, Lesson 5: Libraries Explore", "https://docs.google.com/presentation/d/1J5SBGz5EXZH1BQu_3FoARNNLadq9osgjr-IrgPuhEsw/edit#slide=id.g41b682ba82_0_0")
        activityStart:AddText(". These slides include animations. The notes below describe when to move to the next slide or click through an animation -- if you aren't using the slides, you can ignore these prompts.")
        section_activity:Add(activityStart)



        AddHeading(section_activity, "Guided Activity", 3)
        section_activity:AddParagraph("Follow this lesson with the supplemental slides.")

        section_activity:AddParagraphBoldFront("Slide: ", "How can we easily share functions between programs?")
        section_activity:AddParagraphBoldFront("Say: ", "Have you ever wanted to share some of your code with a friend so they can use it to add a cool feature in their program? Or maybe you've got a collection of functions in one program that you want to use in another program. Today we are going to explore the answer to this question: How can we easily share functions between programs?")


        section_activity:AddParagraphBoldFront("Slide: ", "Take the following functions:")
        section_activity:Add(preformatter:GeneratePreformattedCode(
"makeCake tiers flavor
cakeCost tiers flavor
averageCake cakeList
"))
        section_activity:AddParagraph("And imagine them in an folder named <code>CakeBaker</code>")
        section_activity:AddParagraph("This is a " + AddStrongTag("library") + " - a collection of functions that can be used in many different programs.")
        section_activity:AddParagraphBoldFront("Click for animation: ", "Stop once all three envelopes are on the screen.")
        section_activity:AddParagraphBoldFront("Say: ", "These are functions. We recently learned about functions with parameters and return values.")
        section_activity:AddParagraphBoldFront("Click for animation: ", "Click until the library definition appears on the screen.")
        section_activity:AddParagraphBoldFront("Say: ", "The envelopes have been grouped together in a folder. This represents a library. A library is a collection of functions that can be used in many different programs.")


        section_activity:AddParagraphBoldFront("Slide: ", "")
        section_activity:AddParagraph("makeCake - creates a cake")
        UnorderedList makeCakeList
        makeCakeList:AddClassAttribute("list-disc list-outside pl-8")
            makeCakeList:AddListItem("tiers {number} - the layers of the cake")
            makeCakeList:AddListItem("flavor {string} - the flavor of the cake")
        section_activity:Add(makeCakeList)
        section_activity:AddParagraph("cakeCost - calculates the cost of making a cake")
        UnorderedList cakeCostList
        cakeCostList:AddClassAttribute("list-disc list-outside pl-8")
            cakeCostList:AddListItem("tiers {number} - the layers of the cake ")
            cakeCostList:AddListItem("flavor {string} - the flavor of the cake")
            cakeCostList:AddListItem("return {number} - the cost of making the cake")
        section_activity:Add(makeCakeList)
        section_activity:AddParagraph("avgCake - calculates the most common cake")
        UnorderedList avgCakeList
        avgCakeList:AddClassAttribute("list-disc list-outside pl-8")
            avgCakeList:AddListItem("cakeList {List} - a list of strings of cake names")
            avgCakeList:AddListItem("return {string} - the most common cake")
        section_activity:Add(makeCakeList)
        section_activity:AddParagraphBoldFront("Say: ", "Let's take a look at what's inside the library. If we open up the folder, we see the functions and some documentation. A library should have documentation for each of the included functions. The documentation should include:")
        UnorderedList slide3List
        slide3List:AddClassAttribute("list-disc list-outside pl-8")
            slide3List:AddListItem("how each function works")
            slide3List:AddListItem("a complete list of the parameters")
            slide3List:AddListItem("what (if anything) will be returned")
        section_activity:Add(slide3List)


   
        section_activity:AddParagraphBoldFront("Say: ", "This detailed type of documentation is also known as <b>Application Program Interface(API)</b>. APIs are specifications for how the functions in a library behave and can be used.")
        section_activity:AddParagraphBoldFront("Discuss: ", "With a partner, review the parts of the documentation.")

        section_activity:AddParagraphBoldFront("Slide: ", "<code>averageCake cakeList</code>")
        section_activity:AddParagraphBoldFront("Discuss: ", "What potential problems could come up if I tried to use a function without knowing what it does or how to interact with it? This would be similar to looking at the front of a function envelope and having to guess:")
        UnorderedList slide5List
        slide5List:AddClassAttribute("list-disc list-outside pl-8")
            slide5List:AddListItem("what the function does")
            slide5List:AddListItem("what data type the parameters need")
            slide5List:AddListItem("what is returned")
        section_activity:Add(slide5List)
        section_activity:AddParagraphBoldFront("Note: ", "If students are struggling to come up with ideas, give a few hints:")
        UnorderedList noteList
        noteList:AddClassAttribute("list-disc list-outside pl-8")
            noteList:AddListItem("what if there's an error when you run the code which calls this function?")
            noteList:AddListItem("what happens to a return if you don't store it in a variable or print it to the console?")
        section_activity:Add(noteList)


        section_activity:AddParagraphBoldFront("Slide: ", "")
        section_activity:Add(preformatter:GeneratePreformattedCode(
"var smallest;

findSmallest(34, 99);

function findSamllest(num1, num2){
    if(num1 < num2){
        smallest = num1;
    } else {
        smallest = num2;
    }
}
"))
        
        
        section_activity:AddParagraphBoldFront("Discuss: ", "My friend wants to use my <code>findSmallest()</code> function in her program. Is this function ready to be shared in a library?")
        section_activity:AddParagraph("<b>Click for animation</b>")
        section_activity:AddParagraphBoldFront("Say: ", "Watch out for global variables! If a function accesses or updates a variable elsewhere in your program, that function shouldn't be shared as is.")
        section_activity:AddParagraph("<b>Click for animation</b>")
        section_activity:AddParagraphBoldFront("Do This: ", "With a partner, rewrite the function so it could be shared in a library.")
        section_activity:AddParagraph("<b>Click for animation</b>")
        section_activity:AddParagraphBoldFront("Note: ", "The problem here, is that the function uses a global variable. Students should try to rewrite the function so only local variables and a return are used. The answer is shown later on in the slides.")

        section_activity:AddParagraphBoldFront("Slide: ", "Before adding a function to a library:")
        OrderedList slide7List
        slide7List:AddClassAttribute("list-decimal list-outside pl-8")
            slide7List:AddListItem("Check for any use of a global variable within the function. If there is, rework the function using local variables and a return.")
            slide7List:AddListItem("Check if another function is called in this function. If so, both functions should be included in the library.")
            slide7List:AddListItem("Write the documentation for the function.")
        section_activity:Add(slide7List)
        section_activity:AddParagraphBoldFront("Say: ", "These are the things you should consider before adding a function to a library")


        section_activity:AddParagraphBoldFront("Slide: ", "")
        section_activity:Add(preformatter:GeneratePreformattedCode(
"function findSamllest(num1, num2){
    if(num1 < num2){
        return num1;
    } else {
        return num2;
    }
}
"))

        section_activity:AddParagraphBoldFront("Say: ", "Here's the same function, now written to be shared in a library. How does it look compared to yours? It may look a little different - and that's ok, as long as the function works as expected. Now my function is almost ready to be shared in a library. With a partner, write the API for this function:")
        UnorderedList slide8List
        slide8List:AddClassAttribute("list-disc list-outside pl-8")
            slide8List:AddListItem("how the function works")
            slide8List:AddListItem("all the parameters, their data types, and a short description of each")
            slide8List:AddListItem("what (if anything) will be returned")
        section_activity:Add(slide8List)
        section_activity:AddParagraphBoldFront("Click for animation: ", "When the class is ready, click through to see a possible answer.")
        section_activity:AddParagraph("findSmallest: Given two numbers, finds the smallest")
        UnorderedList findSmallList
        findSmallList:AddClassAttribute("list-disc list-outside pl-8")
            findSmallList:AddListItem("num1 (number) - first number")
            findSmallList:AddListItem("num2 (number) - second number")
            findSmallList:AddListItem("return (number) - the smaller of the two numbers")
        section_activity:Add(findSmallList)

        section_activity:AddParagraphBoldFront("Slide: ", "CakeBaker")
        section_activity:AddParagraphBoldFront("Say: ", "A library needs a name. For our libraries in this class, we are going to follow the following rules:")
        UnorderedList namingRules
        namingRules:AddClassAttribute("list-disc list-outside pl-8")
            namingRules:AddListItem("No spaces")
            namingRules:AddListItem("Capitalize the first letter")
        section_activity:Add(namingRules)
        section_activity:AddParagraph("<b>Click for animation</b>")

        section_activity:AddParagraphBoldFront("Slide: ", "CakeBaker")
        section_activity:AddParagraphBoldFront("Say: ", "This library can now be shared with others. They can use the functions within their own programs as long as they follow the rules set forth in the documentation.")
        section_activity:AddParagraph("<b>Click for animation</b>")

        section_activity:AddParagraphBoldFront("Slide: ", "<code>Math.round(5, 10)</code>")
        section_activity:AddParagraphBoldFront("Say: ", "You've seen libraries in action before. The Math library is built into App Lab. Notice the name of the library first, then after a dot, the name of the function and finally the parameters. This is the same formatting you will use to call functions in libraries: Library name, followed by function name, and finally the parameter(s)")

        section_activity:AddParagraphBoldFront("Slide: ", "Calculator, DisplayLists, FilterDatabase")
        section_activity:AddParagraphBoldFront("Do This: ", "Brainstorm with a partner a few functions that might show up in the following libraries: Calculator, DisplayLists, FiterDatabase.")
        section_activity:AddParagraphBoldFront("Note: ", "Here are some ideas: ")
        UnorderedList finalNoteList
        finalNoteList:AddClassAttribute("list-disc list-outside pl-8")
            finalNoteList:AddListItem("<b>Calculator:</b> functions similar to what you would find in a common calculator")
            finalNoteList:AddListItem("<b>DisplayLists:</b> functions that help you display a list on a screen in different ways, such as one list item per line or divided with bullet points")
            finalNoteList:AddListItem("<b>FilterDatabase:</b> functions that allow you to filter a database for different things, like all the items that start with the letter "+dq+"a"+dq)
        section_activity:Add(finalNoteList)


         AddHeading(section_activity, "Remarks", 3)
        UnorderedList libraryRemark
        libraryRemark:AddClassAttribute("list-disc list-outside pl-8")
            libraryRemark:AddListItem("Let's take a look at how libraries work in Quorum.")
        section_activity:Add(libraryRemark)

        Paragraph libraryRef
        libraryRef:AddText("For more information on loading and interacting with libraries in Quorum you can use the ")
        Link link = libraryRef:AddLink("Use Statements tutorial", "/tutorials/language/usingLibraries.html")
        link:SetClassAttribute("underline text-quorum-blue-150")
        libraryRef:AddText(" to learn more about the use statement and interacting with the Quorum Standard Library. If you have been programming in Quorum you might have already seen these use statements. The standard library is essential in
                            getting apps to work so you have been using libraries this whole time and you might not have even known it!")
        section_activity:Add(libraryRef)
        section_activity:AddParagraph("As you will see in the Apps associated with this unit, in Quorum, when you want to make your own library the library functions will be placed in there own file within the project. Quorum also already has a large collection of functions and classes 
                                available to you and they are collectively known as the Quorum Standard Library. The standard library is included 
                                with Quorum Studio so those files won't be directly included in the project but they are available to you using a <code>use</code> statement. Here is an example of using the Math library from the standard library:")
        section_activity:Add(preformatter:GeneratePreformattedCode(
"use Libraries.Compute.Math
class Main
     action Main
          Math math
          output math:SquareRoot(6)
     end
end
"))
        section_activity:AddParagraph("From the code sample you can see that the Math library was made available to us by the line <code>use Libraries.Compute.Math</code>. To use the functions in the Math library you need a Math variable which is why
                            we have <code>Math math</code>. With the math variable you can now use it call the functions it has like the <code>SquareRoot</code> function.")
        Section section_wrap
        section_wrap:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_wrap)
        AddHeading(section_wrap, "Wrap Up (5 minutes)", 2)
        section_wrap:AddParagraphBoldFront("Journal: ","Have students add the following words to their journals: Library, API")

        UnorderedList wrapUpList
        wrapUpList:AddClassAttribute("list-disc list-outside pl-8")
        wrapUpList:AddListItem(AddItalicFront("Library: ", "a group of functions (procedures) that may be used in creating new programs"))
        wrapUpList:AddListItem(AddItalicFront("API: ", "Application Program Interface - specifications for how functions in a library behave and can be used"))
        section_wrap:Add(wrapUpList)

        AddHeading(section_wrap, "Remarks", 3)
        UnorderedList lastRemarks
        lastRemarks:AddClassAttribute("list-disc list-outside pl-8")
            lastRemarks:AddListItem("Great work today! Libraries are different than other programming concepts we've explored like variables and conditions. They offer a way to organize and share your code with others.")
        section_wrap:Add(lastRemarks)

               Section section_assessment
        section_assessment:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_assessment)
        AddHeading(section_assessment, "Assessment: Check for Understanding", 2)

            AddHeading(section_assessment, "For Students", 3)
        section_assessment:AddParagraph("Open a word doc or google doc and copy/paste the following question.")

        AddHeading(section_assessment, "Question", 3)
        section_assessment:AddParagraph("Evaluate if the following function is a good candidate to be placed in a library. Why or why not?")
        section_assessment:Add(preformatter:GeneratePreformattedCode(
"function updateScore(player, points) {
    if(player == "+dq+"player1"+dq+"){
        player1Points = player1Points + points;
    } else {
        player2Points = player2Points + points;
    }
}
"))


               Section section_standards
        section_standards:AddClassAttribute("flex flex-col gap-y-2")
        bodyDiv:Add(section_standards)
        AddHeading(section_standards, "Standards Alignment", 2)
        UnorderedList list
        list:AddClassAttribute("list-disc list-outside pl-8")
        AddListItemWithBoldAtFront(list, "CSTA K-12 Computer Science Standards (2017): ","2-AP-14, 3B-AP-16")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-3.D.1, AAP-3.D.2, AAP-3.D.3, AAP-3.D.4, AAP-3.D.5")
        section_standards:Add(list)


        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        onPageDiv:Add(CreateHeadingTableOfContents())
    end

    action GetMetaDescription returns text
        return "Develop a mental model for how libraries work."
    end

    action GetSummaryName returns text
        return "Code.Org Unit 7 Lesson 5: Libraries Explore"
    end

    action GetName returns text
        return "Code.Org Unit 7 Lesson 5"
    end

    action GetShortDescription returns text
        return "Learn about libraries"
    end

    action GetLocation returns text
        return "lessons/code/ParametersReturnLibraries/Lesson5.html"
    end

    action GetLinkName returns text
        return "Libraries Explore"
    end

    action GetSectionName returns text
        return "Parameters, Return, and Libraries"
    end   
end
