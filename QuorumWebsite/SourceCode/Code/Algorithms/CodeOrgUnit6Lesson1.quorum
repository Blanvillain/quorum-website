use Libraries.Web.Page.LineBreak
use Libraries.Web.Page.MetaData
use Libraries.Web.Page.Division
use Libraries.Web.Page.UnorderedList
use Libraries.Web.Page.Bold
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.ListItem
use Libraries.Web.Page.Paragraph
use Libraries.Web.Page.PreformattedText
use Libraries.Web.Page.Comment
use Libraries.Web.Page.Span
use Libraries.Web.Page.Italic
use Libraries.Web.Page.OrderedList
use Libraries.Web.Page.Header
use Libraries.Web.Page.MainContent
use Libraries.Web.Page.WebTable
use Libraries.Web.Page.TableCaption
use Libraries.Web.Page.TableRow
use Libraries.Web.Page.InlineFrame
use Libraries.Web.Page.BoxTip

class CodeOrgUnit6Lesson1 is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
   
    Preformatter preformatter //helper

    action Setup
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle("Unit 6 Lesson 1: Algorithms Solve Problems")
        AddDefaultHeaders()

        //Figure out getting main regions properly.
        MainContent mainRegion
        AdjustMain(mainRegion)

        //page header
        Header headDiv
        headDiv:SetClassAttribute("pageHeader outermostContainer")
        headDiv:AddHeading("Algorithms - Lesson 1: Algorithms Solve Problems", 1)
        Add(headDiv)

        Division bodyDiv
        bodyDiv:SetClassAttribute("bodyContainer")

        bodyDiv:AddHeading("Overview", 2)
        bodyDiv:AddParagraph("Students will complete two exploratory activities that introduce the concept of a problem and an algorithm. In the first students answer a series of questions about birthdates and names of their classmates. They then discuss the similarities and differences between the problems. In the second activity students are given six different algorithms and must analyze them to determine which they think are the same or different. At the end of the lesson they are introduced to the formal definitions of a problem and an algorithm.")
            
        bodyDiv:AddHeading("Goals", 2)
        bodyDiv:AddParagraph("Students will be able to:")
        UnorderedList goalList
        goalList:AddListItem("Explain the formal definitions of a problem, an algorithm, sequencing, selection, and iteration.")
        goalList:AddListItem("Explain that some problems may look different but be similar or look similar but be different.")
        goalList:AddListItem("Explain that some algorithms may look or operate differently but still solve the same problem.")
        bodyDiv:Add(goalList)

        bodyDiv:AddHeading("Purpose", 2)
        bodyDiv:AddParagraph("This lesson is an approachable and interactive introduction to the main concepts of this short unit. Students have been writing a lot of code, and now they are ready to think on a high level about the patterns that make two different problems, or two different algorithms, similar or different. This mindset will be important as they tackle the more challenging material later in the unit where students will learn to compare different algorithms that address the same problem.")


        bodyDiv:AddHeading("Getting Started (5 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Prompt:", " What makes two pieces of code " + dq + "the same" + dq + "? Could there ever be two pieces of code that you consider to be " + dq + "the same" + dq + " even if they aren't identical?")
        

        BoxTip startGoal
        startGoal:AddHeading("Discussion Goal", 3)
        startGoal:AddParagraph("This is an optional prompt. If you are able to move directly to the main activity you should do so. This prompt should get students thinking about the themes of the lesson. ")
        startGoal:AddParagraph("There are no " + dq + "wrong answers" + dq + " here though you should expect answers that focus on the fact that often there's lots of ways to write code that does the same thing.")
        bodyDiv:Add(startGoal)
        
        bodyDiv:AddParagraph("Have students think about their answers on their own, then share with a partner, and then finally discuss responses with the entire room.")

        bodyDiv:AddHeading("Activity (30 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList startRemarks
        startRemarks:AddListItem("Today we are going to kick off a short unit about how computer scientists think about problem solving. A really important skill will be recognizing patterns and similarities.")
        bodyDiv:Add(startRemarks)

        bodyDiv:AddParagraphBoldFront("Distribute:", " Ask students to take out their journals or give them some blank paper for working on the following problems")
        bodyDiv:AddParagraphBoldFront("Display:", " Show students the ten problems students will need to solve:")
        PreformattedText problems
        problems:AddText("<code>1. Find a person whose birthday is before yours
2. Find a person whose birthday is after yours
3. Find the person whose birthday is the closest before yours
4. Find the person whose birthday is the closest after yours
5. Find the person whose birthday is closest to yours
6. Find the person with an equal number of birthdays before and after theirs
7. Find the two people with the closest birthdays in the room
8. Find the shortest period of time in which three people have birthdays
9. Find the shortest period of time in which four people have birthdays
10. Find the longest period of time in which no one has a birthday</code>")
        bodyDiv:Add(problems)

        bodyDiv:AddParagraphBoldFront("Circulate:", " Ask students to review the problems for one minute, and then let them move around the room collecting information needed to solve the problems. This may take them several minutes.")
        bodyDiv:AddParagraphBoldFront("Prompt:", " Which problems did you need to do something similar in order to solve them?")
        bodyDiv:AddParagraphBoldFront("Discuss:", " Have students discuss the prompt with a neighbor before asking them to share with the room. Lead a discussion on their experiences.")

        BoxTip problemGoal
        problemGoal:AddHeading("Discussion Goal", 3)
        problemGoal:AddParagraph("This discussion should focus on what made the problems that students solved similar to one another. You likely will want to put the problems back on the screen to make it easier to talk through. Here are some connections you may pull out though there are more students may make.")
        UnorderedList problemList
        problemList:AddListItem("Problems 1 and 2 are very similar. As soon as you find one person who meets the criteria you know you're done.")
        problemList:AddListItem("Problem 3 and 4 are very similar but you need to talk to every other student to answer it. You only need to keep track of the closest birthday you've heard so far, however.")
        problemList:AddListItem("Problem 5 is easy to solve as soon as you've solved problems 3 and 4.")
        problemList:AddListItem("Problem 6 - 10 require you to have written down everyone's birthday, likely in order.")
        problemList:AddListItem("Problems 7 - 9 are the same problem but for different numbers of people. Whatever strategy you use for one of those would be helpful to solve the others")
        problemList:AddListItem("Problem 10 is a different version of problem 7 but instead of finding the smallest gap you're finding the largest.")
        problemGoal:Add(problemList)
        bodyDiv:Add(problemGoal)

        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList midRemarks
        midRemarks:AddListItem("The first thing that we need to think about as computer scientists is what is a " + dq + "problem" + dq + ". We just looked at 10 problems, but as we discussed, a lot of them are similar. If we solve one problem we may actually solve another, or at least have a good idea for how to start solving another. As computer scientists it's important to ask " + dq + "have I seen this problem before" + dq + " or " + dq + "how is this problem similar to others I've solved?" + dq)
        midRemarks:AddListItem("We just thought about whether problems are similar. Now we're going to look at whether we're actually solving the same problem.")
        bodyDiv:Add(midRemarks)

        bodyDiv:AddParagraphBoldFront("Prompt:", " Which of these algorithms are " + dq + "the same" + dq + " as one another?")

        bodyDiv:AddHeading("Algorithm 1", 4)
        PreformattedText algorithm1
        algorithm1:AddText("<code>MOVE_FORWARD()
TURN_RIGHT()
MOVE_FORWARD()
TURN_RIGHT()
MOVE_FORWARD()
TURN_RIGHT()
MOVE_FORWARD()
TURN_RIGHT()</code>")
        bodyDiv:Add(algorithm1)

        bodyDiv:AddHeading("Algorithm 2", 4)
        PreformattedText algorithm2
        algorithm2:AddText("<code>REPEAT 2 TIMES
{
    MOVE_FORWARD()
    MOVE_FORWARD()
    TURN_RIGHT()
    MOVE_FORWARD()
    TURN_RIGHT()
}</code>")
        bodyDiv:Add(algorithm2)

        bodyDiv:AddHeading("Algorithm 3", 4)
        PreformattedText algorithm3
        algorithm3:AddText("<code>moves <- [" + dq + "F" + dq + ", " + dq + "R" + dq + ", " + dq + "F" + dq + ", " + dq + "R" + dq + ", " + dq + "F" + dq + ", " + dq + "R" + dq + ", " + dq + "F" + dq + ", " + dq + "R" + dq + "]
FOR EACH move IN moves
{
    IF (move = " + dq + "F" + dq + ")
    {
        MOVE_FORWARD()
    }
    ELSE
    {
        TURN_RIGHT()
    }
}</code>")
        bodyDiv:Add(algorithm3)

        bodyDiv:AddHeading("Algorithm 4", 4)
        PreformattedText algorithm4
        algorithm4:AddText("<code>count <- 0
REPEAT WHILE count < 4
{
    MOVE_FORWARD()
    TURN_RIGHT()
    count <- count + 1
}</code>")
        bodyDiv:Add(algorithm4)

        bodyDiv:AddHeading("Algorithm 5", 4)
        PreformattedText algorithm5
        algorithm5:AddText("<code>REPEAT 2 TIMES
{
    REPEAT 2 TIMES
    {
        MOVE_FORWARD()
    }
    REPEAT 3 TIMES
    {
        TURN_LEFT()
    }
    MOVE_FORWARD()
    REPEAT 3 TIMES
    {
        TURN_LEFT()
    }
}</code>")
        bodyDiv:Add(algorithm5)

        bodyDiv:AddHeading("Algorithm 6", 4)
        PreformattedText algorithm6
        algorithm6:AddText("<code>count <- 0
REPEAT WHILE count < 2
{
    MOVE_FORWARD()
    MOVE_FORWARD()
    turnCount <- 0
    REPEAT WHILE turnCount < 3
    {
        TURN_LEFT()
        turnCount <- turnCount + 1
    }
    MOVE_FORWARD()
    TURN_RIGHT()
    count <- count + 1
}</code>")
        bodyDiv:Add(algorithm6)

        bodyDiv:AddParagraphBoldFront("Circulate:", " Ask students to review the algorithms with a partner and group them into categories. Move around the room making sure students are not getting stuck. If they finish early push them to see if they can think about the problem in a different way.")
        bodyDiv:AddParagraphBoldFront("Prompt:", " Discuss with another group. which of these algorithms are " + dq + "the same" + dq + " as one another?")
        bodyDiv:AddParagraphBoldFront("Discuss:", " Have students discuss the prompt with another before asking them to share with the room. Lead a discussion on their experiences using tips from the discussion goal below.")

        BoxTip discussGoal
        discussGoal:AddHeading("Discussion Goal", 3)
        discussGoal:AddParagraph("This discussion should focus on what made the algorithms the same. While they are designed to fall into two categories, ideally a number of points should come out of this discussion.")
        UnorderedList discussList
        discussList:AddListItem("Algorithms 1, 3, and 4 draw a square while 2, 5, and 6 draw a rectangle.")
        discussList:AddListItem("Some of these algorithms turn the robot right by turning left three times. It's debateable whether we can really call these algorithms " + dq + "the same" + dq)
        discussList:AddListItem("Some of these algorithms create lists or variables to store information. Depending on the context we may not be able to call these algorithms " + dq + "the same" + dq)
        discussGoal:Add(discussList)
        discussGoal:Add(break)
        bodyDiv:Add(discussGoal)

        bodyDiv:AddHeading("Wrap Up (10 mins)", 2)
        bodyDiv:AddParagraphBoldFront("Journal:", " Students add the following vocabulary words and definitions to their journals:")
        UnorderedList vocabulary
        vocabulary:AddListItem("Problem: a general description of a task that can (or cannot) be solved with an algorithm")
        vocabulary:AddListItem("Algorithm: a finite set of instructions that accomplish a task"
+ "<ul>"
    + "<li><i>Note:</i> There are usually many algorithms to solve the same problem, and many ways to write or express one algorithm including natural language, psuedocode, diagrams, and are implemented using programming code. All algorithms can be created by combining steps in three different ways: sequencing, selection, and iteration.</li>"
+"</ul>")
        vocabulary:AddListItem("Sequencing: Putting steps in an order")
        vocabulary:AddListItem("Selection: Deciding which steps to do next")
        vocabulary:AddListItem("Iteration: Doing some steps over and over")
        bodyDiv:Add(vocabulary)
        
        bodyDiv:AddParagraphBoldFront("Prompt:", " How did today's activities change the way you think about algorithms and problems?")
        bodyDiv:AddParagraphBoldFront("Discuss:", " Have students think about their answers on their own, then share with a partner, and then finally discuss responses with the entire room.")

        BoxTip closingGoal
        closingGoal:AddHeading("Discussion Goal", 3)
        closingGoal:AddParagraph("Use this discussion to reinforce vocabulary introduced in this lesson and check in on whether students have begun the transition towards thinking on a higher level about algorithms and problems. ")
        bodyDiv:Add(closingGoal)

        bodyDiv:AddParagraphBoldFront("Remarks", "")
        UnorderedList closingRemarks
        closingRemarks:AddListItem("Computer scientists don't just think about " + dq + "code" + dq + ", they think about problems and the algorithms that solve them. In this unit we're going to explore what makes two problems, or two algorithms, similar or different from one another, and the way computer scientists talk about them. Not only will you be a better programmer, but you'll get to work on some really interesting problems along the way.")
        bodyDiv:Add(closingRemarks)


        bodyDiv:AddHeading("Assessment: Check for Understanding", 2)
        bodyDiv:AddParagraphBoldFront("Question:", " In your own words explain the difference between a problem and an algorithm.")

        bodyDiv:AddHeading("Standards Alignment", 2)
        UnorderedList list
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.A.1, AAP-2.A.2, AAP-2.A.3, AAP-2.A.4")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.B.1")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.G.1")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.J.1")
        AddListItemWithBoldAtFront(list, "CSP2021: ","AAP-2.L.1, AAP-2.L.2, AAP-2.L.5")
        bodyDiv:Add(list)


        WriteNextTutorial(bodyDiv)
        Add(bodyDiv)
        PageFooter footer
        Add(footer)
    end

    action GetMetaDescription returns text
        return "Learn how algorithms are used to solve problems"
    end

    action GetSummaryName returns text
        return "Code.Org Unit 6 Lesson 1: Algorithms Solve Problems"
    end

    action GetName returns text
        return "Code.Org Unit 6 Lesson 1"
    end

    action GetShortDescription returns text
        return "Learn about algorithms"
    end

    action GetLocation returns text
        return "lessons/code/Algorithms/Lesson1.html"
    end

end
