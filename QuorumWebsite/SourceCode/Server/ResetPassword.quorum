
use Libraries.Network.NetworkExchange
use Libraries.Containers.HashTable
use Libraries.Containers.List
use Libraries.System.DateTime
use Libraries.Data.Database.Connection
use Libraries.Data.Database.Database
use Libraries.Containers.Array
use Libraries.Data.Database.QueryResult
use Libraries.Database.Server.ResponsePage
use Libraries.Database.Server.SharedConnection

class ResetPasswordResponsePage is ResponsePage


    action ResponseReceived(NetworkExchange exchange)
        text response = ""
        text dq = response:GetDoubleQuote()
        SharedConnection con
        HashTable<text,text> params = exchange:GetParameters()
        HashTable<text, List<text>> headers = exchange:GetHeaders()

        text pageKey = ""
        if params:HasKey("pagekey")
            pageKey = params:GetValue("pagekey")
        else
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        if pageKey = undefined or pageKey = ""
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        if not IsValidResetKey(pageKey)
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        ResetPasswordPage page
        page:SetPageKey(pageKey)
        page:Setup()

        response = page:Generate()
        exchange:SendResponseHeaders(200, response)
        exchange:SendResponse(response)

    end

    action IsValidResetKey(text key) returns boolean
        text dq = ""
        dq = dq:GetDoubleQuote()
        SharedConnection con
        Connection connect = con:GetConnection()
        Database db
        db:Connect(connect)

        Array<text> cols
        cols:Add("time")
        cols:Add("used")
        QueryResult result = db:Find(cols, "password_reset_keys", "reset_key = "+dq+key+dq)
        DateTime current
        repeat while result:HasNext()
            result:Next()
            // if not used and it hasn't been an hour then it's valid
            if result:GetText("used") = "0" and current:GetSecondDifference(result:GetDateTime("time")) <= 3600
                db:Close()
                return true
            end
        end
        // if no valid key was found in the db then it's a bad key
        db:Close()
        return false
    end

    action GetPath returns text
        return "/ResetPassword.quorum"
    end
end