package Libraries.Database.Server
use Libraries.Network.NetworkExchange
use Libraries.Containers.HashTable
use Libraries.Containers.List
use Libraries.System.DateTime
use Libraries.Data.Database.Connection
use Libraries.Data.Database.Database
use Libraries.Containers.Array
use Libraries.Data.Database.QueryResult
use Libraries.Data.Database.Update

class ConfirmResetPassword is ResponsePage


    action ResponseReceived(NetworkExchange exchange)
        text response = ""
        text dq = response:GetDoubleQuote()
        SharedConnection con
        HashTable<text,text> params = exchange:GetParameters()
        HashTable<text, List<text>> headers = exchange:GetHeaders()

        text pageKey = ""
        if params:HasKey("pagekey")
            pageKey = params:GetValue("pagekey")
        else
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        if pageKey = undefined or pageKey = ""
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        if not IsValidResetKey(pageKey)
            Failure(exchange, "Invalid page key - if you need to reset your password, use the 'forgot password' option in the login pane.")
            return now
        end

        text reset = params:GetValue("reset_password")
        text confirm = params:GetValue("confirm_reset_password")

        response = ChangeUserPassword(pageKey, reset, confirm)
        exchange:SendResponseHeaders(200, response)
        exchange:SendResponse(response)

    end

    action IsValidResetKey(text key) returns boolean
        text dq = ""
        dq = dq:GetDoubleQuote()
        SharedConnection con
        Connection connect = con:GetConnection()
        Database db
        db:Connect(connect)

        Array<text> cols
        cols:Add("time")
        cols:Add("used")
        QueryResult result = db:Find(cols, "password_reset_keys", "reset_key = "+dq+key+dq)
        DateTime current
        repeat while result:HasNext()
            result:Next()
            // if not used and it hasn't been an hour then it's valid
            if result:GetText("used") = "0" and current:GetSecondDifference(result:GetDateTime("time")) <= 3600
                db:Close()
                return true
            end
        end
        // if no valid key was found in the db then it's a bad key
        db:Close()
        return false
    end

    action ChangeUserPassword(text key, text password, text confirm) returns text
        if password:GetSize() < 9
            return "Passwords must be at least 9 characters long."
        end
        if password not= confirm
            return "The new password and confirm password fields must match."
        end
        check
            text dq = key:GetDoubleQuote()
            SharedConnection con
            Connection connect = con:GetConnection()
            Database db
            db:Connect(connect)
            QueryResult emailResult = db:Find("password_reset_keys", "reset_key = "+dq+key+dq)
            if not emailResult:HasNext()
                return "An error occurred. Your password could not be reset."
            end
            emailResult:Next()
            text email = emailResult:GetText("email")
            NetworkExchange exchange
            text hashedPassword = exchange:HashPassword(password)

            // invalidate the reset key
            Update keyUpdate
            keyUpdate:SetTable("password_reset_keys")
            keyUpdate:Add("used",1)
            keyUpdate:Filter("reset_key = "+dq+key+dq)
            db:Update(keyUpdate)

            // update the password
            Update passwordUpdate
            passwordUpdate:SetTable("users")
            passwordUpdate:Add("password",hashedPassword)
            passwordUpdate:Filter("email = "+dq+email+dq)
            db:Update(passwordUpdate)

            db:Close()
        detect e
            output e:GetStackTraceMessage()
            return "I could not connect to the server at quorumlanguage.com."
        end
        return "Password successfully reset. You may now close this page and log in to the website."
    end


    action GetPath returns text
        return "/ConfirmResetPassword.quorum"
    end
end