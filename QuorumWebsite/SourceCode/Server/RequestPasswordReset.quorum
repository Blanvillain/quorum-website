package Libraries.Database.Server
use Libraries.Network.NetworkExchange
use Libraries.Containers.HashTable
use Libraries.Containers.List
use Libraries.System.DateTime
use Libraries.Data.Database.Connection
use Libraries.Data.Database.Database
use Libraries.Containers.Array
use Libraries.Data.Database.QueryResult
use Libraries.Data.Database.Update
use Libraries.Data.Database.Insert
use Libraries.Containers.Iterator
use Libraries.Data.Database.Find
use Libraries.Network.NetworkRequest
use Libraries.Network.NetworkConnection
use Libraries.Network.NetworkRequestListener
use Libraries.Network.NetworkResponseEvent
use Libraries.System.Properties

class RequestPasswordReset is ResponsePage, NetworkRequestListener

    // THIS MUST BE CORRECT TO THE ENVIRONMENT
    text DOMAIN = "quorumlanguage.com"

    // used to send error if request to mailgun failed
    NetworkExchange mainExchange

    action ResponseReceived(NetworkExchange exchange)
        text response = ""
        text dq = response:GetDoubleQuote()
        SharedConnection con
        HashTable<text,text> params = exchange:GetParameters()
        HashTable<text, List<text>> headers = exchange:GetHeaders()

        DOMAIN = con:GetDomain()

        mainExchange = exchange

        text email = ""
        if params:HasKey("email")
            email = params:GetValue("email")
        else
            Failure(exchange, "Required fields are missing.")
            return now
        end

        text ipAddress = exchange:GetHost()

        Array<text> cols
        cols:Add("username")
        Connection connect = con:GetConnection()
        Database db
        db:Connect(connect)

        QueryResult userResult = db:Find(cols, "users", "email = "+dq+email+dq)

        if not userResult:HasNext()
            output "User from address "+ipAddress+" attempted to reset password for "+email+" but there was no registered account."
            response = "This email is not registered with a Quorum account. You may have made an account with a different email."
            + " If you don't have an account, you can create one from the login area."
            Failure(exchange, response)
            return now
        end
        userResult:Next()
        text username = userResult:GetText("username")
        text resetKey = GetResetKey()
        db:Close()
        if resetKey = "failure"
            output "User from address "+ipAddress+" failed to generate reset key for email "+email
            response = "An unexpected error occurred. Please try again."
            Failure(exchange, response)
            return now
        end

        text link = "https://quorumlanguage.com/ResetPassword.quorum?pagekey=" + resetKey

        check
            db:Connect(connect)

            Find addressFind
            addressFind:SetTable("password_reset_addresses")
            addressFind:AddColumn("last_time")
            addressFind:AddColumn("recent_tries")
            addressFind:Filter("address = "+dq+ipAddress+dq)

            QueryResult result = db:Find(addressFind)

            if not result:HasNext()
                integer tries = 1
                DateTime resetTime
                Insert addressInsert
                addressInsert:SetTable("password_reset_addresses")
                addressInsert:Add("address", ipAddress)
                addressInsert:Add("last_time", resetTime:GetTimestamp())
                addressInsert:Add("recent_tries", tries)
                db:Insert(addressInsert)
            else
                result:Next()
                DateTime resetTime
                DateTime lastTime = result:GetDateTime("last_time")
                integer tries = result:GetInteger("recent_tries")
                if resetTime:GetSecondDifference(lastTime) > 3600
                    tries = 0
                elseif tries >= 10
                    output "User from address " +ipAddress+ " exceeded reset tries while trying to reset " + email
                    Failure(exchange, "You can not request any more password resets at this time. Please try again later.")
                end

                tries = tries + 1

                Update addressUpdate
                addressUpdate:SetTable("password_reset_addresses")
                addressUpdate:Add("last_time", resetTime:GetTimestamp())
                addressUpdate:Add("recent_tries", tries)
                addressUpdate:Filter("address = "+dq+ipAddress+dq)
                db:Update(addressUpdate)

            end

            Insert keyInsert
            DateTime resetTime
            keyInsert:SetTable("password_reset_keys")
            keyInsert:Add("reset_key", resetKey)
            keyInsert:Add("email", email)
            keyInsert:Add("time", resetTime:GetTimestamp())
            keyInsert:Add("address", ipAddress)
            keyInsert:Add("used", 0)
            db:Insert(keyInsert)
            

            db:Close()
        detect e
            output e:GetStackTraceMessage()
            response = "I could not connect to the server at quorumlanguage.com."
            Failure(exchange, response)
            return now
        end


        text cr = link:GetCarriageReturn()
        text lf = link:GetLineFeed()
        text subject = "Quroum Password Reset Request"
        text message = "Hi " + username + ","+cr+lf+cr+lf
        message = message+ "A password reset was requested for your Quorum account. "+cr+lf
        message = message+ "You can use the following link to reset your password: "+cr+lf
        message = message+ link + " "+cr+lf
        message = message+ "This reset link is valid for 1 hour. If you need a new reset link, you may request one from the forgot password page."+cr+lf
        message = message+ "If you didn't make this request, then you can safely ignore this email. No action is required."+cr+lf+cr+lf
        message = message+ "Happy coding!"+cr+lf+cr+lf
        message = message+ "The Quorum Programming Language Team"

        boolean sent = SendEmail(email, subject, message)

        if not sent
            response = "We were unable to send a reset email at this time. Please try again later. "
            exchange:SendResponseHeaders(200, response)
            exchange:SendResponse(response)
            return now
        end

        // server response on success isn't sent from here
        // the response from mailgun has to come back first

    end

    action SendEmail(text email, text subject, text message) returns boolean
        NetworkExchange exchange
        NetworkRequest request
        request:SetRequestTypeToPost()
        Properties prop
        text mailgunEndpoint = prop:GetEnvironmentVariable("MAILGUN_API_ENDPOINT")
        request:SetWebAddress(mailgunEndpoint)

        text sender = "Quorum Website <noreply@"+DOMAIN+">"
        HashTable<text, text> data
        data:Add("from", sender)
        data:Add("to", email)
        data:Add("subject", subject)
        data:Add("text", message)
        request:AddHeader("Authorization", "Basic " + exchange:Base64EncodeValue("api:"+prop:GetEnvironmentVariable("MAILGUN_API_KEY") ))
        request:SetParameters(data)

        NetworkConnection http
        http:AddListener(me)

        check
            http:SendRequest(request)
        detect e
            return false
        end
        return true
    end

    action ResponseReceived(NetworkResponseEvent response)
        // if the code is not a 200 then the request failed
        if response:GetStatusCode() not= 200
            // log response if there was an error
            output response:GetResponseText()
            message = "We were unable to send a reset email at this time. Please try again later. "
            mainExchange:SendResponseHeaders(200, message)
            mainExchange:SendResponse(message)
            return now
        else
            text success = "An email has been sent to this address. Please check your email and follow the instructions to reset your account password."
            mainExchange:SendResponseHeaders(200, success)
            mainExchange:SendResponse(success)
        end
    end

    action GetResetKey returns text
        NetworkExchange exchange
        SharedConnection con
        integer iterations = 0
        integer rows = 1
        text result = ""
        text dq = result:GetDoubleQuote()
        DateTime currentTime

        Connection connect = con:GetConnection()
        Database db
        db:Connect(connect)
        // rows not= 0 means a good key hasn't been found
        // this action will only try 10 times to make a key
        repeat while rows not= 0 and iterations < 10
            result = exchange:GenerateResetKey()

            Find keyFind
            keyFind:SetTable("password_reset_keys")
            keyFind:AddColumn("time")
            keyFind:AddColumn("used")
            keyFind:Filter("reset_key = "+dq+result+dq)
            QueryResult keyResult = db:Find(keyFind)
            boolean break = false
            // there is no row until a row has been found 
            rows = 0
            iterations = iterations + 1
            repeat while keyResult:HasNext() or break
                keyResult:Next()
                // non zero row means key might be valid
                rows = rows + 1
                DateTime created = keyResult:GetDateTime("time")
                number diff = currentTime:GetSecondDifference(created)
                if keyResult:GetText("used") = "1" or diff > 3600 
                    // key was invalid
                    rows = rows - 1
                else
                    // found valid key
                    break = true
                end
            end
            
        end
        db:Close()
        // if rows is 0 then a good key was generated
        // non zero means a good key could not be generated in 10 attempts
        if rows not= 0
            result = "failure"
        end
        return result
    end

    action GetPath returns text
        return "/RequestPasswordReset.quorum"
    end
end