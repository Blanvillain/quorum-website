use Libraries.Web.Page.all
use Libraries.Containers.Array
use Libraries.System.File

class HourOfCode is Lesson
    text dq = ""
    dq = dq:GetDoubleQuote()
    text cr = ""
    cr = cr:GetCarriageReturn()
    Preformatter preformatter //helper

    text MEDIA_FOLDER = "media/hourofcode/"
    integer SELECTED = 1

    action Setup(text title, text header, text subHeader,text slidesHeader, text moveOnText, text youtubeAddress, integer selected, Array<Division> slides)
        LineBreak break //will be used multiple times
        
        //html header stuff
        SetWebPageTitle(title)
        AddDefaultHeaders()

        //page header
        Array<Division> divs = InitializeTutorialPage()
        Division leftDiv = divs:Get(0)
        Division bodyDiv = divs:Get(1)
        Division rightDiv = divs:Get(2)

        rightDiv:AddClassAttribute("hidden")

        Header headDiv
        headDiv:SetClassAttribute("flex flex-col gap-y-2")
        AddHeading(headDiv, "Hour of Code: Code with Mary", 1)
        bodyDiv:Add(headDiv)
            
        Image codeDotOrgTrackerImage
        codeDotOrgTrackerImage:SetAddress("http://code.org/api/hour/begin_quorum.png/")
        codeDotOrgTrackerImage:AddClassAttribute("hidden")
        bodyDiv:Add(codeDotOrgTrackerImage)

        Section section_video
        section_video:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_video, "Part " + selected + ": " + subHeader, 2)


        InlineFrame videoIFrame
        videoIFrame:SetIdentifier("youtubeiframe")
        videoIFrame:SetAddress(youtubeAddress)
        videoIFrame:AddAttribute("height", "500px")
        videoIFrame:AddClassAttribute("w-full")
        videoIFrame:AddAttribute("frameborder", "0")
        videoIFrame:AddAttribute("allowfullscreen", "")
        Script heightScript
        heightScript:SetCode("
        function setIframeHeight() {
            var iframe = document.getElementById('youtubeiframe');
            if (iframe) {
                var width = iframe.offsetWidth; // Get the current width of the iframe
                var height = (width / 16) * 9; // Calculate the height based on 16:9 aspect ratio
                iframe.style.height = height + 'px'; // Set the new height
                iframe.height = height + 'px';
            }
        }

        // Initial setup
        window.onload = setIframeHeight;
        window.onresize = setIframeHeight; // Adjust the height when the window is resized
        //run when the dom is loaded
        document.addEventListener('DOMContentLoaded', function() {
          setIframeHeight()
        });

        ")
        section_video:Add(heightScript)


        section_video:Add(videoIFrame)

        Section section_slides
        section_slides:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_slides, slidesHeader, 2)

        section_slides:Add(SlideContainer(slides))

        Section section_code
        section_code:AddClassAttribute("flex flex-col gap-y-2")

        AddHeading(section_code, "Try it Yourself", 2)
        
        AddHourOfCodeIDE(section_code, "hour-of-code-IDE", "Type your Code Here!")

        bodyDiv:Add(CompletedModal(selected, moveOnText))
        bodyDiv:Add(NoCodeModal())

        bodyDiv:Add(section_video)
        bodyDiv:Add(section_slides)
        bodyDiv:Add(section_code)

        Section nextSection
        WriteNextTutorial(nextSection)
        bodyDiv:Add(nextSection)
        rightDiv:Add(CreateHeadingTableOfContents())
    end


    action CompletedModal (integer nextPart, text moveOnText) returns Division
        Division modal
        modal:SetIdentifier("modal")
        modal:AddAttribute("aria-hidden", "true")
        modal:AddAttribute("aria-labelledby", "modalTitle")
        modal:AddAttribute("aria-describedby", "modalDescription")
        modal:AddAttribute("aria-live", "polite")
        modal:AddAttribute("role", "dialog")
        modal:AddClassAttribute("hidden")
        
        Division modalDescription
        modalDescription:SetIdentifier("modalDescription")
        modalDescription:AddClassAttribute("screenReaderContent")
        modalDescription:AddText("Beginning of dialog window. It congratulates you on completing this exercise. Escape will cancel an close the window.")
        
        modal:Add(modalDescription)
        
        Division overlayContent
        overlayContent:SetIdentifier("overlay-content")
        
        Heading congrats
        congrats:SetScale(3)
        congrats:AddText("Congratulations, you've completed this exercise!")
        congrats:SetIdentifier("modalTitle")
        congrats:AddClassAttribute("overlay-text")

        overlayContent:Add(congrats)
        
        Paragraph modaltext
        modaltext:AddClassAttribute("overlay-text")
        modaltext:AddText("Would you like to...")

        overlayContent:Add(modaltext)
        
        Button closeButton
        closeButton:SetIdentifier("modalCloseButton")
        closeButton:AddClassAttribute("modalCloseButton overlay-option")
        closeButton:SetOnClick("javascript:void(0)")
        closeButton:SetTitle("Close Dialog Window")
        closeButton:AddText("Stay on this page")
        
        overlayContent:Add(closeButton)
        
        Paragraph navigate
        navigate:AddClassAttribute("overlay-text")
        navigate:AddText("You can always navigate to any page at a later time.")
        
        overlayContent:Add(navigate)

        modal:Add(overlayContent)
        
        return modal
    end


    action NoCodeModal returns Division
        Division modal
        modal:SetIdentifier("noCodeModal")
        modal:AddAttribute("aria-hidden", "true")
        modal:AddAttribute("aria-labelledby", "noCodeModalTitle")
        modal:AddAttribute("aria-describedby", "noCodeModalDescription")
        modal:AddAttribute("aria-live", "assertive")
        modal:AddAttribute("role", "dialog")
        modal:AddClassAttribute("hidden")
        
        Division modalDescription
        modalDescription:SetIdentifier("noCodeModalDescription")
        modalDescription:AddClassAttribute("screenReaderContent")
        modalDescription:AddText("Beginning of dialog window. It asks that code be input before running.")
        
        modal:Add(modalDescription)
        
        Division overlayContent
        overlayContent:SetIdentifier("overlay-content")
        
        Heading noCode
        noCode:SetScale(3)
        noCode:AddText("There isn't any code")
        noCode:SetIdentifier("noCodeModalTitle")
        noCode:AddClassAttribute("overlay-text")

        overlayContent:Add(noCode)
        
        Paragraph modaltext
        modaltext:AddClassAttribute("overlay-text")
        modaltext:AddText("Type in some code and then press the run button to see what it does")

        overlayContent:Add(modaltext)
        
        Button closeButton
        closeButton:SetIdentifier("noCodeModalCloseButton")
        closeButton:AddClassAttribute("modalCloseButton overlay-option")
        closeButton:SetOnClick("javascript:void(0)")
        closeButton:SetTitle("Close Dialog Window")
        closeButton:AddText("Okay!")
        
        overlayContent:Add(closeButton)

        modal:Add(overlayContent)
        
        return modal
    end

    action SlideContainer(Array<Division> slides) returns Division
        Division slideContainer
        slideContainer:AddClassAttribute("w-full h-fit flex flex-col gap-y-4")


        Division slideNavigation
        slideNavigation:AddClassAttribute("flex flex-row gap-x-2 justify-between items-center font-bold")
        slideNavigation:AddAttribute("data-current-slide", "1")
        Button leftArrow
        leftArrow:SetIdentifier("leftSlideArrow")
        leftArrow:AddClassAttribute("flex flex-row gap-x-2 items-center disabled:opacity-50 disabled:cursor-not-allowed")

        Span leftChevronIcon
        HtmlFileLoader leftChevronIconFile
        File file
        file:SetPath("html/media/userInterface/SVG/chevron-left.svg")
        leftChevronIconFile:SetLoaded(file:Read())
        leftChevronIcon:AddText(leftChevronIconFile:ToText())

        leftArrow:AddText(leftChevronIcon:ToText())
        leftArrow:AddText("Previous Slide")
        leftArrow:AddAttribute("disabled", "true")

        leftArrow:SetOnClick("
          var slidesAmount = "+ slides:GetSize() +"
          var slideNav = document.querySelector('[data-current-slide]')
          var currentSlideNumber = slideNav.getAttribute('data-current-slide')
          var previousSlideNumber = parseInt(currentSlideNumber) - 1
          var currentSlide = document.querySelector('[data-slide=\'' + currentSlideNumber + '\']')
          var previousSlide = document.querySelector('[data-slide=\'' + previousSlideNumber + '\']')
          var currentSlideNav = document.querySelector('[data-slide-nav=\'' + currentSlideNumber + '\']')
          var previousSlideNav = document.querySelector('[data-slide-nav=\'' + previousSlideNumber + '\']')
          if (previousSlide) {
            slideNav.setAttribute('data-current-slide', previousSlideNumber)
            currentSlide.setAttribute('aria-selected', 'false')
            currentSlide.classList.add('hidden')
            previousSlide.setAttribute('aria-selected', 'true')
            previousSlide.classList.remove('hidden')
            currentSlideNav.setAttribute('aria-selected', 'false')
            previousSlideNav.setAttribute('aria-selected', 'true')

            let leftArrow = document.querySelector('#leftSlideArrow')
            let rightArrow = document.querySelector('#rightSlideArrow')
            if(previousSlideNumber <= 1) {
              leftArrow.setAttribute('disabled', 'true')
              rightArrow.removeAttribute('disabled')
            }else if(previousSlideNumber < slidesAmount) {
              rightArrow.removeAttribute('disabled')
            }

          }
        ")
        slideNavigation:Add(leftArrow)

        integer i = 0
        Division div_navigation_buttons
        div_navigation_buttons:AddClassAttribute("flex flex-row gap-x-6 justify-center items-center")
        repeat while i < slides:GetSize()
            Division slideContentContainer
            slideContentContainer:AddClassAttribute("flex flex-col min-h-[350px] rounded-b-lg bg-neutral-white")
            slideContentContainer:AddAttribute("data-slide", "" + (i + 1))
            Division slide = slides:Get(i)
            slideContentContainer:Add(AddSlideHeader(slide:GetAttributeValue("data-heading")))
            slideContentContainer:Add(slide)
            Button slideNavigationButton
            slideNavigationButton:AddClassAttribute("text-xl hover:text-quorum-blue-100 aria-selected:text-quorum-blue-100")
            slideNavigationButton:AddText("" + (i + 1))
            slideNavigationButton:AddAttribute("data-slide-nav", "" + (i + 1))
            slideNavigationButton:SetOnClick("
              var slidesAmount = "+ slides:GetSize() +"
              var slideNumber = this.getAttribute('data-slide-nav')
              var slideNav = document.querySelector('[data-current-slide]')
              var currentSlideNumber = slideNav.getAttribute('data-current-slide')
              var nextSlide = document.querySelector('[data-slide=\'' + slideNumber + '\']')
              var currentSlide = document.querySelector('[data-slide=\'' + currentSlideNumber + '\']')
              var currentSlideNav = document.querySelector('[data-slide-nav=\'' + currentSlideNumber + '\']')
              var nextSlideNav = document.querySelector('[data-slide-nav=\'' + slideNumber + '\']')
              //make sure that the slide number is not the same as the current slide number
              if (nextSlide && slideNumber != currentSlideNumber) {
                  slideNav.setAttribute('data-current-slide', slideNumber)
                  nextSlide.setAttribute('aria-selected', 'true')
                  nextSlide.classList.remove('hidden')
                  currentSlide.setAttribute('aria-selected', 'false')
                  currentSlide.classList.add('hidden')
                  currentSlideNav.setAttribute('aria-selected', 'false')
                  nextSlideNav.setAttribute('aria-selected', 'true')

                  let leftArrow = document.querySelector('#leftSlideArrow')
                  let rightArrow = document.querySelector('#rightSlideArrow')
                  if(slideNumber <= 1) {
                    leftArrow.setAttribute('disabled', 'true')
                    rightArrow.removeAttribute('disabled')
                  }else if(slideNumber >= slidesAmount) {
                    rightArrow.setAttribute('disabled', 'true')
                    leftArrow.removeAttribute('disabled')
                  }else {
                    leftArrow.removeAttribute('disabled')
                    rightArrow.removeAttribute('disabled')
                  }
              }
            ")

            slide:AddClassAttribute("flex flex-col gap-y-4 rounded-lg p-4")
            if i = 0
                slideNavigationButton:AddAttribute("aria-selected", "true")
                slideContentContainer:AddClassAttribute("flex")
            else
                slideNavigationButton:AddAttribute("aria-selected", "false")
                slideContentContainer:AddClassAttribute("flex hidden")
            end
            div_navigation_buttons:Add(slideNavigationButton)
            slideContainer:Add(slideContentContainer)
            i = i + 1
        end
        slideNavigation:Add(div_navigation_buttons)

        Button rightArrow
        rightArrow:SetIdentifier("rightSlideArrow")
        rightArrow:AddClassAttribute("flex flex-row gap-x-2 items-center disabled:opacity-50 disabled:cursor-not-allowed")

        Span rightChevronIcon
        HtmlFileLoader rightChevronIconFile
        File fileRight
        fileRight:SetPath("html/media/userInterface/SVG/chevron-right.svg")
        rightChevronIconFile:SetLoaded(fileRight:Read())
        rightChevronIcon:AddText(rightChevronIconFile:ToText())

        rightArrow:AddText("Next Slide")
        rightArrow:AddText(rightChevronIcon:ToText())

        rightArrow:SetOnClick("
          var slidesAmount = " + slides:GetSize() + "
          var slideNav = document.querySelector('[data-current-slide]')
          var currentSlideNumber = slideNav.getAttribute('data-current-slide')
          var nextSlideNumber = parseInt(currentSlideNumber) + 1
          var currentSlide = document.querySelector('[data-slide=\'' + currentSlideNumber + '\']')
          var nextSlide = document.querySelector('[data-slide=\'' + nextSlideNumber + '\']')
          var currentSlideNav = document.querySelector('[data-slide-nav=\'' + currentSlideNumber + '\']')
          var nextSlideNav = document.querySelector('[data-slide-nav=\'' + nextSlideNumber + '\']')
          if (nextSlide) {
            slideNav.setAttribute('data-current-slide', nextSlideNumber)
            currentSlide.setAttribute('aria-selected', 'false')
            currentSlide.classList.add('hidden')
            nextSlide.setAttribute('aria-selected', 'true')
            nextSlide.classList.remove('hidden')
            currentSlideNav.setAttribute('aria-selected', 'false')
            nextSlideNav.setAttribute('aria-selected', 'true')

            let rightArrow = document.querySelector('#rightSlideArrow')
            let leftArrow = document.querySelector('#leftSlideArrow')
            if(nextSlideNumber >= slidesAmount) {
              rightArrow.setAttribute('disabled', 'true')
              leftArrow.removeAttribute('disabled')
            }else if(nextSlideNumber > 1) {
              leftArrow.removeAttribute('disabled')
            }
          }
        ")


        slideNavigation:Add(rightArrow)

        slideContainer:Add(slideNavigation)

        return slideContainer
    end

    action AddHourOfCodeIDE(Section section, text id, text headerText)
        CodeForIDE code
        code:AddFileText("Main.quorum", " ")
        IDE ide = AddIDE()
        ide:SetLightTheme()
        ide:SetIdentifier(id)
        ide:SetCodeForIDE(code:GetJsonArray())
        ide:SetIdeTitle(headerText)
        section:Add(ide)
    end

    action AddSlideHeader(text headerText) returns Division
      Division headingDiv
      Heading h4
      h4:SetScale(4)
      h4:AddText(headerText)
      h4:AddClassAttribute("text-left py-2 px-6 w-full font-bold bg-[#0173A3] text-neutral-white rounded-t-lg")
      headingDiv:Add(h4)
      return headingDiv
    end

    action GetMetaDescription returns text
        return "Join Mary in her adventure learning the Quorum programming language."
    end
end
