use Libraries.Web.Page.all
use Libraries.Containers.Array

class HoCPart2 is HourOfCode
    text dq = ""
    dq = dq:GetDoubleQuote()

    text MEDIA_FOLDER = "/media/hourofcode/"
    text TITLE = "Hour of Code: Part 2 | Quorum Programming Language"
    text HEADER = "Hour of Code: Part 2"
    text SUBTITLE = "Sayin' Stuff"
    text MOVE_ON_TEXT = "Move on to Part 3"
    text YOUTUBE_ADDRESS = "//www.youtube.com/embed/jiBoy-YndQw?rel=0"
    text SLIDES_HEADER = "Number Varibles"
    integer ACTIVITY = 2

    action Setup()
        Array<Division> slides
        slides:Add(Slide1())
        slides:Add(Slide2())
        slides:Add(Slide3())
        slides:Add(Slide4())
        Setup(TITLE, HEADER, SUBTITLE, SLIDES_HEADER, MOVE_ON_TEXT, YOUTUBE_ADDRESS, ACTIVITY, slides)
    end

    action Slide1 returns Division
      Division div
        div:AddAttribute("data-heading", "Number Variables")

        div:AddParagraph("Another type of variable often used in programming is a real (or decimal) number. In Quorum to create this type of variable we use the keyword <code>number</code>.")
        div:AddParagraph("A <code>number</code> variable holds numeric values that can include decimal places such as 8.3439 or 42.0 or even 19.")
        div:AddParagraph("Unlike text variables, we never use double quotes when storing a number, we just type it.")
        div:AddAttribute("class", "task")
        div:AddParagraph("Create a number variable with the following code: <code>number pi = 3.14159</code> then move to the next slide.")
      return div
    end

    action Slide2 returns Division
      Division div
        div:AddAttribute("data-heading", "Arithmetic with Number Variables")

        div:AddParagraph("We can do arithmetic calculations with <code>number</code> variables, just like we would on the numbers themselves.")
        div:AddParagraph("The computer substitutes the actual number in the variable into the formula and performs the calculation.")
        div:AddParagraph("For example, if we make a new variable that holds the radius of a circle, then we can calculate its area using the formula area = pi X radius X radius.  On a computer, the multiplication operator is the <code>*</code>.")
        div:AddAttribute("class", "task")
        div:AddParagraph("Create a variable to hold your circle's radius: <code>number radius = 3</code> and then calculate the area: <code>number area = pi * radius * radius</code>")
      return div
    end

    action Slide3 returns Division
      Division div
        div:AddAttribute("data-heading", "Make the Computer Talk with: Say")

        div:AddParagraph("Quorum has a built in feature to instruct the computer to say things out loud.  This is done by using the keyword <code>say</code> followed by whatever we want it to say.")
        div:AddParagraph("Just like with output statements, the computer can say the contents of a variable or a string that we type in.")
        div:AddParagraph("<span class = "+dq+"bold"+dq+">Note:</span> Say statements may not work with all web browsers.")
        div:AddAttribute("class", "task")
        div:AddParagraph("Tell the computer to say the result of the area calculation you just completed by typing a new line: <code>say "+dq+"The area is "+dq+" + area</code> followed by <code>output "+dq+"The area is "+dq+" + area</code> and then Run your code.")
      return div
    end

    action Slide4 returns Division
      Division div
        div:AddAttribute("data-heading", "Additional Information")

        div:AddParagraph("There are 5 main operators when using numbers: <code>+</code> (addition), <code>-</code> (subtraction), <code>*</code> (multiplication), <code>/</code> division and <code>mod</code> (modulus).")
        div:AddParagraph("The modulus operator is used for finding the remainder of a division operation, for example: <code>15 mod 10</code> will give us a result of 5.")
        div:AddParagraph("One example of how to use the modulus operator is to deterimine if a number is even or odd: <code>evenNum mod 2</code>  equals 0 and <code>oddNum mod 2</code> equals 1.")
        div:AddParagraph("When using <code>say</code> or <code>output</code> statements, you can concatenate (add) things to be output one after another using the <code>+</code> operator, just like in the previous slide.")
      return div
    end

    action GetSummaryName returns text
        return "Hour of Code Part 2"
    end

    action GetImageLocation returns text
        return ""
    end

    action GetName returns text
        return "Hour of Code Part 2"
    end

    action GetShortDescription returns text
        return "first steps in Quorum"
    end

    action GetLocation returns text
        return "hourofcode/part2.html"
    end

    action GetLinkName returns text
        return "Part " + ACTIVITY + ": " + SUBTITLE
    end

    action GetSectionName returns text
        return "Code With Mary"
    end
end

