use Libraries.Web.Page.all
use Libraries.Containers.Array

class HoCPart1 is HourOfCode
    text dq = ""
    dq = dq:GetDoubleQuote()

    text MEDIA_FOLDER = "media/hourofcode/"
    text MOVE_ON_TEXT = "Move on to Part 2"
    text TITLE = "Hour of Code: Part 1 | Quorum Programming Language"
    text HEADER = "Hour of Code: Part 1"
    text SUBTITLE = "Got a New Gig"
    text YOUTUBE_ADDRESS = "//www.youtube.com/embed/pwRc8bjoACw?rel=0"
    text SLIDES_HEADER = "Learn About Variables"
    integer ACTIVITY = 1

    action Setup()
        Array<Division> slides
        slides:Add(Slide1())
        slides:Add(Slide2())
        slides:Add(Slide3())
        slides:Add(Slide4())
        slides:Add(Slide5())
        slides:Add(Slide6())
        Setup(TITLE, HEADER, SUBTITLE, SLIDES_HEADER, MOVE_ON_TEXT, YOUTUBE_ADDRESS, ACTIVITY, slides)
    end

    action Slide1 returns Division
      Division div
        div:AddAttribute("data-heading", "Variables")

        div:AddParagraph("In programming, a variable is a container to store information that can be used at a later time.")
        div:AddParagraph("In Quorum, there are four types of basic variables: text, number, integer and boolean. Each type of variable holds a different kind of information.")
        div:AddParagraph("In this first example, we will create a text variable, which holds a text string of anything you want to type in. We'll explain the other types in the next sections.")
        div:AddParagraph("Notice that a text string is enclosed in two double quotation marks.")

      return div
    end

    action Slide2 returns Division
      Division div
        div:AddAttribute("data-heading", "Creating Variables")

        div:AddParagraph("To create a variable in Quorum, we start by telling the computer what type of variable we want to make, in this case it's a <code>text</code> variable, followed by a space and a name for the variable.")
        div:AddParagraph("The important thing to remember about naming a variable is that a variable needs to start with a letter.  After that, you can have numbers or more letters in the name.")

      return div
    end

    action Slide3 returns Division
      Division div
      div:AddAttribute("data-heading", "Storing Text in Variables: Literals")

      div:AddParagraph("Now we have made a variable named <code>dna</code>, but we haven't stored any information in it yet, so it's empty.")
      div:AddParagraph("To store a value into a variable we use the <code>=</code> operator, followed by the information we want stored.")
      div:AddParagraph("For this example, let's store the text string "+dq+"GATTACA"+dq+" in our <code>dna</code> variable.")
      div:AddParagraph("Remember to put double quotes around the string we're storing in a text variable to tell the computer we want to store exactly what we typed.")
      div:AddParagraph("Try it!")
      div:AddParagraph("Store the text "+dq+"GATTACA"+dq+" to the <code>dna</code> variable: <code>text dna = "+dq+"GATTACA"+dq+"</code> then go to the next slide.")
      return div
    end

    action Slide4 returns Division
      Division div
      div:AddAttribute("data-heading", "Using Variables for Output")

      div:AddParagraph("Now that we've stored something in our variable, we can refer to its contents whenever we need to by using the variable name.")
      div:AddParagraph("To demonstrate this, let's take what we have stored in our variable and display it to the screen.")
      div:AddParagraph("In Quorum, to output information to the screen we type the word <code>output</code> followed by a space and then whatever we want to show up on screen.")
      div:AddParagraph("Try it!")
      div:AddParagraph("Output the contents of the dna variable by typing <code>output dna</code> on a new second line and hit the green Run button to see the output.")
      return div
    end

    action Slide5 returns Division
      Division div
      div:AddAttribute("data-heading", "Storing Text in Variables: From Variables")

      div:AddParagraph("If we want to assign the value of one variable to another variable, we can use the <code>=</code> operator to copy the contents.")
      div:AddParagraph("We can also use the <code>+</code> operator to put more than one thing into a variable.")
      div:AddParagraph("For <code>text</code> variables putting two strings into the same variable puts them one after the other.")
      div:AddParagraph("Try it!")
      div:AddParagraph("Create a new variable called <code>text msg</code> and then use the <code>=</code> operator to put the string and variable <code>"+dq+"Welcome to "+dq+" + dna</code> into it.  On the next line, output the msg variable: <code>output msg</code>.")
      return div
    end

    action Slide6 returns Division
      Division div
      div:AddAttribute("data-heading", "Additional Information Regarding Variables")

      div:AddParagraph("Names are case sensitive: dna is not the same as DNA.")
      div:AddParagraph("When storing a string into a text variable, be sure to use double quotes.")
      div:AddParagraph("Because variables are just containers, if we change what is stored inside of it we can still use the same output statement and get a different result on screen.")
      div:AddParagraph("If you've been following along, you can test this by changing what is initally stored in the <code>dna</code> variable.")
      return div
    end

    action GetSummaryName returns text
        return "Hour of Code Part 1"
    end

    action GetImageLocation returns text
        return ""
    end

    action GetName returns text
        return "Hour of Code Part 1"
    end

    action GetShortDescription returns text
        return "first steps in Quorum"
    end

    action GetLocation returns text
        return "hourofcode/part1.html"
    end

    action GetLinkName returns text
        return "Part " + ACTIVITY + ": " + SUBTITLE
    end

    action GetSectionName returns text
        return "Code With Mary"
    end
end
