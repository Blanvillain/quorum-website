use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph

class HoCAstro12 is HourOfCodeAstro
    integer ACTIVITY = 12
    text SUBTITLE = "Astronomy - Learn About Right Ascension"

    action Setup()
        Setup(ACTIVITY, SUBTITLE, GetInstructions(), GetChallenge())
    end

    action GetInstructions() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        Division instructions
        Preformatter pre
        
        instructions:AddParagraph("Now it is time to take our computer knowledge to learn about Right Ascension, which is a set of numbers that tells a telescope how much to rotate when you are telling it where to point. In this activity, we will collect these numbers and <b>output</b> the values to start. Right Ascension is a measure of rotation, like longitude, and it is measured in hours, minutes and seconds from a fixed zero point on the celestial equator where the Sun crosses the celestial equator at the March equinox.")

        instructions:AddParagraph("A full rotation is equivalent to one rotation of the earth in a 24 hour period, so a Right Ascension of 24h 0m 0s is one full circle. The variables " + dq + "hours" + dq + " and " + dq + "minutes" + dq + " are always whole numbers, so they are of type <b>integer</b> but " + dq + "seconds" + dq + " can have a decimal place so it is of type <b>number</b>. Ask the user for values for variables named <b>hours</b>, <b>minutes</b> and <b>seconds</b> and then <b>output</b> the answers each on separate lines with 3 <b>output</b> statements. Your solution should have 6 lines of code. To get you started, here is the first line:")

        CodeBlock cb1
        cb1:AddText("integer hours = cast(integer, input(" + dq + "Enter hours: " + dq + "))")
        instructions:Add(pre:GeneratePreformattedCode(cb1))

        instructions:AddParagraph("On the next line, use the <b>output</b> command to display the variable's value. We can combine a text string with a variable name using the <b>+</b> operator to output a nicely formatted answer, like this:")

        CodeBlock cb2
        cb2:AddText("output " + dq + "Hours: " + dq + " + hours")
        instructions:Add(pre:GeneratePreformattedCode(cb2))

        instructions:AddParagraph("Remember that in astronomy calculation <b>minutes</b> has to be an <b>integer</b> and <b>seconds</b> has to be a <b>number</b>.")

        return instructions
    end

    action GetChallenge() returns Division
        text dq = ""
        dq:GetDoubleQuote()
        Division challenge
        challenge:AddHeading("Exploration Challenge (Optional):", 2)
        Paragraph challengeText       
        challengeText:SetIdentifier("astro-challenge")
        challengeText:AddText("When you write a computer program for other people to use, you will often want to check the user's input to make sure it makes sense for your computer program. In this case, if a user enters a number over 24  or less than 0 when your program asks for hours, it does not make sense for our calculation. If you want to be sure that the user's input is correct you can use an <a href=https://quorumlanguage.com/tutorials/language/if.html target="+dq+"_blank"+dq+">if / else</a> statement to decide if you should output an answer or give an error message. For this Exploration Challenge, create a conditional statement in your code that either outputs the hours or an error message. If you want to go further, put the error checking code in a <a href=https://quorumlanguage.com/tutorials/language/repeat.html target="+dq+"_blank"+dq+">repeat</a> loop so that the program keeps asking the user for input until the input is valid.")
        challenge:Add(challengeText)
        return challenge
    end
end
