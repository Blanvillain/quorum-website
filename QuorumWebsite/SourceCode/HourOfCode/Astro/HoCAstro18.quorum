use Libraries.Web.Page.Division
use Libraries.Web.Page.CodeBlock
use Libraries.Web.Page.Paragraph

class HoCAstro18 is HourOfCodeAstro
    integer ACTIVITY = 18
    text SUBTITLE = "Adding Keyboard Controls: Where am I?"

    action Setup()
        Setup(ACTIVITY, SUBTITLE, GetInstructions(), GetChallenge())
    end

    action GetInstructions() returns Division
        text dq = ""
        dq = dq:GetDoubleQuote()
        text cr = ""
        cr = cr:GetCarriageReturn()        Division instructions
        Preformatter pre
        
        instructions:AddParagraph("One of the common accessibility issues that blind computer users have is called the " + dq + "Where am I?" + dq + " problem. This is a problem where the state of the program changes and the user may no longer know where she is. In the next lesson, we are going to learn how to change where our telescope is pointing so before we implement that feature, let's give the user a way to find out what coordinates it is pointed at.")
        
        instructions:AddParagraph("The first thing you need to notice about the starting code is the addition of two new Libraries for an InputMonitor and KeyboardEvent. We also create objects called monitor and keys for these classes. Notice also that we included another action from the Game class called Update.  The Update action gives us a variable called seconds which represents the fraction of a second since the last Update action was called by the engine. We can use this variable in formulas to calculate movement. We will learn more about that in the next lesson.")
        
        instructions:AddParagraph("For this lesson, we are going to add a call to monitor to see if the space key is pressed on the keyboard. We do this with the following line of code:")

        CodeBlock cb1
        cb1:AddText("if monitor:IsKeyPressed(keys:SPACE)")
        instructions:Add(pre:GeneratePreformattedCode(cb1))

        instructions:AddParagraph("Inside this conditional block, we are going to put another conditional block  (this is called nesting). The purpose of the second conditional is to make sure that we only act on this key press one time.  The condition we will check in this block is whether the pressed variable is false (indicating this is the first time this event has been called since the key was depressed. Inside the block we will output the value of the yaw variable (which is angle of rotation in degrees) and then set pressed to true.  The block looks like this:")

        CodeBlock cb2
        cb2:AddText("    if pressed = false" + cr)
        cb2:AddText("        output yaw" + cr)
        cb2:AddText("        pressed = true" + cr)
        cb2:AddText("    end")
        instructions:Add(pre:GeneratePreformattedCode(cb2))

        instructions:AddParagraph("We also need a few additional lines of code to close the first conditional statement to be sure the pressed variable is set to false if the monitor does not detect a press of the SPACE key.")

        CodeBlock cb3
        cb3:AddText("else" + cr)
        cb3:AddText("    pressed = false" + cr)
        cb3:AddText("end" + cr)
        instructions:Add(pre:GeneratePreformattedCode(cb3))

        instructions:AddParagraph("When you are done, click the green Run Program button to start the game engine. When you click the space key, the current angle of rotation will display in the console window. Since we haven't added any controls yet to move the camera this will always display 0 degrees. In order to have the game engine respond to your keyboard input you need to make sure that the visual output window has focus by either clicking on it or tabbing in to it.")

        return instructions
    end

    action GetChallenge() returns Division
        text dq = ""
        dq:GetDoubleQuote()
        Division challenge
        challenge:AddHeading("Exploration Challenge (Optional):", 2)
        Paragraph challengeText       
        challengeText:SetIdentifier("astro-challenge")
        challengeText:AddText("Use your imagination to add other keyboard controls to your program. The <a href=https://quorumlanguage.com/tutorials/language/events.html target="+dq+"_blank"+dq+">Input and Events Tutorial</a> is a good place to look for some more ideas and examples. Some things you might want to try are: i) add the correct click sound to play when the user presses either the 1 or 2 key, ii) ask the user for input to set the rotation or iii) add a method to run when the user clicks the right mouse button.")
        challenge:Add(challengeText)
        return challenge
    end
end